{
    "handler": [
        "pickle._load",
        "gzip.open"
    ],
    "os": [
        "<builtin>.globals",
        "os._Environ.__init__",
        "os._exists",
        "<builtin>.type",
        "<builtin>.ImportError",
        "os._createenviron",
        "os._fscodec",
        "<builtin>.set",
        "os._add",
        "extend",
        "append"
    ],
    "abc": [],
    "_py_abc": [],
    "_weakrefset": [],
    "types": [
        "<builtin>.globals",
        "<builtin>.object",
        "types._g",
        "types._ag",
        "<builtin>.type",
        "types._c",
        "types._cell_factory"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "<builtin>.object": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.property": [],
    "<builtin>.globals": [],
    "_weakrefset.WeakSet": [
        "<builtin>.classmethod"
    ],
    "<builtin>.classmethod": [],
    "stat": [],
    "<builtin>.ImportError": [],
    "append": [],
    "ntpath": [
        "<builtin>.hasattr"
    ],
    "genericpath": [],
    "<builtin>.hasattr": [],
    "extend": [],
    "posixpath": [],
    "os._exists": [
        "<builtin>.globals"
    ],
    "<builtin>.set": [],
    "os._add": [],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.encodekey"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.TypeError": [],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "pickle": [
        "extend",
        "append"
    ],
    "copyreg": [
        "<builtin>.type",
        "copyreg.pickle"
    ],
    "copyreg.pickle": [
        "<builtin>.TypeError",
        "copyreg.constructor",
        "<builtin>.callable"
    ],
    "<builtin>.callable": [],
    "copyreg.constructor": [
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "functools": [
        "<builtin>.object",
        "collections.namedtuple"
    ],
    "collections": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "<builtin>.frozenset": [],
    "operator": [],
    "reprlib": [
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr.__init__": [],
    "collections.OrderedDict": [
        "<builtin>.object",
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "<builtin>.getattr": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "reprlib.recursive_repr",
        "<builtin>.property",
        "reprlib.recursive_repr.decorating_function",
        "<builtin>.classmethod"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "collections.namedtuple": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.str",
        "<builtin>.enumerate",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.classmethod",
        "collections.<lambda1>",
        "<builtin>.dict",
        "<builtin>.eval",
        "<str>.join",
        "<builtin>.zip",
        "<builtin>.map",
        "<builtin>.isinstance"
    ],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.enumerate": [],
    "<builtin>.ValueError": [],
    "<builtin>.tuple": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<str>.join": [],
    "<builtin>.eval": [],
    "collections.<lambda1>": [
        "<builtin>.property",
        "operator.itemgetter.__init__"
    ],
    "operator.itemgetter.__init__": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [
        "<builtin>.classmethod"
    ],
    "struct": [],
    "re": [
        "<builtin>.globals",
        "sre_compile.compile",
        "<builtin>.type",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "copyreg.pickle",
        "<builtin>.chr"
    ],
    "enum": [
        "<builtin>.object"
    ],
    "enum.EnumMeta": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "types.DynamicClassAttribute.__init__",
        "<builtin>.classmethod"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "<builtin>.bool": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "<builtin>.tuple"
    ],
    "sre_parse": [
        "<builtin>.frozenset"
    ],
    "sre_constants": [
        "sre_constants._makecodes"
    ],
    "sre_constants._makecodes": [
        "<str>.split",
        "<builtin>.globals",
        "<str>.strip",
        "<builtin>.enumerate"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "<builtin>.tuple",
        "sre_parse.parse",
        "<builtin>.print",
        "sre_compile.isstring",
        "<map>.items",
        "sre_compile.dis",
        "sre_compile._code"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.seek",
        "sre_parse.State.__init__",
        "sre_parse.fix_flags",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.SubPattern.dump",
        "sre_constants.error.__init__",
        "sre_parse._parse_sub"
    ],
    "sre_parse.Tokenizer.__init__": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "",
        "<builtin>.len",
        "sre_parse.Tokenizer.match",
        "sre_parse.Tokenizer.tell",
        "append",
        "sre_parse.SubPattern.append",
        "extend",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.SubPattern.append": [
        "append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance",
        "<str>.count",
        "<str>.rfind"
    ],
    "<str>.count": [],
    "<str>.rfind": [],
    "<builtin>.super": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.print",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.enumerate"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "sre_compile._compile",
        "sre_compile._compile_info",
        "append"
    ],
    "sre_compile._compile_info": [
        "",
        "sre_compile._compile_charset",
        "<builtin>.len",
        "sre_compile._get_charset_prefix",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._get_literal_prefix",
        "sre_compile._optimize_charset",
        "extend"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "",
        "<builtin>.len",
        "sre_compile._get_literal_prefix",
        "sre_compile._combine_flags",
        "sre_compile._get_iscased",
        "extend"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "",
        "<builtin>.any",
        "<builtin>.range",
        "sre_compile._combine_flags",
        "sre_compile._get_iscased",
        "<builtin>.map"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "<builtin>.bytearray",
        "<builtin>.len",
        "<builtin>.bytes",
        "sre_compile._bytes_to_codes",
        "<builtin>.any",
        "<builtin>.range",
        "<builtin>.map",
        "append",
        "sre_compile._mk_bitmap"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.len",
        "<builtin>.memoryview"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "",
        "sre_constants.error.__init__",
        "extend"
    ],
    "sre_compile._compile": [
        "",
        "sre_compile._compile_charset",
        "sre_compile._compile",
        "sre_compile._combine_flags",
        "sre_compile._optimize_charset",
        "sre_constants.error.__init__",
        "sre_compile._simple"
    ],
    "sre_compile._simple": [
        "<builtin>.len",
        "sre_compile._simple"
    ],
    "sre_compile.dis": [
        "sre_compile.dis.dis_",
        "<builtin>.len",
        "<builtin>.str",
        "<builtin>.set"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.bin",
        "<builtin>.ValueError",
        "sre_compile.dis.dis_",
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.str",
        "sre_compile._hex_code",
        "<builtin>.map",
        "sre_compile.dis.dis_.print_",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.chr"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.callable"
    ],
    "functools._lru_cache_wrapper": [
        "<builtin>.object"
    ],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools._lru_cache_wrapper",
        "functools.update_wrapper"
    ],
    "io": [],
    "codecs": [
        "<builtin>.SystemError"
    ],
    "<builtin>.SystemError": [],
    "encodings": [],
    "_compat_pickle": [
        "<builtin>.len",
        "<builtin>.dict",
        "<map>.update",
        "<map>.items"
    ],
    "<map>.update": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "gzip": [],
    "_compression": [],
    "gzip.GzipFile": [
        "<builtin>.property"
    ],
    "pandas": [
        "<builtin>.__import__",
        "<builtin>.ImportError",
        "pandas._version.get_versions",
        "warnings.warn",
        "<map>.get",
        "append"
    ],
    "__future__": [
        "__future__._Feature.__init__"
    ],
    "__future__._Feature.__init__": [],
    "warnings": [
        "warnings.filterwarnings",
        "warnings._processoptions",
        "<builtin>.hasattr",
        "warnings.simplefilter"
    ],
    "warnings._processoptions": [
        "warnings._setoption",
        "<builtin>.print"
    ],
    "warnings._setoption": [
        "warnings._getaction",
        "<builtin>.len",
        "re.escape",
        "warnings.filterwarnings",
        "<builtin>.int",
        "warnings._getcategory"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.issubclass",
        "<builtin>.__import__",
        "<builtin>.getattr"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<str>.translate",
        "<str>.encode",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "<builtin>.issubclass",
        "re.compile",
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "sre_compile.compile",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.next",
        "<builtin>.iter",
        "<builtin>.isinstance",
        "sre_compile.isstring"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "warnings._add_filter": [
        "warnings._filters_mutated",
        "remove",
        "insert",
        "append"
    ],
    "remove": [],
    "insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "pandas.compat": [],
    "platform": [
        "re.compile",
        "collections.namedtuple"
    ],
    "subprocess": [
        "subprocess._use_posix_spawn",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "signal": [
        "<builtin>.globals",
        "signal._wraps.decorator",
        "signal._wraps"
    ],
    "signal._wraps": [],
    "signal._wraps.decorator": [],
    "threading": [
        "_weakrefset.WeakSet.__init__",
        "threading._MainThread.__init__",
        "<builtin>.set",
        "append",
        "<builtin>.hasattr",
        "threading.RLock",
        "collections.namedtuple"
    ],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.RLock": [
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [],
    "linecache": [],
    "tokenize": [
        "<builtin>.any",
        "tokenize.group",
        "tokenize.maybe",
        "functools.lru_cache",
        "<builtin>.set",
        "re.compile",
        "<builtin>.map",
        "tokenize._all_string_prefixes",
        "collections.namedtuple",
        "<builtin>.sorted"
    ],
    "token": [
        "<builtin>.globals",
        "extend",
        "<builtin>.isinstance"
    ],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading._MainThread.__init__": [
        "threading.Thread._set_ident",
        "threading.Thread._set_tstate_lock",
        "threading.Event.set",
        "threading.Thread._set_native_id",
        "threading.Thread.__init__"
    ],
    "threading.Thread.__init__": [
        "threading._make_invoke_excepthook",
        "threading.Event.__init__",
        "<builtin>.str",
        "threading._newname",
        "threading.current_thread",
        "_weakrefset.WeakSet.add"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread.__init__",
        "threading._newname",
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident"
    ],
    "threading.Thread._set_ident": [],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "contextlib.contextmanager"
    ],
    "weakref": [],
    "weakref.finalize": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "contextlib": [],
    "contextlib.AbstractContextManager": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "selectors": [
        "selectors._can_use",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "collections.abc": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._can_use": [
        "<builtin>.getattr"
    ],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.CompletedProcess": [
        "<builtin>.classmethod"
    ],
    "subprocess._use_posix_spawn": [
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.tuple"
    ],
    "subprocess.Popen": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "platform._Processor": [
        "<builtin>.classmethod"
    ],
    "platform.uname_result": [
        "functools.cached_property.__init__",
        "<builtin>.classmethod"
    ],
    "functools.cached_property.__init__": [],
    "typing": [
        "typing._tp_cache",
        "typing._SpecialGenericAlias.__init__",
        "typing._SpecialForm.__init__",
        "typing._tp_cache.decorator",
        "typing.TypeVar.__init__",
        "<builtin>.frozenset"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "typing._tp_cache.decorator"
    ],
    "typing._tp_cache.decorator": [
        "functools.lru_cache.decorating_function",
        "functools.wraps",
        "append",
        "functools.lru_cache"
    ],
    "typing._SpecialForm.__init__": [],
    "typing.ParamSpec": [
        "<builtin>.property"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing._CallableType": [
        "typing._tp_cache"
    ],
    "typing._TupleType": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.Annotated": [
        "typing._tp_cache"
    ],
    "typing.TypeVar.__init__": [
        "<builtin>.tuple",
        "<builtin>.len",
        "typing._type_check",
        "<builtin>.TypeError",
        "<builtin>.super"
    ],
    "typing._type_check": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.isinstance",
        "typing._type_convert"
    ],
    "typing._type_convert": [
        "typing.ForwardRef.__init__",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.TypeError",
        "<builtin>.SyntaxError",
        "<builtin>.isinstance",
        "<builtin>.compile"
    ],
    "<builtin>.compile": [],
    "<builtin>.SyntaxError": [],
    "typing._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.compat._constants": [
        "sysconfig.get_config_var",
        "platform.python_implementation"
    ],
    "sysconfig": [
        "posixpath.normpath",
        "ntpath.normpath",
        "sysconfig._fix_pcbuild",
        "ntpath.dirname",
        "sysconfig.is_python_build",
        "sysconfig.get_default_scheme",
        "sysconfig._safe_realpath",
        "ntpath.join",
        "posixpath.dirname",
        "sysconfig._getuserbase",
        "<builtin>.getattr",
        "posixpath.join"
    ],
    "sysconfig._getuserbase": [
        "sysconfig._getuserbase.joinuser"
    ],
    "sysconfig._getuserbase.joinuser": [
        "posixpath.expanduser",
        "ntpath.expanduser",
        "ntpath.join",
        "posixpath.join"
    ],
    "ntpath.join": [
        "genericpath._check_arg_types",
        "os._fspath",
        "ntpath.splitdrive",
        "<builtin>.map",
        "<builtin>.isinstance"
    ],
    "os._fspath": [
        "<str>.format",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "<str>.format": [],
    "ntpath.splitdrive": [
        "<builtin>.isinstance",
        "os._fspath",
        "<builtin>.len"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "posixpath.join": [
        "<builtin>.map",
        "genericpath._check_arg_types",
        "os._fspath",
        "posixpath._get_sep"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "ntpath.expanduser": [
        "ntpath._get_bothseps",
        "<builtin>.len",
        "ntpath.dirname",
        "ntpath.join",
        "os._fspath",
        "ntpath.basename",
        "<builtin>.isinstance"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "os._fspath",
        "ntpath._get_bothseps",
        "<builtin>.len",
        "ntpath.splitdrive"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "posixpath.expanduser": [
        "<builtin>.len",
        "posixpath._get_sep",
        "<builtin>.str",
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "ntpath.normpath": [
        "<builtin>.len",
        "os._fspath",
        "<builtin>.isinstance",
        "ntpath.splitdrive"
    ],
    "posixpath.normpath": [
        "pop",
        "os._fspath",
        "<builtin>.isinstance",
        "append"
    ],
    "pop": [],
    "sysconfig._safe_realpath": [
        "posixpath.realpath"
    ],
    "posixpath.realpath": [
        "posixpath.abspath",
        "posixpath._joinrealpath",
        "os._fspath"
    ],
    "posixpath._joinrealpath": [
        "posixpath._joinrealpath",
        "posixpath.isabs",
        "posixpath.split",
        "<builtin>.isinstance",
        "posixpath.join"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "posixpath._get_sep"
    ],
    "posixpath.split": [
        "os._fspath",
        "<builtin>.len",
        "posixpath._get_sep"
    ],
    "posixpath.abspath": [
        "posixpath.normpath",
        "os._fspath",
        "posixpath.isabs",
        "<builtin>.isinstance",
        "posixpath.join"
    ],
    "posixpath.dirname": [
        "os._fspath",
        "<builtin>.len",
        "posixpath._get_sep"
    ],
    "sysconfig._fix_pcbuild": [
        "posixpath.join",
        "ntpath.join",
        "posixpath.normcase",
        "ntpath.normcase"
    ],
    "ntpath.normcase": [
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "sysconfig.is_python_build": [
        "sysconfig._is_python_source_dir"
    ],
    "sysconfig._is_python_source_dir": [
        "genericpath.isfile",
        "ntpath.join",
        "posixpath.join"
    ],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "sysconfig.get_default_scheme": [
        "sysconfig.get_preferred_scheme"
    ],
    "sysconfig.get_preferred_scheme": [
        "sysconfig._get_preferred_schemes",
        "<builtin>.ValueError"
    ],
    "sysconfig._get_preferred_schemes": [],
    "platform.python_implementation": [
        "platform._sys_version"
    ],
    "platform._sys_version": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.hasattr",
        "<map>.get",
        "<builtin>.repr"
    ],
    "<map>.get": [],
    "<builtin>.repr": [],
    "sysconfig.get_config_var": [
        "<map>.get",
        "warnings.warn",
        "sysconfig.get_config_vars"
    ],
    "warnings.warn": [
        "<builtin>.issubclass",
        "<builtin>.type",
        "warnings._is_internal_frame",
        "<builtin>.range",
        "warnings.warn_explicit",
        "<builtin>.TypeError",
        "warnings._next_external_frame",
        "<builtin>.isinstance"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<builtin>.issubclass",
        "<map>.clear",
        "warnings._showwarnmsg",
        "<builtin>.str",
        "warnings.WarningMessage.__init__",
        "<str>.lower",
        "<builtin>.int",
        "<builtin>.RuntimeError",
        "<map>.get",
        "<builtin>.isinstance",
        "linecache.getlines"
    ],
    "<str>.lower": [],
    "<map>.clear": [],
    "linecache.getlines": [
        "linecache.clearcache",
        "linecache.updatecache",
        "<builtin>.len"
    ],
    "linecache.updatecache": [
        "<map>.pop",
        "ntpath.isabs",
        "<builtin>.len",
        "tokenize.open",
        "ntpath.join",
        "<str>.startswith",
        "<str>.endswith",
        "linecache.lazycache",
        "posixpath.isabs",
        "posixpath.join"
    ],
    "<map>.pop": [],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "linecache.lazycache": [
        "<str>.startswith",
        "<builtin>.len",
        "<builtin>.getattr",
        "<str>.endswith"
    ],
    "ntpath.isabs": [
        "ntpath._get_bothseps",
        "<builtin>.len",
        "os._fspath",
        "ntpath.splitdrive",
        "<builtin>.isinstance"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding"
    ],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.read_or_stop",
        "tokenize.detect_encoding.find_cookie"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "<builtin>.SyntaxError",
        "tokenize._get_normal_name"
    ],
    "tokenize._get_normal_name": [],
    "linecache.clearcache": [
        "<map>.clear"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "linecache.getline"
    ],
    "linecache.getline": [
        "<builtin>.len",
        "linecache.getlines"
    ],
    "tracemalloc": [],
    "fnmatch": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [
        "<builtin>.property"
    ],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "sysconfig.get_config_vars": [
        "_osx_support.customize_config_vars",
        "sysconfig._getuserbase",
        "ntpath.dirname",
        "sysconfig._safe_realpath",
        "ntpath.join",
        "sysconfig.get_makefile_filename",
        "sysconfig._init_non_posix",
        "<map>.get",
        "posixpath.dirname",
        "sysconfig._init_posix",
        "append",
        "posixpath.join"
    ],
    "sysconfig._init_non_posix": [
        "ntpath.dirname",
        "posixpath.dirname",
        "sysconfig._safe_realpath",
        "sysconfig.get_path"
    ],
    "sysconfig.get_path": [
        "sysconfig.get_paths"
    ],
    "sysconfig.get_paths": [
        "sysconfig._expand_vars"
    ],
    "sysconfig._expand_vars": [
        "posixpath.normpath",
        "ntpath.normpath",
        "ntpath.expanduser",
        "sysconfig.get_config_vars",
        "sysconfig._subst_vars",
        "posixpath.expanduser",
        "sysconfig._extend_dict"
    ],
    "sysconfig._extend_dict": [
        "<map>.keys"
    ],
    "<map>.keys": [],
    "sysconfig._subst_vars": [
        "<builtin>.AttributeError"
    ],
    "<builtin>.AttributeError": [],
    "sysconfig._init_posix": [
        "<builtin>.globals",
        "<builtin>.locals",
        "<builtin>.__import__",
        "sysconfig._get_sysconfigdata_name"
    ],
    "sysconfig._get_sysconfigdata_name": [
        "<builtin>.getattr"
    ],
    "<builtin>.locals": [],
    "sysconfig.get_makefile_filename": [
        "sysconfig.get_path",
        "ntpath.join",
        "<builtin>.hasattr",
        "posixpath.join"
    ],
    "_osx_support": [],
    "_osx_support.customize_config_vars": [
        "_osx_support._override_all_archs",
        "_osx_support._supports_universal_builds",
        "_osx_support._check_for_unavailable_sdk",
        "_osx_support._remove_universal_flags"
    ],
    "_osx_support._supports_universal_builds": [
        "_osx_support._get_system_version_tuple",
        "<builtin>.bool"
    ],
    "_osx_support._get_system_version_tuple": [
        "<str>.split",
        "_osx_support._get_system_version",
        "<builtin>.int",
        "<builtin>.tuple"
    ],
    "_osx_support._get_system_version": [
        "<builtin>.open"
    ],
    "<builtin>.open": [],
    "_osx_support._remove_universal_flags": [
        "re.sub",
        "_osx_support._save_modified_value"
    ],
    "re.sub": [
        "re._compile"
    ],
    "_osx_support._save_modified_value": [],
    "_osx_support._override_all_archs": [
        "re.sub",
        "_osx_support._save_modified_value"
    ],
    "_osx_support._check_for_unavailable_sdk": [
        "genericpath.exists",
        "re.sub",
        "_osx_support._save_modified_value",
        "re.search"
    ],
    "re.search": [
        "re._compile"
    ],
    "genericpath.exists": [],
    "pandas.compat.compressors": [],
    "bz2": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "pandas.compat.numpy": [
        "<builtin>.ImportError",
        "pandas.util.version.Version.__init__",
        "warnings.catch_warnings.__init__"
    ],
    "numpy": [
        "<builtin>.tuple",
        "remove",
        "numpy.core.getlimits._register_known_types",
        "numpy._pytesttester.PytestTester.__init__",
        "<builtin>.len",
        "<builtin>.ImportError",
        "numpy._mac_os_check",
        "<map>.update",
        "warnings.catch_warnings.__init__",
        "<builtin>.str",
        "<builtin>.int",
        "<builtin>.RuntimeError",
        "warnings.filterwarnings",
        "extend",
        "<builtin>.getattr",
        "numpy._sanity_check"
    ],
    "numpy._globals": [
        "<builtin>.globals",
        "<builtin>.RuntimeError"
    ],
    "numpy.__config__": [
        "ntpath.dirname",
        "genericpath.isdir",
        "ntpath.join",
        "os.add_dll_directory",
        "posixpath.dirname",
        "posixpath.join"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "os.add_dll_directory": [
        "os._AddedDllDirectory.__init__"
    ],
    "os._AddedDllDirectory.__init__": [],
    "numpy._distributor_init": [],
    "numpy.core": [
        "numpy._pytesttester.PytestTester.__init__",
        "<builtin>.type",
        "<builtin>.ImportError",
        "copyreg.pickle",
        "<builtin>.hasattr",
        "append"
    ],
    "numpy.version": [
        "numpy._version.get_versions"
    ],
    "numpy._version": [],
    "json": [],
    "numpy._version.get_versions": [
        "json.loads"
    ],
    "json.loads": [
        "<builtin>.TypeError",
        "<str>.startswith",
        "json.detect_encoding",
        "<builtin>.isinstance"
    ],
    "json.detect_encoding": [
        "<builtin>.len"
    ],
    "numpy.core.multiarray": [],
    "numpy.core.overrides": [
        "collections.namedtuple",
        "<builtin>.int",
        "<builtin>.bool"
    ],
    "numpy.compat._inspect": [],
    "numpy.core.umath": [],
    "numpy.core.numerictypes": [
        "<builtin>.tuple",
        "<builtin>.globals",
        "<builtin>.len",
        "numpy.core.overrides.set_module",
        "numpy.core.numerictypes._register_types",
        "numpy.core.overrides.set_module.decorator",
        "numpy.core.numerictypes._construct_lookups",
        "append",
        "<builtin>.sorted"
    ],
    "numbers": [],
    "numbers.Complex": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Real": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Rational": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Integral": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numpy.core._string_helpers": [
        "<builtin>.range",
        "<builtin>.chr"
    ],
    "numpy.core._type_aliases": [
        "numpy.core._type_aliases._add_aliases",
        "numpy.core._type_aliases._add_integer_aliases",
        "numpy.core._string_helpers.english_lower",
        "<builtin>.list",
        "numpy.core._type_aliases._add_types",
        "numpy.core._type_aliases._set_up_aliases",
        "numpy.core._type_aliases._set_array_types",
        "<map>.items",
        "<builtin>.isinstance"
    ],
    "numpy.compat": [
        "extend"
    ],
    "numpy.compat._pep440": [
        "re.compile",
        "collections.namedtuple"
    ],
    "numpy.compat._pep440.LegacyVersion": [
        "<builtin>.property"
    ],
    "numpy.compat._pep440.Version": [
        "re.compile",
        "<builtin>.property"
    ],
    "numpy.compat.py3k": [],
    "pathlib": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "<builtin>.hasattr"
    ],
    "urllib.parse": [
        "<builtin>.bytes",
        "urllib.parse._fix_result_transcoding",
        "re.compile",
        "<builtin>.frozenset",
        "collections.namedtuple"
    ],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse._fix_result_transcoding": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.set"
    ],
    "pathlib._NormalAccessor": [
        "<builtin>.staticmethod",
        "<builtin>.hasattr"
    ],
    "pathlib.PurePath": [
        "<builtin>.property",
        "operator.attrgetter.__init__",
        "<builtin>.classmethod"
    ],
    "operator.attrgetter.__init__": [
        "<builtin>.tuple",
        "<str>.split",
        "<builtin>.TypeError",
        "<builtin>.map",
        "<builtin>.isinstance"
    ],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "numpy.core._dtype": [],
    "numpy.core._string_helpers.english_lower": [],
    "numpy.core._type_aliases._add_types": [
        "<map>.items"
    ],
    "numpy.core._type_aliases._add_aliases": [
        "numpy.core._type_aliases.bitname",
        "<map>.items"
    ],
    "numpy.core._type_aliases.bitname": [
        "numpy.core._dtype._kind_name",
        "numpy.core._type_aliases._bits_of"
    ],
    "numpy.core._type_aliases._bits_of": [
        "<builtin>.next",
        "<map>.values",
        "<builtin>.ValueError"
    ],
    "<map>.values": [],
    "numpy.core._dtype._kind_name": [
        "<builtin>.RuntimeError"
    ],
    "numpy.core._type_aliases._add_integer_aliases": [
        "<builtin>.zip",
        "<builtin>.set"
    ],
    "numpy.core._type_aliases._set_up_aliases": [],
    "numpy.core._type_aliases._set_array_types": [
        "numpy.core._type_aliases._add_array_type",
        "<builtin>.len"
    ],
    "numpy.core._type_aliases._add_array_type": [],
    "numpy.core.overrides.set_module": [],
    "numpy.core.overrides.set_module.decorator": [],
    "numpy.core.numerictypes._construct_lookups": [
        "<builtin>.len"
    ],
    "numpy.core.numerictypes._register_types": [],
    "numpy.core.numeric": [
        "numpy.core.numeric.extend_all",
        "<builtin>.type",
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_array_function_like_doc",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.core.shape_base": [
        "<builtin>.getattr"
    ],
    "numpy.core.fromnumeric": [],
    "numpy.core._methods": [
        "<map>.update"
    ],
    "numpy.core._exceptions": [],
    "numpy.core._exceptions._ArrayMemoryError": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "numpy.core._ufunc_config": [
        "numpy.core.overrides.set_module",
        "numpy.core._ufunc_config._setdef",
        "<map>.items",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.core._ufunc_config._setdef": [],
    "numpy.core.overrides.set_array_function_like_doc": [],
    "numpy.core.arrayprint": [
        "<builtin>.issubclass",
        "numpy.core.overrides.array_function_dispatch",
        "numpy.core.overrides.set_module",
        "numpy.core.arrayprint._recursive_guard",
        "append",
        "numpy.core.overrides.set_module.decorator",
        "contextlib.contextmanager",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "<builtin>.getattr",
        "numpy.core.arrayprint._recursive_guard.decorating_function"
    ],
    "numpy.core.arrayprint._recursive_guard": [],
    "numpy.core.arrayprint._recursive_guard.decorating_function": [
        "functools.wraps",
        "<builtin>.set"
    ],
    "numpy.core.overrides.array_function_dispatch": [],
    "numpy.core.overrides.array_function_dispatch.decorator": [],
    "numpy.core.arrayprint.StructuredVoidFormat": [
        "<builtin>.classmethod"
    ],
    "numpy.core._asarray": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_array_function_like_doc",
        "numpy.core.overrides.set_module.decorator",
        "numpy.core.overrides.array_function_dispatch.decorator"
    ],
    "numpy.core.numeric.extend_all": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "numpy.core.defchararray": [
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.core.records": [
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.core.memmap": [],
    "numpy.core.function_base": [],
    "numpy.core._machar": [],
    "numpy.core.getlimits": [
        "<builtin>.dict"
    ],
    "numpy.core.getlimits.MachArLike": [
        "<builtin>.property"
    ],
    "numpy.core.getlimits.finfo": [
        "<builtin>.property"
    ],
    "numpy.core.getlimits.iinfo": [
        "<builtin>.property"
    ],
    "numpy.core.einsumfunc": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "<builtin>.set"
    ],
    "numpy.core._add_newdocs": [
        "numpy.core._add_newdocs.refer_to_array_attribute",
        "numpy.core.function_base.add_newdoc",
        "<str>.replace"
    ],
    "numpy.core.function_base.add_newdoc": [
        "<builtin>.globals",
        "<builtin>.__import__",
        "<str>.strip",
        "numpy.core.function_base._add_docstring",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "numpy.core.function_base._add_docstring": [
        "numpy.core.function_base._needs_add_docstring",
        "warnings.warn"
    ],
    "numpy.core.function_base._needs_add_docstring": [
        "<builtin>.isinstance"
    ],
    "<str>.replace": [],
    "numpy.core._add_newdocs.refer_to_array_attribute": [],
    "numpy.core._add_newdocs_scalars": [
        "numpy.core.function_base.add_newdoc",
        "numpy.core._add_newdocs_scalars.numeric_type_aliases",
        "numpy.core._add_newdocs_scalars.add_newdoc_for_scalar_type"
    ],
    "numpy.core._add_newdocs_scalars.numeric_type_aliases": [
        "<builtin>.list",
        "numpy.core._add_newdocs_scalars.numeric_type_aliases.type_aliases_gen"
    ],
    "numpy.core._add_newdocs_scalars.numeric_type_aliases.type_aliases_gen": [
        "<builtin>.getattr"
    ],
    "numpy.core._add_newdocs_scalars.add_newdoc_for_scalar_type": [
        "numpy.core.function_base.add_newdoc",
        "platform.system",
        "<str>.strip",
        "platform.machine",
        "<builtin>.getattr"
    ],
    "platform.system": [
        "platform.uname"
    ],
    "platform.uname": [
        "platform._syscmd_ver",
        "platform._node",
        "<builtin>.any",
        "platform.win32_ver",
        "platform._get_machine_win32",
        "<builtin>.map",
        "platform.java_ver"
    ],
    "platform._node": [],
    "socket": [
        "<builtin>.object",
        "<builtin>.hasattr",
        "extend",
        "append",
        "<builtin>.getattr"
    ],
    "socket.socket": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "platform.win32_ver": [
        "platform._syscmd_ver",
        "<str>.split",
        "<builtin>.map",
        "<map>.get",
        "<builtin>.getattr"
    ],
    "platform._syscmd_ver": [
        "platform._norm_version",
        "subprocess.check_output"
    ],
    "subprocess.check_output": [
        "subprocess.run",
        "<builtin>.ValueError"
    ],
    "subprocess.run": [
        "subprocess.Popen.__enter__",
        "subprocess.Popen.wait",
        "subprocess.CompletedProcess.__init__",
        "<builtin>.ValueError",
        "subprocess.Popen.poll",
        "subprocess.Popen.communicate",
        "subprocess.Popen.__exit__",
        "subprocess.Popen.__init__",
        "subprocess.Popen.kill",
        "subprocess.CalledProcessError.__init__"
    ],
    "subprocess.Popen.__init__": [
        "subprocess._cleanup",
        "<builtin>.filter",
        "<builtin>.type",
        "<builtin>.ValueError",
        "warnings.warn",
        "<builtin>.TypeError",
        "subprocess.Popen._execute_child",
        "<builtin>.hasattr",
        "append",
        "subprocess.Popen._get_handles",
        "<builtin>.isinstance",
        "<builtin>.bool"
    ],
    "subprocess._cleanup": [
        "remove"
    ],
    "subprocess.Popen._get_handles": [
        "subprocess.Popen._get_devnull",
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._execute_child": [
        "<builtin>.issubclass",
        "subprocess.Popen._close_pipe_fds",
        "ntpath.dirname",
        "subprocess.Popen._posix_spawn",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "subprocess.Popen._handle_exitstatus",
        "<builtin>.getattr",
        "<builtin>.len",
        "<builtin>.list",
        "ntpath.join",
        "<builtin>.int",
        "posixpath.dirname",
        "append",
        "<builtin>.sorted",
        "<builtin>.tuple",
        "<builtin>.bytes",
        "<builtin>.ValueError",
        "<builtin>.set",
        "<builtin>.TypeError",
        "os.get_exec_path",
        "<builtin>.bytearray",
        "<builtin>.map",
        "posixpath.join"
    ],
    "subprocess.Popen._posix_spawn": [
        "append",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.getattr"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr"
    ],
    "os.get_exec_path": [
        "<str>.split",
        "warnings.catch_warnings.__init__"
    ],
    "warnings.catch_warnings.__init__": [],
    "subprocess.Popen._handle_exitstatus": [],
    "<builtin>.filter": [],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [],
    "subprocess.Popen.communicate": [
        "subprocess.Popen.wait",
        "<builtin>.min",
        "<builtin>.ValueError",
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._stdin_write",
        "subprocess.Popen._communicate"
    ],
    "subprocess.Popen._communicate": [
        "subprocess.Popen.wait",
        "subprocess.Popen._check_timeout",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._translate_newlines",
        "subprocess.Popen._remaining_time",
        "<builtin>.RuntimeError",
        "subprocess.Popen._save_input",
        "<builtin>.memoryview"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "subprocess.Popen._remaining_time": [],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.Popen.wait": [
        "subprocess.Popen._wait",
        "<builtin>.min",
        "subprocess.Popen._remaining_time"
    ],
    "subprocess.Popen._wait": [
        "subprocess.TimeoutExpired.__init__",
        "<builtin>.min",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._try_wait",
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [
        "subprocess.Popen.poll"
    ],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "platform._norm_version": [
        "<str>.split",
        "<builtin>.list",
        "<builtin>.map"
    ],
    "platform._get_machine_win32": [],
    "platform.java_ver": [
        "platform._java_getprop"
    ],
    "platform._java_getprop": [],
    "platform.machine": [
        "platform.uname"
    ],
    "numpy.core._dtype_ctypes": [],
    "numpy.core._internal": [
        "re.compile",
        "platform.python_implementation",
        "<map>.keys"
    ],
    "ast": [
        "<builtin>.repr",
        "<builtin>.property",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "ast._Unparser": [
        "contextlib.contextmanager",
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "ctypes": [
        "ctypes.CFUNCTYPE",
        "ctypes._reset_cache",
        "ctypes.LibraryLoader.__init__",
        "ctypes._check_size",
        "<builtin>.int",
        "ctypes.PYFUNCTYPE",
        "<builtin>.Exception"
    ],
    "<builtin>.Exception": [],
    "ctypes._check_size": [
        "<builtin>.SystemError"
    ],
    "ctypes.LibraryLoader": [
        "<builtin>.classmethod"
    ],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "<builtin>.ValueError"
    ],
    "ctypes.PYFUNCTYPE": [],
    "ctypes._endian": [
        "<builtin>.type"
    ],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "numpy.core._internal._ctypes": [
        "<builtin>.property"
    ],
    "numpy.core._internal._Stream": [
        "<builtin>.property"
    ],
    "numpy._pytesttester": [],
    "numpy._pytesttester.PytestTester.__init__": [],
    "numpy.lib": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.lib.mixins": [],
    "numpy.lib.mixins.NDArrayOperatorsMixin": [
        "numpy.lib.mixins._binary_method",
        "numpy.lib.mixins._unary_method",
        "numpy.lib.mixins._numeric_methods",
        "numpy.lib.mixins._reflected_binary_method"
    ],
    "numpy.lib.mixins._binary_method": [],
    "numpy.lib.mixins._numeric_methods": [
        "numpy.lib.mixins._binary_method",
        "numpy.lib.mixins._inplace_binary_method",
        "numpy.lib.mixins._reflected_binary_method"
    ],
    "numpy.lib.mixins._reflected_binary_method": [],
    "numpy.lib.mixins._inplace_binary_method": [],
    "numpy.lib.mixins._unary_method": [],
    "numpy.lib.scimath": [
        "numpy.core.overrides.array_function_dispatch.decorator",
        "numpy.core.overrides.array_function_dispatch"
    ],
    "numpy.lib.type_check": [
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.lib.ufunclike": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy.lib.ufunclike._deprecate_out_named_y",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "numpy.lib.ufunclike._fix_and_maybe_deprecate_out_named_y"
    ],
    "numpy.lib.ufunclike._deprecate_out_named_y": [
        "functools.wraps"
    ],
    "numpy.lib.ufunclike._fix_and_maybe_deprecate_out_named_y": [
        "numpy.lib.ufunclike._deprecate_out_named_y",
        "numpy.lib.ufunclike._fix_out_named_y"
    ],
    "numpy.lib.ufunclike._fix_out_named_y": [
        "functools.wraps"
    ],
    "numpy.lib.index_tricks": [
        "numpy.lib.index_tricks.OGridClass.__init__",
        "numpy.core.overrides.set_module",
        "numpy.lib.index_tricks.MGridClass.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy.lib.index_tricks.RClass.__init__",
        "numpy.lib.index_tricks.CClass.__init__",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.matrixlib": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.matrixlib.defmatrix": [
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.linalg": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.linalg.linalg": [
        "numpy.linalg.linalg._determine_error_states"
    ],
    "numpy.lib.twodim_base": [
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.overrides.set_array_function_like_doc",
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.lib.stride_tricks": [
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_module.decorator",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "numpy.core.overrides.array_function_dispatch"
    ],
    "numpy.core.getlimits.iinfo.__init__": [
        "<builtin>.type",
        "<builtin>.ValueError"
    ],
    "numpy.linalg.linalg._determine_error_states": [
        "numpy.core._ufunc_config.errstate.__init__"
    ],
    "numpy.core._ufunc_config.errstate.__init__": [],
    "numpy.matrixlib.defmatrix.matrix": [
        "<builtin>.property"
    ],
    "numpy.lib.function_base": [
        "numpy.core.overrides.set_module",
        "<builtin>.dict",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.lib.histograms": [],
    "numpy.lib.index_tricks.MGridClass.__init__": [
        "<builtin>.super"
    ],
    "numpy.lib.index_tricks.OGridClass.__init__": [
        "<builtin>.super"
    ],
    "numpy.lib.index_tricks.AxisConcatenator": [
        "<builtin>.staticmethod"
    ],
    "numpy.lib.index_tricks.RClass.__init__": [
        "numpy.lib.index_tricks.AxisConcatenator.__init__"
    ],
    "numpy.lib.index_tricks.AxisConcatenator.__init__": [],
    "numpy.lib.index_tricks.CClass.__init__": [
        "numpy.lib.index_tricks.AxisConcatenator.__init__"
    ],
    "numpy.lib.index_tricks.IndexExpression.__init__": [],
    "numpy.lib.nanfunctions": [],
    "numpy.lib.shape_base": [],
    "numpy.lib.polynomial": [
        "re.compile",
        "warnings.simplefilter"
    ],
    "numpy.lib.polynomial.poly1d": [
        "<builtin>.property"
    ],
    "numpy.lib.utils": [
        "re.compile",
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_module.decorator"
    ],
    "textwrap": [
        "re.compile"
    ],
    "textwrap.TextWrapper": [
        "re.compile",
        "<builtin>.ord",
        "re.escape"
    ],
    "<builtin>.ord": [],
    "numpy.lib.arraysetops": [],
    "numpy.lib.npyio": [
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_array_function_like_doc",
        "<builtin>.sorted",
        "numpy.core.overrides.set_module.decorator"
    ],
    "numpy.lib.format": [
        "<builtin>.len"
    ],
    "numpy.lib._datasource": [
        "numpy.lib._datasource._FileOpeners.__init__"
    ],
    "numpy.lib._datasource._FileOpeners.__init__": [],
    "numpy.lib._iotools": [],
    "numpy.lib._iotools.NameValidator": [
        "<builtin>.set"
    ],
    "numpy.lib._iotools.StringConverter": [
        "extend",
        "append",
        "<builtin>.classmethod"
    ],
    "numpy.lib.arrayterator": [],
    "numpy.lib.arrayterator.Arrayterator": [
        "<builtin>.property"
    ],
    "numpy.lib.arraypad": [
        "numpy.core.overrides.array_function_dispatch.decorator",
        "numpy.core.overrides.array_function_dispatch"
    ],
    "numpy.lib._version": [],
    "numpy.fft": [
        "copy",
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.fft._pocketfft": [],
    "numpy.fft.helper": [
        "numpy.core.overrides.set_module",
        "numpy.core.overrides.set_module.decorator",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "numpy.core.overrides.array_function_dispatch"
    ],
    "copy": [
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "numpy.polynomial": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.polynomial.polynomial": [],
    "numpy.polynomial.polyutils": [],
    "numpy.polynomial._polybase": [],
    "numpy.polynomial._polybase.ABCPolyBase": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "numpy.polynomial.polynomial.Polynomial": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "numpy.polynomial.chebyshev": [],
    "numpy.polynomial.chebyshev.Chebyshev": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "numpy.polynomial.legendre": [],
    "numpy.polynomial.legendre.Legendre": [
        "<builtin>.staticmethod"
    ],
    "numpy.polynomial.hermite": [],
    "numpy.polynomial.hermite.Hermite": [
        "<builtin>.staticmethod"
    ],
    "numpy.polynomial.hermite_e": [],
    "numpy.polynomial.hermite_e.HermiteE": [
        "<builtin>.staticmethod"
    ],
    "numpy.polynomial.laguerre": [],
    "numpy.polynomial.laguerre.Laguerre": [
        "<builtin>.staticmethod"
    ],
    "numpy.random": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.random._pickle": [],
    "numpy.ctypeslib": [
        "numpy.ctypeslib._get_scalar_type_map",
        "numpy.core._internal._getintp_ctype"
    ],
    "numpy.core._internal._getintp_ctype": [
        "numpy.core._internal.dummy_ctype.__init__"
    ],
    "numpy.core._internal.dummy_ctype.__init__": [],
    "numpy.ctypeslib._ndptr": [
        "<builtin>.classmethod"
    ],
    "numpy.ctypeslib._concrete_ndptr": [
        "<builtin>.property"
    ],
    "numpy.ctypeslib._get_scalar_type_map": [],
    "numpy.ma": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.ma.core": [
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.ma.core._DomainedBinaryOperation.__init__",
        "textwrap.dedent",
        "numpy.ma.core._frommethod.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "numpy.ma.core.doc_note",
        "numpy.ma.core._DomainTan.__init__",
        "numpy.ma.core._MaskedUnaryOperation.__init__",
        "<builtin>.complex",
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__",
        "<builtin>.dict",
        "numpy.ma.core._extrema_operation.__init__",
        "numpy.ma.core._convert2ma.__init__"
    ],
    "inspect": [
        "<builtin>.globals",
        "<builtin>.object",
        "<builtin>.type",
        "<map>.items",
        "<builtin>.hasattr",
        "collections.namedtuple"
    ],
    "dis": [
        "collections.namedtuple"
    ],
    "opcode": [
        "opcode.name_op",
        "opcode.def_op",
        "opcode.jrel_op",
        "<builtin>.range",
        "opcode.jabs_op",
        "append"
    ],
    "opcode.def_op": [],
    "opcode.name_op": [
        "opcode.def_op",
        "append"
    ],
    "opcode.jrel_op": [
        "opcode.def_op",
        "append"
    ],
    "opcode.jabs_op": [
        "opcode.def_op",
        "append"
    ],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "<builtin>.complex": [],
    "numpy.ma.core._MaskedUnaryOperation.__init__": [
        "<builtin>.super"
    ],
    "numpy.ma.core._DomainGreaterEqual.__init__": [],
    "numpy.ma.core._DomainGreater.__init__": [],
    "numpy.ma.core._DomainTan.__init__": [],
    "numpy.ma.core._DomainCheckInterval.__init__": [],
    "numpy.ma.core._MaskedBinaryOperation.__init__": [
        "<builtin>.super"
    ],
    "numpy.ma.core._DomainSafeDivide.__init__": [],
    "numpy.ma.core._DomainedBinaryOperation.__init__": [
        "<builtin>.super"
    ],
    "numpy.ma.core._MaskedPrintOption.__init__": [],
    "textwrap.dedent": [
        "re.sub",
        "<builtin>.enumerate",
        "<builtin>.zip"
    ],
    "numpy.ma.core.MaskedArray": [
        "<builtin>.property",
        "numpy.ma.core._arraymethod"
    ],
    "numpy.ma.core._arraymethod": [
        "<builtin>.getattr"
    ],
    "numpy.ma.core.mvoid": [
        "<builtin>.property"
    ],
    "numpy.ma.core.MaskedConstant": [
        "<builtin>.classmethod"
    ],
    "numpy.ma.core._frommethod.__init__": [
        "numpy.ma.core._frommethod.getdoc"
    ],
    "numpy.ma.core._frommethod.getdoc": [
        "numpy.ma.core.get_object_signature",
        "<builtin>.getattr"
    ],
    "numpy.ma.core.get_object_signature": [
        "numpy.compat._inspect.getargspec",
        "numpy.compat._inspect.formatargspec"
    ],
    "numpy.compat._inspect.getargspec": [
        "<builtin>.TypeError",
        "numpy.compat._inspect.ismethod",
        "numpy.compat._inspect.isfunction",
        "numpy.compat._inspect.getargs"
    ],
    "numpy.compat._inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "numpy.compat._inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "numpy.compat._inspect.getargs": [
        "<builtin>.TypeError",
        "<builtin>.list",
        "numpy.compat._inspect.iscode",
        "<builtin>.range"
    ],
    "numpy.compat._inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "numpy.compat._inspect.formatargspec": [
        "<builtin>.len",
        "<builtin>.range",
        "numpy.compat._inspect.strseq",
        "append",
        "numpy.compat._inspect.<lambda3>"
    ],
    "numpy.compat._inspect.strseq": [
        "numpy.compat._inspect.strseq",
        "numpy.compat._inspect.joinseq",
        "<builtin>.type"
    ],
    "numpy.compat._inspect.joinseq": [
        "<builtin>.len"
    ],
    "numpy.compat._inspect.<lambda3>": [
        "<builtin>.repr"
    ],
    "numpy.ma.core._extrema_operation.__init__": [
        "<builtin>.super"
    ],
    "numpy.ma.core.doc_note": [
        "re.split",
        "inspect.cleandoc"
    ],
    "inspect.cleandoc": [
        "<str>.expandtabs"
    ],
    "re.split": [
        "re._compile"
    ],
    "<str>.expandtabs": [],
    "numpy.ma.core._convert2ma.__init__": [
        "numpy.ma.core._convert2ma.getdoc",
        "<builtin>.getattr"
    ],
    "numpy.ma.core._convert2ma.getdoc": [
        "numpy.ma.core.get_object_signature",
        "numpy.ma.core._convert2ma._replace_return_type",
        "<builtin>.getattr"
    ],
    "numpy.ma.core._convert2ma._replace_return_type": [
        "<builtin>.RuntimeError"
    ],
    "numpy.ma.extras": [
        "numpy.ma.extras.mr_class.__init__",
        "numpy.ma.core.doc_note"
    ],
    "numpy.ma.extras.MAxisConcatenator": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "numpy.ma.extras.mr_class.__init__": [
        "numpy.lib.index_tricks.AxisConcatenator.__init__"
    ],
    "numpy.core.getlimits._register_known_types": [
        "numpy.core.getlimits._register_type",
        "numpy.core.getlimits.MachArLike.__init__",
        "numpy.core._ufunc_config.errstate.__init__"
    ],
    "numpy.core.getlimits.MachArLike.__init__": [
        "numpy.core.getlimits.MachArLike._float_to_str",
        "numpy.core.getlimits.MachArLike._float_conv",
        "numpy.core.getlimits.MachArLike._float_to_float",
        "<builtin>.int"
    ],
    "numpy.core.getlimits.MachArLike._float_to_float": [
        "numpy.core.getlimits._fr1",
        "numpy.core.getlimits.MachArLike._float_conv"
    ],
    "numpy.core.getlimits.MachArLike._float_conv": [],
    "numpy.core.getlimits._fr1": [],
    "numpy.core.getlimits.MachArLike._float_to_str": [
        "numpy.core.getlimits._fr0"
    ],
    "numpy.core.getlimits._fr0": [],
    "numpy.core.getlimits._register_type": [],
    "numpy._sanity_check": [
        "<builtin>.RuntimeError",
        "<builtin>.abs",
        "<builtin>.AssertionError"
    ],
    "<builtin>.abs": [],
    "<builtin>.AssertionError": [],
    "numpy._mac_os_check": [],
    "pandas.util.version": [
        "re.compile",
        "collections.namedtuple"
    ],
    "pandas.util.version.LegacyVersion": [
        "<builtin>.property"
    ],
    "pandas.util.version.Version": [
        "re.compile",
        "<builtin>.property"
    ],
    "pandas.util.version.Version.__init__": [
        "<builtin>.tuple",
        "pandas.util.version._parse_letter_version",
        "<builtin>.int",
        "pandas.util.version._cmpkey",
        "pandas.util.version._parse_local_version"
    ],
    "pandas.util.version._parse_letter_version": [
        "<str>.lower",
        "<builtin>.int"
    ],
    "pandas.util.version._parse_local_version": [
        "<builtin>.tuple",
        "<builtin>.int"
    ],
    "pandas.util.version._cmpkey": [
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.isinstance"
    ],
    "pandas.compat.pyarrow": [
        "pandas.util.version.Version.__init__"
    ],
    "pandas._typing": [
        "typing.TypeVar.__init__"
    ],
    "datetime": [
        "append",
        "datetime._days_before_year",
        "datetime.timezone._create"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.IsoCalendarDate": [
        "<builtin>.property"
    ],
    "datetime.time": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.datetime": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.timezone": [
        "<builtin>.object",
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "datetime.timezone._create": [],
    "numpy.typing": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy._typing": [],
    "numpy._typing._nested_sequence": [
        "typing.TypeVar.__init__"
    ],
    "numpy._typing._nested_sequence._NestedSequence": [
        "typing.overload"
    ],
    "typing.overload": [],
    "numpy._typing._nbit": [],
    "numpy._typing._char_codes": [],
    "numpy._typing._scalars": [],
    "numpy._typing._shape": [],
    "numpy._typing._dtype_like": [
        "typing.TypeVar.__init__"
    ],
    "numpy._typing._generic_alias": [
        "numpy._typing._generic_alias._GenericAlias.__init__",
        "typing.TypeVar.__init__"
    ],
    "numpy._typing._generic_alias._GenericAlias": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "numpy._typing._generic_alias._GenericAlias.__init__": [
        "<builtin>.tuple",
        "numpy._typing._generic_alias._parse_parameters",
        "<builtin>.isinstance"
    ],
    "numpy._typing._generic_alias._parse_parameters": [
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "numpy._typing._dtype_like._SupportsDType": [
        "<builtin>.property"
    ],
    "numpy._typing._array_like": [
        "typing.TypeVar.__init__"
    ],
    "numpy._typing._add_docstring": [
        "numpy._typing._add_docstring.add_newdoc",
        "<builtin>.repr",
        "numpy._typing._add_docstring._parse_docstrings"
    ],
    "numpy._typing._add_docstring.add_newdoc": [
        "append"
    ],
    "numpy._typing._add_docstring._parse_docstrings": [
        "pop",
        "textwrap.dedent",
        "re.match",
        "append"
    ],
    "re.match": [
        "re._compile"
    ],
    "pandas._libs": [],
    "pandas._libs.tslibs": [],
    "pandas.core.dtypes.dtypes": [],
    "decimal": [],
    "_pydecimal": [
        "re.compile",
        "<builtin>.pow",
        "_pydecimal.Context.__init__",
        "_pydecimal._Log10Memoize.__init__",
        "collections.namedtuple"
    ],
    "contextvars": [],
    "_pydecimal.Decimal": [
        "<builtin>.property",
        "<builtin>.dict",
        "<builtin>.classmethod"
    ],
    "_pydecimal._Log10Memoize.__init__": [],
    "_pydecimal.Context.__init__": [
        "copy",
        "<builtin>.dict",
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "locale": [
        "<builtin>.globals",
        "<map>.setdefault",
        "re.compile",
        "<map>.items",
        "functools.wraps",
        "<builtin>.sorted"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "<builtin>.pow": [],
    "pytz": [
        "pytz.resource_exists"
    ],
    "pytz.exceptions": [],
    "pytz.lazy": [
        "threading.RLock",
        "<builtin>.hasattr"
    ],
    "pytz.tzinfo": [
        "datetime",
        "pytz.tzinfo.memorized_timedelta"
    ],
    "bisect": [],
    "pytz.tzinfo.memorized_timedelta": [],
    "pytz.tzfile": [
        "pytz.tzfile._byte_string"
    ],
    "pytz.tzfile._byte_string": [
        "<str>.encode"
    ],
    "<str>.encode": [],
    "pytz.resource_exists": [
        "pytz.open_resource"
    ],
    "pytz.open_resource": [
        "<builtin>.open",
        "<builtin>.ValueError"
    ],
    "pkg_resources": [
        "pkg_resources.WorkingSet.__init__",
        "ntpath.dirname",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "<builtin>.hasattr",
        "warnings.filterwarnings",
        "<builtin>.globals",
        "typing.overload",
        "ntpath.join",
        "typing.TypeVar.__init__",
        "pkg_resources.register_finder",
        "<builtin>.RuntimeError",
        "pkg_resources.DefaultProvider._register",
        "pkg_resources.EmptyProvider.__init__",
        "posixpath.dirname",
        "pkg_resources._call_aside",
        "warnings.warn",
        "re.compile",
        "pkg_resources.ResourceManager.__init__",
        "pkg_resources.register_namespace_handler",
        "pkg_resources.register_loader_type",
        "pkg_resources._declare_state",
        "posixpath.join"
    ],
    "email.parser": [],
    "email.feedparser": [
        "re.compile",
        "<builtin>.object"
    ],
    "email.errors": [],
    "email._policybase": [],
    "email.header": [
        "re.compile",
        "email.charset.Charset.__init__"
    ],
    "email.quoprimime": [
        "<str>.encode",
        "<builtin>.ord",
        "<builtin>.range",
        "<builtin>.chr"
    ],
    "string": [
        "string.Template.__init_subclass__"
    ],
    "string.Template.__init_subclass__": [
        "re.compile",
        "re.escape",
        "<builtin>.super"
    ],
    "<str>.translate": [],
    "email.base64mime": [],
    "base64": [],
    "email.charset": [],
    "email.encoders": [],
    "quopri": [],
    "email.charset.Charset.__init__": [
        "<str>.encode",
        "<map>.get",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "email.utils": [
        "re.compile"
    ],
    "random": [
        "<builtin>.hasattr",
        "random.Random.__init__"
    ],
    "hashlib": [
        "<builtin>.globals",
        "<builtin>.bytes",
        "<builtin>.range",
        "logging.exception",
        "<builtin>.set",
        "hashlib.__get_builtin_constructor"
    ],
    "hashlib.__get_builtin_constructor": [
        "<map>.get",
        "<builtin>.ValueError"
    ],
    "logging": [
        "logging.Formatter.__init__",
        "ntpath.normcase",
        "_weakrefset.WeakSet.__init__",
        "logging._StderrHandler.__init__",
        "posixpath.normcase",
        "logging.Manager.__init__",
        "<builtin>.hasattr",
        "weakref.WeakValueDictionary.__init__",
        "threading.RLock",
        "logging.RootLogger.__init__"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.Formatter.__init__": [
        "<builtin>.ValueError",
        "<map>.keys",
        "logging.StrFormatStyle.validate",
        "logging.PercentStyle.validate",
        "logging.PercentStyle.__init__",
        "logging.StringTemplateStyle.__init__",
        "logging.StringTemplateStyle.validate"
    ],
    "logging.StringTemplateStyle.__init__": [
        "<builtin>.super",
        "string.Template.__init__"
    ],
    "string.Template.__init__": [],
    "logging.PercentStyle.__init__": [],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update",
        "<builtin>.set"
    ],
    "weakref.WeakValueDictionary.update": [
        "weakref.KeyedRef.__init__",
        "<builtin>.dict",
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.hasattr"
    ],
    "weakref.WeakValueDictionary._commit_removals": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.Handler.createLock",
        "logging._addHandlerRef",
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.ValueError"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "append"
    ],
    "logging._acquireLock": [],
    "logging.Handler.createLock": [
        "threading.RLock",
        "logging._register_at_fork_reinit_lock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging.Manager": [
        "<builtin>.property"
    ],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Manager.__init__": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.basicConfig",
        "<builtin>.len",
        "logging.Logger.error"
    ],
    "logging.basicConfig": [
        "logging._acquireLock",
        "<builtin>.len",
        "logging.Formatter.__init__",
        "<builtin>.ValueError",
        "logging.Logger.addHandler",
        "<map>.keys",
        "logging.Logger.setLevel",
        "logging.Logger.removeHandler",
        "logging.StreamHandler.__init__",
        "logging.FileHandler.__init__"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "remove"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "logging.Handler.__init__",
        "ntpath.abspath",
        "logging.StreamHandler.__init__",
        "os._fspath",
        "logging.FileHandler._open",
        "posixpath.abspath"
    ],
    "ntpath.abspath": [],
    "logging.FileHandler._open": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.StrFormatStyle.validate": [
        "string.Formatter.parse",
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "string.Formatter.parse": [],
    "logging.Logger.addHandler": [
        "logging._acquireLock",
        "append"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.isEnabledFor": [
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "logging.Logger.handle",
        "<builtin>.type",
        "logging.Logger.makeRecord",
        "logging.Logger.findCaller",
        "<builtin>.isinstance"
    ],
    "logging.Logger.findCaller": [
        "logging.currentframe",
        "ntpath.normcase",
        "posixpath.normcase",
        "<builtin>.hasattr",
        "traceback.print_stack"
    ],
    "logging.currentframe": [],
    "traceback.print_stack": [
        "traceback.print_list",
        "traceback.extract_stack"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "traceback.FrameSummary.__init__",
        "<builtin>.set",
        "linecache.checkcache",
        "linecache.lazycache",
        "<builtin>.getattr"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "linecache.checkcache": [
        "<map>.pop",
        "<map>.keys",
        "<builtin>.list",
        "<builtin>.len"
    ],
    "traceback.print_list": [
        "<builtin>.print",
        "traceback.StackSummary.format",
        "traceback.StackSummary.from_list"
    ],
    "traceback.StackSummary.from_list": [
        "<builtin>.isinstance",
        "traceback.FrameSummary.__init__"
    ],
    "traceback.StackSummary.format": [
        "append",
        "<builtin>.sorted"
    ],
    "logging.Logger.makeRecord": [
        "<builtin>.KeyError",
        "logging.LogRecord.__init__"
    ],
    "logging.LogRecord.__init__": [
        "ntpath.splitext",
        "<builtin>.len",
        "posixpath.splitext",
        "posixpath.basename",
        "ntpath.basename",
        "<builtin>.int",
        "threading.current_thread",
        "<builtin>.hasattr",
        "logging.getLevelName",
        "<builtin>.isinstance"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "posixpath.basename": [
        "os._fspath",
        "posixpath._get_sep"
    ],
    "ntpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "genericpath._splitext": [
        "<builtin>.max"
    ],
    "posixpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Logger.callHandlers",
        "logging.Filterer.filter"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.Filterer.filter",
        "logging.Handler.emit",
        "logging.Handler.acquire"
    ],
    "logging.Handler.acquire": [],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.len",
        "<builtin>.type",
        "warnings.warn",
        "<builtin>.map",
        "<builtin>.ord",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "email._parseaddr": [],
    "calendar": [
        "calendar._localized_month.__init__",
        "<builtin>.range",
        "datetime.date.toordinal",
        "calendar._localized_day.__init__"
    ],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_before_month",
        "datetime._days_in_month",
        "datetime._days_before_year"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "importlib": [],
    "importlib.abc": [
        "importlib.abc._register"
    ],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "pkgutil": [
        "collections.namedtuple",
        "functools.singledispatch"
    ],
    "importlib.util": [
        "contextlib.contextmanager"
    ],
    "importlib.util.LazyLoader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "functools.singledispatch": [
        "functools.update_wrapper",
        "weakref.WeakKeyDictionary.__init__",
        "<builtin>.getattr"
    ],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.set"
    ],
    "weakref.WeakKeyDictionary.update": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "plistlib": [
        "<builtin>.globals",
        "re.compile",
        "<builtin>.dict",
        "<builtin>.object"
    ],
    "xml.parsers.expat": [],
    "tempfile": [
        "<builtin>.hasattr"
    ],
    "shutil": [
        "append",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "zipfile": [],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "zipfile.CompleteDirs": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "packaging.markers": [],
    "packaging.requirements": [],
    "packaging.specifiers": [
        "re.compile",
        "typing.TypeVar.__init__"
    ],
    "packaging.specifiers.BaseSpecifier": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "packaging.specifiers.Specifier": [
        "re.compile",
        "<builtin>.property"
    ],
    "packaging.specifiers.SpecifierSet": [
        "<builtin>.property"
    ],
    "packaging.utils": [
        "re.compile",
        "typing.NewType.__init__"
    ],
    "typing.NewType.__init__": [
        "<str>.rpartition",
        "typing._caller"
    ],
    "<str>.rpartition": [],
    "typing._caller": [],
    "packaging.version": [
        "re.compile"
    ],
    "packaging.version.Version": [
        "re.compile",
        "<builtin>.property"
    ],
    "jaraco.text": [
        "importlib_resources._common.files",
        "jaraco.context.ExceptionTrap.passes",
        "jaraco.context.ExceptionTrap.__init__",
        "functools.singledispatch"
    ],
    "importlib.resources": [
        "functools.singledispatch"
    ],
    "importlib_resources": [],
    "importlib_resources._common": [
        "contextlib.contextmanager",
        "functools.singledispatch",
        "importlib_resources._common.package_to_anchor"
    ],
    "importlib_resources.abc": [],
    "importlib_resources.compat.py38": [],
    "importlib_resources.abc.Traversable": [
        "<builtin>.property"
    ],
    "importlib_resources._common.package_to_anchor": [
        "<builtin>.object",
        "functools.wraps"
    ],
    "importlib_resources._functional": [
        "<builtin>.object"
    ],
    "jaraco.functools": [
        "jaraco.functools.first_invoke"
    ],
    "more_itertools": [],
    "jaraco.functools.Throttler": [
        "<builtin>.float"
    ],
    "<builtin>.float": [],
    "jaraco.functools.first_invoke": [],
    "jaraco.context": [
        "contextlib.contextmanager",
        "jaraco.context._compose"
    ],
    "urllib.request": [
        "re.compile",
        "append",
        "<builtin>.hasattr"
    ],
    "email": [],
    "http.client": [
        "<builtin>.globals",
        "re.compile"
    ],
    "email.message": [
        "re.compile"
    ],
    "uu": [],
    "email._encoded_words": [
        "re.compile",
        "<builtin>.ord"
    ],
    "email._encoded_words._QByteMap": [
        "<str>.encode"
    ],
    "email.iterators": [],
    "http": [],
    "http.client.HTTPConnection": [
        "<builtin>.staticmethod"
    ],
    "ssl": [
        "collections.namedtuple",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.SSLContext": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "ssl.SSLObject": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ssl.SSLSocket": [
        "ssl._sslcopydoc",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "urllib.error": [],
    "urllib.response": [],
    "urllib.response.addinfourl": [
        "<builtin>.property"
    ],
    "urllib.error.HTTPError": [
        "<builtin>.property"
    ],
    "urllib.request.Request": [
        "<builtin>.property"
    ],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "nturl2path": [],
    "tarfile": [],
    "tarfile.TarInfo": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.dict",
        "<builtin>.classmethod"
    ],
    "tarfile.TarFile": [
        "<builtin>.classmethod"
    ],
    "backports.tarfile": [
        "<builtin>.object"
    ],
    "backports.tarfile._FileInFile": [
        "<builtin>.property"
    ],
    "backports.tarfile.TarInfo": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.dict",
        "<builtin>.classmethod"
    ],
    "backports.tarfile.TarFile": [
        "<builtin>.classmethod"
    ],
    "jaraco.context._compose": [
        "<builtin>.reversed",
        "functools.reduce"
    ],
    "functools.reduce": [
        "<builtin>.TypeError",
        "jaraco.context._compose.compose_two",
        "pandas.core.computation.expr._compose2",
        "<builtin>.next",
        "<builtin>.iter"
    ],
    "jaraco.context._compose.compose_two": [
        "contextlib.contextmanager"
    ],
    "jaraco.context.ExceptionTrap": [
        "<builtin>.property"
    ],
    "jaraco.text.FoldedCase": [
        "jaraco.functools.method_cache"
    ],
    "jaraco.functools.method_cache": [
        "jaraco.functools._special_method_cache"
    ],
    "jaraco.functools._special_method_cache": [],
    "jaraco.context.ExceptionTrap.__init__": [],
    "jaraco.context.ExceptionTrap.passes": [
        "jaraco.context.ExceptionTrap.raises"
    ],
    "jaraco.context.ExceptionTrap.raises": [
        "functools.wraps"
    ],
    "importlib_resources._common.files": [
        "importlib_resources._common.from_package",
        "importlib_resources._common.resolve"
    ],
    "importlib_resources._common.resolve": [
        "typing.cast"
    ],
    "typing.cast": [],
    "importlib_resources._common.from_package": [
        "importlib_resources.future.adapters.wrap_spec"
    ],
    "importlib_resources.future.adapters": [],
    "importlib_resources.future.adapters.wrap_spec": [],
    "jaraco.text.WordSet": [
        "re.compile",
        "<builtin>.classmethod"
    ],
    "jaraco.text.Stripper": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "platformdirs": [
        "platformdirs._set_platform_dir_class"
    ],
    "platformdirs._set_platform_dir_class": [
        "os.getenv",
        "platformdirs.android._android_folder"
    ],
    "platformdirs.unix": [],
    "configparser": [
        "<builtin>.object"
    ],
    "configparser.ParsingError": [
        "<builtin>.property"
    ],
    "configparser.BasicInterpolation": [
        "re.compile"
    ],
    "configparser.ExtendedInterpolation": [
        "re.compile"
    ],
    "configparser.LegacyInterpolation": [
        "re.compile",
        "<builtin>.staticmethod"
    ],
    "configparser.RawConfigParser": [
        "re.compile",
        "<builtin>.property"
    ],
    "configparser.SectionProxy": [
        "<builtin>.property"
    ],
    "configparser.ConverterMapping": [
        "re.compile"
    ],
    "platformdirs.unix.Unix": [
        "<builtin>.property"
    ],
    "platformdirs.macos": [],
    "platformdirs.macos.MacOS": [
        "<builtin>.property"
    ],
    "platformdirs.windows": [
        "platformdirs.windows._pick_get_win_folder",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "platformdirs.windows.Windows": [
        "<builtin>.property"
    ],
    "platformdirs.windows._pick_get_win_folder": [],
    "os.getenv": [],
    "platformdirs.android": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "platformdirs.android.Android": [
        "<builtin>.property"
    ],
    "platformdirs.android._android_folder": [
        "re.compile",
        "typing.cast"
    ],
    "typing_extensions": [
        "typing_extensions._ensure_subclassable.inner",
        "typing._tp_cache",
        "<builtin>.type",
        "typing.TypeVar.__init__",
        "<builtin>.classmethod",
        "typing_extensions._SpecialGenericAlias.__init__",
        "<builtin>.frozenset",
        "typing_extensions._ensure_subclassable",
        "<builtin>.hasattr",
        "inspect.signature",
        "typing_extensions._SpecialForm.__init__",
        "typing_extensions._LiteralForm.__init__",
        "append",
        "<builtin>.getattr",
        "typing_extensions._UnpackSpecialForm.__init__"
    ],
    "typing_extensions._LiteralForm.__init__": [],
    "typing_extensions._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing_extensions.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsRound": [
        "abc.abstractmethod"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect._signature_from_callable": [
        "inspect._signature_is_functionlike",
        "<builtin>.type",
        "<builtin>.ValueError",
        "inspect._signature_from_builtin",
        "inspect.Signature.from_callable",
        "<builtin>.TypeError",
        "inspect._signature_get_user_defined_method",
        "inspect._signature_from_function",
        "inspect._signature_is_builtin",
        "inspect.unwrap",
        "inspect.isfunction",
        "inspect._signature_get_partial",
        "<builtin>.isinstance",
        "<builtin>.callable",
        "inspect._signature_bound_method"
    ],
    "inspect._signature_bound_method": [
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "inspect.unwrap": [
        "<builtin>.id",
        "<builtin>.len",
        "inspect.unwrap._is_wrapper",
        "<builtin>.ValueError"
    ],
    "<builtin>.id": [],
    "inspect.unwrap._is_wrapper": [
        "inspect._signature_from_callable.<lambda1>",
        "<builtin>.hasattr"
    ],
    "inspect._signature_from_callable.<lambda1>": [],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_is_functionlike": [
        "inspect.isclass",
        "<builtin>.isinstance",
        "<builtin>.callable",
        "<builtin>.getattr"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_from_function": [
        "inspect._signature_is_functionlike",
        "<builtin>.len",
        "inspect.get_annotations",
        "<builtin>.enumerate",
        "<builtin>.TypeError",
        "inspect.Signature.__init__",
        "inspect._signature_fromstr",
        "inspect.isfunction",
        "append",
        "<builtin>.getattr"
    ],
    "inspect._signature_fromstr": [
        "<builtin>.object",
        "<builtin>.ValueError",
        "<builtin>.list",
        "pop",
        "<builtin>.reversed",
        "<builtin>.enumerate",
        "inspect._signature_strip_non_python_syntax",
        "inspect.ismodule",
        "inspect.Signature.__init__",
        "<builtin>.zip",
        "ast.parse",
        "<builtin>.isinstance",
        "inspect._signature_fromstr.p",
        "<builtin>.getattr"
    ],
    "inspect._signature_strip_non_python_syntax": [
        "<builtin>.next",
        "tokenize.tokenize",
        "<builtin>.iter",
        ""
    ],
    "tokenize.tokenize": [
        "tokenize._tokenize",
        "<builtin>.iter",
        "tokenize.detect_encoding"
    ],
    "tokenize._tokenize": [
        "<builtin>.len",
        "<builtin>.IndentationError",
        "tokenize._compile",
        "<map>.get",
        "append"
    ],
    "<builtin>.IndentationError": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "ast.parse": [
        "<builtin>.isinstance",
        "<builtin>.compile"
    ],
    "inspect._signature_fromstr.p": [
        "ast.NodeVisitor.visit",
        "append",
        "ast.literal_eval",
        "inspect._signature_fromstr.parse_name"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "ast.literal_eval": [
        "ast.parse",
        "<builtin>.isinstance",
        "ast.literal_eval._convert"
    ],
    "ast.literal_eval._convert": [
        "ast.literal_eval._convert_num",
        "<builtin>.tuple",
        "<builtin>.len",
        "ast.literal_eval._convert_signed_num",
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.dict",
        "ast.literal_eval._raise_malformed_node",
        "<builtin>.zip",
        "<builtin>.map",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._convert_signed_num": [
        "ast.literal_eval._convert_num",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.isinstance",
        "<builtin>.type",
        "ast.literal_eval._raise_malformed_node"
    ],
    "ast.literal_eval._raise_malformed_node": [
        "<builtin>.ValueError",
        "<builtin>.getattr"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.Signature.__init__": [
        "collections.OrderedDict.__init__",
        "<builtin>.ValueError"
    ],
    "collections.OrderedDict.__init__": [],
    "inspect.get_annotations": [
        "<builtin>.vars",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.dict",
        "<builtin>.eval",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.callable",
        "<builtin>.getattr"
    ],
    "<builtin>.vars": [],
    "inspect._signature_is_builtin": [
        "<builtin>.isinstance",
        "inspect.ismethoddescriptor",
        "inspect.isbuiltin"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "<builtin>.type",
        "inspect.isclass",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "inspect.ismethod"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_from_builtin": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "inspect._signature_fromstr",
        "inspect._signature_is_builtin",
        "<builtin>.getattr"
    ],
    "inspect._signature_get_partial": [
        "collections.OrderedDict.values",
        "collections.OrderedDict.__init__",
        "<builtin>.ValueError",
        "collections.OrderedDict.pop",
        "collections.OrderedDict.move_to_end"
    ],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.move_to_end": [],
    "collections.OrderedDict.values": [],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr"
    ],
    "typing_extensions._ensure_subclassable": [],
    "typing_extensions._ensure_subclassable.inner": [
        "<builtin>.staticmethod",
        "functools.update_wrapper",
        "<builtin>.type"
    ],
    "typing_extensions.Annotated": [
        "typing._tp_cache"
    ],
    "typing_extensions.ParamSpec": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateGenericAlias": [
        "<builtin>.property"
    ],
    "typing_extensions._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialForm.__init__": [],
    "typing_extensions._UnpackSpecialForm.__init__": [
        "<builtin>.super"
    ],
    "pkg_resources.VersionConflict": [
        "<builtin>.property"
    ],
    "pkg_resources.ContextualVersionConflict": [
        "<builtin>.property"
    ],
    "pkg_resources.DistributionNotFound": [
        "<builtin>.property"
    ],
    "pkg_resources.WorkingSet": [
        "typing.overload",
        "<builtin>.classmethod"
    ],
    "pkg_resources.Environment": [
        "typing.overload",
        "pkg_resources.get_supported_platform"
    ],
    "pkg_resources.get_supported_platform": [
        "pkg_resources._macos_vers",
        "pkg_resources.get_build_platform"
    ],
    "pkg_resources.get_build_platform": [
        "pkg_resources._macos_vers",
        "sysconfig.get_platform",
        "pkg_resources._macos_arch",
        "<str>.startswith",
        "<builtin>.int"
    ],
    "sysconfig.get_platform": [
        "sysconfig.get_config_vars",
        "_osx_support.get_platform_osx",
        "re.compile",
        "<builtin>.int",
        "<builtin>.hasattr",
        "_aix_support.aix_platform"
    ],
    "_osx_support.get_platform_osx": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.ValueError",
        "re.findall",
        "<builtin>.set",
        "<builtin>.int",
        "<map>.get",
        "_osx_support._get_system_version",
        "<builtin>.sorted"
    ],
    "re.findall": [
        "re._compile"
    ],
    "_aix_support": [],
    "_bootsubprocess": [],
    "_aix_support.aix_platform": [
        "_aix_support._aix_bosmp64",
        "_aix_support._aix_vrtl",
        "_aix_support._aix_tag"
    ],
    "_aix_support._aix_bosmp64": [
        "_bootsubprocess.check_output",
        "<builtin>.int",
        "<builtin>.str"
    ],
    "_bootsubprocess.check_output": [
        "<builtin>.ValueError",
        "<builtin>.NotImplementedError",
        "<builtin>.open",
        "_bootsubprocess._check_cmd",
        "<builtin>.isinstance",
        "<builtin>.repr"
    ],
    "_bootsubprocess._check_cmd": [
        "<builtin>.isinstance",
        "<builtin>.ord",
        "<builtin>.range",
        "append"
    ],
    "_aix_support._aix_vrtl": [
        "<builtin>.int"
    ],
    "_aix_support._aix_tag": [],
    "pkg_resources._macos_vers": [
        "genericpath.exists",
        "plistlib.load",
        "platform.mac_ver",
        "<builtin>.open"
    ],
    "platform.mac_ver": [
        "platform._mac_ver_xml"
    ],
    "platform._mac_ver_xml": [
        "genericpath.exists",
        "plistlib.load",
        "<builtin>.open"
    ],
    "plistlib.load": [
        "<map>.values"
    ],
    "pkg_resources._macos_arch": [],
    "pkg_resources.ResourceManager": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources.NullProvider": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources.register_loader_type": [],
    "pkg_resources.DefaultProvider": [
        "<builtin>.classmethod"
    ],
    "pkg_resources.DefaultProvider._register": [
        "<builtin>.type",
        "<builtin>.getattr",
        "pkg_resources.register_loader_type"
    ],
    "pkg_resources.EmptyProvider.__init__": [],
    "pkg_resources.ZipManifests": [
        "<builtin>.classmethod"
    ],
    "pkg_resources.ZipProvider": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "pkg_resources._declare_state": [],
    "pkg_resources.register_finder": [],
    "pkg_resources.register_namespace_handler": [],
    "pkg_resources.EntryPoint": [
        "re.compile",
        "typing.overload",
        "<builtin>.classmethod"
    ],
    "pkg_resources.Distribution": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "typing.overload",
        "<builtin>.classmethod"
    ],
    "pkg_resources.DistInfoDistribution": [
        "re.compile",
        "<builtin>.property"
    ],
    "pkg_resources.Requirement": [
        "<builtin>.staticmethod"
    ],
    "pkg_resources._call_aside": [
        "pkg_resources._initialize",
        "pkg_resources._initialize_master_working_set"
    ],
    "pkg_resources._initialize": [
        "pkg_resources.ResourceManager.__init__",
        "<builtin>.dir",
        "<builtin>.getattr"
    ],
    "pkg_resources.ResourceManager.__init__": [],
    "<builtin>.dir": [],
    "pkg_resources._initialize_master_working_set": [
        "<builtin>.tuple",
        "<builtin>.globals",
        "<builtin>.list",
        "pkg_resources._declare_state",
        "<builtin>.locals",
        "<builtin>.map",
        "pkg_resources.WorkingSet._build_master",
        "pkg_resources.WorkingSet.subscribe"
    ],
    "pkg_resources.WorkingSet._build_master": [
        "pkg_resources.WorkingSet._build_from_requirements",
        "pkg_resources.WorkingSet.require",
        "pkg_resources.WorkingSet.__init__"
    ],
    "pkg_resources.WorkingSet.__init__": [
        "pkg_resources.WorkingSet.add_entry"
    ],
    "pkg_resources.WorkingSet.add_entry": [
        "pkg_resources.find_distributions",
        "pkg_resources.WorkingSet.add"
    ],
    "pkg_resources.find_distributions": [
        "pkg_resources._find_adapter",
        "pkgutil.get_importer"
    ],
    "pkgutil.get_importer": [],
    "pkg_resources._find_adapter": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "pkg_resources._always_object",
        "inspect.getmro",
        "<builtin>.getattr"
    ],
    "inspect.getmro": [],
    "pkg_resources._always_object": [],
    "pkg_resources.WorkingSet.add": [
        "pkg_resources.WorkingSet._added_new"
    ],
    "pkg_resources.WorkingSet._added_new": [],
    "__main__": [],
    "argparse": [],
    "gettext": [
        "re.compile",
        "ntpath.join",
        "<builtin>.enumerate",
        "posixpath.join"
    ],
    "formats": [],
    "jarvis": [],
    "processing.extProcessor": [],
    "machinery.definitions": [],
    "utils": [],
    "heapq": [],
    "machinery.gol": [],
    "machinery.definitions.PointItem": [
        "<builtin>.set"
    ],
    "machinery.classes": [],
    "machinery.scopes": [],
    "symtable": [
        "symtable.SymbolTableFactory.__init__"
    ],
    "symtable.SymbolTableFactory.__init__": [
        "weakref.WeakValueDictionary.__init__"
    ],
    "processing.base": [],
    "processing.base.ProcessingBase": [
        "<builtin>.property"
    ],
    "machinery.imports": [],
    "machinery.nodes": [],
    "machinery.modules": [],
    "machinery.callgraph": [],
    "processing.extProcessor.ExtProcessor": [
        "<builtin>.set"
    ],
    "machinery.returns": [],
    "jarvis.CallGraphGenerator": [
        "<builtin>.set"
    ],
    "utils.constants": [],
    "pkg_resources.WorkingSet.require": [
        "pkg_resources.parse_requirements",
        "pkg_resources.WorkingSet.add",
        "pkg_resources.WorkingSet.resolve"
    ],
    "pkg_resources.parse_requirements": [
        "<builtin>.map",
        "jaraco.text.yield_lines",
        "jaraco.text.join_continuation"
    ],
    "jaraco.text.yield_lines": [
        "<builtin>.map"
    ],
    "jaraco.text.join_continuation": [
        "<builtin>.next",
        "<builtin>.iter"
    ],
    "pkg_resources.WorkingSet.resolve": [],
    "pkg_resources.WorkingSet._build_from_requirements": [
        "pkg_resources.WorkingSet.__init__",
        "pkg_resources.WorkingSet.add_entry",
        "pkg_resources.WorkingSet.resolve",
        "pkg_resources.parse_requirements",
        "pkg_resources.Environment.__init__",
        "pkg_resources.WorkingSet.add"
    ],
    "pkg_resources.Environment.__init__": [
        "pkg_resources.Environment.scan"
    ],
    "pkg_resources.Environment.scan": [
        "pkg_resources.find_distributions",
        "pkg_resources.Environment.add"
    ],
    "pkg_resources.Environment.add": [
        "pkg_resources.Environment.can_add",
        "operator.attrgetter.__init__"
    ],
    "pkg_resources.Environment.can_add": [
        "pkg_resources.compatible_platforms"
    ],
    "pkg_resources.compatible_platforms": [
        "<builtin>.int"
    ],
    "pkg_resources.WorkingSet.subscribe": [
        "pkg_resources._initialize_master_working_set.<lambda1>",
        "pkg_resources.WorkingSet.__iter__"
    ],
    "pkg_resources.WorkingSet.__iter__": [
        "<builtin>.set"
    ],
    "pkg_resources._initialize_master_working_set.<lambda1>": [],
    "pandas.errors": [],
    "pandas._config.config": [
        "pandas._config.config.DictWrapper.__init__",
        "pandas._config.config.is_instance_factory",
        "contextlib.contextmanager",
        "pandas._config.config.CallableDynamicDoc.__init__",
        "pandas._config.config.is_type_factory"
    ],
    "pandas.util._exceptions": [
        "contextlib.contextmanager"
    ],
    "pandas._config.config.CallableDynamicDoc": [
        "<builtin>.property"
    ],
    "pandas._config.config.CallableDynamicDoc.__init__": [],
    "pandas._config.config.DictWrapper.__init__": [],
    "pandas._config.config.is_type_factory": [],
    "pandas._config.config.is_instance_factory": [
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.isinstance"
    ],
    "pandas.core.dtypes.base": [
        "typing.TypeVar.__init__",
        "pandas.core.dtypes.base.Registry.__init__"
    ],
    "pandas.core.dtypes.generic": [
        "typing.cast",
        "pandas.core.dtypes.generic.create_pandas_abc_type"
    ],
    "pandas.core.arrays": [],
    "pandas.core.arrays.arrow": [],
    "pandas.core.arrays.arrow.accessors": [],
    "pandas.core.dtypes.common": [],
    "pandas.core.dtypes.inference": [],
    "pandas.core.arrays.arrow.accessors.ArrowAccessor": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.core.arrays.arrow.accessors.StructAccessor": [
        "<builtin>.property"
    ],
    "pandas.core.arrays.arrow.array": [],
    "pandas.util._decorators": [],
    "pandas.util._validators": [
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pandas.core.dtypes.cast": [
        "<builtin>.type",
        "typing.overload",
        "functools.lru_cache",
        "typing.TypeVar.__init__",
        "numpy.core.iinfo"
    ],
    "pandas._config": [],
    "pandas._config.dates": [
        "pandas._config.config.config_prefix"
    ],
    "pandas._config.config.config_prefix": [
        "pandas._config.config.config_prefix.wrap"
    ],
    "pandas._config.config.config_prefix.wrap": [
        "typing.cast"
    ],
    "pandas._config.display": [
        "pandas._config.config.config_prefix"
    ],
    "pandas.core.dtypes.missing": [
        "typing.overload"
    ],
    "pandas.core.indexes.base": [
        "<builtin>.frozenset"
    ],
    "pandas.compat.numpy.function": [
        "pandas.compat.numpy.function.CompatValidator.__init__",
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pandas.compat.numpy.function.CompatValidator.__init__": [],
    "pandas.core.dtypes.astype": [
        "typing.overload"
    ],
    "pandas.core.dtypes.concat": [],
    "pandas.core.arraylike": [],
    "pandas.core.roperator": [],
    "pandas.core.construction": [
        "typing.overload",
        "<builtin>.frozenset"
    ],
    "pandas.core.common": [
        "contextlib.contextmanager",
        "typing.overload"
    ],
    "pandas.core.arrays.base": [],
    "pandas.core.missing": [
        "typing.overload",
        "pandas.core.missing._datetimelike_compat"
    ],
    "pandas.compat._optional": [],
    "pandas.core.missing._datetimelike_compat": [
        "typing.cast",
        "functools.wraps"
    ],
    "pandas.core.algorithms": [
        "pandas.util._decorators.doc.decorator",
        "textwrap.dedent",
        "pandas.util._decorators.doc"
    ],
    "pandas.core.array_algos.take": [
        "pandas.core.array_algos.take._view_wrapper",
        "typing.overload",
        "functools.lru_cache"
    ],
    "pandas.core.arrays._mixins": [],
    "pandas.core.array_algos.quantile": [],
    "pandas.core.array_algos.transforms": [],
    "pandas.core.indexers": [],
    "pandas.core.indexers.utils": [],
    "pandas.core.frame": [],
    "pandas.core.nanops": [
        "pandas.core.nanops._nanminmax",
        "pandas.core.nanops.maybe_operate_rowwise",
        "pandas.core.nanops.set_use_bottleneck",
        "pandas.compat._optional.import_optional_dependency",
        "pandas.core.nanops.disallow.__init__",
        "pandas.core.nanops._datetimelike_compat",
        "pandas.core.nanops.bottleneck_switch.__init__",
        "pandas._config.config.CallableDynamicDoc.__init__"
    ],
    "pandas.compat._optional.import_optional_dependency": [
        "importlib.import_module",
        "pandas.util._exceptions.find_stack_level",
        "<builtin>.ImportError",
        "warnings.warn",
        "pandas.util.version.Version.__init__",
        "pandas.compat._optional.get_version",
        "<map>.get"
    ],
    "importlib.import_module": [
        "<builtin>.TypeError",
        "<str>.startswith"
    ],
    "pandas.compat._optional.get_version": [
        "<builtin>.ImportError",
        "<builtin>.getattr"
    ],
    "pandas.util._exceptions.find_stack_level": [
        "ntpath.dirname",
        "ntpath.join",
        "inspect.getfile",
        "posixpath.dirname",
        "inspect.currentframe",
        "posixpath.join"
    ],
    "inspect.currentframe": [
        "<builtin>.hasattr"
    ],
    "inspect.getfile": [
        "<builtin>.OSError",
        "<builtin>.type",
        "inspect.isclass",
        "inspect.isframe",
        "<builtin>.TypeError",
        "inspect.ismodule",
        "inspect.istraceback",
        "inspect.iscode",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "inspect.ismethod",
        "<builtin>.getattr"
    ],
    "<builtin>.OSError": [],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "pandas.core.nanops.set_use_bottleneck": [],
    "pandas.core.nanops.maybe_operate_rowwise": [
        "typing.cast",
        "functools.wraps"
    ],
    "pandas.core.nanops._datetimelike_compat": [
        "typing.cast",
        "functools.wraps"
    ],
    "pandas.core.nanops.disallow.__init__": [
        "<builtin>.tuple",
        "pandas.core.dtypes.common.pandas_dtype",
        "<builtin>.super"
    ],
    "pandas.core.dtypes.common.pandas_dtype": [
        "pandas.util._exceptions.find_stack_level",
        "warnings.warn",
        "warnings.catch_warnings.__init__",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "pandas.core.dtypes.inference.is_hashable"
    ],
    "pandas.core.dtypes.inference.is_hashable": [
        "<builtin>.hash"
    ],
    "<builtin>.hash": [],
    "pandas.core.nanops.bottleneck_switch.__init__": [],
    "pandas.core.nanops._nanminmax": [
        "pandas.core.nanops._datetimelike_compat",
        "pandas.core.nanops.bottleneck_switch.__init__"
    ],
    "pandas.core.ops": [],
    "pandas.core.ops.array_ops": [],
    "pandas.core.computation.expressions": [
        "pandas._config.config.CallableDynamicDoc.__init__",
        "pandas.core.computation.expressions.set_use_numexpr"
    ],
    "pandas.core.computation.check": [
        "pandas.compat._optional.import_optional_dependency"
    ],
    "pandas.core.computation.expressions.set_use_numexpr": [],
    "pandas.core.ops.missing": [],
    "pandas.core.ops.dispatch": [],
    "pandas.core.ops.invalid": [],
    "pandas.core.ops.common": [],
    "pandas.core.ops.docstrings": [
        "<builtin>.list"
    ],
    "pandas.core.ops.mask_ops": [],
    "pandas.core.accessor": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc"
    ],
    "pandas.core.accessor.DirNamesMixin": [
        "typing.final",
        "<builtin>.frozenset",
        "<builtin>.set"
    ],
    "typing.final": [],
    "pandas.core.accessor.PandasDelegate": [
        "<builtin>.classmethod"
    ],
    "pandas.util._decorators.doc": [],
    "pandas.util._decorators.doc.decorator": [
        "<builtin>.len",
        "textwrap.dedent",
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "pandas.core.apply": [],
    "pandas.core._numba.executor": [
        "functools.cache"
    ],
    "functools.cache": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "pandas.core.groupby": [],
    "pandas.core.groupby.generic": [
        "typing.TypeVar.__init__"
    ],
    "pandas.core.groupby.base": [
        "<builtin>.frozenset"
    ],
    "dataclasses": [
        "dataclasses._FIELD_BASE.__init__",
        "re.compile"
    ],
    "dataclasses._FIELD_BASE.__init__": [],
    "dataclasses.Field": [
        "<builtin>.classmethod"
    ],
    "pandas.core.groupby.ops": [],
    "pandas.core.groupby.grouper": [],
    "pandas.core.groupby.categorical": [],
    "pandas.core.arrays.categorical": [],
    "csv": [],
    "csv.DictReader": [
        "<builtin>.property"
    ],
    "pandas.core.base": [],
    "pandas.core.base.PandasObject": [
        "<builtin>.property"
    ],
    "pandas.core.base.SelectionMixin": [
        "typing.final",
        "<builtin>.property",
        "<builtin>.set"
    ],
    "pandas.core.base.IndexOpsMixin": [
        "typing.final",
        "<builtin>.property",
        "textwrap.dedent",
        "typing.overload",
        "<builtin>.frozenset",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.sorting": [],
    "pandas.core.strings.object_array": [],
    "pandas.core.strings.base": [],
    "pandas.core.strings.base.BaseStringArrayMethods": [
        "abc.abstractmethod"
    ],
    "pandas.io.formats.console": [],
    "pandas.core.arrays.categorical.Categorical": [
        "<builtin>.property",
        "typing.overload",
        "pandas.core.arrays.categorical._cat_compare_op",
        "<builtin>.classmethod",
        "pandas.core.arrays._mixins.ravel_compat",
        "<builtin>.frozenset"
    ],
    "pandas.core.arrays.categorical._cat_compare_op": [
        "pandas.core.ops.common.unpack_zerodim_and_defer",
        "pandas.core.ops.common.unpack_zerodim_and_defer.wrapper"
    ],
    "pandas.core.ops.common.unpack_zerodim_and_defer": [],
    "pandas.core.ops.common.unpack_zerodim_and_defer.wrapper": [
        "pandas.core.ops.common._unpack_zerodim_and_defer"
    ],
    "pandas.core.ops.common._unpack_zerodim_and_defer": [
        "<str>.removeprefix",
        "functools.wraps",
        "<str>.removesuffix"
    ],
    "<str>.removeprefix": [],
    "<str>.removesuffix": [],
    "pandas.core.arrays._mixins.ravel_compat": [],
    "pandas.core.arrays.categorical.CategoricalAccessor": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "pandas.core.indexes.api": [
        "textwrap.dedent"
    ],
    "pandas.core.indexes.category": [],
    "pandas.core.indexes.extension": [
        "typing.TypeVar.__init__"
    ],
    "pandas.core.indexes.category.CategoricalIndex": [
        "pandas.util._decorators.doc.decorator",
        "<builtin>.property",
        "pandas.util._decorators.doc"
    ],
    "pandas.core.indexes.datetimes": [],
    "pandas.core.arrays.datetimes": [
        "typing.overload"
    ],
    "pandas.core.arrays.datetimelike": [
        "typing.overload"
    ],
    "pandas.core.array_algos.datetimelike_accumulations": [],
    "pandas.core.arrays.integer": [],
    "pandas.core.arrays.numeric": [],
    "pandas.core.arrays.masked": [],
    "pandas.core.array_algos.masked_accumulations": [],
    "pandas.core.array_algos.masked_reductions": [],
    "pandas.core.arrays._utils": [],
    "pandas.core.util.hashing": [],
    "pandas.core.arrays.masked.BaseMaskedArray": [
        "<builtin>.property",
        "typing.overload",
        "<builtin>.classmethod",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.arrays.numeric.NumericDtype": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.numeric.NumericArray": [
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.integer.IntegerDtype": [
        "<builtin>.classmethod"
    ],
    "pandas.tseries.frequencies": [],
    "pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin": [
        "pandas.core.arrays.datetimelike._period_dispatch",
        "typing.final",
        "<builtin>.property",
        "typing.overload",
        "pandas.core.ops.common.unpack_zerodim_and_defer",
        "pandas.core.ops.common.unpack_zerodim_and_defer.wrapper",
        "pandas.core.arrays._mixins.ravel_compat",
        "pandas.core.arrays.datetimelike._make_unpacked_invalid_op"
    ],
    "pandas.core.arrays.datetimelike._make_unpacked_invalid_op": [
        "pandas.core.ops.common.unpack_zerodim_and_defer",
        "pandas.core.ops.common.unpack_zerodim_and_defer.wrapper",
        "pandas.core.ops.invalid.make_invalid_op"
    ],
    "pandas.core.ops.invalid.make_invalid_op": [],
    "pandas.core.arrays.datetimelike._period_dispatch": [
        "typing.cast",
        "functools.wraps"
    ],
    "pandas.core.arrays.datetimelike.DatelikeOps": [
        "pandas.util._decorators.Substitution.__init__"
    ],
    "pandas.util._decorators.Substitution.__init__": [
        "<builtin>.AssertionError"
    ],
    "pandas.core.arrays.datetimelike.TimelikeOps": [
        "typing.final",
        "<builtin>.property",
        "pandas.util._decorators.Appender.__init__",
        "<builtin>.classmethod"
    ],
    "pandas.util._decorators.Appender.__init__": [
        "pandas.util._decorators.indent"
    ],
    "pandas.util._decorators.indent": [
        "<builtin>.isinstance"
    ],
    "pandas.core.arrays._ranges": [],
    "pandas.tseries.offsets": [],
    "pandas.core.arrays.datetimes.DatetimeArray": [
        "pandas.core.arrays._mixins.ravel_compat",
        "<builtin>.property",
        "pandas.core.arrays.datetimes._field_accessor",
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.datetimes._field_accessor": [
        "<builtin>.property"
    ],
    "pandas.core.indexes.datetimelike": [
        "<builtin>.dict"
    ],
    "pandas.core.indexes.range": [
        "<builtin>.range"
    ],
    "pandas.core.indexes.range.RangeIndex": [
        "<builtin>.property",
        "typing.overload",
        "pandas.core.ops.common.unpack_zerodim_and_defer",
        "pandas.core.ops.common.unpack_zerodim_and_defer.wrapper",
        "<builtin>.classmethod",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.deprecate_nonkeyword_arguments",
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.deprecate_nonkeyword_arguments.decorate"
    ],
    "pandas.util._decorators.deprecate_nonkeyword_arguments": [],
    "pandas.util._decorators.deprecate_nonkeyword_arguments.decorate": [
        "functools.wraps",
        "<builtin>.len",
        "inspect.signature",
        "pandas.util._decorators.future_version_msg"
    ],
    "pandas.util._decorators.future_version_msg": [],
    "pandas.core.tools.timedeltas": [
        "typing.overload"
    ],
    "pandas.core.arrays.timedeltas": [],
    "pandas.core.arrays.timedeltas.TimedeltaArray": [
        "textwrap.dedent",
        "<builtin>.property",
        "pandas.core.ops.common.unpack_zerodim_and_defer",
        "pandas.core.ops.common.unpack_zerodim_and_defer.wrapper",
        "<builtin>.classmethod",
        "pandas.core.arrays.timedeltas._field_accessor"
    ],
    "pandas.core.arrays.timedeltas._field_accessor": [
        "<builtin>.property"
    ],
    "pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin": [
        "typing.final",
        "<builtin>.property",
        "pandas.util._decorators.Appender.__init__",
        "abc.abstractmethod",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.indexes.datetimelike.DatetimeTimedeltaMixin": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.Appender.__init__",
        "<builtin>.property",
        "pandas.util._decorators.doc"
    ],
    "pandas.core.tools.times": [],
    "pandas.core.api": [],
    "pandas.core.arrays.boolean": [],
    "pandas.core.arrays.boolean.BooleanDtype": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.boolean.BooleanArray": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.floating": [],
    "pandas.core.arrays.floating.FloatingDtype": [
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.string_": [],
    "pandas.core.arrays.numpy_": [],
    "pandas.core.arrays.numpy_.NumpyExtensionArray": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.string_.StringDtype": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.string_.BaseStringArray": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc",
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.string_.StringArray": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc",
        "<builtin>.classmethod"
    ],
    "pandas.core.flags": [],
    "pandas.core.generic": [],
    "pandas.core.indexing": [
        "<builtin>.slice",
        "typing.TypeVar.__init__"
    ],
    "<builtin>.slice": [],
    "pandas.core.indexing.IndexingMixin": [
        "<builtin>.property"
    ],
    "pandas.core.indexing._LocationIndexer": [
        "typing.final"
    ],
    "pandas.core.indexing._LocIndexer": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc"
    ],
    "pandas.core.indexing._AtIndexer": [
        "<builtin>.property"
    ],
    "pandas.core.sample": [],
    "pandas.core.array_algos.replace": [],
    "pandas.core.internals": [],
    "pandas.core.internals.api": [],
    "pandas.core.internals.blocks": [],
    "pandas.core.array_algos.putmask": [],
    "pandas.core.internals.blocks.Block": [
        "typing.final",
        "<builtin>.property",
        "pandas.core.internals.blocks.maybe_split"
    ],
    "pandas.core.internals.blocks.maybe_split": [
        "typing.cast",
        "functools.wraps"
    ],
    "pandas.core.internals.blocks.EABackedBlock": [
        "typing.final"
    ],
    "pandas.core.internals.blocks.ExtensionBlock": [
        "typing.final",
        "<builtin>.property"
    ],
    "pandas.core.internals.blocks.NumpyBlock": [
        "<builtin>.property"
    ],
    "pandas.core.internals.blocks.NDArrayBackedExtensionBlock": [
        "<builtin>.property"
    ],
    "pandas.core.internals.array_manager": [],
    "pandas.core.internals.base": [],
    "pandas.core.internals.base.DataManager": [
        "typing.final",
        "<builtin>.property"
    ],
    "pandas.core.internals.base.SingleDataManager": [
        "typing.final",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.internals.managers": [],
    "pandas.core.internals.ops": [],
    "pandas.api.extensions": [],
    "pandas.core.internals.managers.BaseBlockManager": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.internals.managers.BlockManager": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.internals.managers.SingleBlockManager": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.internals.array_manager.BaseArrayManager": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "pandas.core.internals.array_manager.ArrayManager": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.internals.array_manager.SingleArrayManager": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.internals.array_manager.NullArrayProxy": [
        "<builtin>.property"
    ],
    "pandas.core.internals.concat": [],
    "pandas.core.internals.construction": [],
    "pandas.core.methods.describe": [],
    "pandas.core.reshape.concat": [
        "typing.overload"
    ],
    "pandas.io.formats.format": [
        "contextlib.contextmanager"
    ],
    "pandas.core.indexes.timedeltas": [],
    "pandas.core.indexes.timedeltas.TimedeltaIndex": [
        "<builtin>.property"
    ],
    "pandas.io.common": [
        "typing.overload",
        "typing.TypeVar.__init__",
        "functools.lru_cache",
        "<builtin>.set",
        "re.compile",
        "<map>.values",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.shared_docs": [],
    "pandas.io.common.IOHandles": [
        "dataclasses.field"
    ],
    "dataclasses.field": [
        "dataclasses.Field.__init__",
        "<builtin>.ValueError"
    ],
    "dataclasses.Field.__init__": [],
    "pandas.io.common._BufferedWriter": [
        "abc.abstractmethod"
    ],
    "pandas.io.formats.printing": [
        "typing.TypeVar.__init__"
    ],
    "pandas.io.formats.format.DataFrameFormatter": [
        "<builtin>.property"
    ],
    "pandas.core.methods.describe.NDFrameDescriberAbstract": [
        "abc.abstractmethod"
    ],
    "pandas.core.window": [],
    "pandas.core.window.ewm": [],
    "pandas.core.indexers.objects": [],
    "pandas.core.indexers.objects.BaseIndexer": [
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.indexers.objects.FixedWindowIndexer": [
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.indexers.objects.VariableWindowIndexer": [
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.indexers.objects.VariableOffsetWindowIndexer": [
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.indexers.objects.ExpandingIndexer": [
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.indexers.objects.FixedForwardWindowIndexer": [
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.indexers.objects.GroupbyIndexer": [
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.indexers.objects.ExponentialMovingWindowIndexer": [
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.util.numba_": [],
    "pandas.core.window.common": [],
    "pandas.core.window.doc": [
        "textwrap.dedent",
        "<builtin>.dict"
    ],
    "pandas.core.window.numba_": [
        "functools.cache"
    ],
    "pandas.core.window.online": [],
    "pandas.core.window.rolling": [],
    "pandas.core.window.rolling.BaseWindow": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "pandas.core.window.rolling.Window": [
        "pandas.util._decorators.doc.decorator",
        "textwrap.dedent",
        "pandas.util._decorators.doc",
        "pandas.core.window.doc.create_section_header"
    ],
    "pandas.core.window.doc.create_section_header": [
        "<builtin>.len"
    ],
    "pandas.core.window.rolling.Rolling": [
        "pandas.core.window.doc.window_agg_numba_parameters",
        "textwrap.dedent",
        "pandas.util._decorators.deprecate_kwarg._deprecate_kwarg",
        "pandas.util._decorators.deprecate_kwarg",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator",
        "pandas.core.window.doc.create_section_header"
    ],
    "pandas.core.window.doc.window_agg_numba_parameters": [
        "textwrap.dedent"
    ],
    "pandas.util._decorators.deprecate_kwarg": [
        "<builtin>.TypeError",
        "<builtin>.callable",
        "<builtin>.hasattr"
    ],
    "pandas.util._decorators.deprecate_kwarg._deprecate_kwarg": [
        "typing.cast",
        "functools.wraps"
    ],
    "pandas.core.window.ewm.ExponentialMovingWindow": [
        "pandas.core.window.doc.window_agg_numba_parameters",
        "textwrap.dedent",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator",
        "pandas.core.window.doc.create_section_header"
    ],
    "pandas.core.window.expanding": [],
    "pandas.core.window.expanding.Expanding": [
        "pandas.core.window.doc.window_agg_numba_parameters",
        "textwrap.dedent",
        "pandas.util._decorators.deprecate_kwarg._deprecate_kwarg",
        "pandas.util._decorators.deprecate_kwarg",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator",
        "pandas.core.window.doc.create_section_header"
    ],
    "pandas.core.resample": [],
    "pandas.core.groupby.groupby": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc",
        "typing.TypeVar.__init__"
    ],
    "pandas.core.arrays.string_arrow": [],
    "pandas.core.arrays._arrow_string_mixins": [],
    "pandas.core.arrays.arrow._arrow_utils": [],
    "pandas.core.arrays.string_arrow.ArrowStringArray": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.string_arrow.ArrowStringArrayNumpySemantics": [
        "<builtin>.classmethod"
    ],
    "pandas.core.groupby.numba_": [
        "functools.cache"
    ],
    "pandas.core.groupby.indexing": [],
    "pandas.core.series": [],
    "pandas.core.arrays.sparse": [],
    "pandas.core.arrays.sparse.accessor": [],
    "pandas.core.arrays.sparse.array": [
        "typing.overload",
        "<builtin>.type"
    ],
    "scipy.sparse": [
        "warnings.filterwarnings",
        "<builtin>.dir",
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.sparse._base": [
        "<builtin>.frozenset"
    ],
    "scipy.sparse._sputils": [],
    "scipy._lib._util": [
        "collections.namedtuple",
        "contextlib.contextmanager",
        "typing.TypeVar.__init__"
    ],
    "scipy.sparse._base.spmatrix": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "scipy.sparse._csr": [],
    "scipy.sparse._compressed": [],
    "scipy.sparse._data": [
        "scipy.sparse._data._create_method",
        "<builtin>.setattr"
    ],
    "scipy.sparse._data._data_matrix": [
        "<builtin>.property"
    ],
    "scipy.sparse._data._create_method": [],
    "<builtin>.setattr": [],
    "scipy.sparse._index": [],
    "scipy.sparse._compressed._cs_matrix": [
        "<builtin>.property"
    ],
    "scipy.sparse._csc": [],
    "scipy.sparse._lil": [],
    "scipy.sparse._dok": [],
    "scipy.sparse._dok.dok_matrix": [
        "<builtin>.property"
    ],
    "scipy.sparse._coo": [],
    "scipy.sparse._dia": [],
    "scipy.sparse._bsr": [],
    "scipy.sparse._bsr.bsr_matrix": [
        "<builtin>.property"
    ],
    "scipy.sparse._construct": [],
    "scipy.sparse._extract": [],
    "scipy.sparse._matrix_io": [
        "<builtin>.dict"
    ],
    "scipy.sparse._arrays": [
        "scipy.sparse._arrays._matrix_doc_to_array"
    ],
    "scipy.sparse._arrays._sparray": [
        "<builtin>.property"
    ],
    "scipy.sparse._arrays._matrix_doc_to_array": [],
    "scipy.sparse.csgraph": [
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.sparse.csgraph._laplacian": [],
    "scipy.sparse.linalg": [
        "<builtin>.dir",
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.sparse.linalg._isolve": [
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.sparse.linalg._isolve.iterative": [
        "scipy._lib._threadsafety.non_reentrant",
        "scipy.sparse.linalg._isolve.iterative.set_docstring",
        "scipy._lib._threadsafety.non_reentrant.decorator",
        "scipy.sparse.linalg._isolve.iterative.set_docstring.combine"
    ],
    "scipy.sparse.linalg._interface": [],
    "scipy.sparse.linalg._interface.LinearOperator": [
        "<builtin>.property"
    ],
    "scipy.sparse.linalg._interface._AdjointMatrixOperator": [
        "<builtin>.property"
    ],
    "scipy.sparse.linalg._isolve.utils": [],
    "scipy._lib._threadsafety": [],
    "scipy._lib.decorator": [
        "inspect.getfullargspec",
        "<builtin>.len",
        "re.compile",
        "scipy._lib.decorator.decorator",
        "collections.namedtuple"
    ],
    "scipy._lib.decorator.FunctionMaker": [
        "<builtin>.classmethod"
    ],
    "inspect.getfullargspec": [
        "<builtin>.TypeError",
        "inspect._signature_from_callable",
        "append"
    ],
    "scipy._lib.decorator.decorator": [
        "scipy._lib.decorator.get_init",
        "inspect.isclass",
        "inspect.isfunction",
        "scipy._lib.decorator.FunctionMaker.create",
        "scipy._lib.decorator.decorate"
    ],
    "scipy._lib.decorator.decorate": [
        "scipy._lib.decorator.FunctionMaker.create",
        "<builtin>.hasattr"
    ],
    "scipy._lib.decorator.FunctionMaker.create": [
        "<str>.splitlines",
        "scipy._lib.decorator.FunctionMaker.__init__",
        "<str>.strip",
        "scipy._lib.decorator.FunctionMaker.make",
        "<builtin>.isinstance"
    ],
    "scipy._lib.decorator.FunctionMaker.__init__": [
        "inspect.getfullargspec",
        "<builtin>.list",
        "<builtin>.setattr",
        "<builtin>.enumerate",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "<builtin>.getattr"
    ],
    "<str>.splitlines": [],
    "scipy._lib.decorator.FunctionMaker.make": [
        "<builtin>.vars",
        "<builtin>.print",
        "<builtin>.next",
        "scipy._lib.decorator.FunctionMaker.update",
        "<builtin>.set",
        "<str>.endswith",
        "<builtin>.compile",
        "<builtin>.exec",
        "<builtin>.NameError",
        "<builtin>.SyntaxError"
    ],
    "<builtin>.NameError": [],
    "<builtin>.exec": [],
    "scipy._lib.decorator.FunctionMaker.update": [
        "<builtin>.getattr"
    ],
    "scipy._lib.decorator.get_init": [],
    "scipy._lib._threadsafety.non_reentrant": [],
    "scipy._lib._threadsafety.non_reentrant.decorator": [
        "scipy._lib._threadsafety.ReentrancyLock.decorate",
        "scipy._lib._threadsafety.ReentrancyLock.__init__"
    ],
    "scipy._lib._threadsafety.ReentrancyLock.__init__": [
        "threading.RLock"
    ],
    "scipy._lib._threadsafety.ReentrancyLock.decorate": [],
    "scipy.sparse.linalg._isolve.iterative.set_docstring": [],
    "scipy.sparse.linalg._isolve.iterative.set_docstring.combine": [
        "textwrap.dedent"
    ],
    "scipy.sparse.linalg._isolve.minres": [],
    "scipy.sparse.linalg._isolve.lgmres": [],
    "scipy.linalg": [
        "<builtin>.dir",
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.linalg._misc": [],
    "scipy.linalg.blas": [
        "scipy.linalg.blas._memoize_get_funcs"
    ],
    "scipy.linalg.blas._memoize_get_funcs": [
        "functools.wraps"
    ],
    "scipy.linalg.lapack": [
        "re.compile",
        "scipy._lib._util.DeprecatedImport.__init__",
        "numpy.core.iinfo",
        "scipy.linalg.blas._memoize_get_funcs"
    ],
    "scipy._lib._util.DeprecatedImport.__init__": [
        "<builtin>.__import__"
    ],
    "numpy.core.iinfo": [],
    "scipy.linalg._basic": [],
    "scipy.linalg._flinalg_py": [],
    "scipy.linalg._decomp": [],
    "scipy.linalg._decomp_svd": [],
    "scipy.linalg._decomp_lu": [],
    "scipy.linalg._decomp_ldl": [],
    "scipy.linalg._decomp_cholesky": [],
    "scipy.linalg._decomp_qr": [],
    "scipy.linalg._decomp_qz": [],
    "scipy.linalg._decomp_schur": [
        "numpy.core.finfo"
    ],
    "numpy.core.finfo": [],
    "scipy.linalg._decomp_polar": [],
    "scipy.linalg._matfuncs": [
        "numpy.core.finfo"
    ],
    "scipy.linalg._special_matrices": [],
    "scipy.linalg._expm_frechet": [],
    "scipy.linalg._matfuncs_sqrtm": [],
    "scipy.linalg._solvers": [],
    "scipy.linalg._procrustes": [],
    "scipy.linalg._sketches": [],
    "scipy.linalg._decomp_cossin": [],
    "scipy.linalg.decomp": [],
    "scipy.linalg.decomp_cholesky": [],
    "scipy.linalg.decomp_lu": [],
    "scipy.linalg.decomp_qr": [],
    "scipy.linalg.decomp_svd": [],
    "scipy.linalg.decomp_schur": [],
    "scipy.linalg.basic": [],
    "scipy.linalg.misc": [],
    "scipy.linalg.special_matrices": [],
    "scipy.linalg.flinalg": [],
    "scipy.linalg.matfuncs": [],
    "scipy._lib._testutils": [],
    "scipy._lib._testutils.PytestTester.__init__": [],
    "scipy.sparse.linalg._isolve._gcrotmk": [],
    "scipy.sparse.linalg._isolve.lsqr": [
        "numpy.core.finfo"
    ],
    "scipy.sparse.linalg._isolve.lsmr": [],
    "scipy.sparse.linalg._isolve.tfqmr": [],
    "scipy.sparse.linalg._dsolve": [
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.sparse.linalg._dsolve.linsolve": [
        "<builtin>.dict"
    ],
    "scipy.sparse.linalg._dsolve._add_newdocs": [
        "numpy.core.function_base.add_newdoc"
    ],
    "scipy.sparse.linalg._eigen": [
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.sparse.linalg._eigen.arpack": [],
    "scipy.sparse.linalg._eigen.arpack.arpack": [
        "<map>.copy",
        "scipy._lib._threadsafety.ReentrancyLock.__init__"
    ],
    "<map>.copy": [],
    "scipy.sparse.linalg._eigen.arpack.arpack.IterOpInv": [
        "<builtin>.property"
    ],
    "scipy.sparse.linalg._eigen.lobpcg": [
        "<builtin>.dir",
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.sparse.linalg._eigen.lobpcg.lobpcg": [],
    "scipy.sparse.linalg._eigen._svds": [],
    "scipy.sparse.linalg._svdp": [],
    "scipy.sparse.linalg._svdp._AProd": [
        "<builtin>.property"
    ],
    "scipy.sparse.linalg._matfuncs": [],
    "scipy.sparse.linalg._expm_multiply": [],
    "scipy.sparse.linalg._onenormest": [
        "scipy.sparse.linalg._onenormest._blocked_elementwise"
    ],
    "scipy.sparse.linalg._onenormest._blocked_elementwise": [],
    "scipy.sparse.linalg._matfuncs.MatrixPowerOperator": [
        "<builtin>.property"
    ],
    "scipy.sparse.linalg._matfuncs.ProductOperator": [
        "<builtin>.property"
    ],
    "scipy.sparse.linalg._matfuncs._ExpmPadeHelper": [
        "<builtin>.property"
    ],
    "scipy.sparse.linalg._norm": [],
    "scipy.sparse.linalg.isolve": [],
    "scipy.sparse.linalg.dsolve": [],
    "scipy.sparse.linalg.interface": [],
    "scipy.sparse.linalg.eigen": [],
    "scipy.sparse.linalg.matfuncs": [],
    "scipy.sparse.base": [],
    "scipy.sparse.bsr": [],
    "scipy.sparse.compressed": [],
    "scipy.sparse.construct": [],
    "scipy.sparse.coo": [],
    "scipy.sparse.csc": [],
    "scipy.sparse.csr": [],
    "scipy.sparse.data": [],
    "scipy.sparse.dia": [],
    "scipy.sparse.dok": [],
    "scipy.sparse.extract": [],
    "scipy.sparse.lil": [],
    "scipy.sparse.sparsetools": [],
    "scipy.sparse.sputils": [],
    "pandas.core.arrays.sparse.array.SparseArray": [
        "<builtin>.property",
        "typing.overload",
        "<builtin>.classmethod",
        "pandas.util._decorators.doc",
        "<builtin>.frozenset",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.arrays.sparse.accessor.SparseAccessor": [
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.sparse.accessor.SparseFrameAccessor": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.indexes.accessors": [],
    "pandas.core.indexes.accessors.ArrowTemporalProperties": [
        "<builtin>.property"
    ],
    "pandas.core.indexes.accessors.DatetimeProperties": [
        "<builtin>.property"
    ],
    "pandas.core.indexes.accessors.TimedeltaProperties": [
        "<builtin>.property"
    ],
    "pandas.core.indexes.multi": [
        "<builtin>.dict"
    ],
    "pandas.core.indexes.frozen": [],
    "pandas.core.indexes.multi.MultiIndex": [
        "<builtin>.property",
        "pandas.util._decorators.Appender.__init__",
        "<builtin>.classmethod",
        "pandas.core.ops.invalid.make_invalid_op",
        "pandas.core.indexes.multi.names_compat",
        "pandas.util._decorators.doc",
        "<builtin>.frozenset",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.indexes.multi.names_compat": [
        "typing.cast",
        "functools.wraps"
    ],
    "pandas.core.methods.selectn": [],
    "pandas.core.methods.selectn.SelectN": [
        "<builtin>.staticmethod",
        "typing.final"
    ],
    "pandas.core.strings.accessor": [],
    "pandas.core.strings.accessor.StringMethods": [
        "pandas.util._decorators.Appender.__init__",
        "pandas.core.strings.accessor.forbid_nonstring_types._forbid_nonstring_types",
        "<builtin>.staticmethod",
        "pandas.core.strings.accessor.forbid_nonstring_types",
        "pandas.core.strings.accessor._map_and_wrap"
    ],
    "pandas.core.strings.accessor.forbid_nonstring_types": [
        "<builtin>.set"
    ],
    "pandas.core.strings.accessor.forbid_nonstring_types._forbid_nonstring_types": [
        "typing.cast",
        "functools.wraps"
    ],
    "pandas.core.strings.accessor._map_and_wrap": [
        "pandas.core.strings.accessor.forbid_nonstring_types",
        "pandas.core.strings.accessor.forbid_nonstring_types._forbid_nonstring_types"
    ],
    "pandas.core.tools.datetimes": [
        "typing.overload"
    ],
    "pandas.arrays": [],
    "pandas.io.formats.info": [
        "textwrap.dedent"
    ],
    "pandas.io.formats.info._BaseInfo": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.io.formats.info.DataFrameInfo": [
        "<builtin>.property"
    ],
    "pandas.io.formats.info.SeriesInfo": [
        "<builtin>.property"
    ],
    "pandas.io.formats.info._InfoPrinterAbstract": [
        "abc.abstractmethod"
    ],
    "pandas.io.formats.info._DataFrameInfoPrinter": [
        "<builtin>.property"
    ],
    "pandas.io.formats.info._TableBuilderAbstract": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.io.formats.info._DataFrameTableBuilder": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.io.formats.info._TableBuilderVerboseMixin": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.io.formats.info._DataFrameTableBuilderVerbose": [
        "<builtin>.property"
    ],
    "pandas.io.formats.info._SeriesTableBuilder": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.io.formats.info._SeriesTableBuilderVerbose": [
        "<builtin>.property"
    ],
    "pandas.plotting": [],
    "pandas.plotting._core": [
        "pandas.util._decorators.Appender.__init__",
        "pandas.util._decorators.Substitution.__init__"
    ],
    "matplotlib.axes": [],
    "matplotlib.axes._base": [
        "logging.getLogger"
    ],
    "matplotlib": [
        "matplotlib.matplotlib_fname",
        "matplotlib._logged_cached",
        "matplotlib._rc_params_in_file",
        "matplotlib._check_versions",
        "functools.cache",
        "matplotlib._logged_cached.wrapper",
        "matplotlib._api.deprecation.suppress_matplotlib_deprecation_warning",
        "matplotlib.is_interactive",
        "matplotlib.cbook._get_data_path",
        "contextlib.contextmanager",
        "matplotlib.RcParams.copy",
        "locale.setlocale",
        "matplotlib.RcParams.__init__",
        "collections.namedtuple",
        "logging.getLogger"
    ],
    "pprint": [
        "<builtin>.frozenset",
        "<builtin>.type"
    ],
    "matplotlib._api": [],
    "matplotlib._api.deprecation": [
        "contextlib.contextmanager"
    ],
    "matplotlib._api.classproperty": [
        "<builtin>.property"
    ],
    "matplotlib._version": [],
    "matplotlib.cbook": [
        "matplotlib._api.deprecation.delete_parameter",
        "operator.attrgetter.__init__",
        "functools.cache",
        "matplotlib._api.deprecation.delete_parameter.wrapper",
        "<map>.items",
        "contextlib.contextmanager"
    ],
    "shlex": [
        "re.compile"
    ],
    "shlex.shlex": [
        "<builtin>.property"
    ],
    "matplotlib.cbook.CallbackRegistry": [
        "contextlib.contextmanager"
    ],
    "matplotlib._api.deprecation.delete_parameter": [
        "<builtin>.next",
        "functools.wraps",
        "inspect.signature"
    ],
    "matplotlib._api.deprecation.delete_parameter.wrapper": [
        "matplotlib._api.deprecation.warn_deprecated",
        "<builtin>.len",
        "<builtin>.repr",
        "<builtin>.any"
    ],
    "matplotlib._api.deprecation.warn_deprecated": [
        "matplotlib._api.deprecation._generate_deprecation_warning"
    ],
    "matplotlib._api.deprecation._generate_deprecation_warning": [
        "<builtin>.dict",
        "<builtin>.int",
        "<builtin>.ValueError"
    ],
    "matplotlib.cbook.Grouper": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "matplotlib._api.deprecation.deprecated"
    ],
    "matplotlib._api.deprecation.deprecated": [],
    "matplotlib._api.deprecation.deprecated.deprecate": [
        "inspect.cleandoc",
        "<builtin>.isinstance",
        "<builtin>.type",
        "matplotlib._api.deprecation.deprecated.deprecate.finalize"
    ],
    "matplotlib._api.deprecation.deprecated.deprecate.finalize": [
        "functools.wraps"
    ],
    "matplotlib._docstring": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib._docstring._ArtistPropertiesSubstitution.__init__": [],
    "matplotlib.rcsetup": [
        "<builtin>.object",
        "matplotlib.rcsetup._listify_validator",
        "functools.lru_cache",
        "matplotlib.rcsetup._make_type_validator",
        "<map>.items",
        "matplotlib.rcsetup._convert_validator_spec",
        "matplotlib.rcsetup.ValidateInStrings.__init__"
    ],
    "matplotlib.backends": [],
    "matplotlib.backends.registry": [
        "matplotlib.backends.registry.BackendRegistry.__init__"
    ],
    "matplotlib.backends.registry.BackendRegistry.__init__": [],
    "matplotlib.colors": [
        "matplotlib.colors.make_norm_from_scale",
        "functools.cache",
        "matplotlib.colors._ColorMapping.__init__",
        "<map>.update",
        "matplotlib.colors.ColorSequenceRegistry.__init__",
        "re.compile",
        "matplotlib.colors._make_norm_from_scale.Norm.__init__"
    ],
    "PIL.Image": [
        "PIL.Image._apply_env_variables",
        "<builtin>.ImportError",
        "PIL._util.DeferredError.new",
        "<builtin>.setattr",
        "warnings.warn",
        "<builtin>.str",
        "<builtin>.int",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "logging.getLogger"
    ],
    "PIL.ExifTags": [],
    "PIL.ImageMode": [
        "functools.lru_cache"
    ],
    "PIL._deprecate": [],
    "PIL.TiffTags": [
        "PIL.TiffTags._populate"
    ],
    "PIL.TiffTags._populate": [
        "<map>.values",
        "<builtin>.len",
        "<map>.items"
    ],
    "PIL._binary": [],
    "PIL._typing": [
        "typing.TypeVar.__init__"
    ],
    "PIL._util": [],
    "PIL._util.DeferredError": [
        "<builtin>.staticmethod"
    ],
    "logging.getLogger": [
        "<builtin>.isinstance"
    ],
    "PIL._util.DeferredError.new": [
        "PIL._util.DeferredError.__init__"
    ],
    "PIL._util.DeferredError.__init__": [],
    "cffi": [],
    "cffi.api": [
        "<builtin>.object"
    ],
    "cffi.lock": [],
    "cffi.error": [],
    "cffi.model": [
        "cffi.model.ConstPointerType",
        "cffi.model.PointerType.__init__",
        "cffi.model.VoidType.__init__",
        "cffi.model.PrimitiveType.__init__",
        "weakref.WeakValueDictionary.__init__",
        "cffi.model.ArrayType.__init__"
    ],
    "cffi.model.VoidType.__init__": [],
    "cffi.model.PointerType.__init__": [
        "<str>.lstrip",
        "cffi.model.qualify"
    ],
    "<str>.lstrip": [],
    "cffi.model.qualify": [
        "<str>.lstrip"
    ],
    "cffi.model.ConstPointerType": [
        "cffi.model.PointerType.__init__"
    ],
    "cffi.model.PrimitiveType.__init__": [],
    "cffi.model.ArrayType.__init__": [],
    "cffi.api.FFI": [
        "<builtin>.property"
    ],
    "PIL.ImageFile": [],
    "PIL.ImageFile.StubHandler": [
        "abc.abstractmethod"
    ],
    "PIL.ImageFile.PyDecoder": [
        "<builtin>.property"
    ],
    "PIL.ImageFile.PyEncoder": [
        "<builtin>.property"
    ],
    "PIL.PyAccess": [
        "PIL._util.DeferredError.new",
        "cffi.api.FFI.cdef",
        "cffi.api.FFI.__init__",
        "logging.getLogger"
    ],
    "cffi.api.FFI.__init__": [
        "<builtin>.list",
        "<builtin>.setattr",
        "cffi.cparser.Parser.__init__",
        "cffi.api.FFI.cast",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "cffi.model.get_typecache",
        "<builtin>.isinstance",
        "<builtin>.Exception"
    ],
    "cffi.cparser": [
        "re.compile"
    ],
    "cffi.commontypes": [
        "<map>.update",
        "cffi.model.unknown_type"
    ],
    "cffi.model.unknown_type": [
        "cffi.model.StructOrUnionOrEnum.force_the_name"
    ],
    "cffi.model.StructOrUnionOrEnum.force_the_name": [
        "cffi.model.StructOrUnionOrEnum.build_c_name_with_marker"
    ],
    "cffi.model.StructOrUnionOrEnum.build_c_name_with_marker": [],
    "pycparser": [],
    "pycparser.c_parser": [],
    "pycparser.ply.yacc": [
        "re.compile"
    ],
    "pycparser.c_ast": [],
    "pycparser.c_lexer": [],
    "pycparser.ply.lex": [
        "re.compile",
        "<builtin>.int"
    ],
    "pycparser.c_lexer.CLexer": [
        "pycparser.ply.lex.TOKEN",
        "<str>.lower",
        "pycparser.ply.lex.TOKEN.set_regex",
        "<str>.upper"
    ],
    "<str>.upper": [],
    "pycparser.ply.lex.TOKEN": [],
    "pycparser.ply.lex.TOKEN.set_regex": [
        "pycparser.ply.lex._get_regex",
        "<builtin>.hasattr"
    ],
    "pycparser.ply.lex._get_regex": [
        "<builtin>.getattr"
    ],
    "pycparser.plyparser": [],
    "pycparser.ast_transforms": [],
    "pycparser.c_parser.CParser": [
        "pycparser.plyparser.parameterized.decorate",
        "pycparser.plyparser.parameterized"
    ],
    "pycparser.plyparser.parameterized": [],
    "pycparser.plyparser.parameterized.decorate": [],
    "cffi.cparser.Parser.__init__": [
        "weakref.WeakKeyDictionary.__init__",
        "<builtin>.set"
    ],
    "cffi.model.get_typecache": [
        "<builtin>.isinstance"
    ],
    "cffi.api.FFI.cast": [
        "cffi.api.FFI._typeof",
        "<builtin>.isinstance"
    ],
    "cffi.api.FFI._typeof": [],
    "cffi.api.FFI.cdef": [
        "cffi.api.FFI._cdef"
    ],
    "cffi.api.FFI._cdef": [
        "<builtin>.TypeError",
        "<str>.encode",
        "<builtin>.isinstance"
    ],
    "PIL.Image.Image": [
        "<builtin>.property"
    ],
    "PIL.ImageFilter": [],
    "PIL.ImageFilter.Filter": [
        "abc.abstractmethod"
    ],
    "PIL.ImageFilter.Color3DLUT": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "PIL.Image.ImagePointHandler": [
        "abc.abstractmethod"
    ],
    "PIL.Image.ImageTransformHandler": [
        "abc.abstractmethod"
    ],
    "PIL.Image.SupportsArrayInterface": [
        "<builtin>.property"
    ],
    "PIL.Image._apply_env_variables": [
        "warnings.warn",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "PIL.PngImagePlugin": [
        "re.compile",
        "logging.getLogger"
    ],
    "PIL.ImageChops": [],
    "PIL.ImagePalette": [],
    "PIL.GimpGradientFile": [],
    "PIL.GimpPaletteFile": [],
    "PIL.ImageColor": [
        "functools.lru_cache"
    ],
    "PIL.PaletteFile": [],
    "PIL.ImagePalette.ImagePalette": [
        "<builtin>.property"
    ],
    "PIL.ImageSequence": [],
    "PIL.PngImagePlugin.iTXt": [
        "<builtin>.staticmethod"
    ],
    "PIL.PngImagePlugin.PngImageFile": [
        "<builtin>.property"
    ],
    "matplotlib._cm": [
        "<builtin>.globals",
        "<builtin>.range",
        "matplotlib._cm.cubehelix"
    ],
    "matplotlib._cm.cubehelix": [],
    "matplotlib.scale": [
        "matplotlib._docstring.Substitution.update",
        "matplotlib.scale._get_scale_docs",
        "matplotlib.scale.get_scale_names",
        "<str>.rstrip",
        "<builtin>.map",
        "<builtin>.repr"
    ],
    "matplotlib.transforms": [],
    "matplotlib.path": [],
    "matplotlib.bezier": [
        "numpy.lib.function_base.vectorize.__init__",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "numpy.lib.function_base.vectorize.__init__": [
        "<builtin>.ValueError",
        "numpy.lib.function_base._parse_gufunc_signature",
        "numpy.lib.function_base.iterable",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "numpy.lib.function_base.iterable": [
        "<builtin>.iter"
    ],
    "numpy.lib.function_base._parse_gufunc_signature": [
        "<builtin>.tuple",
        "re.match",
        "<builtin>.ValueError",
        "re.sub",
        "re.findall"
    ],
    "matplotlib.bezier.BezierSegment": [
        "<builtin>.property"
    ],
    "matplotlib.path.Path": [
        "<builtin>.property",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "weakref.WeakValueDictionary.__init__"
    ],
    "matplotlib.transforms.TransformNode": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "<builtin>.range",
        "matplotlib._api.classproperty.__init__",
        "matplotlib._api.deprecation.deprecated"
    ],
    "matplotlib._api.classproperty.__init__": [
        "<builtin>.ValueError"
    ],
    "matplotlib.transforms.BboxBase": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "<builtin>.property",
        "matplotlib._api.deprecation.deprecated",
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.classproperty.__init__",
        "<builtin>.staticmethod",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib._api.deprecation.rename_parameter": [
        "functools.wraps",
        "inspect.signature"
    ],
    "matplotlib._api.deprecation.rename_parameter.wrapper": [
        "matplotlib._api.deprecation.warn_deprecated"
    ],
    "matplotlib.transforms.Bbox": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "matplotlib.transforms.TransformedBbox": [
        "matplotlib.transforms._make_str_method"
    ],
    "matplotlib.transforms._make_str_method": [],
    "matplotlib.transforms.LockableBbox": [
        "matplotlib.transforms._make_str_method",
        "<builtin>.property"
    ],
    "matplotlib.transforms.Transform": [
        "<builtin>.property"
    ],
    "matplotlib.transforms.TransformWrapper": [
        "matplotlib.transforms._make_str_method",
        "<builtin>.property"
    ],
    "matplotlib.transforms.AffineBase": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.transforms.Affine2DBase": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter",
        "<builtin>.property"
    ],
    "matplotlib.transforms.Affine2D": [
        "matplotlib.transforms._make_str_method",
        "<builtin>.staticmethod"
    ],
    "matplotlib.transforms.IdentityTransform": [
        "matplotlib.transforms._make_str_method",
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter",
        "numpy.core.numeric.identity"
    ],
    "numpy.core.numeric.identity": [
        "numpy.lib.twodim_base.eye"
    ],
    "numpy.lib.twodim_base.eye": [
        "operator.index"
    ],
    "operator.index": [
        "<int>.__index__"
    ],
    "<int>.__index__": [],
    "matplotlib.transforms._BlendedMixin": [
        "matplotlib.transforms._make_str_method"
    ],
    "matplotlib.transforms.BlendedGenericTransform": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter",
        "<builtin>.property"
    ],
    "matplotlib.transforms.CompositeGenericTransform": [
        "matplotlib.transforms._make_str_method",
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter",
        "<builtin>.property"
    ],
    "matplotlib.transforms.CompositeAffine2D": [
        "matplotlib.transforms._make_str_method",
        "<builtin>.property"
    ],
    "matplotlib.transforms.BboxTransform": [
        "matplotlib.transforms._make_str_method"
    ],
    "matplotlib.transforms.BboxTransformTo": [
        "matplotlib.transforms._make_str_method"
    ],
    "matplotlib.transforms.BboxTransformFrom": [
        "matplotlib.transforms._make_str_method"
    ],
    "matplotlib.transforms.ScaledTranslation": [
        "matplotlib.transforms._make_str_method"
    ],
    "matplotlib.transforms.AffineDeltaTransform": [
        "matplotlib.transforms._make_str_method"
    ],
    "matplotlib.scale.LogTransform": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.scale.InvertedLogTransform": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.scale.LogScale": [
        "<builtin>.property"
    ],
    "matplotlib.scale.FuncScaleLog": [
        "<builtin>.property"
    ],
    "matplotlib.scale.SymmetricalLogTransform": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.scale.InvertedSymmetricalLogTransform": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.scale.SymmetricalLogScale": [
        "<builtin>.property"
    ],
    "matplotlib.scale.AsinhTransform": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.scale.InvertedAsinhTransform": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.scale.AsinhScale": [
        "<builtin>.property"
    ],
    "matplotlib.scale.LogitTransform": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.scale.LogisticTransform": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.scale.get_scale_names": [
        "<builtin>.sorted"
    ],
    "matplotlib.scale._get_scale_docs": [
        "inspect.getdoc",
        "extend",
        "<map>.items"
    ],
    "inspect.getdoc": [
        "inspect.cleandoc",
        "<builtin>.isinstance",
        "inspect._finddoc"
    ],
    "inspect._finddoc": [
        "inspect.ismemberdescriptor",
        "inspect.ismethoddescriptor",
        "inspect.isclass",
        "inspect.isbuiltin",
        "inspect.isdatadescriptor",
        "inspect._findclass",
        "inspect.isfunction",
        "inspect.ismethod",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "inspect.isdatadescriptor": [
        "<builtin>.type",
        "inspect.isclass",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "inspect.ismethod"
    ],
    "inspect.ismemberdescriptor": [],
    "inspect._findclass": [
        "inspect.isclass",
        "<builtin>.getattr"
    ],
    "<str>.rstrip": [],
    "matplotlib._docstring.Substitution.update": [],
    "matplotlib._color_data": [
        "<map>.items"
    ],
    "matplotlib.colors._ColorMapping.__init__": [
        "<builtin>.super"
    ],
    "matplotlib.colors.ColorSequenceRegistry.__init__": [],
    "matplotlib.colors.ColorConverter": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.colors.LinearSegmentedColormap": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.colors.Normalize": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "matplotlib.colors.TwoSlopeNorm": [
        "<builtin>.property"
    ],
    "matplotlib.colors.CenteredNorm": [
        "<builtin>.property"
    ],
    "matplotlib.colors.make_norm_from_scale": [
        "<builtin>.tuple",
        "matplotlib.colors._make_norm_from_scale",
        "<builtin>.isinstance",
        "inspect.signature"
    ],
    "matplotlib.colors._make_norm_from_scale": [],
    "matplotlib.colors._make_norm_from_scale.Norm": [
        "inspect.Parameter.__init__"
    ],
    "inspect.Parameter.__init__": [
        "<builtin>.type",
        "<builtin>.ValueError",
        "<str>.isidentifier",
        "<str>.isdigit",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "<str>.isdigit": [],
    "<str>.isidentifier": [],
    "matplotlib.colors._make_norm_from_scale.Norm.__init__": [
        "<builtin>.dict",
        "<builtin>.super"
    ],
    "matplotlib.colors.SymLogNorm": [
        "<builtin>.property"
    ],
    "matplotlib.colors.AsinhNorm": [
        "<builtin>.property"
    ],
    "matplotlib.colors.LightSource": [
        "<builtin>.property"
    ],
    "matplotlib._fontconfig_pattern": [
        "re.compile",
        "functools.lru_cache"
    ],
    "pyparsing": [
        "<builtin>.globals"
    ],
    "pyparsing.version_info": [
        "<builtin>.property"
    ],
    "pyparsing.util": [
        "functools.lru_cache",
        "functools.lru_cache.decorating_function",
        "typing.TypeVar.__init__",
        "<builtin>.chr"
    ],
    "pyparsing.util.__config_flags": [
        "<builtin>.classmethod"
    ],
    "pyparsing.exceptions": [
        "re.compile",
        "pyparsing.util._collapse_string_to_ranges"
    ],
    "pyparsing.util._collapse_string_to_ranges": [
        "<builtin>.len",
        "pyparsing.util._collapse_string_to_ranges.escape_re_range_char",
        "<builtin>.set",
        "<builtin>.next",
        "<builtin>.ord",
        "<builtin>.iter",
        "append",
        "<builtin>.sorted"
    ],
    "pyparsing.util._collapse_string_to_ranges.escape_re_range_char": [],
    "pyparsing.exceptions.ParseBaseException": [
        "pyparsing.util.replaced_by_pep8",
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pyparsing.util.replaced_by_pep8": [
        "<builtin>.list",
        "inspect.signature",
        "<builtin>.hasattr",
        "typing.cast",
        "functools.wraps",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "pyparsing.actions": [
        "<builtin>.object",
        "pyparsing.util.replaced_by_pep8"
    ],
    "pyparsing.core": [
        "pyparsing.util.replaced_by_pep8",
        "<builtin>.vars",
        "pyparsing.core.srange",
        "pyparsing.core.CharsNotIn.__init__",
        "pyparsing.core.ParserElement.copy",
        "<builtin>.isinstance",
        "pyparsing.core.StringEnd.__init__",
        "pyparsing.core.LineStart.__init__",
        "pyparsing.core.StringStart.__init__",
        "pyparsing.core.LineEnd.__init__",
        "pyparsing.core.Group.__init__",
        "pyparsing.core.ParserElement.set_results_name",
        "pyparsing.core.Regex.__init__",
        "pyparsing.core.Literal.__init__",
        "pyparsing.core._should_enable_warnings",
        "pyparsing.core.Combine.__init__",
        "pyparsing.core.ParserElement.set_parse_action",
        "pyparsing.core.Opt.__init__",
        "pyparsing.core.ParserElement.set_name",
        "pyparsing.core.Empty.__init__",
        "pyparsing.core.Suppress.__init__",
        "pyparsing.core.enable_all_warnings"
    ],
    "pyparsing.results": [
        "<builtin>.type"
    ],
    "pyparsing.results.ParseResults": [
        "<builtin>.classmethod"
    ],
    "pyparsing.core.__compat__": [
        "<builtin>.locals"
    ],
    "pyparsing.core.__diag__": [
        "<builtin>.locals",
        "<builtin>.classmethod"
    ],
    "pyparsing.core._should_enable_warnings": [
        "<builtin>.bool"
    ],
    "pyparsing.core.enable_all_warnings": [
        "pyparsing.core.__diag__.enable_all_warnings"
    ],
    "pyparsing.core.__diag__.enable_all_warnings": [],
    "pyparsing.core.ParserElement": [
        "<builtin>.property",
        "pyparsing.util.replaced_by_pep8",
        "abc.abstractmethod",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "threading.RLock"
    ],
    "pyparsing.core.Keyword": [
        "<builtin>.staticmethod",
        "pyparsing.util.replaced_by_pep8"
    ],
    "pyparsing.core.Regex": [
        "pyparsing.core.cached_property.__init__"
    ],
    "pyparsing.core.cached_property.__init__": [],
    "pyparsing.core.QuotedString": [
        "<builtin>.dict"
    ],
    "pyparsing.core.ParseExpression": [
        "pyparsing.util.replaced_by_pep8"
    ],
    "pyparsing.core.ParseElementEnhance": [
        "pyparsing.util.replaced_by_pep8"
    ],
    "pyparsing.core.Forward": [
        "pyparsing.util.replaced_by_pep8"
    ],
    "pyparsing.core.Empty.__init__": [
        "<builtin>.super"
    ],
    "pyparsing.core.ParserElement.set_name": [
        "pyparsing.core.ParserElement.set_debug",
        "<builtin>.str"
    ],
    "pyparsing.core.ParserElement.set_debug": [
        "pyparsing.core.ParserElement.set_debug_actions",
        "pyparsing.core.ParserElement.visit_all"
    ],
    "pyparsing.core.ParserElement.visit_all": [
        "<builtin>.set"
    ],
    "pyparsing.core.ParserElement.set_debug_actions": [],
    "pyparsing.core.LineStart.__init__": [
        "pyparsing.core.ParserElement.set_name",
        "pyparsing.core.Empty.__init__",
        "pyparsing.core.ParserElement.set_whitespace_chars",
        "<builtin>.set",
        "pyparsing.core.ParserElement.leave_whitespace",
        "<builtin>.super"
    ],
    "pyparsing.core.ParserElement.leave_whitespace": [],
    "pyparsing.core.ParserElement.set_whitespace_chars": [
        "<builtin>.set"
    ],
    "pyparsing.core.LineEnd.__init__": [
        "<builtin>.super",
        "pyparsing.core.ParserElement.set_name",
        "pyparsing.core.ParserElement.set_whitespace_chars"
    ],
    "pyparsing.core.StringStart.__init__": [
        "<builtin>.super",
        "pyparsing.core.ParserElement.set_name"
    ],
    "pyparsing.core.StringEnd.__init__": [
        "<builtin>.super",
        "pyparsing.core.ParserElement.set_name"
    ],
    "pyparsing.core.Regex.__init__": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "pyparsing.core.ParserElement.set_parse_action": [
        "<builtin>.callable",
        "pyparsing.core._trim_arity",
        "<builtin>.list",
        "<builtin>.TypeError",
        "<builtin>.all"
    ],
    "<builtin>.all": [],
    "pyparsing.core._trim_arity": [
        "traceback.extract_stack",
        "<builtin>.getattr"
    ],
    "pyparsing.core.CharsNotIn.__init__": [
        "<builtin>.super",
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "pyparsing.core.Suppress.__init__": [
        "pyparsing.core._PendingSkip.__init__",
        "pyparsing.core.NoMatch.__init__",
        "<builtin>.super"
    ],
    "pyparsing.core.NoMatch.__init__": [
        "<builtin>.super"
    ],
    "pyparsing.core._PendingSkip.__init__": [
        "<builtin>.super"
    ],
    "pyparsing.core.Group.__init__": [
        "<builtin>.super"
    ],
    "pyparsing.core.Literal.__init__": [
        "<builtin>.len",
        "<builtin>.super"
    ],
    "pyparsing.core.Opt.__init__": [
        "<builtin>.super"
    ],
    "pyparsing.core.ParserElement.set_results_name": [
        "pyparsing.core.ParserElement._setResultsName"
    ],
    "pyparsing.core.ParserElement._setResultsName": [
        "pyparsing.core.ParserElement.copy",
        "<str>.endswith"
    ],
    "pyparsing.core.ParserElement.copy": [
        "<builtin>.set"
    ],
    "pyparsing.core.Combine.__init__": [
        "pyparsing.core.ParseElementEnhance.leave_whitespace",
        "<builtin>.super"
    ],
    "pyparsing.core.ParseElementEnhance.leave_whitespace": [
        "<builtin>.super"
    ],
    "pyparsing.core.srange": [
        "pyparsing.core.ParserElement.parse_string",
        "pyparsing.core.srange.<lambda1>"
    ],
    "pyparsing.core.srange.<lambda1>": [
        "<builtin>.ord",
        "<builtin>.range",
        "<builtin>.isinstance",
        "<builtin>.chr"
    ],
    "pyparsing.core.ParserElement.parse_string": [
        "pyparsing.core.ParserElement._parseNoCache",
        "pyparsing.core.ParserElement.preParse",
        "<str>.expandtabs",
        "pyparsing.core.Empty.__init__",
        "pyparsing.core.ParserElement.streamline",
        "pyparsing.core.ParserElement.set_debug",
        "pyparsing.core.ParserElement.reset_cache",
        "pyparsing.core.StringEnd.__init__"
    ],
    "pyparsing.core.ParserElement.reset_cache": [
        "<builtin>.len"
    ],
    "pyparsing.core.ParserElement.streamline": [],
    "pyparsing.core.ParserElement._parseNoCache": [
        "pyparsing.core.ParserElement.preParse",
        "<builtin>.len",
        "pyparsing.core.ParserElement.postParse",
        "pyparsing.results.ParseResults.__init__",
        "pyparsing.core.ParserElement.parseImpl",
        "<builtin>.isinstance",
        "pyparsing.exceptions.ParseBaseException.__init__"
    ],
    "pyparsing.core.ParserElement.preParse": [
        "<builtin>.len",
        "pyparsing.core.ParserElement._skipIgnorables"
    ],
    "pyparsing.core.ParserElement._skipIgnorables": [],
    "pyparsing.core.ParserElement.parseImpl": [],
    "pyparsing.exceptions.ParseBaseException.__init__": [],
    "pyparsing.core.ParserElement.postParse": [],
    "pyparsing.results.ParseResults.__init__": [
        "pyparsing.results._ParseResultsWithOffset.__init__",
        "<builtin>.isinstance",
        "<builtin>.str",
        "pyparsing.results.ParseResults.__init__"
    ],
    "pyparsing.results._ParseResultsWithOffset.__init__": [],
    "pyparsing.helpers": [
        "pyparsing.util.replaced_by_pep8",
        "pyparsing.core.ParserElement.__init__",
        "<builtin>.vars",
        "pyparsing.core.ParserElement.set_name",
        "<builtin>.isinstance",
        "pyparsing.core.Combine.__init__",
        "pyparsing.helpers.make_html_tags",
        "pyparsing.core.Suppress.__init__",
        "pyparsing.core.Regex.__init__",
        "pyparsing.core.ParserElement.leave_whitespace",
        "pyparsing.core.Word.__init__"
    ],
    "html.entities": [
        "<builtin>.chr",
        "<map>.items"
    ],
    "pyparsing.core.ParserElement.__init__": [
        "<builtin>.list",
        "<builtin>.set"
    ],
    "pyparsing.core.Word.__init__": [
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.ValueError",
        "pyparsing.util._collapse_string_to_ranges",
        "re.escape",
        "<builtin>.set",
        "re.compile",
        "<builtin>.super",
        "<builtin>.sorted"
    ],
    "pyparsing.helpers.make_html_tags": [
        "pyparsing.helpers._makeTags"
    ],
    "pyparsing.helpers._makeTags": [
        "pyparsing.core.Dict.__init__",
        "pyparsing.core.Opt.__init__",
        "pyparsing.core.ZeroOrMore.__init__",
        "pyparsing.core.Literal.__init__",
        "pyparsing.core.ParserElement.set_name",
        "pyparsing.core.ParserElement.__init__",
        "pyparsing.core.SkipTo.__init__",
        "pyparsing.core.Keyword.__init__",
        "pyparsing.core.Combine.__init__",
        "pyparsing.core.Group.__init__",
        "pyparsing.core.Suppress.__init__",
        "pyparsing.core.ParserElement.copy",
        "pyparsing.core.ParserElement.set_parse_action",
        "pyparsing.core.ParserElement.add_parse_action",
        "<builtin>.isinstance",
        "pyparsing.core.Word.__init__"
    ],
    "pyparsing.core.Keyword.__init__": [
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.set",
        "<builtin>.super"
    ],
    "pyparsing.core.ZeroOrMore.__init__": [
        "<builtin>.super"
    ],
    "pyparsing.core.Dict.__init__": [
        "<builtin>.super"
    ],
    "pyparsing.core.ParserElement.add_parse_action": [
        "pyparsing.core._trim_arity"
    ],
    "pyparsing.core.SkipTo.__init__": [
        "pyparsing.core.SkipTo._update_ignorer",
        "pyparsing.core.Empty.__init__",
        "<builtin>.isinstance",
        "pyparsing.core.ParserElement.leave_whitespace",
        "<builtin>.super"
    ],
    "pyparsing.core.SkipTo._update_ignorer": [],
    "pyparsing.testing": [],
    "pyparsing.testing.pyparsing_test.TestParseResultsAsserts": [
        "contextlib.contextmanager"
    ],
    "pyparsing.testing.pyparsing_test": [
        "<builtin>.staticmethod"
    ],
    "pyparsing.common": [
        "<builtin>.isinstance",
        "<builtin>.vars"
    ],
    "pyparsing.common.pyparsing_common": [
        "pyparsing.util.replaced_by_pep8",
        "pyparsing.core.ParserElement.streamline",
        "pyparsing.core.ParserElement.add_condition",
        "pyparsing.core.ParserElement.suppress",
        "pyparsing.core.FollowedBy.__init__",
        "pyparsing.core.ParserElement.copy",
        "pyparsing.core.token_map",
        "pyparsing.core.DelimitedList.__init__",
        "pyparsing.core.ParserElement.__init__",
        "<builtin>.staticmethod",
        "pyparsing.core.LineEnd.__init__",
        "pyparsing.core.Regex.__init__",
        "pyparsing.core.ParserElement.add_parse_action",
        "pyparsing.core.Word.__init__",
        "pyparsing.core.White.__init__",
        "pyparsing.core.Literal.__init__",
        "pyparsing.core.ParseElementEnhance.streamline",
        "pyparsing.core.Combine.__init__",
        "pyparsing.core.ParserElement.set_parse_action",
        "pyparsing.core.Opt.__init__",
        "pyparsing.core.ParserElement.set_name"
    ],
    "pyparsing.core.token_map": [
        "<builtin>.getattr"
    ],
    "pyparsing.core.ParserElement.suppress": [
        "pyparsing.core.Suppress.__init__"
    ],
    "pyparsing.core.ParserElement.add_condition": [
        "pyparsing.core.condition_as_parse_action",
        "<builtin>.str",
        "<builtin>.bool"
    ],
    "pyparsing.core.condition_as_parse_action": [
        "pyparsing.core._trim_arity",
        "functools.wraps"
    ],
    "pyparsing.core.White.__init__": [
        "<builtin>.super",
        "pyparsing.core.ParserElement.set_whitespace_chars"
    ],
    "pyparsing.core.FollowedBy.__init__": [
        "<builtin>.super"
    ],
    "pyparsing.core.ParseElementEnhance.streamline": [
        "<builtin>.super"
    ],
    "pyparsing.core.DelimitedList.__init__": [
        "pyparsing.core.Opt.__init__",
        "<builtin>.ValueError",
        "<builtin>.str",
        "pyparsing.core.Combine.__init__",
        "pyparsing.core.Suppress.__init__",
        "typing.cast",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "matplotlib._enums": [
        "matplotlib._docstring.Substitution.update"
    ],
    "matplotlib._enums.JoinStyle": [
        "<builtin>.staticmethod"
    ],
    "matplotlib._enums.CapStyle": [
        "<builtin>.staticmethod"
    ],
    "cycler": [
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "cycler.Cycler": [
        "typing.overload",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "matplotlib.rcsetup.__getattr__": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "<builtin>.property",
        "matplotlib._api.deprecation.deprecated"
    ],
    "matplotlib.rcsetup._listify_validator": [
        "<builtin>.type"
    ],
    "matplotlib.rcsetup._make_type_validator": [],
    "matplotlib.rcsetup.ValidateInStrings.__init__": [
        "matplotlib.rcsetup.ValidateInStrings.__init__.func"
    ],
    "matplotlib.rcsetup.ValidateInStrings.__init__.func": [],
    "matplotlib.rcsetup._convert_validator_spec": [
        "<builtin>.isinstance",
        "matplotlib.rcsetup.ValidateInStrings.__init__"
    ],
    "matplotlib.__getattr__": [
        "<builtin>.property"
    ],
    "matplotlib._check_versions": [
        "<builtin>.ImportError",
        "packaging.version.parse",
        "importlib.import_module"
    ],
    "packaging.version.parse": [
        "packaging.version.Version.__init__"
    ],
    "packaging.version.Version.__init__": [
        "<builtin>.tuple",
        "packaging.version._parse_local_version",
        "packaging.version._cmpkey",
        "<builtin>.int",
        "packaging.version._parse_letter_version"
    ],
    "packaging.version._parse_letter_version": [
        "<str>.lower",
        "<builtin>.int"
    ],
    "packaging.version._parse_local_version": [
        "<builtin>.tuple",
        "<builtin>.int"
    ],
    "packaging.version._cmpkey": [
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.isinstance"
    ],
    "matplotlib._logged_cached": [
        "functools.wraps"
    ],
    "matplotlib._logged_cached.wrapper": [],
    "matplotlib.cbook._get_data_path": [
        "matplotlib.get_data_path"
    ],
    "matplotlib.get_data_path": [
        "pathlib.PurePath.with_name",
        "<builtin>.str"
    ],
    "pathlib.PurePath.with_name": [
        "pathlib.PurePath._from_parsed_parts",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "pathlib.PurePath._from_parsed_parts": [],
    "matplotlib._rc_params_in_file": [
        "<builtin>.len",
        "matplotlib._open_file_or_url",
        "matplotlib._api.deprecation.warn_deprecated",
        "matplotlib.cbook._strip_comment",
        "<builtin>.enumerate",
        "<builtin>.dict",
        "<map>.items",
        "matplotlib.<lambda2>",
        "matplotlib.RcParams.__init__"
    ],
    "matplotlib._open_file_or_url": [
        "ntpath.expanduser",
        "posixpath.expanduser",
        "<builtin>.open",
        "matplotlib._get_ssl_context",
        "<builtin>.isinstance"
    ],
    "matplotlib._get_ssl_context": [
        "certifi.core.where",
        "ssl.create_default_context"
    ],
    "certifi": [],
    "certifi.core": [],
    "certifi.core.where": [
        "ntpath.dirname",
        "posixpath.dirname",
        "ntpath.join",
        "posixpath.join"
    ],
    "ssl.create_default_context": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "ssl.SSLContext.load_default_certs",
        "<builtin>.isinstance"
    ],
    "ssl.SSLContext.load_default_certs": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "ssl.SSLContext._load_windows_store_certs"
    ],
    "ssl.SSLContext._load_windows_store_certs": [
        "<builtin>.bytearray",
        "warnings.warn"
    ],
    "matplotlib.<lambda2>": [],
    "matplotlib.cbook._strip_comment": [
        "<builtin>.ValueError"
    ],
    "matplotlib.RcParams.__init__": [],
    "matplotlib.matplotlib_fname": [
        "matplotlib.matplotlib_fname.gen_candidates",
        "genericpath.exists",
        "genericpath.isdir",
        "<builtin>.RuntimeError"
    ],
    "matplotlib.matplotlib_fname.gen_candidates": [
        "matplotlib.get_data_path",
        "matplotlib.get_configdir",
        "ntpath.join",
        "posixpath.join"
    ],
    "matplotlib.get_configdir": [
        "matplotlib._get_config_or_cache_dir"
    ],
    "matplotlib._get_config_or_cache_dir": [
        "pathlib.Path.mkdir",
        "<builtin>.OSError",
        "matplotlib._get_xdg_cache_dir",
        "pathlib.Path.resolve",
        "tempfile.mkdtemp",
        "matplotlib._get_xdg_config_dir",
        "pathlib.Path.home"
    ],
    "pathlib.Path.home": [
        "pathlib.Path.expanduser"
    ],
    "pathlib.Path.expanduser": [
        "<builtin>.RuntimeError",
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath._from_parts": [],
    "matplotlib._get_xdg_config_dir": [
        "<builtin>.str",
        "pathlib.Path.home"
    ],
    "pathlib.Path.resolve": [
        "pathlib.Path.resolve.check_eloop",
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.Path.resolve.check_eloop": [
        "<builtin>.RuntimeError",
        "<builtin>.getattr"
    ],
    "pathlib.Path.mkdir": [
        "pathlib.Path.mkdir",
        "pathlib.Path.is_dir"
    ],
    "pathlib.Path.is_dir": [
        "pathlib._ignore_error",
        "pathlib.Path.stat",
        "stat.S_ISDIR"
    ],
    "pathlib.Path.stat": [],
    "pathlib._ignore_error": [
        "<builtin>.getattr"
    ],
    "tempfile.mkdtemp": [
        "tempfile._get_candidate_names",
        "tempfile._sanitize_params",
        "<builtin>.range",
        "<builtin>.next",
        "ntpath.join",
        "genericpath.isdir",
        "<builtin>.FileExistsError",
        "<builtin>.map",
        "posixpath.join"
    ],
    "tempfile._sanitize_params": [
        "tempfile._infer_return_type",
        "tempfile.gettempdir",
        "tempfile.gettempdirb"
    ],
    "tempfile._infer_return_type": [
        "<builtin>.TypeError",
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "tempfile.gettempdirb": [
        "tempfile._gettempdir"
    ],
    "tempfile._gettempdir": [
        "tempfile._get_default_tempdir"
    ],
    "tempfile._get_default_tempdir": [
        "<builtin>.FileNotFoundError",
        "ntpath.abspath",
        "<builtin>.range",
        "<builtin>.next",
        "ntpath.join",
        "genericpath.isdir",
        "posixpath.abspath",
        "tempfile._candidate_tempdir_list",
        "posixpath.join"
    ],
    "tempfile._candidate_tempdir_list": [
        "os.getenv",
        "extend",
        "append"
    ],
    "<builtin>.FileNotFoundError": [],
    "tempfile.gettempdir": [
        "tempfile._gettempdir"
    ],
    "tempfile._get_candidate_names": [],
    "<builtin>.FileExistsError": [],
    "matplotlib.RcParams.copy": [
        "matplotlib.RcParams._get",
        "matplotlib.RcParams._set",
        "matplotlib.RcParams.__init__",
        "matplotlib.RcParams.__iter__"
    ],
    "matplotlib.RcParams.__iter__": [
        "matplotlib._api.deprecation.suppress_matplotlib_deprecation_warning"
    ],
    "matplotlib._api.deprecation.suppress_matplotlib_deprecation_warning": [
        "warnings.catch_warnings.__init__"
    ],
    "matplotlib.RcParams._get": [],
    "matplotlib.RcParams._set": [],
    "locale.setlocale": [],
    "matplotlib.is_interactive": [],
    "matplotlib.cm": [
        "<builtin>.globals",
        "matplotlib._api.deprecation.deprecated.deprecate",
        "matplotlib._docstring.Substitution.update",
        "matplotlib._api.deprecation.deprecated",
        "matplotlib.cm._gen_cmap_registry",
        "matplotlib.cm.ColormapRegistry.__init__"
    ],
    "matplotlib._cm_listed": [
        "matplotlib.colors.ListedColormap.__init__",
        "<builtin>.len"
    ],
    "matplotlib.colors.ListedColormap.__init__": [
        "<builtin>.len",
        "numpy.lib.function_base.iterable",
        "<builtin>.float",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "matplotlib.cm._gen_cmap_registry": [
        "matplotlib.colors.ListedColormap.__init__",
        "<builtin>.list",
        "matplotlib.colors.LinearSegmentedColormap.__init__",
        "<map>.values",
        "matplotlib.colors.LinearSegmentedColormap.from_list"
    ],
    "matplotlib.colors.LinearSegmentedColormap.__init__": [
        "<builtin>.super"
    ],
    "matplotlib.colors.LinearSegmentedColormap.from_list": [
        "numpy.lib.shape_base.column_stack",
        "<builtin>.len",
        "<builtin>.ValueError",
        "numpy.lib.function_base.iterable",
        "matplotlib.colors.LinearSegmentedColormap.__init__",
        "numpy.core.linspace",
        "<builtin>.zip",
        "matplotlib.colors.to_rgba_array",
        "<builtin>.isinstance"
    ],
    "numpy.core.linspace": [],
    "matplotlib.colors.to_rgba_array": [
        "numpy.ma.core.is_masked",
        "numpy.ma.core.getdata",
        "<builtin>.len",
        "numpy.lib.shape_base.column_stack",
        "numpy.lib.function_base.iterable",
        "<builtin>.ValueError",
        "numpy.core.fromnumeric.any",
        "numpy.core.ones",
        "matplotlib.cbook._str_equal",
        "numpy.lib.shape_base.tile",
        "matplotlib.cbook._str_lower_equal",
        "<builtin>.isinstance",
        "matplotlib.colors.to_rgba"
    ],
    "numpy.ma.core.is_masked": [
        "numpy.ma.core.getmask"
    ],
    "numpy.ma.core.getmask": [
        "<builtin>.getattr"
    ],
    "numpy.ma.core.getdata": [],
    "numpy.lib.shape_base.tile": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.zip",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "numpy.lib.shape_base.column_stack": [
        "append",
        "numpy.core.shape_base._arrays_for_stack_dispatcher",
        "numpy.core.arrayprint.concatenate"
    ],
    "numpy.core.shape_base._arrays_for_stack_dispatcher": [
        "warnings.warn",
        "<builtin>.hasattr"
    ],
    "numpy.core.arrayprint.concatenate": [],
    "numpy.core.fromnumeric.any": [
        "numpy.core.fromnumeric._wrapreduction"
    ],
    "numpy.core.fromnumeric._wrapreduction": [
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "matplotlib.cbook._str_lower_equal": [
        "<builtin>.isinstance"
    ],
    "matplotlib.colors.to_rgba": [
        "<builtin>.len",
        "matplotlib.colors._to_rgba_no_colorcycle",
        "matplotlib.colors._is_nth_color",
        "<builtin>.int",
        "<builtin>.isinstance"
    ],
    "matplotlib.colors._is_nth_color": [
        "<builtin>.isinstance"
    ],
    "matplotlib.colors._to_rgba_no_colorcycle": [
        "<builtin>.tuple",
        "re.match",
        "<builtin>.len",
        "<builtin>.ValueError",
        "numpy.lib.function_base.iterable",
        "<builtin>.any",
        "<builtin>.float",
        "<builtin>.int",
        "<builtin>.map",
        "<builtin>.isinstance",
        "<builtin>.all"
    ],
    "numpy.core.ones": [],
    "matplotlib.cbook._str_equal": [
        "<builtin>.isinstance"
    ],
    "matplotlib.cm.ColormapRegistry.__init__": [
        "<builtin>.tuple"
    ],
    "matplotlib.cm.ScalarMappable": [
        "<builtin>.property"
    ],
    "matplotlib.offsetbox": [],
    "matplotlib.artist": [
        "matplotlib.artist.Artist._update_set_signature_and_docstring",
        "collections.namedtuple",
        "logging.getLogger"
    ],
    "matplotlib.artist.Artist": [
        "contextlib.contextmanager",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "matplotlib.artist.ArtistInspector": [
        "functools.cache",
        "re.compile",
        "<builtin>.staticmethod"
    ],
    "matplotlib.artist.Artist._update_set_signature_and_docstring": [
        "matplotlib.artist.kwdoc",
        "matplotlib.artist.ArtistInspector.get_setters",
        "inspect.Parameter.__init__",
        "matplotlib.artist.ArtistInspector.__init__",
        "inspect.Signature.__init__"
    ],
    "matplotlib.artist.ArtistInspector.__init__": [
        "<builtin>.len",
        "<builtin>.type",
        "numpy.lib.function_base.iterable",
        "<builtin>.list",
        "matplotlib.artist.ArtistInspector.get_aliases",
        "<builtin>.isinstance"
    ],
    "matplotlib.artist.ArtistInspector.get_aliases": [
        "matplotlib.artist.ArtistInspector.is_alias",
        "re.search",
        "<map>.setdefault",
        "<builtin>.dir",
        "inspect.getdoc",
        "<builtin>.callable",
        "<builtin>.getattr"
    ],
    "matplotlib.artist.ArtistInspector.is_alias": [
        "inspect.getdoc"
    ],
    "matplotlib.artist.ArtistInspector.get_setters": [
        "matplotlib.artist.ArtistInspector.is_alias",
        "matplotlib.artist.ArtistInspector.number_of_parameters",
        "<builtin>.dir",
        "append",
        "<builtin>.callable",
        "<builtin>.getattr"
    ],
    "matplotlib.artist.ArtistInspector.number_of_parameters": [
        "<builtin>.len",
        "inspect.signature"
    ],
    "matplotlib.artist.kwdoc": [
        "matplotlib.artist.ArtistInspector.pprint_setters",
        "matplotlib.artist.ArtistInspector.__init__",
        "matplotlib.artist.ArtistInspector.pprint_setters_rest"
    ],
    "matplotlib.artist.ArtistInspector.pprint_setters_rest": [
        "<builtin>.len",
        "matplotlib.artist.ArtistInspector.get_valid_values",
        "matplotlib.artist.ArtistInspector.get_setters",
        "<builtin>.getattr",
        "<str>.ljust",
        "<builtin>.zip",
        "matplotlib.artist.ArtistInspector.aliased_name_rest",
        "<builtin>.max",
        "append",
        "<builtin>.sorted"
    ],
    "matplotlib.artist.ArtistInspector.get_valid_values": [
        "re.search",
        "re.sub",
        "<builtin>.AttributeError",
        "<builtin>.hasattr",
        "inspect.getdoc",
        "<builtin>.getattr"
    ],
    "matplotlib.artist.ArtistInspector.aliased_name_rest": [
        "<map>.get",
        "<builtin>.sorted"
    ],
    "<str>.ljust": [],
    "matplotlib.artist.ArtistInspector.pprint_setters": [
        "matplotlib.artist.ArtistInspector.get_valid_values",
        "matplotlib.artist.ArtistInspector.get_setters",
        "matplotlib.artist.ArtistInspector.aliased_name",
        "append",
        "<builtin>.sorted"
    ],
    "matplotlib.artist.ArtistInspector.aliased_name": [
        "<map>.get",
        "<builtin>.sorted"
    ],
    "matplotlib.text": [
        "matplotlib._docstring.Substitution.update",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "logging.getLogger"
    ],
    "matplotlib.font_manager": [
        "matplotlib.font_manager._load_fontmanager",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "<builtin>.str",
        "<builtin>.hasattr",
        "pathlib.Path.home",
        "collections.namedtuple",
        "logging.getLogger"
    ],
    "matplotlib.font_manager.FontProperties": [
        "<builtin>.classmethod"
    ],
    "matplotlib.font_manager.FontManager": [
        "<builtin>.staticmethod",
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "matplotlib.font_manager._load_fontmanager": [
        "matplotlib.font_manager.json_dump",
        "matplotlib.get_cachedir",
        "matplotlib.font_manager.json_load",
        "matplotlib.font_manager.FontManager.__init__"
    ],
    "matplotlib.get_cachedir": [
        "matplotlib._get_config_or_cache_dir"
    ],
    "matplotlib._get_xdg_cache_dir": [
        "<builtin>.str",
        "pathlib.Path.home"
    ],
    "matplotlib.font_manager.json_load": [
        "json.load",
        "<builtin>.open"
    ],
    "json.load": [
        "json.loads"
    ],
    "matplotlib.font_manager.FontManager.__init__": [
        "matplotlib.font_manager.FontManager.addfont",
        "matplotlib.font_manager.findSystemFonts",
        "matplotlib.cbook._get_data_path",
        "threading.Thread.start",
        "threading.Timer.__init__"
    ],
    "threading.Timer.__init__": [
        "threading.Thread.__init__",
        "threading.Event.__init__"
    ],
    "threading.Thread.start": [
        "<builtin>.RuntimeError",
        "threading.Event.wait",
        "threading.Event.is_set"
    ],
    "threading.Event.is_set": [],
    "threading.Event.wait": [],
    "matplotlib.font_manager.findSystemFonts": [
        "genericpath.exists",
        "matplotlib.font_manager.get_fontext_synonyms",
        "matplotlib.font_manager.list_fonts",
        "<builtin>.str",
        "<builtin>.set",
        "matplotlib.font_manager._get_win32_installed_fonts",
        "<builtin>.map",
        "matplotlib.font_manager._get_fontconfig_fonts",
        "<builtin>.isinstance",
        "matplotlib.font_manager._get_macos_fonts"
    ],
    "matplotlib.font_manager.get_fontext_synonyms": [],
    "matplotlib.font_manager._get_fontconfig_fonts": [
        "subprocess.check_output"
    ],
    "matplotlib.font_manager._get_macos_fonts": [
        "plistlib.loads",
        "subprocess.check_output"
    ],
    "plistlib.loads": [
        "plistlib.load"
    ],
    "matplotlib.font_manager._get_win32_installed_fonts": [
        "pathlib.Path.resolve",
        "<builtin>.range",
        "matplotlib.font_manager.win32FontDirectory",
        "<builtin>.set",
        "<builtin>.isinstance"
    ],
    "matplotlib.font_manager.win32FontDirectory": [
        "ntpath.join",
        "posixpath.join"
    ],
    "matplotlib.font_manager.list_fonts": [
        "os.walk",
        "ntpath.join",
        "posixpath.join"
    ],
    "os.walk": [
        "os._fspath",
        "os._walk"
    ],
    "os._walk": [
        "ntpath.join",
        "os._walk",
        "posixpath.islink",
        "ntpath.islink",
        "posixpath.join"
    ],
    "ntpath.islink": [
        "stat.S_ISLNK"
    ],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "matplotlib.font_manager.FontManager.addfont": [
        "matplotlib.font_manager.ttfFontProperty",
        "matplotlib.font_manager.afmFontProperty",
        "<builtin>.open"
    ],
    "matplotlib.font_manager.ttfFontProperty": [
        "<builtin>.filter",
        "<builtin>.any",
        "<builtin>.NotImplementedError",
        "matplotlib.font_manager.ttfFontProperty.get_weight",
        "<builtin>.int"
    ],
    "matplotlib.font_manager.ttfFontProperty.get_weight": [
        "re.search"
    ],
    "matplotlib.font_manager.afmFontProperty": [
        "<builtin>.any"
    ],
    "matplotlib.font_manager.json_dump": [
        "matplotlib.cbook._lock_path"
    ],
    "matplotlib.cbook._lock_path": [
        "pathlib.PurePath.with_name",
        "<builtin>.range"
    ],
    "matplotlib.patches": [
        "matplotlib._docstring.Substitution.update",
        "inspect.getdoc"
    ],
    "matplotlib.hatch": [],
    "matplotlib.lines": [
        "logging.getLogger"
    ],
    "matplotlib.markers": [
        "matplotlib.path.Path.__init__",
        "<builtin>.range"
    ],
    "matplotlib.path.Path.__init__": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "matplotlib._api.check_shape",
        "matplotlib.path.Path._update_values",
        "matplotlib.cbook._to_unmasked_float_array"
    ],
    "matplotlib.cbook._to_unmasked_float_array": [
        "numpy.ma.core.MaskedArray.filled",
        "numpy.ma.core.asarray",
        "<builtin>.hasattr"
    ],
    "numpy.ma.core.asarray": [],
    "numpy.ma.core.MaskedArray.filled": [
        "numpy.core.fromnumeric.choose",
        "numpy.ma.core._check_fill_value",
        "numpy.ma.core._recursive_filled",
        "numpy.core.multiarray.copyto"
    ],
    "numpy.ma.core._check_fill_value": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "numpy.ma.core._recursive_set_fill_value",
        "<builtin>.isinstance",
        "numpy.ma.core.default_fill_value"
    ],
    "numpy.ma.core._recursive_set_fill_value": [
        "<builtin>.tuple",
        "<builtin>.len",
        "numpy.core.fromnumeric.resize",
        "<builtin>.zip",
        "append"
    ],
    "numpy.core.fromnumeric.resize": [
        "<builtin>.ValueError",
        "numpy.core.fromnumeric.reshape",
        "numpy.core.numeric.zeros_like",
        "numpy.core.fromnumeric.ravel",
        "numpy.core.multiarray.concatenate",
        "<builtin>.isinstance"
    ],
    "numpy.core.fromnumeric.ravel": [
        "<builtin>.isinstance"
    ],
    "numpy.core.numeric.zeros_like": [
        "numpy.core.multiarray.copyto",
        "numpy.core.multiarray.empty_like"
    ],
    "numpy.core.multiarray.empty_like": [],
    "numpy.core.multiarray.copyto": [],
    "numpy.core.multiarray.concatenate": [
        "<builtin>.list"
    ],
    "numpy.core.fromnumeric.reshape": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric._wrapfunc": [
        "numpy.core.fromnumeric._wrapit",
        "<builtin>.getattr"
    ],
    "numpy.core.fromnumeric._wrapit": [
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "numpy.ma.core.default_fill_value": [
        "numpy.ma.core._get_dtype_of",
        "numpy.ma.core._recursive_fill_value"
    ],
    "numpy.ma.core._get_dtype_of": [
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "numpy.ma.core._recursive_fill_value": [
        "<builtin>.tuple",
        "numpy.ma.core.default_fill_value._scalar_fill_value",
        "numpy.core.numeric.full",
        "numpy.ma.core._recursive_fill_value"
    ],
    "numpy.ma.core.default_fill_value._scalar_fill_value": [
        "<map>.get"
    ],
    "numpy.core.numeric.full": [
        "numpy.core.multiarray.copyto"
    ],
    "numpy.core.fromnumeric.choose": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.ma.core._recursive_filled": [
        "numpy.ma.core._recursive_filled",
        "numpy.core.multiarray.copyto"
    ],
    "matplotlib._api.check_shape": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.any",
        "<builtin>.str",
        "<builtin>.zip",
        "<builtin>.next",
        "<builtin>.iter"
    ],
    "matplotlib.path.Path._update_values": [
        "<builtin>.len",
        "numpy.core.fromnumeric.all"
    ],
    "numpy.core.fromnumeric.all": [
        "numpy.core.fromnumeric._wrapreduction"
    ],
    "matplotlib.markers.MarkerStyle": [
        "matplotlib.path.Path.__init__",
        "matplotlib.path.Path._create_closed"
    ],
    "matplotlib.path.Path._create_closed": [
        "matplotlib.path.Path.__init__",
        "matplotlib.cbook._to_unmasked_float_array",
        "numpy.core.numeric.concatenate"
    ],
    "numpy.core.numeric.concatenate": [],
    "matplotlib.lines.Line2D": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.artist.allow_rasterization": [
        "functools.wraps"
    ],
    "matplotlib.lines.VertexSelector": [
        "<builtin>.property"
    ],
    "matplotlib.patches.Patch": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.patches.Shadow": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.Rectangle": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.RegularPolygon": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.PathPatch": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.StepPatch": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.Polygon": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.Wedge": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.Arrow": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.path.Path._create_closed"
    ],
    "matplotlib.patches.FancyArrow": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.CirclePolygon": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.Ellipse": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.Annulus": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.Circle": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.Arc": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.patches._Style": [
        "<builtin>.classmethod"
    ],
    "matplotlib.patches.ArrowStyle._Base": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.patches.FancyBboxPatch": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.FancyArrowPatch": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.patches.ConnectionPatch": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.textpath": [
        "matplotlib.textpath.TextToPath.__init__",
        "logging.getLogger"
    ],
    "matplotlib._text_helpers": [],
    "matplotlib.dviread": [
        "<builtin>.dict",
        "collections.namedtuple",
        "functools.lru_cache",
        "logging.getLogger"
    ],
    "matplotlib.dviread.Text": [
        "<builtin>.property"
    ],
    "matplotlib.dviread.PsfontsMap": [
        "functools.lru_cache"
    ],
    "matplotlib.dviread._LuatexKpsewhich": [
        "functools.lru_cache"
    ],
    "matplotlib.mathtext": [
        "logging.getLogger"
    ],
    "matplotlib.mathtext.MathTextParser": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "matplotlib.texmanager": [
        "logging.getLogger"
    ],
    "matplotlib.texmanager.TexManager": [
        "matplotlib._api.deprecation.deprecate_privatize_attribute.__init__",
        "functools.lru_cache",
        "ntpath.join",
        "<builtin>.classmethod",
        "matplotlib.get_cachedir",
        "posixpath.join"
    ],
    "matplotlib._api.deprecation.deprecate_privatize_attribute.__init__": [
        "matplotlib._api.deprecation.deprecated"
    ],
    "matplotlib.textpath.TextToPath": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.textpath.TextToPath.__init__": [
        "matplotlib.mathtext.MathTextParser.__init__"
    ],
    "matplotlib.mathtext.MathTextParser.__init__": [
        "matplotlib._api.check_getitem",
        "<str>.lower"
    ],
    "matplotlib._api.check_getitem": [
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "matplotlib.textpath.TextPath": [
        "<builtin>.property"
    ],
    "matplotlib.text.Text": [
        "matplotlib._docstring.kwarg_doc",
        "matplotlib._docstring.kwarg_doc.decorator",
        "<builtin>.dict",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib._docstring.kwarg_doc": [],
    "matplotlib._docstring.kwarg_doc.decorator": [],
    "matplotlib.text.Annotation": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter",
        "<builtin>.property",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.image": [
        "<builtin>.set",
        "logging.getLogger"
    ],
    "matplotlib.backend_bases": [
        "contextlib.contextmanager",
        "logging.getLogger"
    ],
    "matplotlib.backend_tools": [
        "<builtin>.set"
    ],
    "uuid": [
        "uuid.UUID.__init__",
        "platform.system",
        "<builtin>.getattr"
    ],
    "uuid.UUID": [
        "<builtin>.property"
    ],
    "uuid.UUID.__init__": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<str>.strip",
        "<builtin>.isinstance",
        "<builtin>.repr"
    ],
    "matplotlib._pylab_helpers": [],
    "matplotlib._pylab_helpers.Gcf": [
        "collections.OrderedDict.__init__",
        "<builtin>.classmethod"
    ],
    "matplotlib.backend_tools.ToolBase": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolToggleBase": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolQuit": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolQuitAll": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolGrid": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolMinorGrid": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolFullScreen": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolYScale": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolXScale": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolHome": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolBack": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolForward": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.SaveFigureBase": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolZoom": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolPan": [
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolHelpBase": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "matplotlib.backend_tools.ToolCopyToClipboardBase": [
        "<builtin>.property"
    ],
    "matplotlib._tight_bbox": [],
    "matplotlib.widgets": [],
    "matplotlib.collections": [],
    "matplotlib.collections.Collection": [
        "<builtin>.staticmethod",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.collections._CollectionWithSizes": [
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.collections.RegularPolyCollection": [
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.collections.EllipseCollection": [
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.collections.TriMesh": [
        "<builtin>.staticmethod",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.collections._MeshData": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.collections.QuadMesh": [
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.widgets.Widget": [
        "<builtin>.property"
    ],
    "matplotlib.widgets.AxesWidget": [
        "<builtin>.property"
    ],
    "matplotlib.widgets.TextBox": [
        "<builtin>.property"
    ],
    "matplotlib.widgets.RadioButtons": [
        "<builtin>.property"
    ],
    "matplotlib.widgets._SelectorWidget": [
        "<builtin>.property"
    ],
    "matplotlib.widgets.SpanSelector": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "matplotlib.widgets.ToolLineHandles": [
        "<builtin>.property"
    ],
    "matplotlib.widgets.ToolHandles": [
        "<builtin>.property"
    ],
    "matplotlib.widgets.RectangleSelector": [
        "<builtin>.property"
    ],
    "matplotlib.widgets.EllipseSelector": [
        "<builtin>.property"
    ],
    "matplotlib.widgets.PolygonSelector": [
        "<builtin>.property"
    ],
    "matplotlib.backend_managers": [],
    "matplotlib.backend_managers.ToolManager": [
        "<builtin>.property"
    ],
    "matplotlib.layout_engine": [],
    "matplotlib._constrained_layout": [
        "logging.getLogger"
    ],
    "matplotlib._layoutgrid": [
        "logging.getLogger"
    ],
    "kiwisolver": [],
    "kiwisolver.exceptions": [],
    "matplotlib._tight_layout": [],
    "matplotlib.layout_engine.LayoutEngine": [
        "<builtin>.property"
    ],
    "matplotlib.backend_bases.GraphicsContextBase": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.backend_bases.TimerBase": [
        "matplotlib._api.deprecation.delete_parameter",
        "matplotlib._api.deprecation.delete_parameter.wrapper",
        "<builtin>.property"
    ],
    "matplotlib.backend_bases.Event": [
        "<builtin>.property"
    ],
    "matplotlib.backend_bases.LocationEvent": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "matplotlib._api.classproperty.__init__",
        "matplotlib._api.deprecation.deprecated"
    ],
    "matplotlib.backend_bases.FigureCanvasBase": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "<builtin>.property",
        "matplotlib._api.deprecation.deprecated",
        "functools.cache",
        "matplotlib._api.classproperty.__init__",
        "<builtin>.classmethod",
        "contextlib.contextmanager"
    ],
    "matplotlib.backend_bases.FigureManagerBase": [
        "<builtin>.classmethod"
    ],
    "matplotlib.backend_bases._Mode": [
        "<builtin>.property"
    ],
    "matplotlib.backend_bases.NavigationToolbar2": [
        "contextlib.contextmanager",
        "<builtin>.staticmethod",
        "collections.namedtuple"
    ],
    "matplotlib.backend_bases._Backend": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "matplotlib.image._ImageBase": [
        "<builtin>.staticmethod",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.image.NonUniformImage": [
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.offsetbox.OffsetBox": [
        "matplotlib.offsetbox._compat_get_offset"
    ],
    "matplotlib.offsetbox._compat_get_offset": [
        "functools.wraps"
    ],
    "matplotlib.offsetbox.DrawingArea": [
        "<builtin>.property"
    ],
    "matplotlib.offsetbox.AnchoredOffsetbox": [
        "matplotlib.offsetbox._compat_get_offset"
    ],
    "matplotlib.offsetbox.AnnotationBbox": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.offsetbox.DraggableBase": [
        "<builtin>.property"
    ],
    "matplotlib.axis": [
        "<builtin>.list",
        "matplotlib.artist.ArtistInspector.get_setters",
        "matplotlib.artist.ArtistInspector.__init__",
        "<map>.values",
        "logging.getLogger"
    ],
    "matplotlib.units": [],
    "matplotlib.units.ConversionInterface": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.units.DecimalConverter": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.axis.Tick": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "<builtin>.property",
        "matplotlib.artist.allow_rasterization",
        "matplotlib._api.deprecation.deprecated",
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.axis.Ticker": [
        "<builtin>.property"
    ],
    "matplotlib.axis.Axis": [
        "<builtin>.property",
        "matplotlib.artist.allow_rasterization",
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "<builtin>.staticmethod",
        "matplotlib._api.deprecation.rename_parameter",
        "matplotlib.axis._LazyTickList.__init__"
    ],
    "matplotlib.axis._LazyTickList.__init__": [],
    "matplotlib.axis.XAxis": [
        "matplotlib.axis._make_getset_interval"
    ],
    "matplotlib.axis._make_getset_interval": [],
    "matplotlib.axis.YAxis": [
        "matplotlib.axis._make_getset_interval"
    ],
    "matplotlib.gridspec": [
        "logging.getLogger"
    ],
    "matplotlib.gridspec.GridSpecBase": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "matplotlib.gridspec.SubplotSpec": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "matplotlib.spines": [],
    "matplotlib.spines.Spine": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.artist.allow_rasterization",
        "<builtin>.classmethod"
    ],
    "matplotlib.spines.Spines": [
        "<builtin>.classmethod"
    ],
    "matplotlib.table": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.table.Cell": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.artist.allow_rasterization",
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._api.deprecation.rename_parameter"
    ],
    "matplotlib.table.Table": [
        "<builtin>.property",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.axes._base._process_plot_var_args": [
        "<builtin>.frozenset"
    ],
    "matplotlib.axes._base._AxesBase": [
        "matplotlib.axes._base._axis_method_wrapper.__init__",
        "matplotlib.cbook.Grouper.__init__",
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.artist.allow_rasterization",
        "matplotlib._api.deprecation.make_keyword_only",
        "matplotlib._api.deprecation.make_keyword_only.wrapper"
    ],
    "matplotlib.cbook.Grouper.__init__": [
        "_weakrefset.WeakSet.__init__",
        "<builtin>.len",
        "weakref.WeakKeyDictionary.__init__"
    ],
    "matplotlib.axes._base._axis_method_wrapper.__init__": [
        "<map>.items",
        "inspect.getdoc",
        "append",
        "<builtin>.getattr"
    ],
    "matplotlib._api.deprecation.make_keyword_only": [
        "functools.wraps",
        "index",
        "inspect.signature"
    ],
    "index": [],
    "matplotlib._api.deprecation.make_keyword_only.wrapper": [
        "<builtin>.len",
        "matplotlib._api.deprecation.warn_deprecated"
    ],
    "matplotlib.axes._axes": [
        "logging.getLogger"
    ],
    "matplotlib.category": [
        "logging.getLogger"
    ],
    "dateutil.parser": [
        "dateutil.parser.__deprecated_private_func",
        "dateutil.parser.__deprecate_private_class"
    ],
    "dateutil.parser._parser": [
        "dateutil.parser._parser.parser.__init__"
    ],
    "six": [
        "<builtin>.globals",
        "six.MovedModule.__init__",
        "<builtin>.len",
        "six.MovedAttribute.__init__",
        "<builtin>.type",
        "operator.attrgetter.__init__",
        "<builtin>.setattr",
        "six.exec_",
        "<builtin>.enumerate",
        "six._SixMetaPathImporter.__init__",
        "<builtin>.int",
        "six._SixMetaPathImporter._add_module",
        "six._add_doc",
        "operator.methodcaller.__init__",
        "<builtin>.isinstance",
        "operator.itemgetter.__init__",
        "<builtin>.getattr"
    ],
    "six._SixMetaPathImporter.__init__": [],
    "six.MovedAttribute.__init__": [
        "<builtin>.super"
    ],
    "six.MovedModule.__init__": [
        "<builtin>.super"
    ],
    "six._SixMetaPathImporter._add_module": [],
    "six.Module_six_moves_urllib": [
        "six._SixMetaPathImporter._get_module"
    ],
    "six._SixMetaPathImporter._get_module": [],
    "six._add_doc": [],
    "operator.methodcaller.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "six.exec_": [
        "<builtin>.exec"
    ],
    "dateutil": [],
    "dateutil._version": [],
    "dateutil.parser._parser._timelex": [
        "re.compile",
        "<builtin>.classmethod"
    ],
    "dateutil.parser._parser._ymd": [
        "<builtin>.property"
    ],
    "dateutil.parser._parser.parser.__init__": [
        "dateutil.parser._parser.parserinfo.__init__"
    ],
    "dateutil.parser._parser.parserinfo.__init__": [
        "dateutil.parser._parser.parserinfo._convert"
    ],
    "dateutil.parser._parser.parserinfo._convert": [
        "<builtin>.isinstance",
        "<builtin>.enumerate"
    ],
    "dateutil.parser.isoparser": [
        "dateutil.parser.isoparser.isoparser.__init__"
    ],
    "dateutil.tz": [],
    "dateutil.tz.tz": [
        "dateutil.tz.tz.__get_gettz",
        "datetime.date.toordinal"
    ],
    "dateutil.tz._common": [
        "<builtin>.hasattr"
    ],
    "dateutil.tz._common._DatetimeWithFold": [
        "<builtin>.property"
    ],
    "dateutil.tz._common._tzinfo": [
        "dateutil.tz._common._validate_fromutc_inputs"
    ],
    "dateutil.tz._common._validate_fromutc_inputs": [
        "functools.wraps"
    ],
    "dateutil.tz._common.tzrangebase": [
        "<builtin>.property",
        "dateutil.tz._common.tzname_in_python2"
    ],
    "dateutil.tz._common.tzname_in_python2": [
        "functools.wraps"
    ],
    "dateutil.tz._factories": [],
    "dateutil.tz.win": [
        "<builtin>.ImportError",
        "dateutil.tz.win._settzkeyname"
    ],
    "ctypes.wintypes": [],
    "dateutil.tz.win._settzkeyname": [],
    "dateutil.tz.win.tzwinbase": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "dateutil.tz.tz.tzutc": [
        "dateutil.tz._common._validate_fromutc_inputs",
        "dateutil.tz._common.tzname_in_python2"
    ],
    "dateutil.tz.tz.tzoffset": [
        "dateutil.tz._common._validate_fromutc_inputs",
        "dateutil.tz._common.tzname_in_python2"
    ],
    "dateutil.tz.tz.tzlocal": [
        "dateutil.tz._common.tzname_in_python2"
    ],
    "dateutil.tz.tz.tzfile": [
        "dateutil.tz._common.tzname_in_python2"
    ],
    "dateutil.tz.tz.tzrange": [
        "<builtin>.property"
    ],
    "dateutil.tz.tz._tzicalvtz": [
        "dateutil.tz._common.tzname_in_python2"
    ],
    "dateutil.tz.tz.__get_gettz": [
        "dateutil.tz.tz.__get_gettz.GettzFunc.__init__"
    ],
    "dateutil.tz.tz.__get_gettz.GettzFunc": [
        "<builtin>.staticmethod"
    ],
    "dateutil.tz.tz.__get_gettz.GettzFunc.__init__": [
        "collections.OrderedDict.__init__",
        "weakref.WeakValueDictionary.__init__"
    ],
    "dateutil.parser.isoparser.isoparser": [
        "re.compile",
        "dateutil.parser.isoparser._takes_ascii"
    ],
    "dateutil.parser.isoparser._takes_ascii": [
        "functools.wraps"
    ],
    "dateutil.parser.isoparser.isoparser.__init__": [
        "<builtin>.ord",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "dateutil.parser.__deprecate_private_class": [],
    "dateutil.parser.__deprecated_private_func": [
        "functools.wraps"
    ],
    "matplotlib.category.StrCategoryConverter": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.category.StrCategoryFormatter": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.category.UnitData": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.contour": [
        "matplotlib._docstring.Substitution.update"
    ],
    "matplotlib.contour.ContourLabeler": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "matplotlib._api.deprecation.deprecated"
    ],
    "matplotlib.contour.ContourSet": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "<builtin>.property",
        "matplotlib._api.deprecation.deprecated"
    ],
    "matplotlib.dates": [
        "<builtin>.float",
        "numpy.lib.function_base.vectorize.__init__",
        "datetime.date.toordinal",
        "logging.getLogger"
    ],
    "dateutil.rrule": [
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.range",
        "dateutil.rrule.weekday.__init__"
    ],
    "dateutil._common": [],
    "fractions": [
        "re.compile"
    ],
    "fractions.Fraction": [
        "<builtin>.property",
        "fractions.Fraction._operator_fallbacks",
        "<builtin>.classmethod"
    ],
    "fractions.Fraction._operator_fallbacks": [],
    "dateutil.rrule.weekday.__init__": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "dateutil.rrule.rruleset": [
        "dateutil.rrule._invalidates_cache"
    ],
    "dateutil.rrule._invalidates_cache": [
        "functools.wraps"
    ],
    "dateutil.relativedelta": [
        "<builtin>.tuple",
        "dateutil._common.weekday.__init__",
        "<builtin>.range"
    ],
    "dateutil._common.weekday.__init__": [],
    "dateutil.relativedelta.relativedelta": [
        "<builtin>.property"
    ],
    "matplotlib.dates.RRuleLocator": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.dates.DateConverter": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.dates._SwitchableDateConverter": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.legend": [
        "matplotlib._docstring.Substitution.update"
    ],
    "matplotlib.container": [],
    "matplotlib.legend_handler": [],
    "matplotlib.legend_handler.HandlerStepPatch": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.legend.Legend": [
        "matplotlib.legend_handler.HandlerErrorbar.__init__",
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.artist.allow_rasterization",
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "matplotlib.legend_handler.HandlerRegularPolyCollection.__init__",
        "matplotlib.legend_handler.HandlerStem.__init__",
        "matplotlib._api.deprecation.rename_parameter",
        "matplotlib.legend_handler.HandlerTuple.__init__",
        "matplotlib.legend_handler.HandlerPatch.__init__"
    ],
    "matplotlib.legend_handler.HandlerStem.__init__": [
        "<builtin>.super"
    ],
    "matplotlib.legend_handler.HandlerErrorbar.__init__": [
        "<builtin>.super"
    ],
    "matplotlib.legend_handler.HandlerPatch.__init__": [
        "<builtin>.super"
    ],
    "matplotlib.legend_handler.HandlerRegularPolyCollection.__init__": [
        "<builtin>.super"
    ],
    "matplotlib.legend_handler.HandlerTuple.__init__": [
        "<builtin>.super"
    ],
    "matplotlib.mlab": [
        "matplotlib._docstring.Substitution.update",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.quiver": [
        "matplotlib._docstring.Substitution.update"
    ],
    "matplotlib.quiver.QuiverKey": [
        "<builtin>.property",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib.quiver.Quiver": [
        "matplotlib._docstring.Substitution.__init__",
        "matplotlib.artist.allow_rasterization"
    ],
    "matplotlib._docstring.Substitution.__init__": [
        "<builtin>.TypeError"
    ],
    "matplotlib.quiver.Barbs": [
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.stackplot": [],
    "matplotlib.streamplot": [],
    "matplotlib.streamplot.Grid": [
        "<builtin>.property"
    ],
    "matplotlib.tri": [],
    "matplotlib.tri._triangulation": [],
    "matplotlib.tri._triangulation.Triangulation": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "matplotlib.tri._tricontour": [
        "matplotlib._docstring.Substitution.update",
        "matplotlib._docstring.Substitution.__init__",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__"
    ],
    "matplotlib.tri._trifinder": [],
    "matplotlib.tri._triinterpolate": [],
    "matplotlib.tri._tritools": [],
    "matplotlib.tri._tritools.TriAnalyzer": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "matplotlib.tri._triinterpolate.CubicTriInterpolator": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.tri._triinterpolate._ReducedHCT_Element": [
        "numpy.core.ones"
    ],
    "matplotlib.tri._triinterpolate._DOF_estimator": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.tri._triinterpolate._Sparse_Matrix_coo": [
        "<builtin>.property"
    ],
    "matplotlib.tri._tripcolor": [],
    "matplotlib.tri._triplot": [],
    "matplotlib.tri._trirefine": [],
    "matplotlib.tri._trirefine.UniformTriRefiner": [
        "<builtin>.staticmethod"
    ],
    "matplotlib.axes._secondary_axes": [
        "matplotlib._docstring.Substitution.update"
    ],
    "matplotlib.axes._secondary_axes.SecondaryAxis": [
        "matplotlib._docstring.copy",
        "matplotlib._docstring.copy.do_copy"
    ],
    "matplotlib._docstring.copy": [],
    "matplotlib._docstring.copy.do_copy": [],
    "matplotlib.axes._axes.Axes": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib._docstring.copy.do_copy",
        "matplotlib._api.deprecation.deprecated",
        "matplotlib._preprocess_data",
        "matplotlib._api.deprecation.rename_parameter.wrapper",
        "matplotlib._docstring.copy",
        "<builtin>.staticmethod",
        "matplotlib._api.deprecation.rename_parameter",
        "matplotlib._preprocess_data.inner",
        "matplotlib.axes._axes._make_axes_method"
    ],
    "matplotlib._preprocess_data": [
        "<builtin>.list",
        "inspect.Parameter.__init__",
        "matplotlib._add_data_doc",
        "inspect.signature",
        "functools.wraps",
        "append"
    ],
    "matplotlib._add_data_doc": [
        "<builtin>.map",
        "inspect.cleandoc",
        "<builtin>.len"
    ],
    "matplotlib._preprocess_data.inner": [
        "matplotlib._replacer",
        "<builtin>.tuple",
        "matplotlib.cbook.sanitize_sequence",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib._label_from_arg",
        "<builtin>.map",
        "<map>.get"
    ],
    "matplotlib.cbook.sanitize_sequence": [
        "<builtin>.list",
        "<builtin>.isinstance"
    ],
    "matplotlib._replacer": [
        "matplotlib.cbook.sanitize_sequence",
        "<builtin>.isinstance"
    ],
    "matplotlib._label_from_arg": [
        "<builtin>.isinstance"
    ],
    "matplotlib.axes._axes._make_axes_method": [],
    "pandas.plotting._core.PlotAccessor": [
        "<builtin>.staticmethod",
        "pandas.util._decorators.Appender.__init__",
        "pandas.util._decorators.Substitution.__init__"
    ],
    "pandas.plotting._misc": [
        "pandas.plotting._misc._Options.__init__"
    ],
    "matplotlib.figure": [
        "logging.getLogger"
    ],
    "matplotlib._blocking_input": [],
    "matplotlib.projections": [
        "matplotlib._docstring.Substitution.update",
        "matplotlib.projections.ProjectionRegistry.register",
        "warnings.warn",
        "matplotlib.projections.ProjectionRegistry.__init__",
        "matplotlib.projections.ProjectionRegistry.get_projection_names"
    ],
    "mpl_toolkits.mplot3d": [],
    "matplotlib.projections.ProjectionRegistry.__init__": [],
    "matplotlib.projections.ProjectionRegistry.register": [],
    "matplotlib.projections.ProjectionRegistry.get_projection_names": [
        "<builtin>.sorted"
    ],
    "matplotlib.colorbar": [
        "matplotlib._docstring.Substitution.update",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "logging.getLogger"
    ],
    "matplotlib.colorbar.Colorbar": [
        "<builtin>.property"
    ],
    "matplotlib.figure.FigureBase": [
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib._docstring.copy.do_copy",
        "matplotlib._api.deprecation.make_keyword_only",
        "matplotlib._docstring.Substitution.__init__",
        "matplotlib._docstring.copy",
        "<builtin>.staticmethod",
        "matplotlib._api.deprecation.make_keyword_only.wrapper"
    ],
    "matplotlib.figure.SubFigure": [
        "<builtin>.property"
    ],
    "matplotlib.figure.Figure": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "<builtin>.property",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib.artist.allow_rasterization",
        "matplotlib._api.deprecation.deprecated",
        "matplotlib.artist._finalize_rasterization",
        "threading.RLock"
    ],
    "matplotlib.artist._finalize_rasterization": [
        "functools.wraps"
    ],
    "pandas.plotting._misc._Options": [
        "contextlib.contextmanager"
    ],
    "pandas.plotting._misc._Options.__init__": [
        "<builtin>.super"
    ],
    "pandas.core.series.Series": [
        "pandas.core.accessor.CachedAccessor.__init__",
        "textwrap.dedent",
        "<builtin>.property",
        "pandas.util._decorators.Substitution.__init__",
        "<builtin>.len",
        "pandas.core.series._coerce_method",
        "typing.overload",
        "pandas.util._decorators.Appender.__init__",
        "pandas.core.generic.make_doc",
        "<builtin>.frozenset",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.deprecate_nonkeyword_arguments",
        "pandas.core.ops.docstrings.make_flex_doc",
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.deprecate_nonkeyword_arguments.decorate"
    ],
    "pandas.core.series._coerce_method": [],
    "pandas.core.accessor.CachedAccessor.__init__": [],
    "pandas.core.ops.docstrings.make_flex_doc": [
        "<str>.startswith",
        "<builtin>.AssertionError"
    ],
    "pandas.core.generic.make_doc": [],
    "pandas.core.groupby.groupby.BaseGroupBy": [
        "typing.final",
        "<builtin>.property",
        "pandas.util._decorators.Substitution.__init__",
        "textwrap.dedent",
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.groupby.groupby.GroupBy": [
        "textwrap.dedent",
        "typing.final",
        "pandas.util._decorators.Substitution.__init__",
        "<builtin>.property",
        "pandas.util._decorators.Appender.__init__",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.indexes.period": [
        "<builtin>.dict"
    ],
    "pandas.core.arrays.period": [
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pandas.core.arrays.period.PeriodArray": [
        "<builtin>.property",
        "pandas.core.arrays.period._field_accessor",
        "<builtin>.classmethod",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.arrays.period._field_accessor": [
        "<builtin>.property"
    ],
    "pandas.core.indexes.period.PeriodIndex": [
        "pandas.util._decorators.doc.decorator",
        "<builtin>.property",
        "pandas.util._decorators.doc",
        "<builtin>.classmethod"
    ],
    "pandas.core.resample.Resampler": [
        "typing.final",
        "<builtin>.property",
        "pandas.util._decorators.Substitution.__init__",
        "textwrap.dedent",
        "pandas.util._decorators.Appender.__init__",
        "<builtin>.set",
        "<builtin>.frozenset",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.resample._GroupByMixin": [
        "typing.no_type_check",
        "typing.final"
    ],
    "typing.no_type_check": [
        "typing.no_type_check",
        "<builtin>.isinstance"
    ],
    "pandas.core.resample.DatetimeIndexResampler": [
        "<builtin>.property"
    ],
    "pandas.core.resample.DatetimeIndexResamplerGroupby": [
        "<builtin>.property"
    ],
    "pandas.core.resample.PeriodIndexResampler": [
        "<builtin>.property"
    ],
    "pandas.core.resample.PeriodIndexResamplerGroupby": [
        "<builtin>.property"
    ],
    "pandas.core.resample.TimedeltaIndexResampler": [
        "<builtin>.property"
    ],
    "pandas.core.resample.TimedeltaIndexResamplerGroupby": [
        "<builtin>.property"
    ],
    "pandas.core.generic.NDFrame": [
        "typing.final",
        "<builtin>.property",
        "typing.overload",
        "<builtin>.classmethod",
        "<builtin>.set",
        "<builtin>.frozenset",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.deprecate_nonkeyword_arguments",
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.deprecate_nonkeyword_arguments.decorate"
    ],
    "pandas.core.flags.Flags": [
        "<builtin>.property"
    ],
    "pandas.core.indexes.interval": [
        "textwrap.dedent",
        "<builtin>.dict"
    ],
    "pandas.core.arrays.interval": [],
    "pandas.core.arrays.interval.IntervalArray": [
        "textwrap.dedent",
        "<builtin>.property",
        "typing.overload",
        "pandas.util._decorators.Appender.__init__",
        "pandas.core.ops.common.unpack_zerodim_and_defer",
        "pandas.core.ops.common.unpack_zerodim_and_defer.wrapper",
        "<builtin>.classmethod"
    ],
    "pandas.core.indexes.interval.IntervalIndex": [
        "textwrap.dedent",
        "pandas.util._decorators.Appender.__init__",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.tools.numeric": [],
    "pandas.core.indexes.datetimes.DatetimeIndex": [
        "pandas.util._decorators.doc.decorator",
        "<builtin>.property",
        "pandas.util._decorators.doc"
    ],
    "pandas.core.groupby.grouper.Grouper": [
        "typing.final",
        "<builtin>.property"
    ],
    "pandas.core.groupby.grouper.Grouping": [
        "<builtin>.property"
    ],
    "pandas.core.groupby.ops.WrappedCythonOp": [
        "functools.cache",
        "typing.final",
        "<builtin>.frozenset",
        "<builtin>.classmethod"
    ],
    "pandas.core.groupby.ops.BaseGrouper": [
        "typing.final",
        "<builtin>.property"
    ],
    "pandas.core.groupby.ops.BinGrouper": [
        "<builtin>.property"
    ],
    "pandas.core.groupby.generic.SeriesGroupBy": [
        "textwrap.dedent",
        "<builtin>.property",
        "pandas.util._decorators.Substitution.__init__",
        "pandas.util._decorators.Appender.__init__",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.groupby.generic.DataFrameGroupBy": [
        "textwrap.dedent",
        "<builtin>.property",
        "pandas.util._decorators.Substitution.__init__",
        "pandas.util._decorators.Appender.__init__",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.apply.Apply": [
        "abc.abstractmethod"
    ],
    "pandas.core.apply.NDFrameApply": [
        "<builtin>.property"
    ],
    "pandas.core.apply.FrameApply": [
        "functools.cache",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "abc.abstractmethod"
    ],
    "pandas.core.apply.FrameRowApply": [
        "functools.cache",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pandas.core.apply.FrameColumnApply": [
        "functools.cache",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pandas.core.reshape.melt": [
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.core.reshape.util": [],
    "pandas.core.interchange.dataframe_protocol": [],
    "pandas.core.interchange.dataframe_protocol.Buffer": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.core.interchange.dataframe_protocol.Column": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.core.interchange.dataframe_protocol.DataFrame": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.io.formats.style": [
        "contextlib.contextmanager",
        "pandas.compat._optional.import_optional_dependency"
    ],
    "pandas.io.formats.style_render": [
        "pandas.compat._optional.import_optional_dependency"
    ],
    "pandas.api.types": [],
    "pandas.core.dtypes.api": [],
    "markupsafe": [
        "typing_extensions.ParamSpec.__init__",
        "typing.TypeVar.__init__"
    ],
    "typing_extensions.ParamSpec.__init__": [
        "typing_extensions._set_default",
        "typing._type_check",
        "typing_extensions._caller",
        "<builtin>.bool"
    ],
    "typing_extensions._set_default": [],
    "typing_extensions._caller": [],
    "markupsafe.Markup": [
        "markupsafe._simple_escaping_wrapper",
        "<builtin>.classmethod"
    ],
    "markupsafe._simple_escaping_wrapper": [
        "functools.wraps"
    ],
    "markupsafe._native": [],
    "pandas.io.formats.style_render.Tooltips": [
        "<builtin>.property"
    ],
    "matplotlib.pyplot": [
        "matplotlib._api.deprecation.deprecated.deprecate",
        "matplotlib.RcParams._set",
        "matplotlib._docstring._ArtistPropertiesSubstitution.__init__",
        "matplotlib._api.deprecation.deprecated",
        "typing.overload",
        "matplotlib.RcParams._get_backend_or_none",
        "matplotlib.pyplot._copy_docstring_and_deprecators",
        "typing.TypeVar.__init__",
        "<builtin>.set",
        "matplotlib.cbook._get_running_interactive_framework",
        "typing_extensions.ParamSpec.__init__",
        "matplotlib.backends.registry.BackendRegistry.list_builtin",
        "logging.getLogger"
    ],
    "matplotlib.style": [],
    "matplotlib.style.core": [
        "contextlib.contextmanager",
        "matplotlib.style.core.read_style_directory",
        "matplotlib._docstring.Substitution.__init__",
        "ntpath.join",
        "logging.getLogger",
        "matplotlib.get_configdir",
        "<builtin>.map",
        "matplotlib.get_data_path",
        "matplotlib.style.core.reload_library",
        "<builtin>.sorted",
        "posixpath.join"
    ],
    "matplotlib.style.core.read_style_directory": [
        "matplotlib._rc_params_in_file",
        "<builtin>.dict",
        "warnings.catch_warnings.__init__",
        "pathlib.Path.glob"
    ],
    "pathlib.Path.glob": [
        "<builtin>.tuple",
        "<builtin>.ValueError",
        "pathlib._make_selector",
        "<builtin>.NotImplementedError",
        "pathlib._Selector.select_from"
    ],
    "pathlib._make_selector": [
        "<builtin>.ValueError",
        "pathlib._PreciseSelector.__init__",
        "pathlib._WildcardSelector.__init__",
        "pathlib._RecursiveWildcardSelector.__init__",
        "pathlib._is_wildcard_pattern"
    ],
    "pathlib._is_wildcard_pattern": [],
    "pathlib._RecursiveWildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._Selector.__init__": [
        "pathlib._make_selector"
    ],
    "pathlib._WildcardSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._PreciseSelector.__init__": [
        "pathlib._Selector.__init__"
    ],
    "pathlib._Selector.select_from": [
        "<builtin>.iter",
        "<builtin>.type"
    ],
    "matplotlib.style.core.reload_library": [
        "<map>.keys",
        "<map>.update",
        "<map>.clear",
        "<builtin>.sorted"
    ],
    "matplotlib.typing": [
        "typing.TypeVar.__init__"
    ],
    "matplotlib.pyplot._copy_docstring_and_deprecators": [],
    "matplotlib.RcParams._get_backend_or_none": [
        "matplotlib.RcParams._get"
    ],
    "matplotlib.backends.registry.BackendRegistry.list_builtin": [
        "<map>.items"
    ],
    "matplotlib.cbook._get_running_interactive_framework": [],
    "pandas.io.formats.style.Styler": [
        "pandas.util._decorators.Substitution.__init__",
        "typing.overload",
        "<builtin>.classmethod",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.doc.decorator"
    ],
    "pandas.core.frame.DataFrame": [
        "pandas.core.accessor.CachedAccessor.__init__",
        "textwrap.dedent",
        "<builtin>.property",
        "pandas.util._decorators.Substitution.__init__",
        "<builtin>.len",
        "typing.overload",
        "pandas.util._decorators.Appender.__init__",
        "<builtin>.classmethod",
        "pandas.util._decorators.doc.decorator",
        "pandas.core.generic.make_doc",
        "<builtin>.frozenset",
        "pandas.util._decorators.doc",
        "pandas.core.ops.docstrings.make_flex_doc",
        "pandas.util._decorators.deprecate_nonkeyword_arguments",
        "pandas.util._decorators.deprecate_nonkeyword_arguments.decorate"
    ],
    "pandas.core.arrays._mixins.NDArrayBackedExtensionArray": [
        "pandas.util._decorators.doc.decorator",
        "typing.overload",
        "pandas.util._decorators.doc",
        "<builtin>.classmethod"
    ],
    "pandas.core.array_algos.take._view_wrapper": [],
    "pandas.core.arrays.base.ExtensionArray": [
        "<builtin>.property",
        "pandas.util._decorators.Substitution.__init__",
        "typing.overload",
        "pandas.util._decorators.Appender.__init__",
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.base.ExtensionOpsMixin": [
        "<builtin>.classmethod"
    ],
    "pandas.core.arrays.base.ExtensionScalarOpsMixin": [
        "<builtin>.classmethod"
    ],
    "pandas.core.arraylike.OpsMixin": [
        "pandas.core.ops.common.unpack_zerodim_and_defer",
        "pandas.core.ops.common.unpack_zerodim_and_defer.wrapper"
    ],
    "pandas.core.indexes.base.Index": [
        "pandas.core.accessor.CachedAccessor.__init__",
        "typing.final",
        "<builtin>.property",
        "typing.overload",
        "pandas.util._decorators.Appender.__init__",
        "pandas.core.indexes.base._maybe_return_indexers",
        "<builtin>.classmethod",
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc",
        "pandas.util._decorators.deprecate_nonkeyword_arguments",
        "pandas.util._decorators.deprecate_nonkeyword_arguments.decorate"
    ],
    "pandas.core.indexes.base._maybe_return_indexers": [
        "typing.cast",
        "functools.wraps"
    ],
    "pandas.io._util": [],
    "pandas.core.arrays.arrow.array.ArrowExtensionArray": [
        "pandas.util._decorators.doc.decorator",
        "<builtin>.property",
        "pandas.util._decorators.doc",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.generic.create_pandas_abc_type": [
        "<builtin>.type",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.base.ExtensionDtype": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.base.StorageExtensionDtype": [
        "<builtin>.property"
    ],
    "pandas.core.dtypes.base.Registry": [
        "typing.overload"
    ],
    "pandas.core.dtypes.base.Registry.__init__": [],
    "pandas.util": [],
    "pandas.core.dtypes.dtypes.PandasExtensionDtype": [
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.dtypes.CategoricalDtype": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.dtypes.DatetimeTZDtype": [
        "re.compile",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.dtypes.PeriodDtype": [
        "re.compile",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.dtypes.IntervalDtype": [
        "re.compile",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.dtypes.NumpyEADtype": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.dtypes.BaseMaskedDtype": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.dtypes.SparseDtype": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.core.dtypes.dtypes.ArrowDtype": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.tseries.holiday": [
        "pandas.tseries.holiday.Holiday.__init__",
        "datetime"
    ],
    "pandas.tseries.holiday.AbstractHolidayCalendar": [
        "<builtin>.staticmethod",
        "datetime"
    ],
    "pandas.tseries.holiday.Holiday.__init__": [
        "<builtin>.NotImplementedError",
        "<builtin>.type"
    ],
    "pandas.tseries.holiday.USFederalHolidayCalendar": [
        "pandas.tseries.holiday.Holiday.__init__"
    ],
    "pandas._typing.SequenceNotStr": [
        "typing.overload"
    ],
    "pandas._typing.BaseBuffer": [
        "<builtin>.property"
    ],
    "pandas._typing.ReadCsvBuffer": [
        "<builtin>.property"
    ],
    "pandas.core.config_init": [
        "pandas._config.config.deprecate_option",
        "pandas._config.config.config_prefix"
    ],
    "pandas._config.config.deprecate_option": [
        "<str>.lower"
    ],
    "pandas.tseries.api": [],
    "pandas.core.computation.api": [],
    "pandas.core.computation.eval": [],
    "pandas.core.computation.engines": [
        "<builtin>.frozenset"
    ],
    "pandas.core.computation.align": [
        "pandas.core.computation.align._filter_special_cases"
    ],
    "pandas.core.computation.common": [],
    "pandas.core.computation.align._filter_special_cases": [
        "functools.wraps"
    ],
    "pandas.core.computation.ops": [
        "<builtin>.dict",
        "<map>.update",
        "<builtin>.zip"
    ],
    "pandas.core.computation.scope": [
        "typing.TypeVar.__init__"
    ],
    "pandas.core.computation.scope.Scope": [
        "<builtin>.property"
    ],
    "pandas.core.computation.ops.Term": [
        "<builtin>.property"
    ],
    "pandas.core.computation.ops.Constant": [
        "<builtin>.property"
    ],
    "pandas.core.computation.ops.Op": [
        "<builtin>.property"
    ],
    "pandas.core.computation.ops.UnaryOp": [
        "<builtin>.property"
    ],
    "pandas.core.computation.expr": [
        "<builtin>.issubclass",
        "pandas.core.computation.expr._is_type",
        "pandas.core.computation.expr._filter_nodes",
        "pandas.core.computation.expr._compose",
        "typing.TypeVar.__init__",
        "<builtin>.dir",
        "<builtin>.frozenset",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "pandas.core.computation.parsing": [],
    "pandas.core.computation.expr._compose": [
        "<builtin>.len",
        "functools.reduce"
    ],
    "pandas.core.computation.expr._compose2": [],
    "pandas.core.computation.expr._is_type": [],
    "pandas.core.computation.expr._filter_nodes": [
        "<builtin>.issubclass",
        "<builtin>.frozenset"
    ],
    "pandas.core.computation.expr.BaseExprVisitor": [
        "<builtin>.dict",
        "<builtin>.zip"
    ],
    "pandas.core.computation.expr.PandasExprVisitor": [
        "pandas.core.computation.expr._compose"
    ],
    "pandas.core.computation.expr.Expr": [
        "<builtin>.property"
    ],
    "pandas.core.computation.engines.AbstractEngine": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.core.reshape.api": [],
    "pandas.core.reshape.encoding": [],
    "pandas.core.reshape.merge": [
        "pandas.util._decorators.Appender.__init__",
        "pandas.util._decorators.Substitution.__init__"
    ],
    "pandas.core.reshape.merge._MergeOperation": [
        "typing.final"
    ],
    "pandas.core.reshape.pivot": [
        "pandas.util._decorators.Appender.__init__",
        "pandas.util._decorators.Substitution.__init__"
    ],
    "pandas.core.reshape.tile": [],
    "pandas.api": [],
    "pandas.api.indexers": [],
    "pandas.api.interchange": [],
    "pandas.core.interchange.from_dataframe": [],
    "pandas.core.interchange.utils": [],
    "pandas.api.typing": [],
    "pandas.io.json._json": [
        "pandas.util._decorators.doc.decorator",
        "typing.overload",
        "pandas.util._decorators.doc",
        "typing.TypeVar.__init__"
    ],
    "pandas.io.json._normalize": [],
    "pandas.io.json._table_schema": [],
    "pandas.io.parsers.readers": [
        "typing.overload",
        "textwrap.fill",
        "pandas.util._decorators.Appender.__init__",
        "<builtin>.sorted"
    ],
    "pandas.io.parsers.arrow_parser_wrapper": [],
    "pandas.io.parsers.base_parser": [],
    "pandas.io.parsers.base_parser.ParserBase": [
        "typing.overload",
        "typing.final",
        "<builtin>.property"
    ],
    "pandas.io.parsers.c_parser_wrapper": [],
    "pandas.io.parsers.python_parser": [],
    "textwrap.fill": [
        "textwrap.TextWrapper.__init__",
        "textwrap.TextWrapper.fill"
    ],
    "textwrap.TextWrapper.__init__": [],
    "textwrap.TextWrapper.fill": [
        "textwrap.TextWrapper.wrap"
    ],
    "textwrap.TextWrapper.wrap": [
        "textwrap.TextWrapper._wrap_chunks",
        "textwrap.TextWrapper._fix_sentence_endings",
        "textwrap.TextWrapper._split_chunks"
    ],
    "textwrap.TextWrapper._split_chunks": [
        "textwrap.TextWrapper._split",
        "textwrap.TextWrapper._munge_whitespace"
    ],
    "textwrap.TextWrapper._munge_whitespace": [
        "<str>.translate",
        "<str>.expandtabs"
    ],
    "textwrap.TextWrapper._split": [],
    "textwrap.TextWrapper._fix_sentence_endings": [
        "<builtin>.len"
    ],
    "textwrap.TextWrapper._wrap_chunks": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "textwrap.TextWrapper._handle_long_word",
        "<builtin>.map",
        "<builtin>.sum",
        "append"
    ],
    "textwrap.TextWrapper._handle_long_word": [
        "<builtin>.len",
        "append",
        "<builtin>.any"
    ],
    "<builtin>.sum": [],
    "pandas.io.json._json.Writer": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "pandas.io.json._json.SeriesWriter": [
        "<builtin>.property"
    ],
    "pandas.io.json._json.FrameWriter": [
        "<builtin>.property"
    ],
    "pandas.io.json._json.JSONTableWriter": [
        "<builtin>.property"
    ],
    "pandas.io.json._json.JsonReader": [
        "typing.overload"
    ],
    "pandas.io.json._json.Parser": [
        "typing.final"
    ],
    "pandas.io.stata": [
        "datetime",
        "pandas.util._decorators.Appender.__init__"
    ],
    "pandas.io.stata.StataMissingValue": [
        "<builtin>.classmethod",
        "<builtin>.range",
        "<builtin>.chr",
        "<builtin>.property"
    ],
    "pandas.io.stata.StataReader": [
        "pandas.util._decorators.Appender.__init__",
        "<builtin>.property"
    ],
    "pandas.io.stata.StataWriter": [
        "<builtin>.staticmethod"
    ],
    "pandas.io.stata.StataWriter117": [
        "<builtin>.staticmethod"
    ],
    "pandas.io": [],
    "pandas.io.formats": [],
    "pandas.io.json": [],
    "pandas.tseries": [],
    "pandas.testing": [],
    "pandas._testing": [
        "<builtin>.float",
        "pandas.core.dtypes.dtypes.ArrowDtype.__init__",
        "<builtin>.str",
        "<map>.items"
    ],
    "pandas._config.localization": [
        "contextlib.contextmanager"
    ],
    "pandas._testing._io": [],
    "pandas._testing.contexts": [
        "contextlib.contextmanager"
    ],
    "pandas._testing._warnings": [
        "contextlib.contextmanager"
    ],
    "pandas._testing.asserters": [],
    "pandas._testing.compat": [],
    "pandas.core.dtypes.dtypes.ArrowDtype.__init__": [
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.ImportError",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "pandas._testing.SubclassedSeries": [
        "<builtin>.property"
    ],
    "pandas._testing.SubclassedDataFrame": [
        "<builtin>.property"
    ],
    "pandas.util._print_versions": [],
    "pandas.io.api": [],
    "pandas.io.clipboards": [],
    "pandas.io.excel": [
        "pandas.io.excel._util.register_writer"
    ],
    "pandas.io.excel._base": [
        "textwrap.fill",
        "typing.overload",
        "pandas.util._decorators.Appender.__init__",
        "typing.TypeVar.__init__",
        "pandas.util._decorators.doc",
        "<builtin>.max",
        "<builtin>.map",
        "pandas.util._decorators.doc.decorator",
        "<builtin>.sorted"
    ],
    "pandas.io.excel._util": [
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pandas.io.parsers": [],
    "pandas.io.excel._base.BaseExcelReader": [
        "<builtin>.property"
    ],
    "pandas.io.excel._base.ExcelWriter": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.io.excel._calamine": [],
    "pandas.io.excel._calamine.CalamineReader": [
        "pandas.util._decorators.doc.decorator",
        "<builtin>.property",
        "pandas.util._decorators.doc"
    ],
    "pandas.io.excel._odfreader": [],
    "pandas.io.excel._odfreader.ODFReader": [
        "<builtin>.property"
    ],
    "pandas.io.excel._openpyxl": [],
    "pandas.io.excel._openpyxl.OpenpyxlWriter": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.io.excel._openpyxl.OpenpyxlReader": [
        "pandas.util._decorators.doc.decorator",
        "<builtin>.property",
        "pandas.util._decorators.doc"
    ],
    "pandas.io.excel._pyxlsb": [],
    "pandas.io.excel._pyxlsb.PyxlsbReader": [
        "pandas.util._decorators.doc.decorator",
        "<builtin>.property",
        "pandas.util._decorators.doc"
    ],
    "pandas.io.excel._xlrd": [],
    "pandas.io.excel._xlrd.XlrdReader": [
        "pandas.util._decorators.doc.decorator",
        "<builtin>.property",
        "pandas.util._decorators.doc"
    ],
    "pandas.io.excel._base.ExcelFile": [
        "<builtin>.property"
    ],
    "pandas.io.excel._odswriter": [],
    "pandas.io.formats.excel": [],
    "pandas.io.formats._color_data": [],
    "pandas.io.formats.css": [],
    "pandas.io.formats.css.CSSResolver": [
        "pandas.io.formats.css._side_expander",
        "<map>.copy",
        "pandas.io.formats.css._border_expander",
        "<map>.update"
    ],
    "pandas.io.formats.css._border_expander": [],
    "pandas.io.formats.css._side_expander": [],
    "pandas.io.formats.excel.ExcelFormatter": [
        "pandas.util._decorators.doc.decorator",
        "<builtin>.property",
        "pandas.util._decorators.doc"
    ],
    "pandas.io.excel._odswriter.ODSWriter": [
        "typing.overload",
        "<builtin>.property"
    ],
    "pandas.io.excel._xlsxwriter": [],
    "pandas.io.excel._xlsxwriter._XlsxStyler": [
        "<builtin>.classmethod"
    ],
    "pandas.io.excel._xlsxwriter.XlsxWriter": [
        "<builtin>.property"
    ],
    "pandas.io.excel._util.register_writer": [
        "<builtin>.callable",
        "<builtin>.ValueError"
    ],
    "pandas.io.feather_format": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc"
    ],
    "pandas.io.gbq": [],
    "pandas.io.html": [
        "pandas.util._decorators.doc.decorator",
        "re.compile",
        "pandas.util._decorators.doc"
    ],
    "pandas.io.orc": [],
    "fsspec": [
        "fsspec.process_entries"
    ],
    "importlib.metadata": [
        "collections.namedtuple"
    ],
    "importlib.metadata._adapters": [],
    "importlib.metadata._text": [],
    "importlib.metadata._adapters.Message": [
        "<builtin>.map",
        "<builtin>.property",
        "<builtin>.set"
    ],
    "importlib.metadata._meta": [
        "typing.TypeVar.__init__"
    ],
    "importlib.metadata._meta.PackageMetadata": [
        "<builtin>.property"
    ],
    "importlib.metadata._itertools": [],
    "importlib.metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "importlib.metadata.Sectioned": [
        "<builtin>.staticmethod",
        "textwrap.dedent",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.EntryPoint": [
        "re.compile",
        "<builtin>.property"
    ],
    "importlib.metadata.EntryPoints": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.SelectableGroups": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.Distribution": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib.metadata.DistributionFinder": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib.metadata.FastPath": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "importlib.metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.MetadataPathFinder": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.PathDistribution": [
        "<builtin>.property"
    ],
    "fsspec.caching": [
        "typing_extensions.ParamSpec.__init__",
        "fsspec.caching.register_cache",
        "typing.TypeVar.__init__",
        "logging.getLogger"
    ],
    "concurrent.futures": [],
    "concurrent.futures._base": [
        "collections.namedtuple",
        "logging.getLogger"
    ],
    "concurrent.futures._base.Future": [
        "<builtin>.classmethod"
    ],
    "fsspec.caching.register_cache": [
        "<builtin>.ValueError"
    ],
    "fsspec._version": [],
    "fsspec.callbacks": [],
    "fsspec.callbacks.Callback": [
        "<builtin>.classmethod"
    ],
    "fsspec.compression": [
        "fsspec.compression.register_compression"
    ],
    "fsspec.utils": [
        "contextlib.contextmanager",
        "typing.TypeVar.__init__"
    ],
    "fsspec.spec": [
        "logging.getLogger"
    ],
    "glob": [
        "re.compile",
        "<builtin>.getattr"
    ],
    "fsspec.config": [
        "ntpath.expanduser",
        "fsspec.config.set_conf_files",
        "posixpath.expanduser",
        "ntpath.join",
        "fsspec.config.set_conf_env",
        "posixpath.join"
    ],
    "fsspec.config.set_conf_files": [
        "json.load",
        "configparser.RawConfigParser.read",
        "genericpath.isdir",
        "ntpath.join",
        "<builtin>.open",
        "<builtin>.dict",
        "<builtin>.sorted",
        "posixpath.join"
    ],
    "configparser.RawConfigParser.read": [
        "<builtin>.open",
        "os._fspath",
        "configparser.RawConfigParser._read",
        "append",
        "<builtin>.isinstance"
    ],
    "configparser.RawConfigParser._read": [
        "configparser.DuplicateOptionError.__init__",
        "<builtin>.min",
        "configparser.ParsingError.__init__",
        "configparser.RawConfigParser._handle_error",
        "<builtin>.enumerate",
        "<builtin>.set",
        "configparser.SectionProxy.__init__",
        "configparser.MissingSectionHeaderError.__init__",
        "configparser.RawConfigParser.optionxform",
        "configparser.DuplicateSectionError.__init__",
        "configparser.RawConfigParser._join_multiline_values"
    ],
    "configparser.RawConfigParser._handle_error": [
        "configparser.ParsingError.__init__",
        "<builtin>.repr",
        "configparser.ParsingError.append"
    ],
    "configparser.ParsingError.__init__": [
        "configparser.Error.__init__",
        "<builtin>.ValueError"
    ],
    "configparser.Error.__init__": [],
    "configparser.ParsingError.append": [
        "append"
    ],
    "configparser.RawConfigParser.optionxform": [],
    "configparser.DuplicateOptionError.__init__": [
        "configparser.Error.__init__",
        "insert",
        "extend",
        "append",
        "<builtin>.repr"
    ],
    "configparser.MissingSectionHeaderError.__init__": [
        "configparser.Error.__init__"
    ],
    "configparser.SectionProxy.__init__": [
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "configparser.DuplicateSectionError.__init__": [
        "configparser.Error.__init__",
        "insert",
        "extend",
        "append",
        "<builtin>.repr"
    ],
    "configparser.RawConfigParser._join_multiline_values": [
        "<str>.rstrip",
        "<builtin>.isinstance"
    ],
    "fsspec.config.set_conf_env": [
        "json.loads",
        "<builtin>.len",
        "warnings.warn",
        "os._Environ.__iter__",
        "append"
    ],
    "os._Environ.__iter__": [
        "os._createenviron.decode",
        "<builtin>.list"
    ],
    "os._createenviron.decode": [],
    "fsspec.dircache": [],
    "fsspec.transaction": [],
    "fsspec.spec.AbstractFileSystem": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "fsspec.spec.AbstractBufferedFile": [
        "<builtin>.property"
    ],
    "fsspec.compression.register_compression": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "fsspec.core": [
        "logging.getLogger"
    ],
    "fsspec.registry": [
        "<builtin>.list",
        "<builtin>.sorted"
    ],
    "fsspec.core.OpenFile": [
        "<builtin>.property"
    ],
    "fsspec.exceptions": [],
    "asyncio": [],
    "asyncio.base_events": [
        "<builtin>.object",
        "<builtin>.hasattr"
    ],
    "asyncio.constants": [],
    "asyncio.coroutines": [
        "<builtin>.object",
        "asyncio.coroutines._is_debug_mode",
        "<builtin>.set"
    ],
    "asyncio.base_futures": [
        "<builtin>.set"
    ],
    "asyncio.format_helpers": [],
    "asyncio.log": [
        "logging.getLogger"
    ],
    "asyncio.coroutines._is_debug_mode": [
        "<builtin>.bool"
    ],
    "asyncio.coroutines.CoroWrapper": [
        "<builtin>.property"
    ],
    "asyncio.events": [],
    "asyncio.exceptions": [],
    "asyncio.futures": [],
    "asyncio.futures.Future": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "asyncio.protocols": [],
    "asyncio.sslproto": [],
    "asyncio.transports": [],
    "asyncio.sslproto._SSLPipe": [
        "<builtin>.property"
    ],
    "asyncio.sslproto._SSLProtocolTransport": [
        "<builtin>.property"
    ],
    "asyncio.staggered": [],
    "asyncio.locks": [],
    "asyncio.mixins": [
        "<builtin>.object"
    ],
    "asyncio.tasks": [
        "_weakrefset.WeakSet.__init__",
        "types.coroutine"
    ],
    "asyncio.base_tasks": [],
    "asyncio.tasks.Task": [
        "<builtin>.classmethod"
    ],
    "types.coroutine": [
        "<builtin>.TypeError",
        "functools.wraps",
        "<builtin>.callable",
        "<builtin>.getattr"
    ],
    "asyncio.trsock": [],
    "asyncio.trsock.TransportSocket": [
        "<builtin>.property"
    ],
    "asyncio.base_events.Server": [
        "<builtin>.property"
    ],
    "asyncio.runners": [],
    "asyncio.queues": [],
    "asyncio.queues.Queue": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "asyncio.streams": [
        "<builtin>.hasattr"
    ],
    "asyncio.streams.StreamReaderProtocol": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamWriter": [
        "<builtin>.property"
    ],
    "asyncio.subprocess": [],
    "asyncio.subprocess.Process": [
        "<builtin>.property"
    ],
    "asyncio.threads": [],
    "asyncio.windows_events": [
        "<builtin>.ImportError"
    ],
    "asyncio.base_subprocess": [],
    "asyncio.proactor_events": [],
    "asyncio.selector_events": [],
    "asyncio.windows_utils": [
        "<builtin>.ImportError"
    ],
    "asyncio.windows_utils.PipeHandle": [
        "<builtin>.property"
    ],
    "fsspec.mapping": [
        "logging.getLogger"
    ],
    "fsspec.mapping.FSMap": [
        "functools.cached_property.__init__"
    ],
    "fsspec.process_entries": [
        "importlib.metadata.entry_points"
    ],
    "importlib.metadata.entry_points": [
        "importlib.metadata.SelectableGroups.load",
        "importlib.metadata.distributions",
        "importlib.metadata.SelectableGroups.select",
        "operator.attrgetter.__init__"
    ],
    "importlib.metadata.distributions": [
        "importlib.metadata.Distribution.discover"
    ],
    "importlib.metadata.Distribution.discover": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "importlib.metadata.Distribution._discover_resolvers",
        "<builtin>.ValueError"
    ],
    "importlib.metadata.Distribution._discover_resolvers": [
        "<builtin>.filter",
        "<builtin>.getattr"
    ],
    "importlib.metadata.SelectableGroups.load": [
        "<builtin>.sorted",
        "operator.attrgetter.__init__"
    ],
    "importlib.metadata.SelectableGroups.select": [],
    "pandas.io.parquet": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc"
    ],
    "pandas.io.parquet.BaseImpl": [
        "<builtin>.staticmethod"
    ],
    "pandas.io.pickle": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc"
    ],
    "pandas.compat.pickle_compat": [
        "contextlib.contextmanager",
        "copy.copy"
    ],
    "copy.copy": [
        "<builtin>.issubclass",
        "<builtin>.type",
        "<map>",
        "copy._copy_immutable",
        "copy._reconstruct",
        "<map>.get",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.id",
        "<builtin>.len",
        "<builtin>.setattr",
        "copy.deepcopy",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "copy.deepcopy": [
        "<builtin>.issubclass",
        "<builtin>.id",
        "<builtin>.type",
        "copy._deepcopy_atomic",
        "<map>",
        "copy._reconstruct",
        "copy._keep_alive",
        "<map>.get",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "pandas.io.pytables": [
        "typing.overload",
        "pandas._config.config.config_prefix"
    ],
    "pandas.core.computation.pytables": [],
    "pandas.core.computation.pytables.Term": [
        "<builtin>.property"
    ],
    "pandas.core.computation.pytables.BinOp": [
        "<builtin>.property"
    ],
    "pandas.io.pytables.HDFStore": [
        "<builtin>.property"
    ],
    "pandas.io.pytables.IndexCol": [
        "<builtin>.property"
    ],
    "pandas.io.pytables.GenericIndexCol": [
        "<builtin>.property"
    ],
    "pandas.io.pytables.DataCol": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.io.pytables.DataIndexableCol": [
        "<builtin>.classmethod"
    ],
    "pandas.io.pytables.Fixed": [
        "<builtin>.property"
    ],
    "pandas.io.pytables.GenericFixed": [
        "<builtin>.property",
        "<map>.items"
    ],
    "pandas.io.pytables.SeriesFixed": [
        "<builtin>.property"
    ],
    "pandas.io.pytables.BlockManagerFixed": [
        "<builtin>.property"
    ],
    "pandas.io.pytables.Table": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.io.pytables.AppendableFrameTable": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.io.pytables.AppendableSeriesTable": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "pandas.io.pytables.GenericTable": [
        "<builtin>.property"
    ],
    "pandas.io.pytables.AppendableMultiFrameTable": [
        "re.compile",
        "<builtin>.property"
    ],
    "pandas.io.sas": [],
    "pandas.io.sas.sasreader": [
        "pandas.util._decorators.doc.decorator",
        "typing.overload",
        "pandas.util._decorators.doc"
    ],
    "pandas.io.sas.sasreader.ReaderBase": [
        "abc.abstractmethod"
    ],
    "pandas.io.spss": [],
    "pandas.io.sql": [
        "typing.overload"
    ],
    "pandas.io.sql.PandasSQL": [
        "abc.abstractmethod"
    ],
    "pandas.io.sql.SQLDatabase": [
        "contextlib.contextmanager",
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "pandas.io.sql.ADBCDatabase": [
        "contextlib.contextmanager"
    ],
    "pandas.io.sql.SQLiteDatabase": [
        "contextlib.contextmanager",
        "<builtin>.staticmethod"
    ],
    "pandas.io.xml": [
        "pandas.util._decorators.doc.decorator",
        "pandas.util._decorators.doc"
    ],
    "xml.etree.ElementTree": [
        "contextlib.contextmanager",
        "re.compile",
        "<builtin>.set"
    ],
    "xml.etree.ElementPath": [
        "re.compile"
    ],
    "pandas.util._tester": [
        "ntpath.dirname",
        "posixpath.dirname"
    ],
    "pandas._version_meson": [],
    "pandas._version": [
        "pandas._version.register_vcs_handler.decorate",
        "pandas._version.register_vcs_handler"
    ],
    "pandas._version.register_vcs_handler": [],
    "pandas._version.register_vcs_handler.decorate": [],
    "pandas._version.get_versions": [
        "pandas._version.render",
        "pandas._version.get_config",
        "pandas._version.get_keywords",
        "pandas._version.versions_from_parentdir",
        "ntpath.dirname",
        "posixpath.realpath",
        "ntpath.realpath",
        "pandas._version.git_pieces_from_vcs",
        "pandas._version.git_versions_from_keywords",
        "posixpath.dirname"
    ],
    "pandas._version.get_config": [],
    "pandas._version.get_keywords": [],
    "pandas._version.git_versions_from_keywords": [
        "re.match",
        "<builtin>.len",
        "re.search",
        "<builtin>.print",
        "<str>.startswith",
        "<str>.strip",
        "<map>.get",
        "<builtin>.sorted"
    ],
    "ntpath.realpath": [],
    "pandas._version.git_pieces_from_vcs": [
        "<builtin>.len",
        "re.search",
        "<builtin>.print",
        "<builtin>.int",
        "os._Environ.copy"
    ],
    "os._Environ.copy": [
        "<builtin>.dict"
    ],
    "pandas._version.render": [
        "pandas._version.render_pep440_pre",
        "<builtin>.ValueError",
        "pandas._version.render_pep440_post_branch",
        "pandas._version.render_pep440_old",
        "pandas._version.render_pep440",
        "pandas._version.render_pep440_branch",
        "<map>.get",
        "pandas._version.render_git_describe",
        "pandas._version.render_pep440_post",
        "pandas._version.render_git_describe_long"
    ],
    "pandas._version.render_git_describe_long": [],
    "pandas._version.render_git_describe": [],
    "pandas._version.render_pep440_old": [],
    "pandas._version.render_pep440_post_branch": [
        "pandas._version.plus_or_dot"
    ],
    "pandas._version.plus_or_dot": [
        "<map>.get"
    ],
    "pandas._version.render_pep440_post": [
        "pandas._version.plus_or_dot"
    ],
    "pandas._version.render_pep440_pre": [
        "pandas._version.pep440_split_post"
    ],
    "pandas._version.pep440_split_post": [
        "<builtin>.len",
        "<builtin>.int"
    ],
    "pandas._version.render_pep440_branch": [
        "pandas._version.plus_or_dot"
    ],
    "pandas._version.render_pep440": [
        "pandas._version.plus_or_dot"
    ],
    "pandas._version.versions_from_parentdir": [
        "<builtin>.len",
        "ntpath.dirname",
        "posixpath.basename",
        "<builtin>.range",
        "<builtin>.print",
        "<builtin>.str",
        "ntpath.basename",
        "posixpath.dirname",
        "append"
    ],
    "sklearn.naive_bayes": [],
    "scipy.special": [
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.special._sf_error": [
        "warnings.simplefilter"
    ],
    "scipy.special._basic": [],
    "scipy.special._logsumexp": [],
    "scipy.special._orthogonal": [
        "<builtin>.globals",
        "<map>.keys",
        "<builtin>.list",
        "<map>.items",
        "append"
    ],
    "scipy.special._spfun_stats": [],
    "scipy.special._ellip_harm": [
        "numpy.lib.function_base.vectorize.__init__"
    ],
    "scipy.special._lambertw": [],
    "scipy.special._spherical_bessel": [],
    "scipy.special.add_newdocs": [],
    "scipy.special._add_newdocs": [
        "scipy.special._add_newdocs.add_newdoc"
    ],
    "scipy.special._add_newdocs.add_newdoc": [],
    "scipy.special.basic": [],
    "scipy.special.orthogonal": [
        "<map>.keys",
        "<builtin>.list"
    ],
    "scipy.special.specfun": [],
    "scipy.special.sf_error": [],
    "scipy.special.spfun_stats": [],
    "sklearn.base": [],
    "sklearn._config": [
        "contextlib.contextmanager",
        "<builtin>.int",
        "<builtin>.bool"
    ],
    "sklearn.utils": [
        "contextlib.contextmanager",
        "platform.python_implementation"
    ],
    "timeit": [],
    "sklearn.utils.class_weight": [],
    "sklearn.utils._joblib": [
        "warnings.catch_warnings.__init__"
    ],
    "sklearn.exceptions": [],
    "sklearn.utils.deprecation": [],
    "sklearn.utils.fixes": [
        "sklearn.externals._packaging.version.parse"
    ],
    "sklearn": [
        "os._Environ.setdefault",
        "logging.getLogger"
    ],
    "os._Environ.setdefault": [],
    "sklearn._distributor_init": [],
    "sklearn.__check_build": [
        "sklearn.__check_build.raise_build_error"
    ],
    "sklearn.__check_build.raise_build_error": [
        "<builtin>.ImportError",
        "<builtin>.list",
        "ntpath.split",
        "<builtin>.enumerate",
        "posixpath.split"
    ],
    "sklearn.utils._show_versions": [],
    "scipy": [
        "<builtin>.globals",
        "scipy._lib._pep440.parse",
        "scipy._lib.deprecation._deprecated",
        "<builtin>.ImportError",
        "warnings.warn",
        "scipy._lib._testutils.PytestTester.__init__",
        "scipy._lib.deprecation._deprecated.wrap",
        "<builtin>.RuntimeError",
        "scipy._lib._pep440.Version.__init__",
        "<builtin>.isinstance",
        "<builtin>.callable",
        "<builtin>.getattr"
    ],
    "scipy._lib.deprecation": [],
    "scipy._lib.deprecation._deprecated": [],
    "scipy._lib.deprecation._deprecated.wrap": [
        "warnings.warn",
        "<builtin>.isinstance",
        "functools.wraps"
    ],
    "scipy.__config__": [
        "ntpath.dirname",
        "genericpath.isdir",
        "ntpath.join",
        "os._Environ.setdefault",
        "os.add_dll_directory",
        "posixpath.dirname",
        "posixpath.join"
    ],
    "scipy.version": [],
    "scipy._distributor_init": [],
    "scipy._lib._pep440": [
        "re.compile",
        "collections.namedtuple"
    ],
    "scipy._lib._pep440.LegacyVersion": [
        "<builtin>.property"
    ],
    "scipy._lib._pep440.Version": [
        "re.compile",
        "<builtin>.property"
    ],
    "scipy._lib._pep440.parse": [
        "scipy._lib._pep440.LegacyVersion.__init__",
        "scipy._lib._pep440.Version.__init__"
    ],
    "scipy._lib._pep440.Version.__init__": [
        "<builtin>.tuple",
        "scipy._lib._pep440._parse_letter_version",
        "scipy._lib._pep440._parse_local_version",
        "scipy._lib._pep440._cmpkey",
        "<builtin>.int"
    ],
    "scipy._lib._pep440._parse_letter_version": [
        "<str>.lower",
        "<builtin>.int"
    ],
    "scipy._lib._pep440._parse_local_version": [
        "<builtin>.tuple",
        "<builtin>.int"
    ],
    "scipy._lib._pep440._cmpkey": [
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.isinstance"
    ],
    "scipy._lib._pep440.LegacyVersion.__init__": [
        "scipy._lib._pep440._legacy_cmpkey",
        "<builtin>.str"
    ],
    "scipy._lib._pep440._legacy_cmpkey": [
        "scipy._lib._pep440._parse_version_parts",
        "<builtin>.tuple",
        "pop",
        "<str>.startswith",
        "append"
    ],
    "scipy._lib._pep440._parse_version_parts": [
        "<map>.get"
    ],
    "scipy._lib._ccallback": [
        "ctypes.CFUNCTYPE"
    ],
    "scipy._lib._ccallback.LowLevelCallable": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "scipy.stats": [
        "<builtin>.dir",
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.stats._warnings_errors": [],
    "scipy.stats._stats_py": [
        "scipy._lib._util._rename_parameter",
        "dataclasses.make_dataclass",
        "scipy._lib._util._rename_parameter.decorator",
        "scipy._lib._bunch._make_tuple_bunch",
        "scipy.stats._axis_nan_policy._axis_nan_policy_factory.axis_nan_policy_decorator",
        "scipy.stats._axis_nan_policy._axis_nan_policy_factory",
        "collections.namedtuple"
    ],
    "numpy.testing": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "unittest": [
        "extend"
    ],
    "unittest.result": [],
    "unittest.util": [
        "collections.namedtuple"
    ],
    "unittest.result.TestResult": [
        "unittest.result.failfast"
    ],
    "unittest.result.failfast": [
        "functools.wraps"
    ],
    "unittest.case": [
        "<builtin>.object"
    ],
    "difflib": [
        "re.compile",
        "collections.namedtuple"
    ],
    "difflib.SequenceMatcher": [
        "<builtin>.classmethod"
    ],
    "unittest.case._Outcome": [
        "contextlib.contextmanager"
    ],
    "unittest.case._AssertRaisesContext": [
        "<builtin>.classmethod"
    ],
    "unittest.case.TestCase": [
        "contextlib.contextmanager",
        "unittest.case.TestCase._deprecate",
        "<builtin>.classmethod"
    ],
    "unittest.case.TestCase._deprecate": [],
    "unittest.suite": [],
    "unittest.loader": [
        "re.compile",
        "unittest.loader.TestLoader.__init__"
    ],
    "unittest.loader.TestLoader": [
        "<builtin>.staticmethod"
    ],
    "unittest.loader.TestLoader.__init__": [
        "<builtin>.super",
        "<builtin>.set"
    ],
    "unittest.main": [],
    "unittest.runner": [],
    "unittest.signals": [
        "weakref.WeakKeyDictionary.__init__"
    ],
    "numpy.testing._private.utils": [
        "platform.python_implementation",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "contextlib.contextmanager",
        "numpy.testing._private.utils._get_glibc_version"
    ],
    "numpy.testing._private.utils._get_glibc_version": [],
    "numpy.testing._private.extbuild": [],
    "numpy.testing._private.decorators": [
        "numpy.testing._private.decorators.skipif"
    ],
    "numpy.testing._private.decorators.skipif": [],
    "numpy.testing._private.nosetester": [],
    "scipy.spatial.distance": [
        "scipy._lib.deprecation._deprecated.wrap",
        "scipy._lib.deprecation._deprecated",
        "<builtin>.list",
        "<builtin>.dict"
    ],
    "scipy.spatial.distance.MetricInfo": [
        "dataclasses.field"
    ],
    "scipy.ndimage._measurements": [],
    "scipy.ndimage._ni_support": [],
    "scipy.ndimage._morphology": [],
    "scipy.ndimage._filters": [
        "scipy._lib.doccer.filldoc.decorate"
    ],
    "scipy.ndimage._ni_docstrings": [
        "scipy._lib.doccer.filldoc"
    ],
    "scipy._lib.doccer": [],
    "scipy._lib.doccer.filldoc": [
        "scipy._lib.doccer.unindent_dict"
    ],
    "scipy._lib.doccer.unindent_dict": [
        "scipy._lib.doccer.unindent_string",
        "<map>.items"
    ],
    "scipy._lib.doccer.unindent_string": [
        "scipy._lib.doccer.indentcount_lines"
    ],
    "scipy._lib.doccer.indentcount_lines": [
        "<builtin>.min",
        "<builtin>.len"
    ],
    "scipy._lib.doccer.filldoc.decorate": [
        "scipy._lib.doccer.docformat"
    ],
    "scipy._lib.doccer.docformat": [
        "scipy._lib.doccer.indentcount_lines",
        "<builtin>.len",
        "<map>.items",
        "append"
    ],
    "scipy.stats.distributions": [],
    "scipy.stats._distn_infrastructure": [
        "<map>.pop",
        "<map>.copy",
        "<builtin>.dir",
        "<builtin>.exec"
    ],
    "scipy.stats._distr_params": [],
    "scipy.optimize": [
        "<builtin>.dir",
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.optimize._optimize": [
        "numpy.core.finfo"
    ],
    "scipy.optimize._linesearch": [],
    "scipy.optimize._numdiff": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "scipy.optimize._hessian_update_strategy": [],
    "scipy.optimize._hessian_update_strategy.FullHessianUpdateStrategy": [
        "scipy.linalg.blas.get_blas_funcs"
    ],
    "scipy.linalg.blas.get_blas_funcs": [
        "<builtin>.RuntimeError",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "scipy.linalg.blas._get_funcs"
    ],
    "scipy.linalg.blas._get_funcs": [
        "<builtin>.ValueError",
        "scipy.linalg.blas.find_best_blas_type",
        "append",
        "<map>.get",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "scipy.linalg.blas.find_best_blas_type": [
        "<map>.get",
        "<builtin>.len",
        "<builtin>.max"
    ],
    "scipy.optimize._differentiable_functions": [],
    "scipy.optimize._minimize": [],
    "scipy.optimize._trustregion_dogleg": [],
    "scipy.optimize._trustregion": [],
    "scipy.optimize._trustregion.BaseQuadraticSubproblem": [
        "<builtin>.property"
    ],
    "scipy.optimize._trustregion_ncg": [],
    "scipy.optimize._trustregion_krylov": [],
    "scipy.optimize._trlib": [],
    "scipy.optimize._trustregion_exact": [],
    "scipy.optimize._trustregion_exact.IterativeSubproblem": [
        "numpy.core.finfo"
    ],
    "scipy.optimize._trustregion_constr": [],
    "scipy.optimize._trustregion_constr.minimize_trustregion_constr": [],
    "scipy.optimize._constraints": [],
    "scipy.optimize._constraints.NonlinearConstraint": [
        "scipy.optimize._hessian_update_strategy.BFGS.__init__"
    ],
    "scipy.optimize._hessian_update_strategy.BFGS.__init__": [
        "<builtin>.super",
        "<builtin>.ValueError"
    ],
    "scipy.optimize._trustregion_constr.equality_constrained_sqp": [],
    "scipy.optimize._trustregion_constr.projections": [],
    "scipy.optimize._trustregion_constr.qp_subproblem": [],
    "scipy.optimize._trustregion_constr.canonical_constraint": [],
    "scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint": [
        "<builtin>.classmethod"
    ],
    "scipy.optimize._trustregion_constr.tr_interior_point": [],
    "scipy.optimize._trustregion_constr.report": [],
    "scipy.optimize._trustregion_constr.report.ReportBase": [
        "<builtin>.classmethod"
    ],
    "scipy.optimize._lbfgsb_py": [],
    "scipy.optimize._tnc": [],
    "scipy.optimize._cobyla_py": [
        "scipy.optimize._cobyla_py.synchronized",
        "threading.RLock"
    ],
    "scipy.optimize._cobyla_py.synchronized": [
        "functools.wraps"
    ],
    "scipy.optimize._slsqp_py": [
        "numpy.lib.polynomial.finfo"
    ],
    "numpy.lib.polynomial.finfo": [],
    "scipy.optimize._root": [],
    "scipy.optimize._minpack_py": [],
    "scipy.optimize._lsq.least_squares": [
        "<builtin>.dict"
    ],
    "scipy.optimize._lsq.trf": [],
    "scipy.optimize._lsq.common": [
        "numpy.core.finfo"
    ],
    "scipy.optimize._lsq.dogbox": [],
    "scipy.optimize._spectral": [],
    "scipy.optimize._nonlin": [
        "scipy.optimize._nonlin._nonlin_wrapper",
        "scipy.optimize._nonlin._set_doc",
        "<builtin>.dict"
    ],
    "scipy.optimize._nonlin._set_doc": [],
    "scipy.optimize._nonlin.InverseJacobian": [
        "<builtin>.property"
    ],
    "scipy.optimize._nonlin.LowRankMatrix": [
        "<builtin>.staticmethod"
    ],
    "scipy.optimize._nonlin._nonlin_wrapper": [
        "scipy._lib._util.getfullargspec_no_self",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.list",
        "scipy.optimize._nonlin._set_doc",
        "<map>.update",
        "<builtin>.dict",
        "<builtin>.exec",
        "<builtin>.zip"
    ],
    "scipy._lib._util.getfullargspec_no_self": [
        "<builtin>.tuple",
        "inspect.signature"
    ],
    "scipy.optimize._root_scalar": [],
    "scipy.optimize._zeros_py": [
        "numpy.core.finfo"
    ],
    "scipy.optimize._nnls": [],
    "scipy.optimize._basinhopping": [],
    "scipy.optimize._linprog": [],
    "scipy.optimize._linprog_highs": [],
    "scipy.optimize._linprog_ip": [],
    "scipy.optimize._linprog_util": [
        "collections.namedtuple"
    ],
    "scipy.optimize._remove_redundancy": [],
    "scipy.linalg.interpolative": [
        "<builtin>.TypeError",
        "<builtin>.ValueError"
    ],
    "scipy.linalg._interpolative_backend": [
        "<builtin>.RuntimeError"
    ],
    "scipy.optimize._linprog_simplex": [],
    "scipy.optimize._linprog_rs": [],
    "scipy.optimize._linprog_doc": [],
    "scipy.optimize._differentialevolution": [
        "numpy.core.finfo"
    ],
    "scipy.optimize._differentialevolution.DifferentialEvolutionSolver": [
        "<builtin>.property"
    ],
    "scipy.optimize._lsq.lsq_linear": [],
    "scipy.optimize._lsq.trf_linear": [],
    "scipy.optimize._lsq.bvls": [],
    "scipy.optimize._shgo": [],
    "scipy.spatial": [
        "<builtin>.dir",
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.spatial._kdtree": [],
    "scipy.spatial._kdtree.KDTree.node": [
        "<builtin>.staticmethod"
    ],
    "scipy.spatial._kdtree.KDTree.leafnode": [
        "<builtin>.property"
    ],
    "scipy.spatial._kdtree.KDTree.innernode": [
        "<builtin>.property"
    ],
    "scipy.spatial._kdtree.KDTree": [
        "<builtin>.property"
    ],
    "scipy.spatial._spherical_voronoi": [],
    "scipy.spatial._plotutils": [
        "scipy._lib.decorator.decorator",
        "scipy.spatial._plotutils._held_figure"
    ],
    "scipy.spatial._plotutils._held_figure": [
        "scipy.spatial._plotutils.convex_hull_plot_2d",
        "scipy.spatial._plotutils.voronoi_plot_2d",
        "scipy.spatial._plotutils.delaunay_plot_2d",
        "matplotlib.pyplot.figure",
        "<builtin>.getattr"
    ],
    "matplotlib.pyplot.figure": [
        "matplotlib._api.warn_external",
        "matplotlib.pyplot.draw_if_interactive",
        "<builtin>.len",
        "importlib.import_module",
        "<builtin>.ValueError",
        "matplotlib.pyplot.get_fignums",
        "matplotlib.pyplot.get_figlabels",
        "matplotlib._pylab_helpers.Gcf.set_active",
        "matplotlib._pylab_helpers.Gcf._set_new_active_manager",
        "<builtin>.int",
        "matplotlib._pylab_helpers.Gcf.get_fig_manager",
        "<builtin>.max",
        "matplotlib.pyplot.new_figure_manager",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "matplotlib._pylab_helpers.Gcf.set_active": [
        "collections.OrderedDict.move_to_end"
    ],
    "matplotlib.pyplot.get_fignums": [
        "<builtin>.sorted"
    ],
    "matplotlib.pyplot.get_figlabels": [
        "matplotlib._pylab_helpers.Gcf.get_all_fig_managers"
    ],
    "matplotlib._pylab_helpers.Gcf.get_all_fig_managers": [
        "<builtin>.list",
        "collections.OrderedDict.values"
    ],
    "matplotlib._api.warn_external": [
        "re.match",
        "warnings.warn"
    ],
    "matplotlib._pylab_helpers.Gcf.get_fig_manager": [
        "matplotlib._pylab_helpers.Gcf.set_active"
    ],
    "matplotlib.pyplot.new_figure_manager": [
        "matplotlib.pyplot._warn_if_gui_out_of_main_thread",
        "matplotlib.pyplot._get_backend_mod"
    ],
    "matplotlib.pyplot._warn_if_gui_out_of_main_thread": [
        "matplotlib.pyplot._get_backend_mod",
        "matplotlib._api.warn_external",
        "threading.main_thread",
        "threading.current_thread",
        "<builtin>.hasattr",
        "typing.cast"
    ],
    "matplotlib.pyplot._get_backend_mod": [
        "matplotlib.RcParams._get",
        "typing.cast",
        "matplotlib.pyplot.switch_backend"
    ],
    "matplotlib.pyplot.switch_backend": [
        "<builtin>.globals",
        "<builtin>.ValueError",
        "matplotlib._api.deprecation.warn_deprecated",
        "<builtin>.ImportError",
        "inspect.getattr_static",
        "matplotlib.backends.registry.BackendRegistry.backend_for_gui_framework",
        "matplotlib.pyplot.get_fignums",
        "matplotlib.pyplot.close",
        "importlib.metadata.version",
        "matplotlib.pyplot.switch_backend",
        "matplotlib.cbook._str_equal",
        "matplotlib.pyplot.install_repl_displayhook",
        "matplotlib.cbook._get_running_interactive_framework",
        "inspect.signature",
        "typing.cast",
        "matplotlib.backends.registry.BackendRegistry.load_backend_module",
        "<builtin>.getattr",
        "matplotlib._parse_to_version_info"
    ],
    "matplotlib.backends.registry.BackendRegistry.backend_for_gui_framework": [
        "<map>.get"
    ],
    "matplotlib.backends.registry.BackendRegistry.load_backend_module": [
        "importlib.import_module",
        "matplotlib.backends.registry.BackendRegistry._backend_module_name"
    ],
    "matplotlib.backends.registry.BackendRegistry._backend_module_name": [
        "<map>.get"
    ],
    "matplotlib.pyplot.switch_backend.backend_mod": [
        "<builtin>.locals",
        "<builtin>.vars"
    ],
    "inspect.getattr_static": [
        "inspect._shadowed_dict",
        "<builtin>.type",
        "inspect._check_class",
        "inspect._is_type",
        "inspect._check_instance",
        "<builtin>.AttributeError",
        "inspect._static_getmro"
    ],
    "inspect._is_type": [
        "inspect._static_getmro"
    ],
    "inspect._static_getmro": [],
    "inspect._shadowed_dict": [
        "inspect._static_getmro"
    ],
    "inspect._check_instance": [],
    "inspect._check_class": [
        "inspect._shadowed_dict",
        "<builtin>.type",
        "inspect._static_getmro"
    ],
    "importlib.metadata.version": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.distribution": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.Distribution.from_name": [
        "<builtin>.next",
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.iter",
        "importlib.metadata.Distribution._discover_resolvers"
    ],
    "matplotlib._parse_to_version_info": [
        "packaging.version.parse"
    ],
    "matplotlib.pyplot.close": [
        "<builtin>.type",
        "matplotlib.pyplot.get_fignums",
        "matplotlib.pyplot.get_figlabels",
        "matplotlib._pylab_helpers.Gcf.get_active",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "matplotlib._pylab_helpers.Gcf.destroy_fig",
        "matplotlib._pylab_helpers.Gcf.destroy",
        "<builtin>.isinstance",
        "matplotlib._pylab_helpers.Gcf.destroy_all"
    ],
    "matplotlib._pylab_helpers.Gcf.destroy_fig": [
        "<builtin>.next",
        "matplotlib._pylab_helpers.Gcf.destroy",
        "collections.OrderedDict.values"
    ],
    "matplotlib._pylab_helpers.Gcf.destroy": [
        "collections.OrderedDict.pop",
        "<builtin>.all",
        "<builtin>.hasattr"
    ],
    "matplotlib._pylab_helpers.Gcf.destroy_all": [
        "<builtin>.list",
        "collections.OrderedDict.clear",
        "collections.OrderedDict.values"
    ],
    "collections.OrderedDict.clear": [
        "<map>.clear"
    ],
    "matplotlib._pylab_helpers.Gcf.get_active": [
        "<builtin>.next",
        "<builtin>.reversed",
        "collections.OrderedDict.values"
    ],
    "matplotlib.pyplot.install_repl_displayhook": [
        "matplotlib.backends.registry.BackendRegistry.resolve_backend",
        "matplotlib.get_backend"
    ],
    "matplotlib.get_backend": [],
    "matplotlib.backends.registry.BackendRegistry.resolve_backend": [
        "matplotlib.backends.registry.BackendRegistry._ensure_entry_points_loaded",
        "<builtin>.RuntimeError",
        "<map>.get",
        "matplotlib.get_backend",
        "<builtin>.isinstance",
        "matplotlib.backends.registry.BackendRegistry._get_gui_framework_by_loading"
    ],
    "matplotlib.backends.registry.BackendRegistry._ensure_entry_points_loaded": [
        "matplotlib.backends.registry.BackendRegistry._validate_and_store_entry_points",
        "matplotlib.backends.registry.BackendRegistry._read_entry_points"
    ],
    "matplotlib.backends.registry.BackendRegistry._read_entry_points": [
        "matplotlib.backends.registry.BackendRegistry._read_entry_points.backward_compatible_entry_points",
        "importlib.metadata.entry_points"
    ],
    "matplotlib.backends.registry.BackendRegistry._read_entry_points.backward_compatible_entry_points": [
        "importlib.metadata.version",
        "matplotlib._parse_to_version_info"
    ],
    "matplotlib.backends.registry.BackendRegistry._validate_and_store_entry_points": [
        "<builtin>.RuntimeError",
        "<builtin>.set"
    ],
    "matplotlib.backends.registry.BackendRegistry._get_gui_framework_by_loading": [
        "matplotlib.backends.registry.BackendRegistry.load_backend_module"
    ],
    "threading.main_thread": [],
    "matplotlib._pylab_helpers.Gcf._set_new_active_manager": [
        "matplotlib._pylab_helpers.Gcf.set_active",
        "<builtin>.hasattr"
    ],
    "matplotlib.pyplot.draw_if_interactive": [
        "matplotlib.pyplot._get_backend_mod"
    ],
    "scipy.spatial._plotutils.delaunay_plot_2d": [
        "scipy.spatial._plotutils._adjust_bounds",
        "<builtin>.ValueError"
    ],
    "scipy.spatial._plotutils._adjust_bounds": [],
    "scipy.spatial._plotutils.convex_hull_plot_2d": [
        "scipy.spatial._plotutils._adjust_bounds",
        "matplotlib.collections.LineCollection.__init__",
        "<builtin>.ValueError"
    ],
    "matplotlib.collections.LineCollection.__init__": [
        "matplotlib.collections.LineCollection.set_segments",
        "<builtin>.super"
    ],
    "matplotlib.collections.LineCollection.set_segments": [
        "matplotlib.path.Path.__init__",
        "<builtin>.isinstance"
    ],
    "scipy.spatial._plotutils.voronoi_plot_2d": [
        "numpy.core.dot",
        "<builtin>.ValueError",
        "numpy.linalg.linalg.norm",
        "numpy.core.fromnumeric.all",
        "scipy.spatial._plotutils._adjust_bounds",
        "matplotlib.collections.LineCollection.__init__",
        "<builtin>.zip",
        "append"
    ],
    "numpy.linalg.linalg.norm": [
        "<builtin>.issubclass",
        "<builtin>.tuple",
        "numpy.linalg.linalg._multi_svd_norm",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.list",
        "<builtin>.range",
        "numpy.linalg.linalg.isComplexType",
        "<builtin>.TypeError",
        "<builtin>.int",
        "<builtin>.abs",
        "<builtin>.isinstance"
    ],
    "numpy.linalg.linalg.isComplexType": [
        "<builtin>.issubclass"
    ],
    "numpy.linalg.linalg._multi_svd_norm": [
        "numpy.linalg.linalg.svd",
        "numpy.core.numeric.moveaxis",
        "numpy.core.fromnumeric.amax",
        "numpy.core.fromnumeric.amin",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.core.numeric.moveaxis": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "numpy.core.numeric.normalize_axis_tuple",
        "<builtin>.range",
        "<builtin>.zip",
        "<builtin>.sorted"
    ],
    "numpy.core.numeric.normalize_axis_tuple": [
        "operator.index",
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "numpy.linalg.linalg.svd": [
        "numpy.linalg.linalg.eigh",
        "numpy.lib.shape_base.take_along_axis",
        "numpy.linalg.linalg.eigvalsh",
        "numpy.core.fromnumeric.sort",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._realType",
        "numpy.linalg.linalg.transpose",
        "<builtin>.abs",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._assert_stacked_2d",
        "numpy.core.fromnumeric.argsort",
        "numpy.linalg.linalg._commonType"
    ],
    "numpy.linalg.linalg._makearray": [
        "<builtin>.getattr"
    ],
    "numpy.linalg.linalg.eigvalsh": [
        "numpy.linalg.linalg._assert_stacked_square",
        "<builtin>.ValueError",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._realType",
        "<str>.upper",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._assert_stacked_2d",
        "numpy.linalg.linalg._commonType"
    ],
    "numpy.linalg.linalg.get_linalg_error_extobj": [
        "<builtin>.list"
    ],
    "numpy.linalg.linalg._assert_stacked_2d": [],
    "numpy.linalg.linalg._assert_stacked_square": [],
    "numpy.linalg.linalg._commonType": [
        "<builtin>.issubclass",
        "numpy.linalg.linalg.isComplexType",
        "<builtin>.TypeError",
        "numpy.linalg.linalg._realType"
    ],
    "numpy.linalg.linalg._realType": [
        "<map>.get"
    ],
    "numpy.core.fromnumeric.sort": [],
    "numpy.linalg.linalg.eigh": [
        "numpy.linalg.linalg._assert_stacked_square",
        "<builtin>.ValueError",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._realType",
        "<str>.upper",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._assert_stacked_2d",
        "numpy.linalg.linalg._commonType"
    ],
    "numpy.core.fromnumeric.argsort": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.lib.shape_base.take_along_axis": [
        "<builtin>.len",
        "numpy.lib.shape_base._make_along_axis_idx"
    ],
    "numpy.lib.shape_base._make_along_axis_idx": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.IndexError",
        "<builtin>.zip",
        "numpy.core.numerictypes.issubdtype",
        "append"
    ],
    "numpy.core.numerictypes.issubdtype": [
        "<builtin>.issubclass",
        "numpy.core.numerictypes.issubclass_"
    ],
    "numpy.core.numerictypes.issubclass_": [
        "<builtin>.issubclass"
    ],
    "<builtin>.IndexError": [],
    "numpy.linalg.linalg.transpose": [
        "numpy.core.fromnumeric.swapaxes"
    ],
    "numpy.core.fromnumeric.swapaxes": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.core.fromnumeric.sum": [
        "numpy.core.fromnumeric._wrapreduction",
        "warnings.warn",
        "<builtin>.isinstance",
        "numpy.core.fromnumeric.sum"
    ],
    "numpy.core.fromnumeric.amin": [
        "numpy.core.fromnumeric._wrapreduction"
    ],
    "numpy.core.fromnumeric.amax": [
        "numpy.core.fromnumeric._wrapreduction"
    ],
    "numpy.core.dot": [],
    "scipy.spatial._procrustes": [],
    "scipy.spatial._geometric_slerp": [],
    "scipy.spatial.ckdtree": [],
    "scipy.spatial.kdtree": [],
    "scipy.spatial.qhull": [],
    "scipy.spatial.transform": [
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.spatial.transform._rotation_spline": [],
    "scipy.spatial.transform.rotation": [],
    "scipy.optimize._shgo_lib.triangulation": [],
    "scipy.optimize._shgo.SHGO": [
        "<builtin>.staticmethod"
    ],
    "scipy.optimize._dual_annealing": [],
    "scipy.optimize._qap": [],
    "scipy.optimize._direct_py": [],
    "scipy.optimize._milp": [],
    "scipy.optimize.cobyla": [],
    "scipy.optimize.lbfgsb": [],
    "scipy.optimize.linesearch": [],
    "scipy.optimize.minpack": [],
    "scipy.optimize.minpack2": [],
    "scipy.optimize.moduleTNC": [],
    "scipy.optimize.nonlin": [],
    "scipy.optimize.optimize": [],
    "scipy.optimize.slsqp": [],
    "scipy.optimize.tnc": [],
    "scipy.optimize.zeros": [],
    "scipy.integrate": [
        "<builtin>.dir",
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.integrate._quadrature": [
        "scipy.integrate._quadrature._copy_func",
        "<builtin>.dict",
        "scipy.integrate._quadrature.cache_decorator"
    ],
    "scipy.integrate._quadrature._copy_func": [
        "functools.update_wrapper"
    ],
    "scipy.integrate._quadrature.cache_decorator": [
        "typing.cast"
    ],
    "scipy.integrate._odepack_py": [],
    "scipy.integrate._quadpack_py": [],
    "scipy.integrate._ode": [
        "append"
    ],
    "scipy.integrate._ode.ode": [
        "<builtin>.property"
    ],
    "scipy.integrate._ode.complex_ode": [
        "<builtin>.property"
    ],
    "scipy.integrate._ode.vode": [
        "<builtin>.getattr"
    ],
    "scipy.integrate._ode.zvode": [
        "<builtin>.getattr"
    ],
    "scipy.integrate._ode.dopri5": [
        "<builtin>.getattr"
    ],
    "scipy.integrate._ode.dop853": [
        "<builtin>.getattr"
    ],
    "scipy.integrate._ode.lsoda": [
        "<builtin>.getattr"
    ],
    "scipy.integrate._bvp": [
        "numpy.core.finfo"
    ],
    "scipy.integrate._ivp": [],
    "scipy.integrate._ivp.ivp": [],
    "scipy.integrate._ivp.bdf": [],
    "scipy.integrate._ivp.common": [
        "numpy.core.finfo"
    ],
    "scipy.integrate._ivp.base": [],
    "scipy.integrate._ivp.base.OdeSolver": [
        "<builtin>.property"
    ],
    "scipy.integrate._ivp.radau": [],
    "scipy.integrate._ivp.rk": [],
    "scipy.integrate._ivp.dop853_coefficients": [],
    "scipy.integrate._ivp.lsoda": [],
    "scipy.integrate._quad_vec": [],
    "scipy.integrate.dop": [],
    "scipy.integrate.lsoda": [],
    "scipy.integrate.vode": [],
    "scipy.integrate.odepack": [],
    "scipy.integrate.quadpack": [],
    "scipy.misc": [
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.misc._common": [],
    "scipy.misc.common": [],
    "scipy.misc.doccer": [],
    "scipy.stats._constants": [
        "numpy.core.finfo"
    ],
    "scipy.stats._distn_infrastructure.rv_frozen": [
        "<builtin>.property"
    ],
    "scipy.stats._distn_infrastructure.rv_generic": [
        "<builtin>.property"
    ],
    "scipy.stats._continuous_distns": [
        "<builtin>.globals",
        "<builtin>.list",
        "<builtin>.setattr",
        "numpy.lib.utils.deprecate",
        "scipy.stats._distn_infrastructure.get_distribution_names",
        "<builtin>.getattr"
    ],
    "scipy.stats._tukeylambda_stats": [
        "numpy.lib.polynomial.poly1d.__init__"
    ],
    "numpy.lib.polynomial.poly1d.__init__": [
        "numpy.lib.function_base.trim_zeros",
        "<builtin>.len",
        "<builtin>.ValueError",
        "warnings.warn",
        "<builtin>.set",
        "<builtin>.isinstance",
        "numpy.lib.polynomial.poly",
        "numpy.core.shape_base.atleast_1d"
    ],
    "numpy.lib.polynomial.poly": [
        "<builtin>.issubclass",
        "<builtin>.len",
        "<builtin>.ValueError",
        "numpy.core.fromnumeric.sort",
        "numpy.lib.type_check.mintypecode",
        "numpy.core.numeric.ones",
        "numpy.core.numeric.convolve",
        "numpy.core.fromnumeric.all",
        "numpy.linalg.linalg.eigvals",
        "numpy.core.shape_base.atleast_1d"
    ],
    "numpy.core.shape_base.atleast_1d": [
        "<builtin>.len",
        "append"
    ],
    "numpy.lib.type_check.mintypecode": [
        "<builtin>.min",
        "<builtin>.isinstance",
        "<builtin>.set"
    ],
    "numpy.linalg.linalg.eigvals": [
        "numpy.linalg.linalg._assert_stacked_square",
        "numpy.linalg.linalg._complexType",
        "numpy.linalg.linalg._makearray",
        "numpy.linalg.linalg._assert_finite",
        "numpy.linalg.linalg.isComplexType",
        "numpy.linalg.linalg._realType",
        "<builtin>.all",
        "numpy.linalg.linalg.get_linalg_error_extobj",
        "numpy.linalg.linalg._assert_stacked_2d",
        "numpy.linalg.linalg._commonType"
    ],
    "numpy.linalg.linalg._assert_finite": [],
    "numpy.linalg.linalg._complexType": [
        "<map>.get"
    ],
    "numpy.core.numeric.ones": [
        "numpy.core.multiarray.copyto"
    ],
    "numpy.core.numeric.convolve": [
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "numpy.lib.function_base.trim_zeros": [
        "<builtin>.len",
        "<str>.upper"
    ],
    "scipy.stats._ksstats": [],
    "scipy.stats._boost": [],
    "scipy.stats._continuous_distns.norm_gen": [
        "scipy._lib.doccer.replace_notes_in_docstring",
        "scipy._lib.doccer.replace_notes_in_docstring._doc",
        "scipy.stats._continuous_distns._call_super_mom"
    ],
    "scipy._lib.doccer.replace_notes_in_docstring": [],
    "scipy._lib.doccer.replace_notes_in_docstring._doc": [
        "<builtin>.len",
        "<builtin>.getattr"
    ],
    "scipy.stats._continuous_distns._call_super_mom": [
        "functools.wraps"
    ],
    "scipy.stats._continuous_distns.beta_gen": [
        "scipy._lib.doccer.extend_notes_in_docstring._doc",
        "scipy.stats._continuous_distns._call_super_mom",
        "scipy._lib.doccer.extend_notes_in_docstring"
    ],
    "scipy._lib.doccer.extend_notes_in_docstring": [],
    "scipy._lib.doccer.extend_notes_in_docstring._doc": [
        "<builtin>.len",
        "<builtin>.getattr"
    ],
    "scipy.stats._continuous_distns.expon_gen": [
        "scipy._lib.doccer.replace_notes_in_docstring",
        "scipy._lib.doccer.replace_notes_in_docstring._doc",
        "scipy.stats._continuous_distns._call_super_mom"
    ],
    "scipy.stats._continuous_distns.gamma_gen": [
        "scipy._lib.doccer.extend_notes_in_docstring._doc",
        "scipy._lib.doccer.extend_notes_in_docstring"
    ],
    "scipy.stats._continuous_distns.erlang_gen": [
        "scipy._lib.doccer.extend_notes_in_docstring._doc",
        "scipy._lib.doccer.extend_notes_in_docstring"
    ],
    "scipy.stats._continuous_distns.gumbel_r_gen": [
        "scipy._lib.doccer.inherit_docstring_from._doc",
        "scipy._lib.doccer.inherit_docstring_from",
        "scipy.stats._continuous_distns._call_super_mom"
    ],
    "scipy._lib.doccer.inherit_docstring_from": [],
    "scipy._lib.doccer.inherit_docstring_from._doc": [
        "<builtin>.dict",
        "<builtin>.getattr"
    ],
    "scipy.stats._continuous_distns.gumbel_l_gen": [
        "scipy._lib.doccer.inherit_docstring_from._doc",
        "scipy._lib.doccer.inherit_docstring_from",
        "scipy.stats._continuous_distns._call_super_mom"
    ],
    "scipy.stats._continuous_distns.invgauss_gen": [
        "scipy._lib.doccer.inherit_docstring_from._doc",
        "scipy._lib.doccer.inherit_docstring_from"
    ],
    "scipy.stats._continuous_distns.laplace_gen": [
        "scipy._lib.doccer.replace_notes_in_docstring",
        "scipy._lib.doccer.replace_notes_in_docstring._doc",
        "scipy.stats._continuous_distns._call_super_mom"
    ],
    "scipy.stats._continuous_distns.logistic_gen": [
        "scipy._lib.doccer.inherit_docstring_from._doc",
        "scipy._lib.doccer.inherit_docstring_from",
        "scipy.stats._continuous_distns._call_super_mom"
    ],
    "scipy.stats._continuous_distns.lognorm_gen": [
        "scipy._lib.doccer.extend_notes_in_docstring._doc",
        "scipy.stats._continuous_distns._call_super_mom",
        "scipy._lib.doccer.extend_notes_in_docstring"
    ],
    "numpy.lib.utils.deprecate": [
        "numpy.lib.utils._Deprecate.__init__"
    ],
    "numpy.lib.utils._Deprecate.__init__": [],
    "scipy.stats._continuous_distns.pareto_gen": [
        "scipy._lib.doccer.inherit_docstring_from._doc",
        "scipy._lib.doccer.inherit_docstring_from",
        "scipy.stats._continuous_distns._call_super_mom"
    ],
    "scipy.stats._continuous_distns.pearson3_gen": [
        "scipy._lib.doccer.extend_notes_in_docstring._doc",
        "scipy.stats._continuous_distns._call_super_mom",
        "scipy._lib.doccer.extend_notes_in_docstring"
    ],
    "scipy.stats._continuous_distns.rayleigh_gen": [
        "scipy._lib.doccer.extend_notes_in_docstring._doc",
        "scipy.stats._continuous_distns._call_super_mom",
        "scipy._lib.doccer.extend_notes_in_docstring"
    ],
    "scipy.stats._continuous_distns.reciprocal_gen": [
        "scipy._lib.doccer.extend_notes_in_docstring._doc",
        "scipy._lib.doccer.extend_notes_in_docstring"
    ],
    "scipy.stats._continuous_distns.uniform_gen": [
        "scipy.stats._continuous_distns._call_super_mom"
    ],
    "scipy.stats._continuous_distns.vonmises_gen": [
        "scipy._lib.doccer.inherit_docstring_from._doc",
        "scipy._lib.doccer.inherit_docstring_from"
    ],
    "scipy.stats._distn_infrastructure.get_distribution_names": [
        "<builtin>.issubclass",
        "<builtin>.isinstance",
        "append"
    ],
    "scipy.stats._discrete_distns": [
        "<builtin>.globals",
        "<builtin>.list",
        "scipy.stats._distn_infrastructure.get_distribution_names"
    ],
    "scipy.interpolate": [
        "<builtin>.dir",
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.interpolate._interpolate": [],
    "scipy.interpolate._fitpack_py": [],
    "scipy.interpolate._fitpack_impl": [],
    "scipy.interpolate._bsplines": [],
    "scipy.interpolate._bsplines.BSpline": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "scipy.interpolate._polyint": [],
    "scipy.interpolate._fitpack2": [
        "<map>.copy"
    ],
    "scipy.interpolate._fitpack2.UnivariateSpline": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "scipy.interpolate._fitpack2._BivariateSplineBase": [
        "<builtin>.classmethod"
    ],
    "scipy.interpolate._fitpack2.BivariateSpline": [
        "<builtin>.staticmethod"
    ],
    "scipy.interpolate._fitpack2._DerivedBivariateSpline": [
        "<builtin>.property"
    ],
    "scipy.interpolate._interpolate.interp1d": [
        "<builtin>.property"
    ],
    "scipy.interpolate._interpolate._PPolyBase": [
        "<builtin>.classmethod"
    ],
    "scipy.interpolate._interpolate.PPoly": [
        "<builtin>.classmethod"
    ],
    "scipy.interpolate._interpolate.BPoly": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "scipy.interpolate._interpolate.NdPPoly": [
        "<builtin>.classmethod"
    ],
    "scipy.interpolate._rbf": [],
    "scipy.interpolate._rbf.Rbf": [
        "<builtin>.property"
    ],
    "scipy.interpolate._rbfinterp": [],
    "scipy.interpolate._rbfinterp_pythran": [],
    "scipy.interpolate._cubic": [],
    "scipy.interpolate._cubic.PchipInterpolator": [
        "<builtin>.staticmethod"
    ],
    "scipy.interpolate._cubic.Akima1DInterpolator": [
        "<builtin>.classmethod"
    ],
    "scipy.interpolate._cubic.CubicSpline": [
        "<builtin>.staticmethod"
    ],
    "scipy.interpolate._ndgriddata": [],
    "scipy.interpolate._pade": [],
    "scipy.interpolate._rgi": [],
    "scipy.interpolate._rgi.RegularGridInterpolator": [
        "<map>.keys",
        "<builtin>.list",
        "<builtin>.staticmethod"
    ],
    "scipy.interpolate.fitpack": [],
    "scipy.interpolate.fitpack2": [],
    "scipy.interpolate.interpolate": [],
    "scipy.interpolate.ndgriddata": [],
    "scipy.interpolate.polyint": [],
    "scipy.interpolate.rbf": [],
    "scipy.stats._levy_stable": [
        "<builtin>.len",
        "numpy.lib.arraypad.pad"
    ],
    "scipy.stats._levy_stable.levy_stable_gen": [
        "scipy._lib.doccer.inherit_docstring_from._doc",
        "scipy._lib.doccer.inherit_docstring_from"
    ],
    "numpy.lib.arraypad.pad": [
        "numpy.lib.index_tricks.ndindex.__init__",
        "numpy.core.numeric.moveaxis",
        "numpy.lib.arraypad._set_reflect_both",
        "<builtin>.ValueError",
        "<builtin>.any",
        "numpy.lib.arraypad._view_roi",
        "<builtin>.range",
        "numpy.lib.arraypad._get_stats",
        "<builtin>.set",
        "<builtin>.TypeError",
        "numpy.lib.arraypad._set_wrap_both",
        "numpy.lib.arraypad._as_pairs",
        "numpy.lib.arraypad._get_edges",
        "<builtin>.zip",
        "numpy.lib.arraypad._get_linear_ramps",
        "numpy.lib.arraypad._set_pad_area",
        "<builtin>.callable",
        "numpy.lib.arraypad._pad_simple"
    ],
    "numpy.lib.arraypad._as_pairs": [
        "numpy.core.fromnumeric.round_",
        "numpy.lib.stride_tricks.broadcast_to",
        "<builtin>.ValueError"
    ],
    "numpy.core.fromnumeric.round_": [
        "numpy.core.fromnumeric.around"
    ],
    "numpy.core.fromnumeric.around": [
        "numpy.core.fromnumeric._wrapfunc"
    ],
    "numpy.lib.stride_tricks.broadcast_to": [
        "numpy.lib.stride_tricks._broadcast_to"
    ],
    "numpy.lib.stride_tricks._broadcast_to": [
        "<builtin>.tuple",
        "numpy.lib.stride_tricks._maybe_view_as_subclass",
        "<builtin>.ValueError",
        "numpy.lib.function_base.iterable",
        "<builtin>.any"
    ],
    "numpy.lib.stride_tricks._maybe_view_as_subclass": [
        "<builtin>.type"
    ],
    "numpy.lib.arraypad._pad_simple": [
        "<builtin>.tuple",
        "<builtin>.slice",
        "<builtin>.zip"
    ],
    "numpy.lib.index_tricks.ndindex.__init__": [
        "numpy.lib.stride_tricks.as_strided",
        "<builtin>.isinstance",
        "numpy.core.numeric.zeros_like",
        "<builtin>.len"
    ],
    "numpy.lib.stride_tricks.as_strided": [
        "<builtin>.tuple",
        "numpy.lib.stride_tricks._maybe_view_as_subclass",
        "<builtin>.dict",
        "numpy.lib.stride_tricks.DummyArray.__init__"
    ],
    "numpy.lib.stride_tricks.DummyArray.__init__": [],
    "numpy.lib.arraypad._view_roi": [
        "<builtin>.slice"
    ],
    "numpy.lib.arraypad._set_wrap_both": [
        "<builtin>.min",
        "numpy.lib.arraypad._slice_at_axis",
        "<builtin>.slice"
    ],
    "numpy.lib.arraypad._slice_at_axis": [
        "<builtin>.slice"
    ],
    "numpy.lib.arraypad._get_edges": [
        "numpy.lib.arraypad._slice_at_axis",
        "<builtin>.slice"
    ],
    "numpy.lib.arraypad._set_pad_area": [
        "numpy.lib.arraypad._slice_at_axis",
        "<builtin>.slice"
    ],
    "numpy.lib.arraypad._set_reflect_both": [
        "<builtin>.min",
        "numpy.lib.arraypad._slice_at_axis",
        "<builtin>.slice"
    ],
    "numpy.lib.arraypad._get_stats": [
        "numpy.lib.arraypad._slice_at_axis",
        "<builtin>.ValueError",
        "numpy.core.fromnumeric.amax",
        "numpy.lib.function_base.median",
        "numpy.lib.arraypad._round_if_needed",
        "numpy.core.fromnumeric.mean",
        "numpy.core.fromnumeric.amin",
        "<builtin>.slice"
    ],
    "numpy.lib.function_base.median": [
        "numpy.lib.function_base._ureduce"
    ],
    "numpy.lib.function_base._ureduce": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.enumerate",
        "<builtin>.set",
        "numpy.core.numeric.normalize_axis_tuple",
        "numpy.lib.function_base._median",
        "<builtin>.sorted"
    ],
    "numpy.lib.function_base._median": [
        "<builtin>.tuple",
        "numpy.core.fromnumeric.partition",
        "numpy.core.fromnumeric.mean",
        "numpy.lib.utils._median_nancheck",
        "numpy.core.numerictypes.issubdtype",
        "append",
        "<builtin>.slice"
    ],
    "numpy.core.fromnumeric.partition": [],
    "numpy.core.fromnumeric.mean": [
        "numpy.core._methods._mean",
        "<builtin>.type"
    ],
    "numpy.core._methods._mean": [
        "<builtin>.issubclass",
        "warnings.warn",
        "numpy.core._methods._count_reduce_items",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "numpy.core._methods._count_reduce_items": [
        "<builtin>.tuple",
        "<builtin>.range",
        "<builtin>.isinstance",
        "numpy.lib.stride_tricks.broadcast_to"
    ],
    "numpy.lib.utils._median_nancheck": [
        "numpy.core.numeric.count_nonzero",
        "numpy.ma.core.isMaskedArray",
        "<builtin>.isinstance"
    ],
    "numpy.ma.core.isMaskedArray": [
        "<builtin>.isinstance"
    ],
    "numpy.core.numeric.count_nonzero": [
        "numpy.core.numerictypes.issubdtype"
    ],
    "numpy.lib.arraypad._round_if_needed": [
        "numpy.core.numerictypes.issubdtype"
    ],
    "numpy.lib.arraypad._get_linear_ramps": [
        "numpy.lib.arraypad._slice_at_axis",
        "numpy.core.linspace",
        "numpy.lib.arraypad._get_edges",
        "<builtin>.zip",
        "<builtin>.slice"
    ],
    "scipy.stats._entropy": [],
    "scipy.stats._mstats_basic": [
        "<builtin>.list",
        "scipy._lib._util._rename_parameter",
        "scipy._lib._util._rename_parameter.decorator",
        "collections.namedtuple"
    ],
    "scipy.stats._stats_mstats_common": [
        "scipy._lib._bunch._make_tuple_bunch"
    ],
    "scipy._lib._bunch": [],
    "scipy._lib._bunch._make_tuple_bunch": [
        "<builtin>.tuple",
        "scipy._lib._bunch._validate_names",
        "<builtin>.len",
        "<builtin>.property",
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.str",
        "<builtin>.enumerate",
        "<builtin>.dict",
        "<builtin>.exec",
        "<builtin>.map",
        "<builtin>.repr"
    ],
    "scipy._lib._bunch._validate_names": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "scipy._lib._util._rename_parameter": [],
    "scipy._lib._util._rename_parameter.decorator": [
        "functools.wraps"
    ],
    "scipy.stats._hypotests": [
        "dataclasses.make_dataclass",
        "collections.namedtuple"
    ],
    "scipy.stats._common": [
        "collections.namedtuple"
    ],
    "scipy.fft": [
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.fft._basic": [
        "scipy.fft._basic._dispatch"
    ],
    "scipy._lib.uarray": [],
    "scipy._lib._uarray": [],
    "scipy._lib._uarray._backend": [
        "contextlib.contextmanager",
        "copyreg.pickle"
    ],
    "scipy.fft._basic._dispatch": [
        "scipy._lib._uarray._backend.generate_multimethod"
    ],
    "scipy._lib._uarray._backend.generate_multimethod": [
        "functools.update_wrapper",
        "scipy._lib._uarray._backend.get_defaults"
    ],
    "scipy._lib._uarray._backend.get_defaults": [
        "<builtin>.tuple",
        "append",
        "inspect.signature",
        "<builtin>.set"
    ],
    "scipy.fft._realtransforms": [
        "scipy.fft._basic._dispatch"
    ],
    "scipy.fft._fftlog": [],
    "scipy.fft._fftlog_multimethods": [
        "scipy.fft._basic._dispatch"
    ],
    "scipy.fft._helper": [
        "functools.lru_cache.decorating_function",
        "functools.update_wrapper",
        "functools.lru_cache"
    ],
    "scipy.fft._pocketfft.helper": [
        "contextlib.contextmanager"
    ],
    "scipy.fft._backend": [
        "scipy.fft._backend.set_global_backend"
    ],
    "scipy.fft._pocketfft": [
        "scipy._lib._testutils.PytestTester.__init__"
    ],
    "scipy.fft._pocketfft.basic": [],
    "scipy.fft._pocketfft.realtransforms": [],
    "scipy.fft._backend._ScipyBackend": [
        "<builtin>.staticmethod"
    ],
    "scipy.fft._backend.set_global_backend": [
        "scipy.fft._backend._backend_from_arg",
        "scipy._lib._uarray._backend.set_global_backend"
    ],
    "scipy.fft._backend._backend_from_arg": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "scipy._lib._uarray._backend.set_global_backend": [],
    "dataclasses.make_dataclass": [
        "<builtin>.len",
        "<str>.isidentifier",
        "<builtin>.set",
        "<builtin>.TypeError",
        "types.new_class",
        "<builtin>.isinstance",
        "dataclasses.dataclass"
    ],
    "types.new_class": [
        "dataclasses.make_dataclass.exec_body_callback",
        "types.prepare_class",
        "types.resolve_bases"
    ],
    "types.resolve_bases": [
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.enumerate",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "types.prepare_class": [
        "<map>.pop",
        "<builtin>.type",
        "types._calculate_meta",
        "<builtin>.dict",
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "types._calculate_meta": [
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "<builtin>.type"
    ],
    "dataclasses.make_dataclass.exec_body_callback": [],
    "dataclasses.dataclass": [
        "dataclasses.dataclass.wrap"
    ],
    "dataclasses.dataclass.wrap": [
        "dataclasses._process_class"
    ],
    "dataclasses._process_class": [
        "<map>.values",
        "<builtin>.hasattr",
        "inspect.signature",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "dataclasses._DataclassParams.__init__",
        "dataclasses._hash_set_none",
        "<builtin>.str",
        "dataclasses._fields_in_init_order",
        "append",
        "dataclasses._hash_exception",
        "<builtin>.tuple",
        "dataclasses._cmp_fn",
        "<builtin>.ValueError",
        "dataclasses._tuple_str",
        "<builtin>.TypeError",
        "dataclasses._add_slots",
        "dataclasses._init_fn",
        "abc.update_abstractmethods",
        "<builtin>.delattr",
        "dataclasses._is_kw_only",
        "dataclasses._hash_add",
        "dataclasses._is_type",
        "dataclasses._set_new_attribute",
        "dataclasses._repr_fn",
        "<builtin>.setattr",
        "dataclasses._frozen_get_del_attr",
        "<builtin>.bool"
    ],
    "dataclasses._DataclassParams.__init__": [],
    "dataclasses._is_kw_only": [],
    "dataclasses._is_type": [
        "dataclasses._is_kw_only"
    ],
    "<builtin>.delattr": [],
    "dataclasses._fields_in_init_order": [
        "<builtin>.tuple"
    ],
    "dataclasses._init_fn": [
        "dataclasses._field_init",
        "<builtin>.TypeError",
        "append",
        "dataclasses._init_param",
        "dataclasses._create_fn"
    ],
    "dataclasses._field_init": [
        "dataclasses._field_assign"
    ],
    "dataclasses._field_assign": [],
    "dataclasses._init_param": [],
    "dataclasses._create_fn": [
        "<map>.keys",
        "<builtin>.exec"
    ],
    "dataclasses._set_new_attribute": [
        "<builtin>.setattr",
        "dataclasses._set_qualname"
    ],
    "dataclasses._set_qualname": [
        "<builtin>.isinstance"
    ],
    "dataclasses._repr_fn": [
        "dataclasses._create_fn",
        "dataclasses._recursive_repr"
    ],
    "dataclasses._recursive_repr": [
        "functools.wraps",
        "<builtin>.set"
    ],
    "dataclasses._tuple_str": [],
    "dataclasses._cmp_fn": [
        "dataclasses._create_fn"
    ],
    "dataclasses._frozen_get_del_attr": [
        "dataclasses._create_fn",
        "<builtin>.repr"
    ],
    "dataclasses._hash_add": [
        "dataclasses._hash_fn",
        "dataclasses._set_qualname"
    ],
    "dataclasses._hash_fn": [
        "dataclasses._create_fn",
        "dataclasses._tuple_str"
    ],
    "dataclasses._hash_set_none": [],
    "dataclasses._hash_exception": [
        "<builtin>.TypeError"
    ],
    "dataclasses._add_slots": [
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.dict",
        "<builtin>.getattr",
        "dataclasses.fields"
    ],
    "dataclasses.fields": [
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "<builtin>.tuple"
    ],
    "abc.update_abstractmethods": [
        "<builtin>.getattr",
        "<builtin>.frozenset",
        "<builtin>.hasattr",
        "<builtin>.set"
    ],
    "scipy.stats._resampling": [
        "dataclasses.make_dataclass"
    ],
    "scipy.stats._axis_nan_policy": [
        "inspect.Parameter.__init__"
    ],
    "scipy._lib._docscrape": [
        "collections.namedtuple"
    ],
    "pydoc": [
        "pydoc.Helper.__init__",
        "re.compile"
    ],
    "importlib._bootstrap": [
        "<builtin>.object"
    ],
    "importlib._bootstrap.ModuleSpec": [
        "<builtin>.property"
    ],
    "importlib._bootstrap.BuiltinImporter": [
        "<builtin>.staticmethod",
        "importlib._bootstrap._requires_builtin",
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap._requires_builtin": [
        "importlib._bootstrap._wrap"
    ],
    "importlib._bootstrap._wrap": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "importlib._bootstrap.FrozenImporter": [
        "<builtin>.staticmethod",
        "importlib._bootstrap._requires_frozen",
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap._requires_frozen": [
        "importlib._bootstrap._wrap"
    ],
    "importlib._bootstrap_external": [
        "<builtin>.tuple",
        "<builtin>.object",
        "<builtin>.len",
        "<builtin>.type",
        "importlib._bootstrap_external._make_relax_case",
        "<int>.to_bytes",
        "append",
        "<builtin>.all"
    ],
    "importlib._bootstrap_external._make_relax_case": [],
    "<int>.to_bytes": [],
    "importlib._bootstrap_external.WindowsRegistryFinder": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.FileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._check_name": [
        "importlib._bootstrap_external._check_name._wrap"
    ],
    "importlib._bootstrap_external._check_name._wrap": [
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "importlib._bootstrap_external.ExtensionFileLoader": [
        "importlib._bootstrap_external._check_name"
    ],
    "importlib._bootstrap_external._NamespaceLoader": [
        "<builtin>.staticmethod"
    ],
    "importlib._bootstrap_external.PathFinder": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "importlib._bootstrap_external.FileFinder": [
        "<builtin>.classmethod"
    ],
    "pydoc.Doc": [
        "sysconfig.get_path"
    ],
    "pydoc.HTMLDoc": [
        "pydoc.HTMLRepr.__init__"
    ],
    "pydoc.HTMLRepr.__init__": [
        "reprlib.Repr.__init__"
    ],
    "pydoc.TextDoc": [
        "pydoc.TextRepr.__init__"
    ],
    "pydoc.TextRepr.__init__": [
        "reprlib.Repr.__init__"
    ],
    "pydoc.Helper": [
        "<map>.get",
        "<builtin>.property",
        "<builtin>.object",
        "<map>.items"
    ],
    "pydoc.Helper.__init__": [],
    "scipy._lib._docscrape.NumpyDocString": [
        "re.compile"
    ],
    "scipy._lib._docscrape.ClassDoc": [
        "<builtin>.property"
    ],
    "scipy.stats._binomtest": [],
    "scipy.stats._axis_nan_policy._axis_nan_policy_factory": [],
    "scipy.stats._axis_nan_policy._axis_nan_policy_factory.axis_nan_policy_decorator": [
        "scipy._lib._docscrape.FunctionDoc.__init__",
        "functools.wraps",
        "<builtin>.list",
        "<builtin>.str",
        "inspect.signature",
        "scipy.stats._axis_nan_policy._get_axis_params"
    ],
    "scipy.stats._axis_nan_policy._get_axis_params": [
        "inspect.Parameter.__init__"
    ],
    "scipy._lib._docscrape.FunctionDoc.__init__": [
        "inspect.getdoc",
        "scipy._lib._docscrape.NumpyDocString.__init__",
        "<builtin>.ValueError"
    ],
    "scipy._lib._docscrape.NumpyDocString.__init__": [
        "scipy._lib._docscrape.NumpyDocString._parse",
        "textwrap.dedent",
        "scipy._lib._docscrape.Reader.__init__",
        "copy.deepcopy"
    ],
    "scipy._lib._docscrape.Reader.__init__": [
        "<builtin>.isinstance",
        "scipy._lib._docscrape.Reader.reset"
    ],
    "scipy._lib._docscrape.Reader.reset": [],
    "scipy._lib._docscrape.NumpyDocString._parse": [
        "scipy._lib._docscrape.NumpyDocString._parse_see_also",
        "scipy._lib._docscrape.NumpyDocString._parse_index",
        "<builtin>.ValueError",
        "<builtin>.list",
        "scipy._lib._docscrape.NumpyDocString._parse_param_list",
        "<builtin>.set",
        "<str>.startswith",
        "scipy._lib._docscrape.NumpyDocString._parse_summary",
        "scipy._lib._docscrape.NumpyDocString._read_sections",
        "scipy._lib._docscrape.NumpyDocString._error_location"
    ],
    "scipy._lib._docscrape.NumpyDocString._parse_summary": [
        "scipy._lib._docscrape.NumpyDocString._is_at_section",
        "re.compile",
        "scipy._lib._docscrape.NumpyDocString._read_to_next_section"
    ],
    "scipy._lib._docscrape.NumpyDocString._is_at_section": [
        "<builtin>.len"
    ],
    "scipy._lib._docscrape.NumpyDocString._read_to_next_section": [
        "scipy._lib._docscrape.NumpyDocString._is_at_section"
    ],
    "scipy._lib._docscrape.NumpyDocString._read_sections": [
        "scipy._lib._docscrape.NumpyDocString._read_to_next_section",
        "<builtin>.len",
        "scipy._lib._docscrape.NumpyDocString._strip"
    ],
    "scipy._lib._docscrape.NumpyDocString._strip": [
        "<builtin>.len",
        "<builtin>.enumerate"
    ],
    "scipy._lib._docscrape.NumpyDocString._error_location": [
        "inspect.getsourcefile",
        "warnings.warn",
        "<builtin>.ValueError",
        "<builtin>.hasattr"
    ],
    "inspect.getsourcefile": [
        "genericpath.exists",
        "posixpath.splitext",
        "ntpath.splitext",
        "<builtin>.any",
        "inspect.getfile",
        "inspect.getmodule",
        "<builtin>.getattr"
    ],
    "inspect.getmodule": [
        "posixpath.realpath",
        "<builtin>.getattr",
        "inspect.ismodule",
        "ntpath.realpath",
        "<builtin>.hasattr",
        "<map>.get",
        "inspect.getabsfile"
    ],
    "inspect.getabsfile": [
        "ntpath.normcase",
        "ntpath.abspath",
        "inspect.getfile",
        "posixpath.normcase",
        "posixpath.abspath",
        "inspect.getsourcefile"
    ],
    "scipy._lib._docscrape.NumpyDocString._parse_see_also": [
        "<builtin>.filter",
        "scipy._lib._docscrape.NumpyDocString._parse_see_also.parse_item_name",
        "<builtin>.list",
        "append",
        "scipy._lib._docscrape.NumpyDocString._error_location"
    ],
    "scipy._lib._docscrape.NumpyDocString._parse_see_also.parse_item_name": [],
    "scipy._lib._docscrape.NumpyDocString._parse_index": [
        "<builtin>.len",
        "scipy._lib._docscrape.NumpyDocString._parse_index.strip_each_in"
    ],
    "scipy._lib._docscrape.NumpyDocString._parse_index.strip_each_in": [],
    "scipy._lib._docscrape.NumpyDocString._parse_param_list": [
        "scipy._lib._docscrape.Reader.__init__",
        "scipy._lib._docscrape.Reader.read",
        "scipy._lib._docscrape.Reader.eof",
        "scipy._lib._docscrape.dedent_lines",
        "append",
        "scipy._lib._docscrape.Reader.read_to_next_unindented_line",
        "scipy._lib._docscrape.strip_blank_lines"
    ],
    "scipy._lib._docscrape.Reader.eof": [
        "<builtin>.len"
    ],
    "scipy._lib._docscrape.Reader.read": [
        "scipy._lib._docscrape.Reader.eof"
    ],
    "scipy._lib._docscrape.Reader.read_to_next_unindented_line": [
        "scipy._lib._docscrape.Reader.read_to_condition"
    ],
    "scipy._lib._docscrape.Reader.read_to_condition": [
        "scipy._lib._docscrape.Reader.read_to_next_unindented_line.is_unindented",
        "scipy._lib._docscrape.Reader.eof"
    ],
    "scipy._lib._docscrape.Reader.read_to_next_unindented_line.is_unindented": [
        "<builtin>.len"
    ],
    "scipy._lib._docscrape.dedent_lines": [
        "textwrap.dedent"
    ],
    "scipy._lib._docscrape.strip_blank_lines": [],
    "scipy.stats._variation": [],
    "scipy.stats._morestats": [
        "scipy._lib._util._rename_parameter",
        "scipy.stats._morestats._ABW.__init__",
        "scipy._lib._util._rename_parameter.decorator",
        "scipy._lib._bunch._make_tuple_bunch",
        "scipy.stats._axis_nan_policy._axis_nan_policy_factory.axis_nan_policy_decorator",
        "scipy.stats._axis_nan_policy._axis_nan_policy_factory",
        "collections.namedtuple"
    ],
    "scipy.stats.contingency": [],
    "scipy.stats._relative_risk": [],
    "scipy.stats._crosstab": [],
    "scipy.stats._morestats._ABW.__init__": [],
    "scipy.stats._binned_statistic": [
        "collections.namedtuple"
    ],
    "scipy.stats._kde": [],
    "scipy.stats._kde.gaussian_kde": [
        "<builtin>.property"
    ],
    "scipy.stats.mstats": [],
    "scipy.stats._mstats_extras": [
        "<builtin>.list"
    ],
    "scipy.stats.qmc": [],
    "scipy.stats._qmc": [
        "typing.overload"
    ],
    "scipy.stats._qmc.QMCEngine": [
        "abc.abstractmethod"
    ],
    "scipy.stats._multivariate": [
        "scipy.stats._multivariate.matrix_normal_gen.__init__",
        "scipy.stats._multivariate.multivariate_normal_gen.__init__",
        "scipy.stats._multivariate.random_correlation_gen.__init__",
        "scipy.stats._multivariate.unitary_group_gen.__init__",
        "scipy.stats._multivariate.ortho_group_gen.__init__",
        "scipy.stats._multivariate.dirichlet_gen.__init__",
        "scipy._lib.doccer.docformat",
        "scipy.stats._multivariate.multivariate_hypergeom_gen.__init__",
        "scipy.stats._multivariate.multivariate_t_gen.__init__",
        "scipy.stats._multivariate.multinomial_gen.__init__",
        "scipy.stats._multivariate.special_ortho_group_gen.__init__",
        "scipy.stats._multivariate.wishart_gen.__init__",
        "scipy.stats._multivariate.invwishart_gen.__init__"
    ],
    "scipy.stats._multivariate._PSD": [
        "<builtin>.property"
    ],
    "scipy.stats._multivariate.multi_rv_generic": [
        "<builtin>.property"
    ],
    "scipy.stats._multivariate.multi_rv_frozen": [
        "<builtin>.property"
    ],
    "scipy.stats._multivariate.multivariate_normal_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.matrix_normal_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.dirichlet_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.wishart_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.invwishart_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.multinomial_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.special_ortho_group_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.ortho_group_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.random_correlation_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.unitary_group_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._multivariate.multivariate_t_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "scipy._lib._util.check_random_state",
        "<builtin>.super"
    ],
    "scipy._lib._util.check_random_state": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "scipy.stats._multivariate.multivariate_hypergeom_gen.__init__": [
        "scipy._lib.doccer.docformat",
        "<builtin>.super"
    ],
    "scipy.stats._rvs_sampling": [],
    "scipy.stats._rvs_sampling.NumericalInverseHermite": [
        "scipy._lib.deprecation._deprecated.wrap",
        "scipy._lib.deprecation._deprecated"
    ],
    "scipy.stats._page_trend_test": [
        "dataclasses.make_dataclass",
        "scipy.stats._page_trend_test._PageL.__init__"
    ],
    "scipy.stats._page_trend_test._PageL.__init__": [],
    "scipy.stats._mannwhitneyu": [
        "scipy.stats._axis_nan_policy._axis_nan_policy_factory.axis_nan_policy_decorator",
        "scipy.stats._mannwhitneyu._MWU.__init__",
        "collections.namedtuple",
        "scipy.stats._axis_nan_policy._axis_nan_policy_factory"
    ],
    "scipy.stats._mannwhitneyu._MWU.__init__": [
        "numpy.core.ones"
    ],
    "scipy.stats._fit": [],
    "scipy.stats.biasedurn": [],
    "scipy.stats.kde": [],
    "scipy.stats.morestats": [],
    "scipy.stats.mstats_basic": [],
    "scipy.stats.mstats_extras": [],
    "scipy.stats.mvn": [],
    "scipy.stats.statlib": [],
    "scipy.stats.stats": [],
    "threadpoolctl": [
        "<builtin>.list",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "<builtin>.set",
        "threadpoolctl._format_docstring.decorator",
        "os._Environ.setdefault",
        "threadpoolctl._format_docstring"
    ],
    "ctypes.util": [],
    "ctypes._aix": [],
    "ctypes.macholib.dyld": [
        "posixpath.expanduser",
        "ntpath.expanduser"
    ],
    "ctypes.macholib.framework": [
        "re.compile"
    ],
    "ctypes.macholib.dylib": [
        "re.compile"
    ],
    "threadpoolctl.LibController": [
        "typing.final",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "threadpoolctl.OpenBLASController": [
        "<builtin>.tuple"
    ],
    "threadpoolctl.FlexiBLASController": [
        "<builtin>.property"
    ],
    "threadpoolctl._format_docstring": [],
    "threadpoolctl._format_docstring.decorator": [],
    "threadpoolctl._ThreadpoolLimiter": [
        "<builtin>.classmethod"
    ],
    "threadpoolctl.threadpool_limits": [
        "<builtin>.classmethod"
    ],
    "threadpoolctl.ThreadpoolController": [
        "threadpoolctl._format_docstring",
        "<builtin>.dict",
        "threadpoolctl._format_docstring.decorator",
        "<builtin>.classmethod"
    ],
    "sklearn.externals._packaging.version": [
        "re.compile",
        "collections.namedtuple"
    ],
    "sklearn.externals._packaging._structures": [],
    "sklearn.externals._packaging.version.LegacyVersion": [
        "<builtin>.property"
    ],
    "sklearn.externals._packaging.version.Version": [
        "re.compile",
        "<builtin>.property"
    ],
    "sklearn.externals._packaging.version.parse": [
        "sklearn.externals._packaging.version.LegacyVersion.__init__",
        "sklearn.externals._packaging.version.Version.__init__"
    ],
    "sklearn.externals._packaging.version.Version.__init__": [
        "<builtin>.tuple",
        "sklearn.externals._packaging.version._parse_local_version",
        "sklearn.externals._packaging.version._cmpkey",
        "sklearn.externals._packaging.version._parse_letter_version",
        "<builtin>.int"
    ],
    "sklearn.externals._packaging.version._parse_letter_version": [
        "<str>.lower",
        "<builtin>.int"
    ],
    "sklearn.externals._packaging.version._parse_local_version": [
        "<builtin>.tuple",
        "<builtin>.int"
    ],
    "sklearn.externals._packaging.version._cmpkey": [
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.isinstance"
    ],
    "sklearn.externals._packaging.version.LegacyVersion.__init__": [
        "sklearn.externals._packaging.version._legacy_cmpkey",
        "warnings.warn",
        "<builtin>.str"
    ],
    "sklearn.externals._packaging.version._legacy_cmpkey": [
        "<builtin>.tuple",
        "sklearn.externals._packaging.version._parse_version_parts",
        "<str>.startswith"
    ],
    "sklearn.externals._packaging.version._parse_version_parts": [
        "<map>.get"
    ],
    "sklearn.externals._lobpcg": [],
    "sklearn.utils._estimator_html_repr": [
        "sklearn.utils._estimator_html_repr._IDCounter.__init__"
    ],
    "html": [
        "re.compile"
    ],
    "sklearn.utils._estimator_html_repr._IDCounter.__init__": [],
    "sklearn.utils.validation": [],
    "joblib": [
        "os._Environ.setdefault"
    ],
    "joblib.memory": [
        "weakref.WeakKeyDictionary.__init__"
    ],
    "joblib.hashing": [],
    "joblib.hashing.Hasher": [
        "<map>.copy",
        "<builtin>.type",
        "<builtin>.set"
    ],
    "joblib._store_backends": [
        "collections.namedtuple"
    ],
    "joblib.backports": [],
    "multiprocessing.util": [
        "multiprocessing.util._platform_supports_abstract_sockets",
        "weakref.WeakValueDictionary.__init__"
    ],
    "multiprocessing.process": [
        "_weakrefset.WeakSet.__init__",
        "ntpath.abspath",
        "<builtin>.list",
        "multiprocessing.process._MainProcess.__init__",
        "<builtin>.set",
        "posixpath.abspath"
    ],
    "multiprocessing.process.BaseProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process._ParentProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process._MainProcess.__init__": [],
    "multiprocessing.util._platform_supports_abstract_sockets": [
        "<builtin>.hasattr"
    ],
    "joblib.backports.LooseVersion": [
        "re.compile"
    ],
    "joblib.disk": [],
    "joblib.logger": [],
    "joblib.numpy_pickle": [
        "joblib.compressor.register_compressor",
        "joblib.compressor.GzipCompressorWrapper.__init__",
        "joblib.compressor.LZMACompressorWrapper.__init__",
        "joblib.compressor.ZlibCompressorWrapper.__init__",
        "joblib.compressor.LZ4CompressorWrapper.__init__",
        "joblib.compressor.BZ2CompressorWrapper.__init__"
    ],
    "joblib.compressor": [],
    "joblib.compressor.BinaryZlibFile": [
        "<builtin>.property"
    ],
    "joblib.numpy_pickle_utils": [
        "contextlib.contextmanager"
    ],
    "joblib.numpy_pickle_compat": [
        "joblib.numpy_pickle_compat.hex_str",
        "<builtin>.len"
    ],
    "joblib.numpy_pickle_compat.hex_str": [],
    "joblib.numpy_pickle_compat.ZipNumpyUnpickler": [
        "<map>.copy"
    ],
    "joblib.compressor.ZlibCompressorWrapper.__init__": [
        "joblib.compressor.CompressorWrapper.__init__"
    ],
    "joblib.compressor.CompressorWrapper.__init__": [],
    "joblib.compressor.register_compressor": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.hasattr"
    ],
    "joblib.compressor.GzipCompressorWrapper.__init__": [
        "joblib.compressor.CompressorWrapper.__init__"
    ],
    "joblib.compressor.BZ2CompressorWrapper.__init__": [],
    "joblib.compressor.LZMACompressorWrapper.__init__": [
        "<builtin>.getattr"
    ],
    "joblib.compressor.LZ4CompressorWrapper.__init__": [],
    "joblib.numpy_pickle.NumpyPickler": [
        "<map>.copy"
    ],
    "joblib.numpy_pickle.NumpyUnpickler": [
        "<map>.copy"
    ],
    "joblib._store_backends.StoreBackendBase": [
        "<builtin>.dict",
        "abc.abstractmethod"
    ],
    "joblib._store_backends.FileSystemStoreBackend": [
        "<builtin>.staticmethod"
    ],
    "joblib.func_inspect": [
        "<builtin>.dict",
        "collections.namedtuple"
    ],
    "joblib.memory.MemorizedResult": [
        "<builtin>.property"
    ],
    "joblib.memory.MemorizedFunc": [
        "<builtin>.property"
    ],
    "joblib.parallel": [
        "<builtin>.hasattr"
    ],
    "queue": [],
    "queue.Queue": [
        "<builtin>.classmethod"
    ],
    "queue._PySimpleQueue": [
        "<builtin>.classmethod"
    ],
    "multiprocessing": [
        "<builtin>.globals",
        "<builtin>.dir",
        "<builtin>.getattr"
    ],
    "multiprocessing.context": [
        "multiprocessing.context.DefaultContext.__init__"
    ],
    "multiprocessing.reduction": [
        "multiprocessing.reduction.ForkingPickler.register",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "multiprocessing.reduction.ForkingPickler": [
        "<builtin>.classmethod"
    ],
    "multiprocessing.reduction.ForkingPickler.register": [],
    "multiprocessing.context.BaseContext": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "multiprocessing.context.Process": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.SpawnProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.DefaultContext.__init__": [],
    "multiprocessing.context.ForkProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.ForkServerProcess": [
        "<builtin>.staticmethod"
    ],
    "joblib._multiprocessing_helpers": [
        "<builtin>.range",
        "warnings.warn",
        "<builtin>.FileExistsError",
        "<builtin>.int",
        "<builtin>.next"
    ],
    "joblib._parallel_backends": [],
    "joblib._utils": [],
    "joblib.externals.loky.process_executor": [
        "<builtin>.int",
        "weakref.WeakKeyDictionary.__init__",
        "multiprocessing.util.register_after_fork"
    ],
    "concurrent.futures.process": [
        "threading._register_atexit",
        "weakref.WeakKeyDictionary.__init__"
    ],
    "multiprocessing.connection": [
        "multiprocessing.reduction.ForkingPickler.register",
        "<builtin>.hasattr"
    ],
    "multiprocessing.connection._ConnectionBase": [
        "<builtin>.property"
    ],
    "multiprocessing.connection.Listener": [
        "<builtin>.property"
    ],
    "multiprocessing.connection.PipeListener": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.queues": [
        "<builtin>.object"
    ],
    "multiprocessing.queues.Queue": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.queues.SimpleQueue": [
        "<builtin>.classmethod"
    ],
    "threading._register_atexit": [
        "<builtin>.RuntimeError",
        "append"
    ],
    "joblib.externals.loky._base": [],
    "joblib.externals.loky.backend": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.synchronize": [
        "<builtin>.ImportError",
        "<builtin>.list",
        "<builtin>.range"
    ],
    "multiprocessing.synchronize.SemLock": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.synchronize.Barrier": [
        "<builtin>.property"
    ],
    "joblib.externals.loky.backend.context": [],
    "joblib.externals.loky.backend.process": [],
    "joblib.externals.loky.backend.process.LokyProcess": [
        "<builtin>.staticmethod"
    ],
    "joblib.externals.loky.backend.context.LokyContext": [
        "<builtin>.staticmethod"
    ],
    "joblib.externals.loky.backend.queues": [],
    "joblib.externals.loky.backend.reduction": [
        "joblib.externals.loky.backend.reduction.register",
        "joblib.externals.loky.backend.reduction.set_loky_pickler",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "joblib.externals.loky.backend.reduction._C": [
        "<builtin>.classmethod"
    ],
    "joblib.externals.loky.backend.reduction.register": [],
    "joblib.externals.loky.backend._win_reduction": [
        "joblib.externals.loky.backend.reduction.register"
    ],
    "joblib.externals.loky.backend._posix_reduction": [
        "joblib.externals.loky.backend.reduction.register",
        "<builtin>.hasattr"
    ],
    "joblib.externals.cloudpickle": [],
    "joblib.externals.cloudpickle.cloudpickle": [
        "platform.python_implementation",
        "<builtin>.type",
        "weakref.WeakKeyDictionary.__init__",
        "<builtin>.set",
        "weakref.WeakValueDictionary.__init__"
    ],
    "joblib.externals.cloudpickle.cloudpickle._empty_cell_value": [
        "<builtin>.classmethod"
    ],
    "joblib.externals.cloudpickle.cloudpickle.Pickler": [
        "<map>.copy",
        "<builtin>.type",
        "collections.OrderedDict.values",
        "collections.OrderedDict.__init__",
        "collections.ChainMap.__init__",
        "collections.OrderedDict.keys",
        "collections.OrderedDict.items"
    ],
    "collections.OrderedDict.keys": [],
    "collections.OrderedDict.items": [],
    "collections.ChainMap.__init__": [
        "<builtin>.list"
    ],
    "joblib.externals.loky.backend.reduction.set_loky_pickler": [
        "multiprocessing.util.debug",
        "importlib.import_module"
    ],
    "multiprocessing.util.debug": [],
    "joblib.externals.loky.backend.queues.Queue": [
        "<builtin>.staticmethod"
    ],
    "joblib.externals.loky.backend.utils": [],
    "joblib.externals.loky.initializers": [],
    "multiprocessing.util.register_after_fork": [
        "<builtin>.next",
        "<builtin>.id"
    ],
    "joblib.pool": [
        "<builtin>.type"
    ],
    "joblib._memmapping_reducer": [
        "<builtin>.int",
        "<builtin>.type",
        "<builtin>.set"
    ],
    "joblib.externals.loky.backend.resource_tracker": [
        "joblib.externals.loky.backend.resource_tracker.ResourceTracker.__init__",
        "<builtin>.hasattr"
    ],
    "joblib.externals.loky.backend.spawn": [
        "ntpath.join",
        "<builtin>.getattr",
        "posixpath.join"
    ],
    "runpy": [],
    "joblib.externals.loky.backend.resource_tracker.ResourceTracker.__init__": [],
    "joblib._memmapping_reducer.ArrayMemmapForwardReducer": [
        "<builtin>.property"
    ],
    "multiprocessing.pool": [],
    "multiprocessing.pool.Pool": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "multiprocessing.pool.ApplyResult": [
        "<builtin>.classmethod"
    ],
    "multiprocessing.pool.ThreadPool": [
        "<builtin>.staticmethod"
    ],
    "joblib.pool.MemmappingPool": [
        "<builtin>.property"
    ],
    "joblib.executor": [],
    "joblib.externals.loky.reusable_executor": [
        "threading.RLock"
    ],
    "joblib.externals.loky.reusable_executor._ReusablePoolExecutor": [
        "<builtin>.classmethod"
    ],
    "joblib.executor.MemmappingExecutor": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "joblib.externals.loky": [],
    "joblib.externals.loky.cloudpickle_wrapper": [],
    "joblib._parallel_backends.ParallelBackendBase": [
        "contextlib.contextmanager",
        "<builtin>.staticmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "joblib._cloudpickle_wrapper": [],
    "sklearn.utils._bunch": [],
    "sklearn.utils._tags": [],
    "sklearn.base.BaseEstimator": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sklearn.base.BiclusterMixin": [
        "<builtin>.property"
    ],
    "sklearn.preprocessing": [],
    "sklearn.preprocessing._function_transformer": [],
    "sklearn.utils.metaestimators": [],
    "sklearn.utils.metaestimators._BaseComposition": [
        "abc.abstractmethod"
    ],
    "sklearn.preprocessing._function_transformer.FunctionTransformer": [
        "sklearn.utils.metaestimators.available_if.<lambda1>",
        "sklearn.utils.metaestimators.available_if"
    ],
    "sklearn.utils.metaestimators.available_if": [],
    "sklearn.utils.metaestimators.available_if.<lambda1>": [
        "sklearn.utils.metaestimators._AvailableIfDescriptor.__init__"
    ],
    "sklearn.utils.metaestimators._AvailableIfDescriptor.__init__": [
        "functools.update_wrapper"
    ],
    "sklearn.preprocessing._data": [],
    "sklearn.utils.extmath": [],
    "sklearn.utils.sparsefuncs": [],
    "sklearn.preprocessing._encoders": [],
    "sklearn.utils._mask": [],
    "sklearn.utils._encode": [],
    "sklearn.preprocessing._encoders.OneHotEncoder": [
        "sklearn.utils.deprecation.deprecated.__init__",
        "<builtin>.property"
    ],
    "sklearn.utils.deprecation.deprecated.__init__": [],
    "sklearn.preprocessing._data.KernelCenterer": [
        "<builtin>.property"
    ],
    "sklearn.preprocessing._label": [],
    "sklearn.utils.multiclass": [],
    "sklearn.preprocessing._discretization": [],
    "sklearn.preprocessing._polynomial": [],
    "sklearn.utils.stats": [],
    "sklearn.preprocessing._polynomial.PolynomialFeatures": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "sklearn.utils.deprecation.deprecated.__init__"
    ],
    "sklearn.preprocessing._polynomial.SplineTransformer": [
        "<builtin>.staticmethod",
        "sklearn.utils.deprecation.deprecated.__init__"
    ],
    "sklearn.naive_bayes._BaseNB": [
        "abc.abstractmethod"
    ],
    "sklearn.naive_bayes.GaussianNB": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "sklearn.utils.deprecation.deprecated.__init__"
    ],
    "sklearn.naive_bayes._BaseDiscreteNB": [
        "sklearn.utils.deprecation.deprecated.__init__",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "sklearn.naive_bayes.CategoricalNB": [
        "<builtin>.staticmethod"
    ],
    "sklearn.metrics": [],
    "sklearn.metrics._ranking": [],
    "sklearn.metrics._base": [],
    "sklearn.metrics._classification": [],
    "sklearn.metrics.cluster": [],
    "sklearn.metrics.cluster._supervised": [],
    "sklearn.metrics.cluster._unsupervised": [],
    "sklearn.metrics.pairwise": [
        "<builtin>.frozenset"
    ],
    "sklearn.metrics.cluster._bicluster": [],
    "sklearn.metrics._regression": [],
    "sklearn.metrics._scorer": [
        "<builtin>.dict",
        "sklearn.metrics._scorer.make_scorer"
    ],
    "sklearn.metrics._scorer._BaseScorer": [
        "<builtin>.staticmethod"
    ],
    "sklearn.metrics._scorer.make_scorer": [
        "<builtin>.ValueError"
    ],
    "sklearn.metrics._plot.det_curve": [
        "sklearn.utils.deprecation.deprecated.__init__"
    ],
    "sklearn.metrics._plot.base": [],
    "sklearn.metrics._plot.det_curve.DetCurveDisplay": [
        "<builtin>.classmethod"
    ],
    "sklearn.metrics._plot.roc_curve": [
        "sklearn.utils.deprecation.deprecated.__init__"
    ],
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay": [
        "<builtin>.classmethod"
    ],
    "sklearn.metrics._plot.precision_recall_curve": [
        "sklearn.utils.deprecation.deprecated.__init__"
    ],
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay": [
        "<builtin>.classmethod"
    ],
    "sklearn.metrics._plot.confusion_matrix": [
        "sklearn.utils.deprecation.deprecated.__init__"
    ],
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay": [
        "<builtin>.classmethod"
    ],
    "sklearn.feature_extraction.text": [],
    "sklearn.feature_extraction._hash": [],
    "sklearn.feature_extraction._hash.FeatureHasher": [
        "<builtin>.staticmethod"
    ],
    "sklearn.feature_extraction._stop_words": [
        "<builtin>.frozenset"
    ],
    "sklearn.feature_extraction.text._VectorizerMixin": [
        "re.compile"
    ],
    "sklearn.feature_extraction.text.CountVectorizer": [
        "sklearn.utils.deprecation.deprecated.__init__"
    ],
    "sklearn.feature_extraction.text.TfidfTransformer": [
        "<builtin>.property"
    ],
    "sklearn.feature_extraction.text.TfidfVectorizer": [
        "<builtin>.property"
    ],
    "gzip.open": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "gzip.GzipFile.__init__",
        "<builtin>.isinstance"
    ],
    "gzip.GzipFile.__init__": [
        "<builtin>.ValueError",
        "warnings.warn",
        "gzip.GzipFile._init_write",
        "os._fspath",
        "gzip._GzipReader.__init__",
        "gzip.GzipFile._write_gzip_header",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "gzip.GzipFile._init_write": [],
    "gzip._GzipReader.__init__": [
        "<builtin>.super",
        "gzip._PaddedFile.__init__"
    ],
    "gzip._PaddedFile.__init__": [
        "<builtin>.len"
    ],
    "gzip.GzipFile._write_gzip_header": [
        "gzip.write32u",
        "posixpath.basename",
        "ntpath.basename",
        "<builtin>.int",
        "<builtin>.isinstance",
        "<builtin>.chr"
    ],
    "gzip.write32u": [],
    "pickle._load": [
        "pickle._Unpickler.load",
        "pickle._Unpickler.__init__"
    ],
    "pickle._Unpickler.__init__": [
        "<builtin>.iter"
    ],
    "pickle._Unpickler.load": [
        "pickle._Unframer.__init__",
        "pickle._Unframer.read",
        "<builtin>.hasattr",
        "pandas.compat.pickle_compat.load_newobj_ex",
        "pickle._Unpickler.load_stop",
        "<builtin>.isinstance"
    ],
    "pickle._Unframer.__init__": [],
    "pickle._Unframer.read": [
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_stop": [
        "pickle._Stop.__init__"
    ],
    "pickle._Stop.__init__": [],
    "pandas.compat.pickle_compat.load_newobj_ex": [
        "<builtin>.issubclass"
    ],
    "handler.predict": [
        "<map>.get"
    ],
    "handler.handle": [
        "<builtin>.print",
        "json.loads",
        "handler.predict"
    ]
}