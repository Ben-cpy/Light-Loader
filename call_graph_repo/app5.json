{
    "handler": [
        "handler.handle"
    ],
    "requests": [
        "requests.check_compatibility",
        "warnings.simplefilter",
        "warnings.warn",
        "urllib3.contrib.pyopenssl.inject_into_urllib3",
        "requests._check_cryptography",
        "logging.getLogger",
        "<builtin>.getattr"
    ],
    "warnings": [
        "warnings.filterwarnings",
        "warnings._processoptions",
        "<builtin>.hasattr",
        "warnings.simplefilter"
    ],
    "warnings._processoptions": [
        "warnings._setoption",
        "<builtin>.print"
    ],
    "warnings._setoption": [
        "warnings._getcategory",
        "<builtin>.len",
        "re.escape",
        "warnings._getaction",
        "warnings.filterwarnings",
        "<builtin>.int"
    ],
    "<builtin>.len": [],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.__import__",
        "<builtin>.getattr",
        "<builtin>.issubclass"
    ],
    "<builtin>.__import__": [],
    "<builtin>.getattr": [],
    "<builtin>.issubclass": [],
    "re": [
        "copyreg.pickle",
        "<builtin>.globals",
        "<builtin>.chr",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function",
        "sre_compile.compile",
        "<builtin>.type"
    ],
    "enum": [
        "<builtin>.object"
    ],
    "types": [
        "types._c",
        "types._cell_factory",
        "<builtin>.globals",
        "types._g",
        "<builtin>.object",
        "types._ag",
        "<builtin>.type"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "<builtin>.object": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.property": [],
    "<builtin>.globals": [],
    "enum.EnumMeta": [
        "<builtin>.property",
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "<builtin>.classmethod": [],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "types.DynamicClassAttribute.__init__",
        "<builtin>.classmethod"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "<builtin>.bool": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "<builtin>.tuple"
    ],
    "sre_parse": [
        "<builtin>.frozenset"
    ],
    "sre_constants": [
        "sre_constants._makecodes"
    ],
    "sre_constants._makecodes": [
        "<str>.strip",
        "<str>.split",
        "<builtin>.globals",
        "<builtin>.enumerate"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.enumerate": [],
    "<builtin>.frozenset": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.tuple": [],
    "functools": [
        "<builtin>.object",
        "collections.namedtuple"
    ],
    "abc": [],
    "_py_abc": [],
    "_weakrefset": [],
    "_weakrefset.WeakSet": [
        "<builtin>.classmethod"
    ],
    "collections": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "operator": [],
    "reprlib": [
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr.__init__": [],
    "collections.OrderedDict": [
        "<builtin>.object",
        "reprlib.recursive_repr",
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "<builtin>.set": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "<builtin>.property",
        "reprlib.recursive_repr",
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "collections.namedtuple": [
        "<builtin>.ValueError",
        "<builtin>.set",
        "<str>.split",
        "<builtin>.type",
        "<builtin>.enumerate",
        "<builtin>.TypeError",
        "<str>.replace",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.tuple",
        "<builtin>.zip",
        "<builtin>.map",
        "<str>.join",
        "<builtin>.eval",
        "collections.<lambda1>",
        "<builtin>.len",
        "<builtin>.reversed",
        "<builtin>.dict",
        "<builtin>.classmethod",
        "<builtin>.str"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.TypeError": [],
    "<builtin>.ValueError": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<str>.join": [],
    "<builtin>.eval": [],
    "collections.<lambda1>": [
        "<builtin>.property",
        "operator.itemgetter.__init__"
    ],
    "operator.itemgetter.__init__": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [
        "<builtin>.classmethod"
    ],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile.dis",
        "sre_compile.isstring",
        "sre_parse.parse",
        "sre_compile._code",
        "<builtin>.tuple",
        "<map>.items",
        "<builtin>.print"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse._parse_sub",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.Tokenizer.error",
        "sre_parse.fix_flags",
        "sre_constants.error.__init__",
        "sre_parse.SubPattern.dump",
        "sre_parse.Tokenizer.seek",
        "sre_parse.State.__init__"
    ],
    "sre_parse.Tokenizer.__init__": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "",
        "append",
        "sre_parse.SubPattern.__init__",
        "<builtin>.len",
        "sre_parse.Tokenizer.tell",
        "sre_parse.Tokenizer.match",
        "extend",
        "sre_parse.SubPattern.append"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "extend": [],
    "append": [],
    "sre_parse.SubPattern.append": [
        "append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "sre_constants.error.__init__": [
        "<str>.rfind",
        "<str>.count",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "<str>.count": [],
    "<str>.rfind": [],
    "<builtin>.super": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.print"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "append",
        "sre_compile._compile",
        "sre_compile._compile_info"
    ],
    "sre_compile._compile_info": [
        "",
        "<builtin>.len",
        "sre_compile._get_charset_prefix",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._compile_charset",
        "sre_compile._get_literal_prefix",
        "extend",
        "sre_compile._optimize_charset"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "",
        "<builtin>.len",
        "sre_compile._get_literal_prefix",
        "extend",
        "sre_compile._combine_flags",
        "sre_compile._get_iscased"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "",
        "sre_compile._get_iscased",
        "<builtin>.any",
        "sre_compile._combine_flags",
        "<builtin>.range",
        "<builtin>.map"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "append",
        "sre_compile._bytes_to_codes",
        "sre_compile._mk_bitmap",
        "<builtin>.len",
        "<builtin>.bytearray",
        "<builtin>.any",
        "<builtin>.range",
        "<builtin>.bytes",
        "<builtin>.map"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "",
        "sre_constants.error.__init__",
        "extend"
    ],
    "sre_compile._compile": [
        "",
        "sre_compile._compile_charset",
        "sre_constants.error.__init__",
        "sre_compile._simple",
        "sre_compile._compile",
        "sre_compile._combine_flags",
        "sre_compile._optimize_charset"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "<builtin>.len",
        "<builtin>.str",
        "sre_compile.dis.dis_",
        "<builtin>.set"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.str",
        "<builtin>.list",
        "<builtin>.ValueError",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.range",
        "sre_compile.dis.dis_.print_",
        "<builtin>.chr",
        "<builtin>.bin",
        "sre_compile._hex_code",
        "<builtin>.map",
        "sre_compile.dis.dis_"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "functools._lru_cache_wrapper",
        "functools.update_wrapper",
        "<builtin>.isinstance"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object"
    ],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools._lru_cache_wrapper",
        "functools.update_wrapper"
    ],
    "copyreg": [
        "copyreg.pickle",
        "<builtin>.type"
    ],
    "copyreg.pickle": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "copyreg.constructor"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "re.escape": [
        "<str>.translate",
        "<str>.encode",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "re.compile",
        "warnings._add_filter",
        "<builtin>.issubclass",
        "<builtin>.isinstance"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.next",
        "sre_compile.isstring",
        "<builtin>.len",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.iter",
        "sre_compile.compile",
        "<builtin>.type"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "warnings._add_filter": [
        "append",
        "remove",
        "warnings._filters_mutated",
        "insert"
    ],
    "remove": [],
    "insert": [],
    "warnings._filters_mutated": [],
    "<builtin>.hasattr": [],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "urllib3": [
        "logging.getLogger",
        "warnings.simplefilter"
    ],
    "__future__": [
        "__future__._Feature.__init__"
    ],
    "__future__._Feature.__init__": [],
    "logging": [
        "logging._StderrHandler.__init__",
        "ntpath.normcase",
        "logging.Formatter.__init__",
        "weakref.WeakValueDictionary.__init__",
        "threading.RLock",
        "posixpath.normcase",
        "logging.Manager.__init__",
        "logging.RootLogger.__init__",
        "<builtin>.hasattr",
        "_weakrefset.WeakSet.__init__"
    ],
    "os": [
        "append",
        "os._createenviron",
        "os._add",
        "<builtin>.type",
        "os._fscodec",
        "os._Environ.__init__",
        "<builtin>.globals",
        "extend",
        "<builtin>.set",
        "<builtin>.ImportError",
        "os._exists"
    ],
    "stat": [],
    "<builtin>.ImportError": [],
    "ntpath": [
        "<builtin>.hasattr"
    ],
    "genericpath": [],
    "posixpath": [],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._add": [],
    "os._createenviron": [
        "os._createenviron.encodekey",
        "os._Environ.__init__"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os.PathLike": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "abc.abstractmethod": [],
    "io": [],
    "traceback": [],
    "linecache": [],
    "tokenize": [
        "tokenize.group",
        "<builtin>.map",
        "collections.namedtuple",
        "tokenize._all_string_prefixes",
        "<builtin>.set",
        "functools.lru_cache",
        "re.compile",
        "<builtin>.sorted",
        "tokenize.maybe",
        "<builtin>.any"
    ],
    "codecs": [
        "<builtin>.SystemError"
    ],
    "<builtin>.SystemError": [],
    "encodings": [],
    "token": [
        "<builtin>.isinstance",
        "<builtin>.globals",
        "extend"
    ],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "weakref": [],
    "weakref.finalize": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "collections.abc": [],
    "string": [
        "string.Template.__init_subclass__"
    ],
    "string.Template.__init_subclass__": [
        "re.compile",
        "re.escape",
        "<builtin>.super"
    ],
    "threading": [
        "append",
        "threading._MainThread.__init__",
        "collections.namedtuple",
        "threading.RLock",
        "<builtin>.set",
        "<builtin>.hasattr",
        "_weakrefset.WeakSet.__init__"
    ],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.RLock": [
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "threading._MainThread.__init__": [
        "threading.Thread._set_tstate_lock",
        "threading.Thread._set_native_id",
        "threading.Thread.__init__",
        "threading.Thread._set_ident",
        "threading.Event.set"
    ],
    "threading.Thread.__init__": [
        "threading._make_invoke_excepthook",
        "threading.Event.__init__",
        "threading.current_thread",
        "threading._newname",
        "_weakrefset.WeakSet.add",
        "<builtin>.str"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread.__init__",
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident",
        "threading._newname"
    ],
    "threading.Thread._set_ident": [],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "contextlib.contextmanager"
    ],
    "contextlib": [],
    "contextlib.AbstractContextManager": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "ntpath.normcase": [
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "os._fspath": [
        "<str>.format",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "<str>.format": [],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.Formatter.__init__": [
        "logging.StringTemplateStyle.validate",
        "<map>.keys",
        "<builtin>.ValueError",
        "logging.StrFormatStyle.validate",
        "logging.PercentStyle.validate",
        "logging.PercentStyle.__init__",
        "logging.StringTemplateStyle.__init__"
    ],
    "<map>.keys": [],
    "logging.StringTemplateStyle.__init__": [
        "string.Template.__init__",
        "<builtin>.super"
    ],
    "string.Template.__init__": [],
    "logging.PercentStyle.__init__": [],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update",
        "<builtin>.set"
    ],
    "weakref.WeakValueDictionary.update": [
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.dict",
        "<builtin>.hasattr",
        "weakref.KeyedRef.__init__"
    ],
    "weakref.WeakValueDictionary._commit_removals": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel",
        "logging.Handler.createLock",
        "logging._addHandlerRef"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "logging._addHandlerRef": [
        "append",
        "logging._acquireLock"
    ],
    "logging._acquireLock": [],
    "logging.Handler.createLock": [
        "threading.RLock",
        "logging._register_at_fork_reinit_lock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "_weakrefset.WeakSet.add",
        "logging._acquireLock"
    ],
    "logging.Manager": [
        "<builtin>.property"
    ],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging.Filterer.__init__",
        "logging._checkLevel"
    ],
    "logging.Manager.__init__": [],
    "urllib3.exceptions": [],
    "urllib3._version": [],
    "urllib3.connectionpool": [
        "logging.getLogger",
        "<builtin>.object"
    ],
    "socket": [
        "<builtin>.object",
        "append",
        "extend",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "selectors": [
        "collections.namedtuple",
        "<builtin>.hasattr",
        "selectors._can_use"
    ],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._can_use": [
        "<builtin>.getattr"
    ],
    "socket.socket": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "urllib3.connection": [
        "logging.getLogger",
        "re.compile"
    ],
    "datetime": [
        "append",
        "datetime.timezone._create",
        "datetime._days_before_year"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.IsoCalendarDate": [
        "<builtin>.property"
    ],
    "datetime.time": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.datetime": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.timezone": [
        "<builtin>.object",
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "datetime.timezone._create": [],
    "urllib3.packages.six": [
        "operator.itemgetter.__init__",
        "urllib3.packages.six._SixMetaPathImporter._add_module",
        "urllib3.packages.six._SixMetaPathImporter.__init__",
        "<builtin>.len",
        "urllib3.packages.six.MovedAttribute.__init__",
        "urllib3.packages.six._add_doc",
        "<builtin>.type",
        "operator.attrgetter.__init__",
        "urllib3.packages.six.MovedModule.__init__",
        "<builtin>.globals",
        "operator.methodcaller.__init__",
        "<builtin>.isinstance",
        "<builtin>.setattr",
        "<builtin>.getattr",
        "<builtin>.enumerate",
        "<builtin>.int",
        "urllib3.packages.six.exec_"
    ],
    "importlib.util": [
        "contextlib.contextmanager"
    ],
    "importlib.util.LazyLoader": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "urllib3.packages.six._SixMetaPathImporter.__init__": [],
    "urllib3.packages.six.MovedAttribute.__init__": [
        "<builtin>.super"
    ],
    "urllib3.packages.six.MovedModule.__init__": [
        "<builtin>.super"
    ],
    "<builtin>.setattr": [],
    "urllib3.packages.six._SixMetaPathImporter._add_module": [],
    "urllib3.packages.six.Module_six_moves_urllib": [
        "urllib3.packages.six._SixMetaPathImporter._get_module"
    ],
    "urllib3.packages.six._SixMetaPathImporter._get_module": [],
    "urllib3.packages.six._add_doc": [],
    "operator.attrgetter.__init__": [
        "<builtin>.TypeError",
        "<str>.split",
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.map"
    ],
    "operator.methodcaller.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "struct": [],
    "urllib3.packages.six.exec_": [
        "<builtin>.exec"
    ],
    "<builtin>.exec": [],
    "urllib3.util.proxy": [],
    "urllib3.util.ssl_": [
        "<builtin>.getattr"
    ],
    "hashlib": [
        "hashlib.__get_builtin_constructor",
        "logging.exception",
        "<builtin>.globals",
        "<builtin>.set",
        "<builtin>.range",
        "<builtin>.bytes"
    ],
    "hashlib.__get_builtin_constructor": [
        "<builtin>.ValueError",
        "<map>.get"
    ],
    "<map>.get": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.basicConfig",
        "logging.Logger.error",
        "<builtin>.len"
    ],
    "logging.basicConfig": [
        "logging.Logger.addHandler",
        "<map>.keys",
        "<builtin>.len",
        "logging.Logger.removeHandler",
        "logging.StreamHandler.__init__",
        "logging.Formatter.__init__",
        "<builtin>.ValueError",
        "logging.FileHandler.__init__",
        "logging._acquireLock",
        "logging.Logger.setLevel"
    ],
    "logging.Logger.removeHandler": [
        "remove",
        "logging._acquireLock"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "logging.StreamHandler.__init__",
        "posixpath.abspath",
        "ntpath.abspath",
        "logging.Handler.__init__",
        "logging.FileHandler._open",
        "os._fspath"
    ],
    "ntpath.abspath": [],
    "posixpath.abspath": [
        "posixpath.normpath",
        "posixpath.join",
        "<builtin>.isinstance",
        "os._fspath",
        "posixpath.isabs"
    ],
    "posixpath.isabs": [
        "posixpath._get_sep",
        "os._fspath"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath.join": [
        "posixpath._get_sep",
        "os._fspath",
        "<builtin>.map",
        "genericpath._check_arg_types"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "posixpath.normpath": [
        "append",
        "os._fspath",
        "<builtin>.isinstance",
        "pop"
    ],
    "pop": [],
    "logging.FileHandler._open": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.StrFormatStyle.validate": [
        "string.Formatter.parse",
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "string.Formatter.parse": [],
    "logging.Logger.addHandler": [
        "append",
        "logging._acquireLock"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.isEnabledFor": [
        "logging.Logger.getEffectiveLevel",
        "logging._acquireLock"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "logging.Logger.findCaller",
        "logging.Logger.makeRecord",
        "logging.Logger.handle",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "logging.Logger.findCaller": [
        "logging.currentframe",
        "ntpath.normcase",
        "traceback.print_stack",
        "posixpath.normcase",
        "<builtin>.hasattr"
    ],
    "logging.currentframe": [],
    "traceback.print_stack": [
        "traceback.print_list",
        "traceback.extract_stack"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "linecache.checkcache",
        "<builtin>.set",
        "<builtin>.getattr",
        "traceback.FrameSummary.__init__",
        "linecache.lazycache"
    ],
    "linecache.lazycache": [
        "<builtin>.getattr",
        "<str>.endswith",
        "<builtin>.len",
        "<str>.startswith"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "<builtin>.repr": [],
    "linecache.checkcache": [
        "<builtin>.list",
        "<map>.pop",
        "<map>.keys",
        "<builtin>.len"
    ],
    "<map>.pop": [],
    "traceback.print_list": [
        "traceback.StackSummary.format",
        "traceback.StackSummary.from_list",
        "<builtin>.print"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__",
        "<builtin>.isinstance"
    ],
    "traceback.StackSummary.format": [
        "append",
        "<builtin>.sorted"
    ],
    "logging.Logger.makeRecord": [
        "logging.LogRecord.__init__",
        "<builtin>.KeyError"
    ],
    "logging.LogRecord.__init__": [
        "ntpath.basename",
        "<builtin>.len",
        "threading.current_thread",
        "ntpath.splitext",
        "logging.getLevelName",
        "<builtin>.isinstance",
        "posixpath.splitext",
        "posixpath.basename",
        "<builtin>.int",
        "<builtin>.hasattr"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "os._fspath",
        "ntpath.splitdrive",
        "<builtin>.len",
        "ntpath._get_bothseps"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.splitdrive": [
        "os._fspath",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "posixpath.basename": [
        "posixpath._get_sep",
        "os._fspath"
    ],
    "ntpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "genericpath._splitext": [
        "<builtin>.max"
    ],
    "posixpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.Filterer.filter",
        "logging.Handler.emit",
        "logging.Handler.acquire"
    ],
    "logging.Handler.acquire": [],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "hmac": [
        "<builtin>.range",
        "<builtin>.bytes"
    ],
    "hmac.HMAC": [
        "<builtin>.property"
    ],
    "urllib3.util.url": [
        "re.compile",
        "collections.namedtuple",
        "<builtin>.set"
    ],
    "urllib3.util.url.Url": [
        "<builtin>.property"
    ],
    "ssl": [
        "<builtin>.getattr",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "base64": [],
    "<str>.replace": [],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.SSLContext": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "ssl.SSLObject": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ssl.SSLSocket": [
        "<builtin>.property",
        "ssl._sslcopydoc",
        "<builtin>.classmethod"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "urllib3.util.ssltransport": [],
    "urllib3.util.ssltransport.SSLTransport": [
        "<builtin>.staticmethod"
    ],
    "urllib3.util": [],
    "urllib3.util.connection": [
        "urllib3.util.connection._has_ipv6"
    ],
    "urllib3.contrib._appengine_environ": [],
    "urllib3.util.wait": [],
    "urllib3.util.connection._has_ipv6": [
        "socket.socket.close",
        "urllib3.contrib._appengine_environ.is_appengine_sandbox",
        "socket.socket.__init__"
    ],
    "urllib3.contrib._appengine_environ.is_appengine_sandbox": [
        "urllib3.contrib._appengine_environ.is_appengine"
    ],
    "urllib3.contrib._appengine_environ.is_appengine": [
        "urllib3.contrib._appengine_environ.is_local_appengine",
        "urllib3.contrib._appengine_environ.is_prod_appengine"
    ],
    "urllib3.contrib._appengine_environ.is_local_appengine": [],
    "urllib3.contrib._appengine_environ.is_prod_appengine": [],
    "socket.socket.__init__": [],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket._real_close": [],
    "urllib3.util.request": [
        "<builtin>.frozenset",
        "<builtin>.object"
    ],
    "urllib3.util.response": [],
    "email.errors": [],
    "urllib3.util.retry": [
        "logging.getLogger",
        "<builtin>.object",
        "collections.namedtuple",
        "urllib3.util.retry.Retry.__init__"
    ],
    "email": [],
    "logging.getLogger": [
        "<builtin>.isinstance"
    ],
    "urllib3.util.retry._RetryMeta": [
        "<builtin>.property"
    ],
    "urllib3.util.retry.Retry": [
        "<builtin>.frozenset",
        "<builtin>.classmethod"
    ],
    "urllib3.util.retry.Retry.__init__": [
        "warnings.warn",
        "<builtin>.frozenset",
        "<builtin>.ValueError",
        "<builtin>.set",
        "<builtin>.tuple"
    ],
    "warnings.warn": [
        "<builtin>.issubclass",
        "warnings._next_external_frame",
        "warnings._is_internal_frame",
        "<builtin>.TypeError",
        "<builtin>.range",
        "warnings.warn_explicit",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<builtin>.issubclass",
        "<builtin>.RuntimeError",
        "warnings.WarningMessage.__init__",
        "<map>.clear",
        "<map>.get",
        "linecache.getlines",
        "<builtin>.isinstance",
        "warnings._showwarnmsg",
        "<str>.lower",
        "<builtin>.int",
        "<builtin>.str"
    ],
    "<str>.lower": [],
    "<map>.clear": [],
    "linecache.getlines": [
        "linecache.updatecache",
        "linecache.clearcache",
        "<builtin>.len"
    ],
    "linecache.updatecache": [
        "<map>.pop",
        "tokenize.open",
        "<builtin>.len",
        "posixpath.join",
        "<str>.startswith",
        "ntpath.join",
        "<str>.endswith",
        "linecache.lazycache",
        "ntpath.isabs",
        "posixpath.isabs"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "ntpath.isabs": [
        "ntpath.splitdrive",
        "<builtin>.len",
        "ntpath._get_bothseps",
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "ntpath.join": [
        "ntpath.splitdrive",
        "genericpath._check_arg_types",
        "<builtin>.isinstance",
        "os._fspath",
        "<builtin>.map"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding"
    ],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.find_cookie",
        "tokenize.detect_encoding.read_or_stop"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "tokenize._get_normal_name",
        "<builtin>.SyntaxError"
    ],
    "<builtin>.SyntaxError": [],
    "tokenize._get_normal_name": [],
    "linecache.clearcache": [
        "<map>.clear"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "linecache.getline"
    ],
    "linecache.getline": [
        "<builtin>.len",
        "linecache.getlines"
    ],
    "tracemalloc": [],
    "fnmatch": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "pickle": [
        "append",
        "extend"
    ],
    "_compat_pickle": [
        "<map>.update",
        "<builtin>.len",
        "<builtin>.dict",
        "<map>.items"
    ],
    "<map>.update": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [
        "<builtin>.property"
    ],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "urllib3.util.timeout": [
        "<builtin>.object",
        "<builtin>.getattr"
    ],
    "urllib3.util.timeout.Timeout": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "urllib3.util.ssl_match_hostname": [],
    "ipaddress": [],
    "ipaddress._IPAddressBase": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ipaddress._BaseNetwork": [
        "<builtin>.property",
        "functools.cached_property.__init__",
        "<builtin>.staticmethod"
    ],
    "functools.cached_property.__init__": [],
    "ipaddress._BaseV4": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "ipaddress.IPv4Address": [
        "<builtin>.property",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "ipaddress.IPv4Interface": [
        "<builtin>.property",
        "functools.cached_property.__init__"
    ],
    "ipaddress.IPv4Network": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress._IPv4Constants": [
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv4Network.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "<builtin>.ValueError",
        "<builtin>.int",
        "ipaddress._BaseV4._make_netmask",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress._IPAddressBase._split_addr_prefix": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "ipaddress._split_optional_netmask"
    ],
    "ipaddress._split_optional_netmask": [
        "<builtin>.len",
        "<builtin>.str"
    ],
    "ipaddress.IPv4Address.__init__": [
        "ipaddress._IPAddressBase._check_int_address",
        "ipaddress._BaseV4._ip_int_from_string",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_packed_address",
        "<builtin>.str"
    ],
    "ipaddress._IPAddressBase._check_int_address": [],
    "ipaddress._IPAddressBase._check_packed_address": [
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._ip_int_from_string": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._make_netmask": [
        "<builtin>.isinstance",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress._BaseV6": [
        "<builtin>.frozenset",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "ipaddress.IPv6Address": [
        "<builtin>.property",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "ipaddress.IPv6Interface": [
        "<builtin>.property",
        "functools.cached_property.__init__"
    ],
    "ipaddress.IPv6Network": [
        "<builtin>.property"
    ],
    "ipaddress._IPv6Constants": [
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.IPv6Network.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "<builtin>.ValueError",
        "ipaddress._BaseV6._make_netmask",
        "<builtin>.int",
        "ipaddress.IPv6Address.__init__"
    ],
    "ipaddress.IPv6Address.__init__": [
        "ipaddress._BaseV6._split_scope_id",
        "ipaddress._BaseV6._ip_int_from_string",
        "ipaddress._IPAddressBase._check_int_address",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_packed_address",
        "<builtin>.str"
    ],
    "ipaddress._BaseV6._split_scope_id": [],
    "ipaddress._BaseV6._ip_int_from_string": [
        "ipaddress._BaseV6._parse_hextet",
        "<builtin>.range",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._parse_hextet": [
        "<builtin>.ValueError",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._make_netmask": [
        "<builtin>.isinstance",
        "ipaddress.IPv6Address.__init__"
    ],
    "urllib3.connection.HTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.request": [],
    "urllib3.filepost": [],
    "urllib3.fields": [
        "<map>.update"
    ],
    "email.utils": [
        "re.compile"
    ],
    "random": [
        "random.Random.__init__",
        "<builtin>.hasattr"
    ],
    "bisect": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.len",
        "warnings.warn",
        "<builtin>.ord",
        "<builtin>.isinstance",
        "<builtin>.super",
        "<builtin>.map",
        "<builtin>.type"
    ],
    "<builtin>.ord": [],
    "urllib.parse": [
        "urllib.parse._fix_result_transcoding",
        "<builtin>.frozenset",
        "collections.namedtuple",
        "<builtin>.bytes",
        "re.compile"
    ],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse._fix_result_transcoding": [],
    "email._parseaddr": [],
    "calendar": [
        "datetime.date.toordinal",
        "<builtin>.range",
        "calendar._localized_day.__init__",
        "calendar._localized_month.__init__"
    ],
    "locale": [
        "functools.wraps",
        "<map>.setdefault",
        "<builtin>.globals",
        "re.compile",
        "<builtin>.sorted",
        "<map>.items"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_before_month",
        "datetime._days_in_month",
        "datetime._days_before_year"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "email.charset": [],
    "email.base64mime": [],
    "email.quoprimime": [
        "<builtin>.chr",
        "<builtin>.range",
        "<builtin>.ord",
        "<str>.encode"
    ],
    "<str>.encode": [],
    "email.encoders": [],
    "quopri": [],
    "mimetypes": [
        "mimetypes._default_mime_types"
    ],
    "mimetypes.MimeTypes": [
        "<builtin>.classmethod"
    ],
    "mimetypes._default_mime_types": [],
    "urllib3.fields.RequestField": [
        "<builtin>.classmethod"
    ],
    "urllib3.response": [
        "logging.getLogger"
    ],
    "urllib3.response.HTTPResponse": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "contextlib.contextmanager"
    ],
    "urllib3.util.queue": [],
    "urllib3.packages.backports.weakref_finalize": [],
    "urllib3.packages.backports.weakref_finalize.weakref_finalize": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "urllib3.poolmanager": [
        "logging.getLogger",
        "collections.namedtuple"
    ],
    "requests.exceptions": [],
    "requests.compat": [],
    "charset_normalizer": [
        "logging.getLogger"
    ],
    "charset_normalizer.api": [
        "logging.getLogger",
        "logging.Handler.setFormatter",
        "logging.StreamHandler.__init__",
        "logging.Formatter.__init__"
    ],
    "typing": [
        "typing._tp_cache.decorator",
        "typing._tp_cache",
        "<builtin>.frozenset",
        "typing._SpecialForm.__init__",
        "typing._SpecialGenericAlias.__init__",
        "typing.TypeVar.__init__"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "typing._tp_cache.decorator"
    ],
    "typing._tp_cache.decorator": [
        "append",
        "functools.lru_cache.decorating_function",
        "functools.wraps",
        "functools.lru_cache"
    ],
    "typing._SpecialForm.__init__": [],
    "typing.ParamSpec": [
        "<builtin>.property"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing._CallableType": [
        "typing._tp_cache"
    ],
    "typing._TupleType": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.Annotated": [
        "typing._tp_cache"
    ],
    "typing.TypeVar.__init__": [
        "<builtin>.len",
        "<builtin>.TypeError",
        "typing._type_check",
        "<builtin>.tuple",
        "<builtin>.super"
    ],
    "typing._type_check": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "typing._type_convert",
        "<builtin>.isinstance"
    ],
    "typing._type_convert": [
        "typing.ForwardRef.__init__",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.TypeError",
        "<builtin>.compile",
        "<builtin>.isinstance",
        "<builtin>.SyntaxError"
    ],
    "<builtin>.compile": [],
    "typing._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "charset_normalizer.cd": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "importlib": [],
    "charset_normalizer.assets": [],
    "charset_normalizer.constant": [
        "<builtin>.len",
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.range",
        "<builtin>.filter",
        "re.compile",
        "<builtin>.sorted",
        "<builtin>.int"
    ],
    "<builtin>.filter": [],
    "charset_normalizer.md": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "charset_normalizer.utils": [
        "functools.lru_cache.decorating_function",
        "<builtin>.len",
        "functools.lru_cache"
    ],
    "charset_normalizer.md.MessDetectorPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManySymbolOrPunctuationPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManyAccentuatedPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.UnprintablePlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousDuplicateAccentPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousRange": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuperWeirdWordPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.CjkInvalidStopPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArchaicUpperLowerPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.models": [],
    "json": [],
    "charset_normalizer.models.CharsetMatch": [
        "<builtin>.property"
    ],
    "charset_normalizer.models.CliDetectionResult": [
        "<builtin>.property"
    ],
    "logging.Handler.setFormatter": [],
    "charset_normalizer.legacy": [],
    "charset_normalizer.legacy.CharsetNormalizerMatches": [
        "<builtin>.staticmethod"
    ],
    "charset_normalizer.version": [
        "<str>.split"
    ],
    "http.cookiejar": [
        "re.compile",
        "append",
        "<builtin>.str"
    ],
    "copy": [
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "urllib.request": [
        "re.compile",
        "append",
        "<builtin>.hasattr"
    ],
    "http.client": [
        "re.compile",
        "<builtin>.globals"
    ],
    "email.parser": [],
    "email.feedparser": [
        "re.compile",
        "<builtin>.object"
    ],
    "email._policybase": [],
    "email.header": [
        "re.compile",
        "email.charset.Charset.__init__"
    ],
    "email.charset.Charset.__init__": [
        "<map>.get",
        "<str>.encode",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email.message": [
        "re.compile"
    ],
    "uu": [],
    "email._encoded_words": [
        "re.compile",
        "<builtin>.ord"
    ],
    "email._encoded_words._QByteMap": [
        "<str>.encode"
    ],
    "email.iterators": [],
    "http": [],
    "http.client.HTTPConnection": [
        "<builtin>.staticmethod"
    ],
    "tempfile": [
        "<builtin>.hasattr"
    ],
    "shutil": [
        "append",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "bz2": [],
    "_compression": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "urllib.error": [],
    "urllib.response": [],
    "urllib.response.addinfourl": [
        "<builtin>.property"
    ],
    "urllib.error.HTTPError": [
        "<builtin>.property"
    ],
    "urllib.request.Request": [
        "<builtin>.property"
    ],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "nturl2path": [],
    "http.cookiejar.CookieJar": [
        "re.compile"
    ],
    "http.cookies": [
        "<builtin>.ord",
        "<builtin>.set",
        "<builtin>.range",
        "re.escape",
        "re.compile",
        "<builtin>.map"
    ],
    "<str>.translate": [],
    "http.cookies.Morsel": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "requests.check_compatibility": [
        "<builtin>.Exception",
        "<str>.split",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "<builtin>.Exception": [],
    "urllib3.contrib.pyopenssl": [
        "warnings.warn",
        "logging.getLogger",
        "<builtin>.dict",
        "<builtin>.hasattr",
        "<map>.items"
    ],
    "urllib3.packages.backports.makefile": [],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext": [
        "<builtin>.property"
    ],
    "urllib3.contrib.pyopenssl.inject_into_urllib3": [
        "urllib3.contrib.pyopenssl._validate_dependencies_met"
    ],
    "urllib3.contrib.pyopenssl._validate_dependencies_met": [
        "<builtin>.getattr",
        "<builtin>.ImportError"
    ],
    "requests._check_cryptography": [
        "warnings.warn",
        "<builtin>.list",
        "<builtin>.map"
    ],
    "requests.packages": [
        "<builtin>.__import__",
        "<builtin>.locals",
        "<builtin>.list",
        "warnings.filterwarnings"
    ],
    "<builtin>.locals": [],
    "requests.utils": [
        "<str>.encode",
        "<builtin>.frozenset",
        "re.split",
        "contextlib.contextmanager",
        "urllib3.util.request.make_headers",
        "certifi.core.where"
    ],
    "zipfile": [],
    "pathlib": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "<builtin>.hasattr"
    ],
    "pathlib._WindowsFlavour": [
        "<builtin>.set"
    ],
    "pathlib._NormalAccessor": [
        "<builtin>.staticmethod",
        "<builtin>.hasattr"
    ],
    "pathlib.PurePath": [
        "<builtin>.property",
        "operator.attrgetter.__init__",
        "<builtin>.classmethod"
    ],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "zipfile.CompleteDirs": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "requests.certs": [],
    "certifi": [],
    "certifi.core": [],
    "importlib.resources": [
        "functools.singledispatch"
    ],
    "importlib.abc": [
        "importlib.abc._register"
    ],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "importlib.machinery": [],
    "functools.singledispatch": [
        "<builtin>.getattr",
        "weakref.WeakKeyDictionary.__init__",
        "functools.update_wrapper"
    ],
    "weakref.WeakKeyDictionary.__init__": [
        "<builtin>.set",
        "weakref.WeakKeyDictionary.update"
    ],
    "weakref.WeakKeyDictionary.update": [
        "<builtin>.len",
        "weakref.WeakKeyDictionary.update",
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "requests.__version__": [],
    "requests._internal_utils": [
        "re.compile"
    ],
    "requests.cookies": [],
    "requests.cookies.MockRequest": [
        "<builtin>.property"
    ],
    "requests.structures": [],
    "certifi.core.where": [
        "ntpath.dirname",
        "ntpath.join",
        "posixpath.join",
        "posixpath.dirname"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "posixpath.dirname": [
        "posixpath._get_sep",
        "os._fspath",
        "<builtin>.len"
    ],
    "urllib3.util.request.make_headers": [
        "base64.b64encode",
        "urllib3.packages.six.b",
        "<builtin>.isinstance"
    ],
    "urllib3.packages.six.b": [],
    "base64.b64encode": [
        "<builtin>.len",
        "<builtin>.repr"
    ],
    "re.split": [
        "re._compile"
    ],
    "requests.api": [],
    "requests.sessions": [],
    "requests.adapters": [],
    "requests.auth": [],
    "requests.models": [],
    "encodings.idna": [
        "re.compile"
    ],
    "stringprep": [
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.set"
    ],
    "requests.hooks": [],
    "requests.status_codes": [
        "requests.status_codes._init",
        "requests.structures.LookupDict.__init__"
    ],
    "requests.structures.LookupDict.__init__": [
        "<builtin>.super"
    ],
    "requests.status_codes._init": [
        "<builtin>.sorted",
        "<builtin>.setattr",
        "requests.status_codes._init.doc",
        "<map>.items"
    ],
    "requests.status_codes._init.doc": [],
    "requests.models.RequestEncodingMixin": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "requests.models.PreparedRequest": [
        "<builtin>.staticmethod"
    ],
    "requests.models.Response": [
        "<builtin>.property"
    ],
    "urllib3.contrib.socks": [
        "warnings.warn"
    ],
    "lxml.html": [
        "lxml.html.HTMLParser.__init__",
        "lxml.html._MethodFunc.__init__",
        "lxml.html.__fix_docstring",
        "lxml.html.XHTMLParser.__init__",
        "re.compile"
    ],
    "lxml": [],
    "lxml.html.defs": [
        "<builtin>.frozenset"
    ],
    "lxml.html._setmixin": [],
    "lxml.html._setmixin.SetMixin": [
        "<builtin>.classmethod"
    ],
    "lxml.html.HtmlMixin": [
        "<builtin>.property"
    ],
    "lxml.html._MethodFunc.__init__": [
        "<builtin>.getattr"
    ],
    "lxml.html.FormElement": [
        "<builtin>.property"
    ],
    "lxml.html.InputMixin": [
        "<builtin>.property"
    ],
    "lxml.html.TextareaElement": [
        "<builtin>.property"
    ],
    "lxml.html.SelectElement": [
        "<builtin>.property"
    ],
    "lxml.html.MultipleSelectOptions": [
        "<builtin>.property"
    ],
    "lxml.html.RadioGroup": [
        "<builtin>.property"
    ],
    "lxml.html.CheckboxGroup": [
        "<builtin>.property"
    ],
    "lxml.html.InputElement": [
        "<builtin>.property"
    ],
    "lxml.html.LabelElement": [
        "<builtin>.property"
    ],
    "lxml.html.__fix_docstring": [
        "re.compile"
    ],
    "lxml.html.HTMLParser.__init__": [
        "lxml.html.HtmlElementClassLookup.__init__",
        "<builtin>.super"
    ],
    "lxml.html.HtmlElementClassLookup.__init__": [
        "<map>.keys",
        "<map>.setdefault",
        "<builtin>.type",
        "<map>.get",
        "<map>.copy",
        "<builtin>.tuple",
        "<map>.items"
    ],
    "<map>.copy": [],
    "lxml.html.XHTMLParser.__init__": [
        "lxml.html.HtmlElementClassLookup.__init__",
        "<builtin>.super"
    ],
    "handler.handle": [
        "requests.api.request",
        "lxml.html.fromstring"
    ],
    "requests.api.request": [
        "requests.sessions.Session.__init__"
    ],
    "requests.sessions.Session.__init__": [
        "requests.adapters.HTTPAdapter.__init__",
        "requests.utils.default_headers",
        "collections.OrderedDict.__init__",
        "requests.hooks.default_hooks",
        "requests.cookies.cookiejar_from_dict",
        "requests.sessions.Session.mount"
    ],
    "requests.utils.default_headers": [
        "requests.utils.default_user_agent",
        "requests.structures.CaseInsensitiveDict.__init__"
    ],
    "requests.utils.default_user_agent": [],
    "requests.structures.CaseInsensitiveDict.__init__": [
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.__init__": [],
    "requests.hooks.default_hooks": [],
    "requests.cookies.cookiejar_from_dict": [
        "requests.cookies.RequestsCookieJar.set_cookie",
        "requests.cookies.create_cookie"
    ],
    "requests.cookies.create_cookie": [
        "<map>.update",
        "<builtin>.list",
        "<builtin>.TypeError",
        "<builtin>.set",
        "<builtin>.bool",
        "<str>.startswith",
        "http.cookiejar.Cookie.__init__"
    ],
    "http.cookiejar.Cookie.__init__": [
        "<builtin>.ValueError",
        "<builtin>.int",
        "<builtin>.float",
        "copy.copy"
    ],
    "<builtin>.float": [],
    "copy.copy": [
        "<map>",
        "<builtin>.issubclass",
        "copy._reconstruct",
        "<map>.get",
        "copy._copy_immutable",
        "<builtin>.isinstance",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.len",
        "<builtin>.isinstance",
        "copy.deepcopy",
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.id"
    ],
    "copy.deepcopy": [
        "<map>",
        "<builtin>.issubclass",
        "copy._reconstruct",
        "<map>.get",
        "copy._keep_alive",
        "copy._deepcopy_atomic",
        "<builtin>.isinstance",
        "<builtin>.id",
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "<builtin>.id": [],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "requests.cookies.RequestsCookieJar.set_cookie": [
        "<builtin>.hasattr",
        "<builtin>.super"
    ],
    "requests.adapters.HTTPAdapter.__init__": [
        "urllib3.util.retry.Retry.from_int",
        "urllib3.util.retry.Retry.__init__",
        "requests.adapters.HTTPAdapter.init_poolmanager",
        "<builtin>.super"
    ],
    "urllib3.util.retry.Retry.from_int": [
        "urllib3.util.retry.Retry.__init__",
        "<builtin>.isinstance",
        "<builtin>.bool"
    ],
    "requests.adapters.HTTPAdapter.init_poolmanager": [
        "urllib3.poolmanager.PoolManager.__init__"
    ],
    "urllib3.poolmanager.PoolManager.__init__": [
        "<map>.copy",
        "urllib3.request.RequestMethods.__init__"
    ],
    "urllib3.request.RequestMethods.__init__": [],
    "requests.sessions.Session.mount": [
        "<builtin>.len"
    ],
    "lxml.html.fromstring": [
        "lxml.html._contains_block_level_tag",
        "lxml.html.document_fromstring",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "lxml.html.document_fromstring": [
        "lxml.html.Element"
    ],
    "lxml.html.Element": [],
    "lxml.html._contains_block_level_tag": [
        "lxml.html._nons"
    ],
    "lxml.html._nons": [
        "<builtin>.isinstance",
        "<builtin>.len"
    ]
}