{
    "handler": [
        "handler.handle"
    ],
    "spacy": [
        "<builtin>.SystemError",
        "spacy.errors.setup_default_warnings"
    ],
    "pathlib": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "<builtin>.hasattr"
    ],
    "fnmatch": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "os": [
        "append",
        "<builtin>.globals",
        "<builtin>.set",
        "os._add",
        "os._exists",
        "os._Environ.__init__",
        "<builtin>.type",
        "extend",
        "<builtin>.ImportError",
        "os._fscodec",
        "os._createenviron"
    ],
    "abc": [],
    "_py_abc": [],
    "_weakrefset": [],
    "types": [
        "<builtin>.globals",
        "types._c",
        "types._cell_factory",
        "types._g",
        "<builtin>.type",
        "types._ag",
        "<builtin>.object"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "<builtin>.object": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.property": [],
    "<builtin>.globals": [],
    "_weakrefset.WeakSet": [
        "<builtin>.classmethod"
    ],
    "<builtin>.classmethod": [],
    "stat": [],
    "<builtin>.ImportError": [],
    "append": [],
    "ntpath": [
        "<builtin>.hasattr"
    ],
    "genericpath": [],
    "<builtin>.hasattr": [],
    "extend": [],
    "posixpath": [],
    "os._exists": [
        "<builtin>.globals"
    ],
    "<builtin>.set": [],
    "os._add": [],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.encodekey"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.TypeError": [],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "re": [
        "<builtin>.globals",
        "functools.lru_cache.decorating_function",
        "<builtin>.type",
        "sre_compile.compile",
        "functools.lru_cache",
        "<builtin>.chr",
        "copyreg.pickle"
    ],
    "enum": [
        "<builtin>.object"
    ],
    "enum.EnumMeta": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "<builtin>.classmethod",
        "types.DynamicClassAttribute.__init__"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "<builtin>.getattr": [],
    "<builtin>.bool": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "<builtin>.tuple"
    ],
    "sre_parse": [
        "<builtin>.frozenset"
    ],
    "sre_constants": [
        "sre_constants._makecodes"
    ],
    "sre_constants._makecodes": [
        "<builtin>.globals",
        "<str>.strip",
        "<builtin>.enumerate",
        "<str>.split"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.enumerate": [],
    "<builtin>.frozenset": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.tuple": [],
    "functools": [
        "collections.namedtuple",
        "<builtin>.object"
    ],
    "collections": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "operator": [],
    "reprlib": [
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr.__init__": [],
    "collections.OrderedDict": [
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr",
        "<builtin>.object"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "collections.namedtuple": [
        "<builtin>.zip",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.map",
        "<builtin>.eval",
        "<builtin>.len",
        "<str>.join",
        "<builtin>.ValueError",
        "collections.<lambda1>",
        "<str>.split",
        "<builtin>.list",
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.classmethod",
        "<builtin>.str",
        "<builtin>.set",
        "<str>.replace",
        "<builtin>.dict",
        "<builtin>.reversed",
        "<builtin>.enumerate"
    ],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.ValueError": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<str>.join": [],
    "<builtin>.eval": [],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "operator.itemgetter.__init__": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [
        "<builtin>.classmethod"
    ],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "<builtin>.print",
        "sre_parse.parse",
        "<builtin>.tuple",
        "sre_compile._code",
        "sre_compile.isstring",
        "sre_compile.dis",
        "<map>.items"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.seek",
        "sre_parse.fix_flags",
        "sre_parse.SubPattern.dump",
        "sre_constants.error.__init__",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.State.__init__",
        "sre_parse._parse_sub",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.__init__": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "sre_parse.Tokenizer.__next": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.tell",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "",
        "sre_parse.Tokenizer.tell",
        "append",
        "sre_parse.SubPattern.append",
        "<builtin>.len",
        "sre_parse.SubPattern.__init__",
        "extend",
        "sre_parse.Tokenizer.match"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.SubPattern.append": [
        "append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "sre_constants.error.__init__": [
        "<str>.rfind",
        "<str>.count",
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "<str>.count": [],
    "<str>.rfind": [],
    "<builtin>.super": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.print",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.str"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "append",
        "sre_compile._compile_info",
        "sre_compile._compile"
    ],
    "sre_compile._compile_info": [
        "",
        "sre_parse.SubPattern.getwidth",
        "<builtin>.len",
        "sre_compile._get_charset_prefix",
        "sre_compile._optimize_charset",
        "extend",
        "sre_compile._compile_charset",
        "sre_compile._get_literal_prefix"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "",
        "<builtin>.len",
        "sre_compile._combine_flags",
        "extend",
        "sre_compile._get_iscased",
        "sre_compile._get_literal_prefix"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "",
        "sre_compile._combine_flags",
        "<builtin>.range",
        "<builtin>.any",
        "sre_compile._get_iscased",
        "<builtin>.map"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "append",
        "sre_compile._bytes_to_codes",
        "<builtin>.bytes",
        "<builtin>.len",
        "sre_compile._mk_bitmap",
        "<builtin>.range",
        "<builtin>.any",
        "<builtin>.bytearray",
        "<builtin>.map"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.memoryview",
        "<builtin>.len"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "",
        "extend",
        "sre_constants.error.__init__"
    ],
    "sre_compile._compile": [
        "",
        "sre_compile._combine_flags",
        "sre_compile._compile",
        "sre_compile._optimize_charset",
        "sre_compile._simple",
        "sre_compile._compile_charset",
        "sre_constants.error.__init__"
    ],
    "sre_compile._simple": [
        "<builtin>.len",
        "sre_compile._simple"
    ],
    "sre_compile.dis": [
        "sre_compile.dis.dis_",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.str"
    ],
    "sre_compile.dis.dis_": [
        "sre_compile.dis.dis_.print_",
        "sre_compile.dis.dis_",
        "<builtin>.list",
        "<builtin>.bin",
        "sre_compile._hex_code",
        "<builtin>.ValueError",
        "<builtin>.range",
        "<builtin>.chr",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.map",
        "<builtin>.str"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "<builtin>.callable",
        "functools._lru_cache_wrapper",
        "<builtin>.isinstance",
        "functools.update_wrapper",
        "<builtin>.TypeError"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object"
    ],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools._lru_cache_wrapper",
        "functools.update_wrapper"
    ],
    "copyreg": [
        "copyreg.pickle",
        "<builtin>.type"
    ],
    "copyreg.pickle": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "copyreg.constructor"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "io": [],
    "warnings": [
        "warnings.simplefilter",
        "warnings._processoptions",
        "warnings.filterwarnings",
        "<builtin>.hasattr"
    ],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "re.escape",
        "<builtin>.len",
        "warnings._getcategory",
        "warnings.filterwarnings",
        "warnings._getaction",
        "<builtin>.int"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.getattr",
        "<builtin>.__import__",
        "<builtin>.issubclass"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<str>.translate",
        "<str>.encode",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "warnings._add_filter",
        "<builtin>.issubclass",
        "re.compile",
        "<builtin>.isinstance"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.next",
        "<builtin>.len",
        "<builtin>.iter",
        "<builtin>.type",
        "sre_compile.compile",
        "<builtin>.ValueError",
        "sre_compile.isstring",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "warnings._add_filter": [
        "append",
        "warnings._filters_mutated",
        "insert",
        "remove"
    ],
    "remove": [],
    "insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "urllib.parse": [
        "<builtin>.bytes",
        "<builtin>.frozenset",
        "re.compile",
        "urllib.parse._fix_result_transcoding",
        "collections.namedtuple"
    ],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse._fix_result_transcoding": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.set"
    ],
    "pathlib._NormalAccessor": [
        "<builtin>.staticmethod",
        "<builtin>.hasattr"
    ],
    "pathlib.PurePath": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "operator.attrgetter.__init__"
    ],
    "operator.attrgetter.__init__": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.map",
        "<str>.split"
    ],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "typing": [
        "typing._SpecialGenericAlias.__init__",
        "<builtin>.frozenset",
        "typing._tp_cache.decorator",
        "typing._tp_cache",
        "typing._SpecialForm.__init__",
        "typing.TypeVar.__init__"
    ],
    "collections.abc": [],
    "contextlib": [],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "typing._tp_cache.decorator"
    ],
    "typing._tp_cache.decorator": [
        "functools.lru_cache.decorating_function",
        "functools.wraps",
        "append",
        "functools.lru_cache"
    ],
    "functools.wraps": [],
    "typing._SpecialForm.__init__": [],
    "typing.ParamSpec": [
        "<builtin>.property"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing._CallableType": [
        "typing._tp_cache"
    ],
    "typing._TupleType": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.Annotated": [
        "typing._tp_cache"
    ],
    "typing.TypeVar.__init__": [
        "<builtin>.len",
        "typing._type_check",
        "<builtin>.tuple",
        "<builtin>.super",
        "<builtin>.TypeError"
    ],
    "typing._type_check": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "typing._type_convert"
    ],
    "typing._type_convert": [
        "typing.ForwardRef.__init__",
        "<builtin>.isinstance",
        "<builtin>.type"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.SyntaxError",
        "<builtin>.TypeError",
        "<builtin>.compile",
        "<builtin>.isinstance"
    ],
    "<builtin>.compile": [],
    "<builtin>.SyntaxError": [],
    "typing._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "spacy.errors": [],
    "spacy.compat": [],
    "thinc.util": [
        "contextlib.contextmanager",
        "typing.TypeVar.__init__"
    ],
    "inspect": [
        "<builtin>.globals",
        "<builtin>.hasattr",
        "<builtin>.type",
        "collections.namedtuple",
        "<builtin>.object",
        "<map>.items"
    ],
    "ast": [
        "<builtin>.property",
        "<builtin>.repr",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "<builtin>.repr": [],
    "ast._Unparser": [
        "<builtin>.frozenset",
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "dis": [
        "collections.namedtuple"
    ],
    "opcode": [
        "append",
        "opcode.jabs_op",
        "opcode.name_op",
        "opcode.jrel_op",
        "<builtin>.range",
        "opcode.def_op"
    ],
    "opcode.def_op": [],
    "opcode.name_op": [
        "append",
        "opcode.def_op"
    ],
    "opcode.jrel_op": [
        "append",
        "opcode.def_op"
    ],
    "opcode.jabs_op": [
        "append",
        "opcode.def_op"
    ],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "linecache": [],
    "tokenize": [
        "<builtin>.sorted",
        "<builtin>.set",
        "re.compile",
        "functools.lru_cache",
        "tokenize.group",
        "tokenize.maybe",
        "collections.namedtuple",
        "<builtin>.any",
        "tokenize._all_string_prefixes",
        "<builtin>.map"
    ],
    "codecs": [
        "<builtin>.SystemError"
    ],
    "<builtin>.SystemError": [],
    "encodings": [],
    "token": [
        "<builtin>.globals",
        "extend",
        "<builtin>.isinstance"
    ],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "<str>.replace": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "platform": [
        "collections.namedtuple",
        "re.compile"
    ],
    "subprocess": [
        "<builtin>.getattr",
        "subprocess._use_posix_spawn",
        "<builtin>.hasattr"
    ],
    "signal": [
        "<builtin>.globals",
        "signal._wraps",
        "signal._wraps.decorator"
    ],
    "signal._wraps": [],
    "signal._wraps.decorator": [],
    "threading": [
        "append",
        "<builtin>.set",
        "threading.RLock",
        "<builtin>.hasattr",
        "_weakrefset.WeakSet.__init__",
        "collections.namedtuple",
        "threading._MainThread.__init__"
    ],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.RLock": [
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [],
    "_weakrefset.WeakSet.__init__": [
        "<builtin>.set",
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading._MainThread.__init__": [
        "threading.Event.set",
        "threading.Thread._set_tstate_lock",
        "threading.Thread._set_ident",
        "threading.Thread.__init__",
        "threading.Thread._set_native_id"
    ],
    "threading.Thread.__init__": [
        "threading._newname",
        "threading._make_invoke_excepthook",
        "_weakrefset.WeakSet.add",
        "threading.Event.__init__",
        "threading.current_thread",
        "<builtin>.str"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_ident",
        "threading.Thread.__init__",
        "threading._newname",
        "threading.Thread._set_native_id"
    ],
    "threading.Thread._set_ident": [],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "contextlib.contextmanager"
    ],
    "weakref": [],
    "weakref.finalize": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "selectors": [
        "collections.namedtuple",
        "selectors._can_use",
        "<builtin>.hasattr"
    ],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._can_use": [
        "<builtin>.getattr"
    ],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.CompletedProcess": [
        "<builtin>.classmethod"
    ],
    "subprocess._use_posix_spawn": [
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.hasattr"
    ],
    "subprocess.Popen": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "platform._Processor": [
        "<builtin>.classmethod"
    ],
    "platform.uname_result": [
        "functools.cached_property.__init__",
        "<builtin>.classmethod"
    ],
    "functools.cached_property.__init__": [],
    "random": [
        "random.Random.__init__",
        "<builtin>.hasattr"
    ],
    "bisect": [],
    "hashlib": [
        "<builtin>.globals",
        "hashlib.__get_builtin_constructor",
        "<builtin>.set",
        "<builtin>.bytes",
        "logging.exception",
        "<builtin>.range"
    ],
    "hashlib.__get_builtin_constructor": [
        "<builtin>.ValueError",
        "<map>.get"
    ],
    "<map>.get": [],
    "logging": [
        "logging.Formatter.__init__",
        "threading.RLock",
        "logging.Manager.__init__",
        "<builtin>.hasattr",
        "logging.RootLogger.__init__",
        "logging._StderrHandler.__init__",
        "_weakrefset.WeakSet.__init__",
        "ntpath.normcase",
        "posixpath.normcase",
        "weakref.WeakValueDictionary.__init__"
    ],
    "string": [
        "string.Template.__init_subclass__"
    ],
    "string.Template.__init_subclass__": [
        "re.escape",
        "re.compile",
        "<builtin>.super"
    ],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "os._fspath": [
        "<builtin>.hasattr",
        "<builtin>.type",
        "<str>.format",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "<str>.format": [],
    "ntpath.normcase": [
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.Formatter.__init__": [
        "logging.PercentStyle.validate",
        "<map>.keys",
        "<builtin>.ValueError",
        "logging.StringTemplateStyle.validate",
        "logging.StrFormatStyle.validate",
        "logging.StringTemplateStyle.__init__",
        "logging.PercentStyle.__init__"
    ],
    "<map>.keys": [],
    "logging.PercentStyle.__init__": [],
    "logging.StringTemplateStyle.__init__": [
        "string.Template.__init__",
        "<builtin>.super"
    ],
    "string.Template.__init__": [],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update",
        "<builtin>.set"
    ],
    "weakref.WeakValueDictionary.update": [
        "weakref.KeyedRef.__init__",
        "<builtin>.dict",
        "weakref.WeakValueDictionary._commit_removals",
        "<builtin>.hasattr"
    ],
    "weakref.WeakValueDictionary._commit_removals": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging._checkLevel",
        "logging._addHandlerRef",
        "logging.Handler.createLock",
        "logging.Filterer.__init__"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "logging._addHandlerRef": [
        "append",
        "logging._acquireLock"
    ],
    "logging._acquireLock": [],
    "logging.Handler.createLock": [
        "threading.RLock",
        "logging._register_at_fork_reinit_lock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging.Manager": [
        "<builtin>.property"
    ],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__"
    ],
    "logging.Manager.__init__": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.basicConfig",
        "<builtin>.len",
        "logging.Logger.error"
    ],
    "logging.basicConfig": [
        "logging.Formatter.__init__",
        "<builtin>.len",
        "logging.StreamHandler.__init__",
        "logging.FileHandler.__init__",
        "logging.Logger.addHandler",
        "<map>.keys",
        "<builtin>.ValueError",
        "logging.Logger.setLevel",
        "logging._acquireLock",
        "logging.Logger.removeHandler"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "remove"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "os._fspath",
        "logging.StreamHandler.__init__",
        "logging.Handler.__init__",
        "logging.FileHandler._open",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "posixpath.abspath": [
        "os._fspath",
        "posixpath.join",
        "posixpath.normpath",
        "<builtin>.isinstance",
        "posixpath.isabs"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "posixpath._get_sep"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath.join": [
        "os._fspath",
        "posixpath._get_sep",
        "<builtin>.map",
        "genericpath._check_arg_types"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "posixpath.normpath": [
        "os._fspath",
        "append",
        "<builtin>.isinstance",
        "pop"
    ],
    "pop": [],
    "ntpath.abspath": [],
    "logging.FileHandler._open": [],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.StrFormatStyle.validate": [
        "<builtin>.set",
        "string.Formatter.parse",
        "<builtin>.ValueError"
    ],
    "string.Formatter.parse": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.set",
        "<builtin>.ValueError"
    ],
    "logging.Logger.addHandler": [
        "append",
        "logging._acquireLock"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger.isEnabledFor",
        "logging.Logger._log"
    ],
    "logging.Logger.isEnabledFor": [
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "logging.Logger.handle",
        "logging.Logger.findCaller",
        "<builtin>.type",
        "<builtin>.isinstance",
        "logging.Logger.makeRecord"
    ],
    "logging.Logger.findCaller": [
        "logging.currentframe",
        "<builtin>.hasattr",
        "traceback.print_stack",
        "ntpath.normcase",
        "posixpath.normcase"
    ],
    "logging.currentframe": [],
    "traceback.print_stack": [
        "traceback.print_list",
        "traceback.extract_stack"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "<builtin>.getattr",
        "<builtin>.set",
        "traceback.FrameSummary.__init__",
        "linecache.checkcache",
        "linecache.lazycache"
    ],
    "linecache.lazycache": [
        "<builtin>.getattr",
        "<str>.endswith",
        "<builtin>.len",
        "<str>.startswith"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "linecache.checkcache": [
        "<map>.pop",
        "<builtin>.list",
        "<builtin>.len",
        "<map>.keys"
    ],
    "<map>.pop": [],
    "traceback.print_list": [
        "<builtin>.print",
        "traceback.StackSummary.from_list",
        "traceback.StackSummary.format"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__",
        "<builtin>.isinstance"
    ],
    "traceback.StackSummary.format": [
        "append",
        "<builtin>.sorted"
    ],
    "logging.Logger.makeRecord": [
        "<builtin>.KeyError",
        "logging.LogRecord.__init__"
    ],
    "logging.LogRecord.__init__": [
        "ntpath.basename",
        "<builtin>.len",
        "posixpath.splitext",
        "ntpath.splitext",
        "<builtin>.hasattr",
        "posixpath.basename",
        "logging.getLevelName",
        "<builtin>.isinstance",
        "threading.current_thread",
        "<builtin>.int"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "posixpath.basename": [
        "os._fspath",
        "posixpath._get_sep"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "os._fspath",
        "ntpath.splitdrive",
        "<builtin>.len",
        "ntpath._get_bothseps"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.splitdrive": [
        "os._fspath",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "posixpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "genericpath._splitext": [
        "<builtin>.max"
    ],
    "ntpath.splitext": [
        "os._fspath",
        "<builtin>.isinstance",
        "genericpath._splitext"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Logger.callHandlers",
        "logging.Filterer.filter"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.Handler.acquire",
        "logging.Handler.emit",
        "logging.Filterer.filter"
    ],
    "logging.Handler.acquire": [],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.ord",
        "<builtin>.len",
        "<builtin>.type",
        "warnings.warn",
        "<builtin>.isinstance",
        "<builtin>.super",
        "<builtin>.map"
    ],
    "warnings.warn": [
        "<builtin>.issubclass",
        "warnings._next_external_frame",
        "warnings.warn_explicit",
        "<builtin>.type",
        "warnings._is_internal_frame",
        "<builtin>.range",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<builtin>.issubclass",
        "warnings.WarningMessage.__init__",
        "<builtin>.str",
        "<builtin>.int",
        "<builtin>.RuntimeError",
        "linecache.getlines",
        "<builtin>.isinstance",
        "warnings._showwarnmsg",
        "<str>.lower",
        "<map>.get",
        "<map>.clear"
    ],
    "<str>.lower": [],
    "<map>.clear": [],
    "linecache.getlines": [
        "linecache.updatecache",
        "<builtin>.len",
        "linecache.clearcache"
    ],
    "linecache.updatecache": [
        "<builtin>.len",
        "posixpath.join",
        "ntpath.join",
        "linecache.lazycache",
        "ntpath.isabs",
        "tokenize.open",
        "<map>.pop",
        "<str>.endswith",
        "posixpath.isabs",
        "<str>.startswith"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "ntpath.isabs": [
        "os._fspath",
        "ntpath.splitdrive",
        "<builtin>.len",
        "<builtin>.isinstance",
        "ntpath._get_bothseps"
    ],
    "ntpath.join": [
        "os._fspath",
        "ntpath.splitdrive",
        "genericpath._check_arg_types",
        "<builtin>.isinstance",
        "<builtin>.map"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding"
    ],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.find_cookie",
        "tokenize.detect_encoding.read_or_stop"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "tokenize._get_normal_name",
        "<builtin>.SyntaxError"
    ],
    "tokenize._get_normal_name": [],
    "linecache.clearcache": [
        "<map>.clear"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "linecache.getline"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [],
    "pickle": [
        "append",
        "extend"
    ],
    "struct": [],
    "_compat_pickle": [
        "<builtin>.dict",
        "<map>.update",
        "<builtin>.len",
        "<map>.items"
    ],
    "<map>.update": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [
        "<builtin>.property"
    ],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.ord": [],
    "tempfile": [
        "<builtin>.hasattr"
    ],
    "shutil": [
        "append",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "bz2": [],
    "_compression": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "contextvars": [],
    "dataclasses": [
        "dataclasses._FIELD_BASE.__init__",
        "re.compile"
    ],
    "copy": [
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "dataclasses._FIELD_BASE.__init__": [],
    "dataclasses.Field": [
        "<builtin>.classmethod"
    ],
    "numpy": [
        "<builtin>.globals",
        "numpy._core.getlimits._register_known_types",
        "<builtin>.getattr",
        "<builtin>.set",
        "warnings.catch_warnings.__init__",
        "<builtin>.len",
        "<builtin>.str",
        "<builtin>.list",
        "<builtin>.RuntimeError",
        "numpy._mac_os_check",
        "numpy.hugepage_setup",
        "warnings.filterwarnings",
        "<builtin>.ImportError",
        "numpy._pytesttester.PytestTester.__init__",
        "numpy._sanity_check"
    ],
    "numpy._globals": [
        "<builtin>.globals",
        "<builtin>.RuntimeError"
    ],
    "numpy._utils": [],
    "numpy._utils._convertions": [],
    "numpy._expired_attrs_2_0": [],
    "numpy.version": [
        "<str>.split"
    ],
    "numpy._distributor_init": [],
    "numpy.__config__": [
        "<builtin>.bool",
        "<str>.replace",
        "<str>.lower",
        "numpy.__config__._cleanup"
    ],
    "numpy.__config__._cleanup": [
        "<map>.items",
        "<builtin>.isinstance",
        "numpy.__config__._cleanup"
    ],
    "numpy._core": [
        "append",
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.ImportError",
        "copyreg.pickle",
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy._core.multiarray": [],
    "numpy._core.overrides": [
        "<builtin>.set",
        "collections.namedtuple"
    ],
    "numpy._utils._inspect": [],
    "numpy._core.umath": [],
    "numpy._core.numerictypes": [
        "<builtin>.globals",
        "<builtin>.sorted",
        "<builtin>.set",
        "append",
        "numpy._utils.set_module.decorator",
        "<builtin>.tuple",
        "numpy._utils.set_module",
        "numpy._core.numerictypes._register_types"
    ],
    "numbers": [],
    "numbers.Complex": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Real": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Rational": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numbers.Integral": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "numpy._core._string_helpers": [
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.range"
    ],
    "numpy._core._type_aliases": [
        "<builtin>.getattr",
        "<builtin>.issubclass",
        "<builtin>.set",
        "<builtin>.list",
        "<map>.keys",
        "<map>.items"
    ],
    "numpy._core._dtype": [],
    "numpy._utils.set_module": [],
    "numpy._utils.set_module.decorator": [],
    "numpy._core.numerictypes._register_types": [],
    "numpy._core.numeric": [
        "numpy._utils.set_module.decorator",
        "numpy._core.overrides.set_array_function_like_doc",
        "<builtin>.type",
        "numpy._utils.set_module",
        "numpy._core.numeric.extend_all"
    ],
    "numpy._core.shape_base": [
        "<builtin>.getattr"
    ],
    "numpy._core.fromnumeric": [
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator"
    ],
    "numpy._core._methods": [
        "<map>.update"
    ],
    "numpy._core._exceptions": [],
    "numpy._core._exceptions._ArrayMemoryError": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "numpy._core._ufunc_config": [
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator",
        "contextlib.contextmanager"
    ],
    "numpy.exceptions": [
        "<builtin>.globals",
        "<builtin>.RuntimeError"
    ],
    "numpy._core.overrides.set_array_function_like_doc": [],
    "numpy._core.arrayprint": [
        "<builtin>.getattr",
        "numpy._utils.set_module.decorator",
        "contextlib.contextmanager",
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._core.arrayprint._recursive_guard",
        "numpy._utils.set_module",
        "numpy._core.arrayprint._recursive_guard.decorating_function",
        "numpy._core.overrides.array_function_dispatch"
    ],
    "numpy._core.arrayprint._recursive_guard": [],
    "numpy._core.arrayprint._recursive_guard.decorating_function": [
        "<builtin>.set",
        "functools.wraps"
    ],
    "numpy._core.overrides.array_function_dispatch": [],
    "numpy._core.overrides.array_function_dispatch.decorator": [
        "numpy._core.overrides.verify_matching_signatures",
        "<builtin>.RuntimeError",
        "functools.wraps"
    ],
    "numpy._core.overrides.verify_matching_signatures": [
        "numpy._utils._inspect.getargspec",
        "<builtin>.bool",
        "<builtin>.len",
        "<builtin>.RuntimeError"
    ],
    "numpy._utils._inspect.getargspec": [
        "numpy._utils._inspect.isfunction",
        "<builtin>.TypeError",
        "numpy._utils._inspect.getargs",
        "numpy._utils._inspect.ismethod"
    ],
    "numpy._utils._inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "numpy._utils._inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "numpy._utils._inspect.getargs": [
        "<builtin>.list",
        "<builtin>.TypeError",
        "numpy._utils._inspect.iscode",
        "<builtin>.range"
    ],
    "numpy._utils._inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "numpy._core.arrayprint.StructuredVoidFormat": [
        "<builtin>.classmethod"
    ],
    "numpy._core._asarray": [
        "numpy._utils.set_module.decorator",
        "numpy._core.overrides.set_array_function_like_doc",
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._utils.set_module",
        "numpy._core.overrides.array_function_dispatch"
    ],
    "numpy._core.numeric.extend_all": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "numpy._core.records": [
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator"
    ],
    "numpy._core.memmap": [],
    "numpy._core.function_base": [],
    "numpy._core._machar": [],
    "numpy._core.getlimits": [
        "<builtin>.dict"
    ],
    "numpy._core.getlimits.MachArLike": [
        "<builtin>.property"
    ],
    "numpy._core.getlimits.finfo": [
        "<builtin>.property"
    ],
    "numpy._core.getlimits.iinfo": [
        "<builtin>.property"
    ],
    "numpy._core.einsumfunc": [
        "<builtin>.set",
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._core.overrides.array_function_dispatch"
    ],
    "numpy._core._add_newdocs": [
        "numpy._core.function_base.add_newdoc",
        "<str>.replace",
        "numpy._core._add_newdocs.refer_to_array_attribute"
    ],
    "numpy._core.function_base.add_newdoc": [
        "<builtin>.globals",
        "<builtin>.getattr",
        "<str>.strip",
        "numpy._core.function_base._add_docstring",
        "<builtin>.isinstance",
        "<builtin>.__import__"
    ],
    "numpy._core.function_base._add_docstring": [
        "warnings.warn",
        "numpy._core.function_base._needs_add_docstring"
    ],
    "numpy._core.function_base._needs_add_docstring": [
        "<builtin>.isinstance"
    ],
    "numpy._core._add_newdocs.refer_to_array_attribute": [],
    "numpy._core._add_newdocs_scalars": [
        "numpy._core.function_base.add_newdoc",
        "numpy._core._add_newdocs_scalars.numeric_type_aliases",
        "numpy._core._add_newdocs_scalars._get_platform_and_machine",
        "numpy._core._add_newdocs_scalars.add_newdoc_for_scalar_type"
    ],
    "numpy._core._add_newdocs_scalars.numeric_type_aliases": [
        "numpy._core._add_newdocs_scalars.numeric_type_aliases.type_aliases_gen",
        "<builtin>.list"
    ],
    "numpy._core._add_newdocs_scalars.numeric_type_aliases.type_aliases_gen": [
        "<builtin>.getattr"
    ],
    "numpy._core._add_newdocs_scalars._get_platform_and_machine": [],
    "numpy._core._add_newdocs_scalars.add_newdoc_for_scalar_type": [
        "<builtin>.getattr",
        "<str>.strip",
        "numpy._core.function_base.add_newdoc"
    ],
    "numpy._core._dtype_ctypes": [],
    "numpy._core._internal": [
        "<map>.keys",
        "re.compile"
    ],
    "ctypes": [
        "ctypes.PYFUNCTYPE",
        "ctypes._reset_cache",
        "<builtin>.Exception",
        "ctypes._check_size",
        "ctypes.CFUNCTYPE",
        "ctypes.LibraryLoader.__init__",
        "<builtin>.int"
    ],
    "<builtin>.Exception": [],
    "ctypes._check_size": [
        "<builtin>.SystemError"
    ],
    "ctypes.LibraryLoader": [
        "<builtin>.classmethod"
    ],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "<builtin>.ValueError"
    ],
    "ctypes.PYFUNCTYPE": [],
    "ctypes._endian": [
        "<builtin>.type"
    ],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "numpy._core._internal._ctypes": [
        "<builtin>.property"
    ],
    "numpy._core._internal._Stream": [
        "<builtin>.property"
    ],
    "numpy._pytesttester": [],
    "numpy._pytesttester.PytestTester.__init__": [],
    "numpy.lib": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.lib.array_utils": [],
    "numpy.lib._array_utils_impl": [
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator"
    ],
    "numpy.lib.introspect": [],
    "numpy.lib.mixins": [],
    "numpy.lib.mixins.NDArrayOperatorsMixin": [
        "numpy.lib.mixins._binary_method",
        "numpy.lib.mixins._reflected_binary_method",
        "numpy.lib.mixins._unary_method",
        "numpy.lib.mixins._numeric_methods"
    ],
    "numpy.lib.mixins._binary_method": [],
    "numpy.lib.mixins._numeric_methods": [
        "numpy.lib.mixins._binary_method",
        "numpy.lib.mixins._reflected_binary_method",
        "numpy.lib.mixins._inplace_binary_method"
    ],
    "numpy.lib.mixins._reflected_binary_method": [],
    "numpy.lib.mixins._inplace_binary_method": [],
    "numpy.lib.mixins._unary_method": [],
    "numpy.lib.npyio": [],
    "numpy.lib._npyio_impl": [
        "<builtin>.sorted",
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator",
        "numpy._core.overrides.set_array_function_like_doc"
    ],
    "numpy.lib.format": [
        "<builtin>.len"
    ],
    "numpy.lib._utils_impl": [
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator"
    ],
    "textwrap": [
        "re.compile"
    ],
    "textwrap.TextWrapper": [
        "<builtin>.ord",
        "re.escape",
        "re.compile"
    ],
    "<str>.translate": [],
    "<str>.encode": [],
    "numpy.lib._datasource": [
        "numpy.lib._datasource._FileOpeners.__init__"
    ],
    "numpy.lib._datasource._FileOpeners.__init__": [],
    "numpy.lib._iotools": [],
    "numpy.lib._iotools.NameValidator": [
        "<builtin>.set"
    ],
    "numpy.lib._iotools.StringConverter": [
        "append",
        "<builtin>.classmethod",
        "extend"
    ],
    "numpy.lib.scimath": [],
    "numpy.lib._scimath_impl": [
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._core.overrides.array_function_dispatch"
    ],
    "numpy.lib._type_check_impl": [
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator"
    ],
    "numpy.lib._ufunclike_impl": [
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._core.overrides.array_function_dispatch"
    ],
    "numpy.lib.stride_tricks": [],
    "numpy.lib._stride_tricks_impl": [
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator",
        "numpy._core.overrides.array_function_dispatch"
    ],
    "numpy.lib._index_tricks_impl": [
        "numpy._utils.set_module.decorator",
        "numpy.lib._index_tricks_impl.OGridClass.__init__",
        "numpy.lib._index_tricks_impl.MGridClass.__init__",
        "numpy.lib._index_tricks_impl.IndexExpression.__init__",
        "numpy._utils.set_module",
        "numpy.lib._index_tricks_impl.CClass.__init__",
        "numpy.lib._index_tricks_impl.RClass.__init__"
    ],
    "numpy.matrixlib": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.matrixlib.defmatrix": [
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator"
    ],
    "numpy.linalg": [
        "copy",
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.linalg.linalg": [],
    "numpy.linalg._linalg": [],
    "numpy.lib._twodim_base_impl": [
        "numpy._utils.set_module",
        "numpy._core.getlimits.iinfo.__init__",
        "numpy._utils.set_module.decorator",
        "numpy._core.overrides.set_array_function_like_doc"
    ],
    "numpy._core.getlimits.iinfo.__init__": [
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "numpy._typing": [],
    "__future__": [
        "__future__._Feature.__init__"
    ],
    "__future__._Feature.__init__": [],
    "numpy._typing._nested_sequence": [
        "typing.TypeVar.__init__"
    ],
    "numpy._typing._nbit": [],
    "numpy._typing._char_codes": [],
    "numpy._typing._scalars": [],
    "numpy._typing._shape": [],
    "numpy._typing._dtype_like": [
        "typing.TypeVar.__init__"
    ],
    "numpy._typing._dtype_like._SupportsDType": [
        "<builtin>.property"
    ],
    "numpy._typing._array_like": [
        "typing.TypeVar.__init__"
    ],
    "numpy.matrixlib.defmatrix.matrix": [
        "<builtin>.property"
    ],
    "numpy.lib._function_base_impl": [
        "<builtin>.dict",
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator"
    ],
    "numpy.lib._histograms_impl": [],
    "numpy.lib._index_tricks_impl.MGridClass.__init__": [
        "<builtin>.super"
    ],
    "numpy.lib._index_tricks_impl.OGridClass.__init__": [
        "<builtin>.super"
    ],
    "numpy.lib._index_tricks_impl.AxisConcatenator": [
        "<builtin>.staticmethod"
    ],
    "numpy.lib._index_tricks_impl.RClass.__init__": [
        "numpy.lib._index_tricks_impl.AxisConcatenator.__init__"
    ],
    "numpy.lib._index_tricks_impl.AxisConcatenator.__init__": [],
    "numpy.lib._index_tricks_impl.CClass.__init__": [
        "numpy.lib._index_tricks_impl.AxisConcatenator.__init__"
    ],
    "numpy.lib._index_tricks_impl.IndexExpression.__init__": [],
    "numpy.lib._nanfunctions_impl": [],
    "numpy.lib._shape_base_impl": [
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator"
    ],
    "numpy.lib._arraysetops_impl": [],
    "numpy.lib._polynomial_impl": [
        "warnings.simplefilter",
        "re.compile"
    ],
    "numpy.lib._polynomial_impl.poly1d": [
        "<builtin>.property"
    ],
    "numpy.lib._arrayterator_impl": [],
    "numpy.lib._arrayterator_impl.Arrayterator": [
        "<builtin>.property"
    ],
    "numpy.lib._arraypad_impl": [
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._core.overrides.array_function_dispatch"
    ],
    "numpy.lib._version": [],
    "numpy._core.getlimits._register_known_types": [
        "numpy._core.getlimits._register_type",
        "numpy._core.getlimits.MachArLike.__init__",
        "numpy._core._ufunc_config.errstate.__init__"
    ],
    "numpy._core.getlimits.MachArLike.__init__": [
        "numpy._core.getlimits.MachArLike._float_to_str",
        "<builtin>.int",
        "numpy._core.getlimits.MachArLike._float_conv",
        "numpy._core.getlimits.MachArLike._float_to_float"
    ],
    "numpy._core.getlimits.MachArLike._float_to_float": [
        "numpy._core.getlimits._fr1",
        "numpy._core.getlimits.MachArLike._float_conv"
    ],
    "numpy._core.getlimits.MachArLike._float_conv": [],
    "numpy._core.getlimits._fr1": [],
    "numpy._core.getlimits.MachArLike._float_to_str": [
        "numpy._core.getlimits._fr0"
    ],
    "numpy._core.getlimits._fr0": [],
    "numpy._core.getlimits._register_type": [],
    "numpy._core._ufunc_config.errstate.__init__": [],
    "numpy._sanity_check": [
        "<builtin>.RuntimeError",
        "<builtin>.abs",
        "<builtin>.AssertionError"
    ],
    "<builtin>.abs": [],
    "<builtin>.AssertionError": [],
    "warnings.catch_warnings.__init__": [],
    "numpy._mac_os_check": [],
    "numpy.hugepage_setup": [
        "<builtin>.tuple",
        "<builtin>.int"
    ],
    "packaging.version": [
        "re.compile"
    ],
    "packaging.version.Version": [
        "<builtin>.property",
        "re.compile"
    ],
    "pydantic.v1": [],
    "pydantic.v1.dataclasses": [
        "typing_extensions.dataclass_transform",
        "typing_extensions.dataclass_transform.decorator",
        "contextlib.contextmanager",
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "typing_extensions": [
        "<builtin>.getattr",
        "append",
        "typing_extensions._ensure_subclassable",
        "typing_extensions._SpecialForm.__init__",
        "<builtin>.hasattr",
        "typing_extensions._LiteralForm.__init__",
        "<builtin>.frozenset",
        "<builtin>.type",
        "typing_extensions._ensure_subclassable.inner",
        "typing._tp_cache",
        "<builtin>.classmethod",
        "typing_extensions._SpecialGenericAlias.__init__",
        "typing_extensions._UnpackSpecialForm.__init__",
        "inspect.signature",
        "typing.TypeVar.__init__"
    ],
    "typing_extensions._LiteralForm.__init__": [],
    "typing_extensions._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing_extensions.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsRound": [
        "abc.abstractmethod"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect._signature_from_callable": [
        "<builtin>.callable",
        "inspect.unwrap",
        "inspect._signature_from_function",
        "inspect.Signature.from_callable",
        "inspect._signature_from_builtin",
        "inspect._signature_is_functionlike",
        "inspect._signature_get_partial",
        "inspect._signature_is_builtin",
        "<builtin>.type",
        "<builtin>.ValueError",
        "inspect.isfunction",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "inspect._signature_bound_method",
        "inspect._signature_get_user_defined_method"
    ],
    "inspect._signature_bound_method": [
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "inspect.unwrap": [
        "<builtin>.id",
        "inspect.unwrap._is_wrapper",
        "<builtin>.len",
        "<builtin>.ValueError"
    ],
    "<builtin>.id": [],
    "inspect.unwrap._is_wrapper": [
        "inspect._signature_from_callable.<lambda1>",
        "<builtin>.hasattr"
    ],
    "inspect._signature_from_callable.<lambda1>": [],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_is_functionlike": [
        "<builtin>.callable",
        "inspect.isclass",
        "<builtin>.isinstance",
        "<builtin>.getattr"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_from_function": [
        "<builtin>.getattr",
        "append",
        "<builtin>.TypeError",
        "<builtin>.len",
        "inspect.Signature.__init__",
        "inspect._signature_fromstr",
        "inspect.isfunction",
        "inspect._signature_is_functionlike",
        "inspect.get_annotations",
        "<builtin>.enumerate"
    ],
    "inspect._signature_fromstr": [
        "<builtin>.getattr",
        "inspect.Signature.__init__",
        "inspect._signature_fromstr.p",
        "<builtin>.list",
        "inspect.ismodule",
        "<builtin>.zip",
        "ast.parse",
        "<builtin>.ValueError",
        "inspect._signature_strip_non_python_syntax",
        "<builtin>.isinstance",
        "<builtin>.object",
        "pop",
        "<builtin>.reversed",
        "<builtin>.enumerate"
    ],
    "inspect._signature_strip_non_python_syntax": [
        "tokenize.tokenize",
        "",
        "<builtin>.next",
        "<builtin>.iter"
    ],
    "tokenize.tokenize": [
        "tokenize._tokenize",
        "tokenize.detect_encoding",
        "<builtin>.iter"
    ],
    "tokenize._tokenize": [
        "append",
        "<builtin>.len",
        "<builtin>.IndentationError",
        "tokenize._compile",
        "<map>.get"
    ],
    "<builtin>.IndentationError": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "ast.parse": [
        "<builtin>.compile",
        "<builtin>.isinstance"
    ],
    "inspect._signature_fromstr.p": [
        "ast.literal_eval",
        "inspect._signature_fromstr.parse_name",
        "ast.NodeVisitor.visit",
        "append"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "ast.literal_eval": [
        "ast.parse",
        "<builtin>.isinstance",
        "ast.literal_eval._convert"
    ],
    "ast.literal_eval._convert": [
        "<builtin>.set",
        "<builtin>.len",
        "ast.literal_eval._convert_num",
        "ast.literal_eval._raise_malformed_node",
        "<builtin>.list",
        "<builtin>.tuple",
        "<builtin>.zip",
        "<builtin>.isinstance",
        "<builtin>.dict",
        "<builtin>.map",
        "ast.literal_eval._convert_signed_num"
    ],
    "ast.literal_eval._convert_signed_num": [
        "ast.literal_eval._convert_num",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "ast.literal_eval._raise_malformed_node"
    ],
    "ast.literal_eval._raise_malformed_node": [
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.Signature.__init__": [
        "<builtin>.ValueError",
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.__init__": [],
    "inspect.get_annotations": [
        "<builtin>.callable",
        "<builtin>.getattr",
        "<builtin>.vars",
        "<builtin>.dict",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.eval"
    ],
    "<builtin>.vars": [],
    "inspect._signature_is_builtin": [
        "inspect.isbuiltin",
        "inspect.ismethoddescriptor",
        "<builtin>.isinstance"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "<builtin>.hasattr",
        "inspect.isclass",
        "<builtin>.type",
        "inspect.ismethod",
        "inspect.isfunction"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_from_builtin": [
        "<builtin>.getattr",
        "inspect._signature_fromstr",
        "inspect._signature_is_builtin",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "inspect._signature_get_partial": [
        "collections.OrderedDict.pop",
        "collections.OrderedDict.move_to_end",
        "collections.OrderedDict.__init__",
        "collections.OrderedDict.values",
        "<builtin>.ValueError"
    ],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.move_to_end": [],
    "collections.OrderedDict.values": [],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr"
    ],
    "typing_extensions._ensure_subclassable": [],
    "typing_extensions._ensure_subclassable.inner": [
        "functools.update_wrapper",
        "<builtin>.staticmethod",
        "<builtin>.type"
    ],
    "typing_extensions.Annotated": [
        "typing._tp_cache"
    ],
    "typing_extensions.ParamSpec": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateGenericAlias": [
        "<builtin>.property"
    ],
    "typing_extensions._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialForm.__init__": [],
    "typing_extensions._UnpackSpecialForm.__init__": [
        "<builtin>.super"
    ],
    "pydantic.v1.class_validators": [
        "typing.overload",
        "<builtin>.set"
    ],
    "pydantic.v1.errors": [],
    "decimal": [],
    "_pydecimal": [
        "re.compile",
        "<builtin>.pow",
        "collections.namedtuple",
        "_pydecimal.Context.__init__",
        "_pydecimal._Log10Memoize.__init__"
    ],
    "_pydecimal.Decimal": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.dict"
    ],
    "_pydecimal._Log10Memoize.__init__": [],
    "_pydecimal.Context.__init__": [
        "copy",
        "<builtin>.dict",
        "<builtin>.isinstance",
        "<builtin>.int"
    ],
    "locale": [
        "<builtin>.globals",
        "<builtin>.sorted",
        "<map>.setdefault",
        "re.compile",
        "functools.wraps",
        "<map>.items"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "<builtin>.pow": [],
    "pydantic.v1.typing": [
        "typing.NewType.__init__",
        "typing.TypeVar.__init__",
        "<builtin>.hasattr"
    ],
    "pydantic.v1.fields": [
        "typing.TypeVar.__init__"
    ],
    "pydantic.v1.error_wrappers": [],
    "json": [],
    "pydantic.v1.json": [],
    "datetime": [
        "append",
        "datetime._days_before_year",
        "datetime.timezone._create"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.IsoCalendarDate": [
        "<builtin>.property"
    ],
    "datetime.time": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.datetime": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.timezone": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "<builtin>.object"
    ],
    "datetime.timezone._create": [],
    "ipaddress": [],
    "ipaddress._IPAddressBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress._BaseNetwork": [
        "functools.cached_property.__init__",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "ipaddress._BaseV4": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Address": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress.IPv4Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Network": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress._IPv4Constants": [
        "ipaddress.IPv4Address.__init__",
        "ipaddress.IPv4Network.__init__"
    ],
    "ipaddress.IPv4Network.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress._BaseV4._make_netmask",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.ValueError",
        "<builtin>.int"
    ],
    "ipaddress._IPAddressBase._split_addr_prefix": [
        "<builtin>.len",
        "ipaddress._split_optional_netmask",
        "<builtin>.isinstance"
    ],
    "ipaddress._split_optional_netmask": [
        "<builtin>.len",
        "<builtin>.str"
    ],
    "ipaddress.IPv4Address.__init__": [
        "<builtin>.isinstance",
        "ipaddress._BaseV4._ip_int_from_string",
        "ipaddress._IPAddressBase._check_int_address",
        "<builtin>.str",
        "ipaddress._IPAddressBase._check_packed_address"
    ],
    "ipaddress._IPAddressBase._check_int_address": [],
    "ipaddress._IPAddressBase._check_packed_address": [
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._ip_int_from_string": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._make_netmask": [
        "ipaddress.IPv4Address.__init__",
        "<builtin>.isinstance"
    ],
    "ipaddress._BaseV6": [
        "<builtin>.classmethod",
        "<builtin>.frozenset",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "ipaddress.IPv6Address": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress.IPv6Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv6Network": [
        "<builtin>.property"
    ],
    "ipaddress._IPv6Constants": [
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.IPv6Network.__init__": [
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress._BaseV6._make_netmask",
        "<builtin>.ValueError",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress.IPv6Address.__init__": [
        "ipaddress._BaseV6._ip_int_from_string",
        "ipaddress._BaseV6._split_scope_id",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_int_address",
        "<builtin>.str",
        "ipaddress._IPAddressBase._check_packed_address"
    ],
    "ipaddress._BaseV6._split_scope_id": [],
    "ipaddress._BaseV6._ip_int_from_string": [
        "<builtin>.range",
        "ipaddress.IPv4Address.__init__",
        "<builtin>.len",
        "ipaddress._BaseV6._parse_hextet"
    ],
    "ipaddress._BaseV6._parse_hextet": [
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "ipaddress._BaseV6._make_netmask": [
        "ipaddress.IPv6Address.__init__",
        "<builtin>.isinstance"
    ],
    "uuid": [
        "<builtin>.getattr",
        "uuid.UUID.__init__",
        "platform.system"
    ],
    "platform.system": [
        "platform.uname"
    ],
    "platform.uname": [
        "platform._node",
        "platform.win32_ver",
        "<builtin>.any",
        "platform._get_machine_win32",
        "platform._syscmd_ver",
        "<builtin>.map",
        "platform.java_ver"
    ],
    "platform._node": [],
    "socket": [
        "<builtin>.getattr",
        "append",
        "<builtin>.hasattr",
        "extend",
        "<builtin>.object"
    ],
    "socket.socket": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "platform.win32_ver": [
        "<builtin>.getattr",
        "platform._syscmd_ver",
        "<builtin>.map",
        "<map>.get",
        "<str>.split"
    ],
    "platform._syscmd_ver": [
        "platform._norm_version",
        "subprocess.check_output"
    ],
    "subprocess.check_output": [
        "subprocess.run",
        "<builtin>.ValueError"
    ],
    "subprocess.run": [
        "subprocess.CompletedProcess.__init__",
        "subprocess.Popen.kill",
        "subprocess.CalledProcessError.__init__",
        "subprocess.Popen.communicate",
        "<builtin>.ValueError",
        "subprocess.Popen.__init__",
        "subprocess.Popen.__exit__",
        "subprocess.Popen.poll",
        "subprocess.Popen.__enter__",
        "subprocess.Popen.wait"
    ],
    "subprocess.Popen.__init__": [
        "append",
        "subprocess._cleanup",
        "<builtin>.filter",
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.ValueError",
        "warnings.warn",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.bool",
        "subprocess.Popen._execute_child",
        "subprocess.Popen._get_handles"
    ],
    "subprocess._cleanup": [
        "remove"
    ],
    "subprocess.Popen._get_handles": [
        "subprocess.Popen._get_devnull",
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._execute_child": [
        "posixpath.join",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.map",
        "<builtin>.getattr",
        "<builtin>.sorted",
        "<builtin>.len",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.ValueError",
        "<builtin>.bytearray",
        "<builtin>.issubclass",
        "<builtin>.bytes",
        "posixpath.dirname",
        "os.get_exec_path",
        "<builtin>.hasattr",
        "<builtin>.list",
        "<builtin>.tuple",
        "subprocess.Popen._handle_exitstatus",
        "ntpath.dirname",
        "append",
        "<builtin>.set",
        "ntpath.join",
        "subprocess.Popen._posix_spawn",
        "<builtin>.int"
    ],
    "posixpath.dirname": [
        "os._fspath",
        "posixpath._get_sep",
        "<builtin>.len"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "subprocess.Popen._posix_spawn": [
        "<builtin>.getattr",
        "subprocess.Popen._close_pipe_fds",
        "append"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr"
    ],
    "os.get_exec_path": [
        "warnings.catch_warnings.__init__",
        "<str>.split"
    ],
    "subprocess.Popen._handle_exitstatus": [],
    "<builtin>.filter": [],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [],
    "subprocess.Popen.communicate": [
        "<builtin>.min",
        "subprocess.Popen._communicate",
        "subprocess.Popen._stdin_write",
        "<builtin>.ValueError",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._wait",
        "subprocess.Popen.wait"
    ],
    "subprocess.Popen._communicate": [
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._save_input",
        "<builtin>.RuntimeError",
        "<builtin>.memoryview",
        "subprocess.Popen._translate_newlines",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._check_timeout",
        "subprocess.Popen.wait"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.set",
        "<builtin>.super"
    ],
    "subprocess.Popen._remaining_time": [],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.Popen.wait": [
        "subprocess.Popen._wait",
        "<builtin>.min",
        "subprocess.Popen._remaining_time"
    ],
    "subprocess.Popen._wait": [
        "<builtin>.min",
        "subprocess.TimeoutExpired.__init__",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._try_wait",
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [
        "subprocess.Popen.poll"
    ],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "platform._norm_version": [
        "<builtin>.list",
        "<builtin>.map",
        "<str>.split"
    ],
    "platform._get_machine_win32": [],
    "platform.java_ver": [
        "platform._java_getprop"
    ],
    "platform._java_getprop": [],
    "uuid.UUID": [
        "<builtin>.property"
    ],
    "uuid.UUID.__init__": [
        "<builtin>.len",
        "<builtin>.repr",
        "<str>.strip",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "pydantic.v1.color": [
        "<map>.items",
        "<builtin>.int"
    ],
    "colorsys": [],
    "pydantic.v1.utils": [
        "typing.TypeVar.__init__",
        "<builtin>.object"
    ],
    "pydantic.v1.version": [],
    "pydantic.v1.config": [],
    "pydantic.v1.main": [
        "typing.overload",
        "typing.TypeVar.__init__",
        "<builtin>.object"
    ],
    "pydantic.v1.parse": [],
    "pydantic.v1.types": [
        "re.compile",
        "_weakrefset.WeakSet.__init__",
        "<map>.update",
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pydantic.v1.datetime_parse": [
        "<builtin>.int",
        "re.compile",
        "datetime"
    ],
    "pydantic.v1.validators": [
        "pydantic.v1.validators.IfConfig.__init__",
        "typing.TypeVar.__init__"
    ],
    "pydantic.v1.validators.IfConfig.__init__": [],
    "typing.overload": [],
    "pydantic.v1.types.StrictBool": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.ConstrainedInt": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.ConstrainedFloat": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.ConstrainedBytes": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.ConstrainedStr": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "pydantic.v1.types.ConstrainedSet": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.ConstrainedFrozenSet": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.ConstrainedList": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.PyObject": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.ConstrainedDecimal": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.UUID1": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.FilePath": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.DirectoryPath": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.Json": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.SecretField": [
        "abc.abstractmethod"
    ],
    "pydantic.v1.types.SecretStr": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.SecretBytes": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.PaymentCardNumber": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pydantic.v1.types.ByteSize": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.PastDate": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.FutureDate": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.types.ConstrainedDate": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.schema": [],
    "pydantic.v1.networks": [
        "re.compile"
    ],
    "pydantic.v1.networks.AnyUrl": [
        "<builtin>.classmethod",
        "<builtin>.set",
        "<builtin>.staticmethod",
        "typing.no_type_check"
    ],
    "typing.no_type_check": [
        "typing.no_type_check",
        "<builtin>.isinstance"
    ],
    "pydantic.v1.networks.HttpUrl": [
        "<builtin>.staticmethod"
    ],
    "pydantic.v1.networks.MultiHostDsn": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "pydantic.v1.networks.RedisDsn": [
        "<builtin>.staticmethod"
    ],
    "pydantic.v1.networks.MongoDsn": [
        "<builtin>.staticmethod"
    ],
    "pydantic.v1.networks.KafkaDsn": [
        "<builtin>.staticmethod"
    ],
    "pydantic.v1.networks.EmailStr": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.networks.NameEmail": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.networks.IPvAnyAddress": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.networks.IPvAnyInterface": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.networks.IPvAnyNetwork": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.main.ModelMetaclass": [
        "typing.no_type_check"
    ],
    "pydantic.v1.main.BaseModel": [
        "<builtin>.classmethod",
        "<builtin>.set",
        "typing.no_type_check"
    ],
    "pydantic.v1.config.BaseConfig": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.utils.Representation": [
        "<builtin>.tuple"
    ],
    "pydantic.v1.utils.ValueItems": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "pydantic.v1.color.Color": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.fields.ModelField": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "typing.NewType.__init__": [
        "typing._caller",
        "<str>.rpartition"
    ],
    "<str>.rpartition": [],
    "typing._caller": [],
    "pydantic.v1.dataclasses.Dataclass": [
        "<builtin>.classmethod"
    ],
    "typing_extensions.dataclass_transform": [],
    "typing_extensions.dataclass_transform.decorator": [],
    "pydantic.v1.annotated_types": [],
    "pydantic.v1.decorator": [
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pydantic.v1.env_settings": [
        "<builtin>.str",
        "<builtin>.object"
    ],
    "pydantic.v1.env_settings.BaseSettings.Config": [
        "<builtin>.classmethod"
    ],
    "pydantic.v1.tools": [
        "functools.lru_cache.decorating_function",
        "typing.TypeVar.__init__",
        "functools.lru_cache"
    ],
    "pydantic": [
        "pydantic._migration.getattr_migration"
    ],
    "importlib": [],
    "pydantic._migration": [],
    "pydantic.version": [],
    "pydantic_core": [],
    "pydantic_core.core_schema": [
        "typing_extensions.deprecated.__init__",
        "<builtin>.object"
    ],
    "pydantic_core.core_schema.SerializationInfo": [
        "<builtin>.property"
    ],
    "pydantic_core.core_schema.FieldSerializationInfo": [
        "<builtin>.property"
    ],
    "pydantic_core.core_schema.ValidationInfo": [
        "<builtin>.property"
    ],
    "typing_extensions.deprecated.__init__": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "pydantic.dataclasses": [
        "typing_extensions.dataclass_transform",
        "typing_extensions.dataclass_transform.decorator",
        "typing.overload",
        "pydantic._migration.getattr_migration",
        "typing.TypeVar.__init__"
    ],
    "pydantic._internal._config": [
        "<builtin>.set"
    ],
    "pydantic.aliases": [],
    "pydantic._internal._internal_dataclass": [],
    "pydantic.config": [
        "pydantic._migration.getattr_migration",
        "typing.TypeVar.__init__"
    ],
    "pydantic.errors": [
        "pydantic._migration.getattr_migration",
        "pydantic.version.version_short"
    ],
    "pydantic.version.version_short": [],
    "pydantic.errors.PydanticUndefinedAnnotation": [
        "<builtin>.classmethod"
    ],
    "pydantic._migration.getattr_migration": [],
    "pydantic._internal._generate_schema": [
        "typing.TypeVar.__init__"
    ],
    "pydantic.annotated_handlers": [],
    "pydantic.json_schema": [
        "typing_extensions.deprecated.__init__",
        "typing.NewType.__init__",
        "typing.TypeVar.__init__"
    ],
    "pydantic.warnings": [],
    "pydantic._internal._core_metadata": [],
    "pydantic._internal._schema_generation_shared": [],
    "pydantic._internal._core_utils": [
        "pydantic._internal._core_utils._WalkCoreSchema.__init__",
        "typing.TypeVar.__init__"
    ],
    "pydantic._internal._repr": [],
    "pydantic._internal._typing_extra": [
        "typing.NewType.__init__",
        "<builtin>.hasattr",
        "re.compile",
        "<builtin>.type",
        "<builtin>.isinstance",
        "typing.no_type_check"
    ],
    "pydantic._internal._dataclasses": [],
    "pydantic.plugin._schema_validator": [
        "<builtin>.list",
        "typing.TypeVar.__init__",
        "typing_extensions.ParamSpec.__init__"
    ],
    "typing_extensions.ParamSpec.__init__": [
        "<builtin>.bool",
        "typing_extensions._set_default",
        "typing._type_check",
        "typing_extensions._caller"
    ],
    "typing_extensions._set_default": [],
    "typing_extensions._caller": [],
    "pydantic._internal._decorators": [
        "typing.TypeVar.__init__",
        "<builtin>.object"
    ],
    "pydantic.fields": [
        "typing.overload",
        "<builtin>.set",
        "inspect.signature",
        "typing.TypeVar.__init__"
    ],
    "annotated_types": [
        "typing.TypeVar.__init__",
        "<builtin>.type"
    ],
    "annotated_types.GroupedMetadata": [
        "<builtin>.property"
    ],
    "pydantic.types": [
        "typing_extensions.TypeAliasType.__init__",
        "pydantic._migration.getattr_migration",
        "<builtin>.type",
        "typing.TypeVar.__init__"
    ],
    "base64": [],
    "pydantic._internal._fields": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "pydantic._internal._docs_extraction": [],
    "pydantic._internal._import_utils": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "pydantic.main": [
        "typing.overload",
        "pydantic._migration.getattr_migration",
        "typing.TypeVar.__init__"
    ],
    "pydantic._internal._forward_ref": [],
    "pydantic._internal._generics": [
        "contextlib.contextmanager",
        "weakref.WeakValueDictionary.__init__",
        "typing.TypeVar.__init__"
    ],
    "pydantic._internal._utils": [
        "typing.TypeVar.__init__",
        "<builtin>.object"
    ],
    "pydantic._internal._utils.ValueItems": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "pydantic._internal._mock_val_ser": [
        "typing.TypeVar.__init__"
    ],
    "pydantic._internal._model_construction": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "<builtin>.object"
    ],
    "pydantic._internal._signature": [],
    "pydantic._internal._validate_call": [],
    "pydantic._internal._model_construction.ModelMetaclass": [
        "typing_extensions.deprecated.__init__",
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pydantic.deprecated.parse": [
        "typing_extensions.deprecated.__init__"
    ],
    "pydantic.main.BaseModel": [
        "pydantic._internal._model_construction.NoInitField",
        "pydantic._internal._mock_val_ser.MockCoreSchema.__init__",
        "<builtin>.property",
        "typing_extensions.deprecated.__init__",
        "pydantic._internal._mock_val_ser.MockValSer.__init__",
        "<builtin>.classmethod"
    ],
    "pydantic._internal._model_construction.NoInitField": [],
    "pydantic._internal._mock_val_ser.MockCoreSchema.__init__": [],
    "pydantic._internal._mock_val_ser.MockValSer.__init__": [],
    "pydantic._internal._validators": [
        "pydantic._internal._validators.create_constraint_validator",
        "typing.TypeVar.__init__"
    ],
    "pydantic._internal._validators.create_constraint_validator": [],
    "pydantic.types.ImportString": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "pydantic.types.PathType": [
        "<builtin>.staticmethod"
    ],
    "pydantic.types.Json": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.Secret": [
        "<builtin>.classmethod"
    ],
    "pydantic.types._SecretField": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.SecretStr": [
        "pydantic_core.core_schema.str_schema"
    ],
    "pydantic_core.core_schema.str_schema": [
        "pydantic_core.core_schema._dict_not_none"
    ],
    "pydantic_core.core_schema._dict_not_none": [],
    "pydantic.types.SecretBytes": [
        "pydantic_core.core_schema.bytes_schema"
    ],
    "pydantic_core.core_schema.bytes_schema": [
        "pydantic_core.core_schema._dict_not_none"
    ],
    "pydantic.types.PaymentCardNumber": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pydantic.types.ByteSize": [
        "<builtin>.classmethod",
        "re.compile",
        "<map>.update"
    ],
    "pydantic.types.PastDate": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.FutureDate": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.AwareDatetime": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.NaiveDatetime": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.PastDatetime": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.FutureDatetime": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.EncoderProtocol": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.Base64Encoder": [
        "<builtin>.classmethod"
    ],
    "pydantic.types.Base64UrlEncoder": [
        "<builtin>.classmethod"
    ],
    "pydantic.types._AllowAnyJson": [
        "<builtin>.classmethod"
    ],
    "typing_extensions.TypeAliasType.__init__": [
        "append",
        "typing_extensions._caller",
        "<builtin>.tuple",
        "extend",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "pydantic.types._OnErrorOmit": [
        "<builtin>.classmethod"
    ],
    "pydantic.fields.FieldInfo": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pydantic.fields.ComputedFieldInfo": [
        "<builtin>.property"
    ],
    "pydantic.functional_validators": [
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pydantic.functional_validators.AfterValidator": [
        "<builtin>.classmethod"
    ],
    "pydantic.functional_validators.BeforeValidator": [
        "<builtin>.classmethod"
    ],
    "pydantic.functional_validators.PlainValidator": [
        "<builtin>.classmethod"
    ],
    "pydantic.functional_validators.WrapValidator": [
        "<builtin>.classmethod"
    ],
    "pydantic.functional_validators.InstanceOf": [
        "<builtin>.classmethod"
    ],
    "pydantic.functional_validators.SkipValidation": [
        "<builtin>.classmethod"
    ],
    "pydantic._internal._decorators.Decorator": [
        "<builtin>.staticmethod"
    ],
    "pydantic._internal._decorators.DecoratorInfos": [
        "dataclasses.field",
        "<builtin>.staticmethod"
    ],
    "dataclasses.field": [
        "dataclasses.Field.__init__",
        "<builtin>.ValueError"
    ],
    "dataclasses.Field.__init__": [],
    "zoneinfo": [],
    "zoneinfo._tzpath": [
        "zoneinfo._tzpath.reset_tzpath",
        "posixpath.join",
        "ntpath.join",
        "posixpath.normpath",
        "ntpath.normpath"
    ],
    "sysconfig": [
        "ntpath.dirname",
        "<builtin>.getattr",
        "posixpath.dirname",
        "posixpath.join",
        "ntpath.join",
        "posixpath.normpath",
        "sysconfig.is_python_build",
        "sysconfig._fix_pcbuild",
        "sysconfig._getuserbase",
        "sysconfig._safe_realpath",
        "sysconfig.get_default_scheme",
        "ntpath.normpath"
    ],
    "sysconfig._getuserbase": [
        "sysconfig._getuserbase.joinuser"
    ],
    "sysconfig._getuserbase.joinuser": [
        "ntpath.join",
        "ntpath.expanduser",
        "posixpath.expanduser",
        "posixpath.join"
    ],
    "posixpath.expanduser": [
        "os._fspath",
        "posixpath._get_sep",
        "<builtin>.len",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "ntpath.expanduser": [
        "os._fspath",
        "ntpath.dirname",
        "ntpath.basename",
        "<builtin>.len",
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath._get_bothseps"
    ],
    "ntpath.normpath": [
        "os._fspath",
        "ntpath.splitdrive",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "sysconfig._safe_realpath": [
        "posixpath.realpath"
    ],
    "posixpath.realpath": [
        "os._fspath",
        "posixpath._joinrealpath",
        "posixpath.abspath"
    ],
    "posixpath._joinrealpath": [
        "posixpath.join",
        "posixpath.split",
        "posixpath._joinrealpath",
        "<builtin>.isinstance",
        "posixpath.isabs"
    ],
    "posixpath.split": [
        "os._fspath",
        "posixpath._get_sep",
        "<builtin>.len"
    ],
    "sysconfig._fix_pcbuild": [
        "ntpath.join",
        "posixpath.join",
        "ntpath.normcase",
        "posixpath.normcase"
    ],
    "sysconfig.is_python_build": [
        "sysconfig._is_python_source_dir"
    ],
    "sysconfig._is_python_source_dir": [
        "ntpath.join",
        "genericpath.isfile",
        "posixpath.join"
    ],
    "genericpath.isfile": [
        "stat.S_ISREG"
    ],
    "stat.S_ISREG": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "sysconfig.get_default_scheme": [
        "sysconfig.get_preferred_scheme"
    ],
    "sysconfig.get_preferred_scheme": [
        "sysconfig._get_preferred_schemes",
        "<builtin>.ValueError"
    ],
    "sysconfig._get_preferred_schemes": [],
    "zoneinfo._tzpath.reset_tzpath": [
        "<builtin>.all",
        "zoneinfo._tzpath._parse_python_tzpath",
        "sysconfig.get_config_var",
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "zoneinfo._tzpath._get_invalid_paths_message",
        "<builtin>.TypeError",
        "<builtin>.map"
    ],
    "sysconfig.get_config_var": [
        "warnings.warn",
        "sysconfig.get_config_vars",
        "<map>.get"
    ],
    "sysconfig.get_config_vars": [
        "ntpath.dirname",
        "append",
        "posixpath.dirname",
        "sysconfig._init_non_posix",
        "posixpath.join",
        "ntpath.join",
        "sysconfig._getuserbase",
        "sysconfig.get_makefile_filename",
        "sysconfig._safe_realpath",
        "_osx_support.customize_config_vars",
        "sysconfig._init_posix",
        "<map>.get"
    ],
    "sysconfig._init_non_posix": [
        "ntpath.dirname",
        "posixpath.dirname",
        "sysconfig.get_path",
        "sysconfig._safe_realpath"
    ],
    "sysconfig.get_path": [
        "sysconfig.get_paths"
    ],
    "sysconfig.get_paths": [
        "sysconfig._expand_vars"
    ],
    "sysconfig._expand_vars": [
        "sysconfig._extend_dict",
        "posixpath.normpath",
        "ntpath.expanduser",
        "posixpath.expanduser",
        "sysconfig._subst_vars",
        "ntpath.normpath",
        "sysconfig.get_config_vars"
    ],
    "sysconfig._extend_dict": [
        "<map>.keys"
    ],
    "sysconfig._subst_vars": [
        "<builtin>.AttributeError"
    ],
    "<builtin>.AttributeError": [],
    "sysconfig._init_posix": [
        "<builtin>.globals",
        "<builtin>.__import__",
        "<builtin>.locals",
        "sysconfig._get_sysconfigdata_name"
    ],
    "sysconfig._get_sysconfigdata_name": [
        "<builtin>.getattr"
    ],
    "<builtin>.locals": [],
    "sysconfig.get_makefile_filename": [
        "ntpath.join",
        "<builtin>.hasattr",
        "sysconfig.get_path",
        "posixpath.join"
    ],
    "_osx_support": [],
    "_osx_support.customize_config_vars": [
        "_osx_support._supports_universal_builds",
        "_osx_support._remove_universal_flags",
        "_osx_support._check_for_unavailable_sdk",
        "_osx_support._override_all_archs"
    ],
    "_osx_support._supports_universal_builds": [
        "<builtin>.bool",
        "_osx_support._get_system_version_tuple"
    ],
    "_osx_support._get_system_version_tuple": [
        "<builtin>.tuple",
        "<builtin>.int",
        "_osx_support._get_system_version"
    ],
    "_osx_support._get_system_version": [
        "<builtin>.open"
    ],
    "<builtin>.open": [],
    "_osx_support._remove_universal_flags": [
        "re.sub",
        "_osx_support._save_modified_value"
    ],
    "re.sub": [
        "re._compile"
    ],
    "_osx_support._save_modified_value": [],
    "_osx_support._override_all_archs": [
        "re.sub",
        "_osx_support._save_modified_value"
    ],
    "_osx_support._check_for_unavailable_sdk": [
        "re.sub",
        "re.search",
        "_osx_support._save_modified_value",
        "genericpath.exists"
    ],
    "re.search": [
        "re._compile"
    ],
    "genericpath.exists": [],
    "zoneinfo._tzpath._parse_python_tzpath": [
        "<builtin>.len",
        "<builtin>.filter",
        "<builtin>.tuple",
        "warnings.warn",
        "zoneinfo._tzpath._get_invalid_paths_message"
    ],
    "zoneinfo._tzpath._get_invalid_paths_message": [
        "ntpath.isabs",
        "posixpath.isabs"
    ],
    "<builtin>.all": [],
    "zoneinfo._common": [],
    "zoneinfo._common._TZifHeader": [
        "<builtin>.classmethod"
    ],
    "zoneinfo._zoneinfo": [
        "functools.lru_cache.decorating_function",
        "zoneinfo._zoneinfo._ttinfo.__init__",
        "functools.lru_cache",
        "datetime"
    ],
    "calendar": [
        "calendar._localized_month.__init__",
        "calendar._localized_day.__init__",
        "<builtin>.range",
        "datetime.date.toordinal"
    ],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_in_month",
        "datetime._days_before_month",
        "datetime._days_before_year"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "zoneinfo._zoneinfo.ZoneInfo": [
        "<builtin>.property",
        "<builtin>.staticmethod",
        "collections.OrderedDict.__init__",
        "<builtin>.classmethod",
        "weakref.WeakValueDictionary.__init__"
    ],
    "zoneinfo._zoneinfo._ttinfo.__init__": [],
    "zoneinfo._zoneinfo._CalendarOffset": [
        "<builtin>.classmethod"
    ],
    "pydantic._internal._core_utils._WalkCoreSchema.__init__": [
        "pydantic._internal._core_utils._WalkCoreSchema._build_schema_type_to_method"
    ],
    "pydantic._internal._core_utils._WalkCoreSchema._build_schema_type_to_method": [
        "<builtin>.getattr",
        "typing_extensions.get_args"
    ],
    "typing_extensions.get_args": [
        "<builtin>.getattr",
        "<builtin>.list",
        "<builtin>.isinstance",
        "typing_extensions.get_origin"
    ],
    "typing_extensions.get_origin": [
        "<builtin>.isinstance"
    ],
    "pydantic._internal._schema_generation_shared.CallbackGetCoreSchemaHandler": [
        "<builtin>.property"
    ],
    "pydantic._internal._core_metadata.CoreMetadataHandler": [
        "<builtin>.property"
    ],
    "pydantic.json_schema._DefinitionsRemapping": [
        "<builtin>.staticmethod"
    ],
    "pydantic.json_schema.GenerateJsonSchema": [
        "typing_extensions.deprecated.__init__",
        "<builtin>.property",
        "typing_extensions.final",
        "<builtin>.staticmethod"
    ],
    "typing_extensions.final": [],
    "pydantic.json_schema.Examples": [
        "typing_extensions.deprecated.__init__",
        "typing.overload"
    ],
    "pydantic.annotated_handlers.GetCoreSchemaHandler": [
        "<builtin>.property"
    ],
    "pydantic._internal._discriminated_union": [],
    "pydantic._internal._known_annotated_metadata": [
        "functools.lru_cache"
    ],
    "pydantic._internal._generate_schema.TypesNamespaceStack": [
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "pydantic._internal._generate_schema.GenerateSchema": [
        "typing.overload",
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "pydantic._internal._generate_schema._Definitions": [
        "contextlib.contextmanager"
    ],
    "pydantic._internal._generate_schema._FieldNameStack": [
        "contextlib.contextmanager"
    ],
    "pydantic._internal._generate_schema._ModelTypeStack": [
        "contextlib.contextmanager"
    ],
    "pydantic._internal._config.ConfigWrapper": [
        "<builtin>.classmethod"
    ],
    "pydantic._internal._config.ConfigWrapperStack": [
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "pydantic.functional_serializers": [
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pydantic.networks": [
        "pydantic._migration.getattr_migration",
        "pydantic.networks._build_pretty_email_regex"
    ],
    "importlib.metadata": [
        "collections.namedtuple"
    ],
    "csv": [],
    "csv.DictReader": [
        "<builtin>.property"
    ],
    "email": [],
    "zipfile": [],
    "importlib.util": [
        "contextlib.contextmanager"
    ],
    "importlib.util.LazyLoader": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "zipfile.CompleteDirs": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "importlib.metadata._adapters": [],
    "email.message": [
        "re.compile"
    ],
    "uu": [],
    "quopri": [],
    "email.utils": [
        "re.compile"
    ],
    "email._parseaddr": [],
    "email.charset": [],
    "email.base64mime": [],
    "email.quoprimime": [
        "<str>.encode",
        "<builtin>.range",
        "<builtin>.ord",
        "<builtin>.chr"
    ],
    "email.errors": [],
    "email.encoders": [],
    "email._policybase": [],
    "email.header": [
        "email.charset.Charset.__init__",
        "re.compile"
    ],
    "email.charset.Charset.__init__": [
        "<str>.encode",
        "<map>.get",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._encoded_words": [
        "<builtin>.ord",
        "re.compile"
    ],
    "email._encoded_words._QByteMap": [
        "<str>.encode"
    ],
    "email.iterators": [],
    "importlib.metadata._text": [],
    "importlib.metadata._adapters.Message": [
        "<builtin>.property",
        "<builtin>.set",
        "<builtin>.map"
    ],
    "importlib.metadata._meta": [
        "typing.TypeVar.__init__"
    ],
    "importlib.metadata._meta.PackageMetadata": [
        "<builtin>.property"
    ],
    "importlib.metadata._itertools": [],
    "importlib.abc": [
        "importlib.abc._register"
    ],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "importlib.metadata.Sectioned": [
        "<builtin>.classmethod",
        "textwrap.dedent",
        "<builtin>.staticmethod"
    ],
    "textwrap.dedent": [
        "re.sub",
        "<builtin>.zip",
        "<builtin>.enumerate"
    ],
    "importlib.metadata.EntryPoint": [
        "<builtin>.property",
        "re.compile"
    ],
    "importlib.metadata.EntryPoints": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.SelectableGroups": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "importlib.metadata.Distribution": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib.metadata.DistributionFinder": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib.metadata.FastPath": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "importlib.metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.MetadataPathFinder": [
        "<builtin>.classmethod",
        "importlib.metadata.DistributionFinder.Context.__init__"
    ],
    "importlib.metadata.PathDistribution": [
        "<builtin>.property"
    ],
    "pydantic.networks.EmailStr": [
        "<builtin>.classmethod"
    ],
    "pydantic.networks.NameEmail": [
        "<builtin>.classmethod"
    ],
    "pydantic.networks.IPvAnyAddress": [
        "<builtin>.classmethod"
    ],
    "pydantic.networks.IPvAnyInterface": [
        "<builtin>.classmethod"
    ],
    "pydantic.networks.IPvAnyNetwork": [
        "<builtin>.classmethod"
    ],
    "pydantic.networks._build_pretty_email_regex": [
        "re.compile"
    ],
    "pydantic.type_adapter": [
        "typing.TypeVar.__init__",
        "typing_extensions.ParamSpec.__init__"
    ],
    "pydantic.type_adapter.TypeAdapter": [
        "pydantic.type_adapter._frame_depth.wrapper",
        "<builtin>.staticmethod",
        "contextlib.contextmanager",
        "functools.cached_property.__init__",
        "typing.overload",
        "pydantic.type_adapter._frame_depth"
    ],
    "pydantic.type_adapter._frame_depth": [],
    "pydantic.type_adapter._frame_depth.wrapper": [
        "functools.wraps"
    ],
    "pydantic.validate_call_decorator": [
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pydantic.deprecated.class_validators": [
        "typing_extensions.deprecated.__init__",
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "pydantic._internal._decorators_v1": [],
    "pydantic.deprecated.config": [],
    "pydantic.deprecated.tools": [
        "typing_extensions.deprecated.__init__",
        "typing.TypeVar.__init__"
    ],
    "pydantic.root_model": [
        "typing.TypeVar.__init__"
    ],
    "pydantic.root_model.RootModel": [
        "<builtin>.classmethod"
    ],
    "wasabi": [
        "wasabi.printer.Printer.__init__"
    ],
    "wasabi.markdown": [],
    "wasabi.compat": [],
    "wasabi.markdown.MarkdownRenderer": [
        "<builtin>.property"
    ],
    "wasabi.printer": [],
    "multiprocessing": [
        "<builtin>.globals",
        "<builtin>.getattr",
        "<builtin>.dir"
    ],
    "multiprocessing.context": [
        "multiprocessing.context.DefaultContext.__init__"
    ],
    "multiprocessing.process": [
        "<builtin>.set",
        "multiprocessing.process._MainProcess.__init__",
        "<builtin>.list",
        "_weakrefset.WeakSet.__init__",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "multiprocessing.process.BaseProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process._ParentProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process._MainProcess.__init__": [],
    "multiprocessing.reduction": [
        "multiprocessing.reduction.ForkingPickler.register",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "multiprocessing.reduction.ForkingPickler": [
        "<builtin>.classmethod"
    ],
    "multiprocessing.reduction.ForkingPickler.register": [],
    "multiprocessing.context.BaseContext": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.Process": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.SpawnProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.DefaultContext.__init__": [],
    "multiprocessing.context.ForkProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.ForkServerProcess": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.dir": [],
    "wasabi.tables": [],
    "wasabi.util": [
        "<builtin>.hasattr"
    ],
    "difflib": [
        "collections.namedtuple",
        "re.compile"
    ],
    "heapq": [],
    "difflib.SequenceMatcher": [
        "<builtin>.classmethod"
    ],
    "wasabi.printer.Printer": [
        "typing.overload",
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "wasabi.traceback_printer": [],
    "wasabi.traceback_printer.TracebackPrinter": [
        "<builtin>.tuple"
    ],
    "wasabi.printer.Printer.__init__": [
        "wasabi.util.can_render",
        "wasabi.util.supports_ansi",
        "collections.Counter.__init__",
        "<builtin>.dict",
        "os.getenv"
    ],
    "os.getenv": [],
    "collections.Counter.__init__": [
        "collections.Counter.update",
        "<builtin>.super"
    ],
    "collections.Counter.update": [
        "collections.Counter.update",
        "<builtin>.super",
        "<builtin>.isinstance",
        "collections._count_elements"
    ],
    "collections._count_elements": [],
    "wasabi.util.supports_ansi": [
        "os.getenv"
    ],
    "wasabi.util.can_render": [
        "<str>.encode"
    ],
    "thinc.compat": [
        "packaging.version.Version.__init__",
        "<builtin>.str",
        "<builtin>.hasattr"
    ],
    "packaging.version.Version.__init__": [
        "packaging.version._cmpkey",
        "<builtin>.tuple",
        "packaging.version._parse_local_version",
        "packaging.version._parse_letter_version",
        "<builtin>.int"
    ],
    "packaging.version._parse_letter_version": [
        "<builtin>.int"
    ],
    "packaging.version._parse_local_version": [
        "<builtin>.tuple",
        "<builtin>.int"
    ],
    "packaging.version._cmpkey": [
        "<builtin>.list",
        "<builtin>.tuple",
        "<builtin>.reversed",
        "<builtin>.isinstance"
    ],
    "thinc.types": [
        "typing.TypeVar.__init__"
    ],
    "thinc.types._Array": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "thinc.types._Floats": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "thinc.types._Ints": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "thinc.types._Array1d": [
        "typing.overload",
        "<builtin>.classmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "thinc.types.Floats1d": [
        "typing.overload",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "thinc.types.Ints1d": [
        "typing.overload",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "thinc.types._Array2d": [
        "typing.overload",
        "<builtin>.classmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "thinc.types.Floats2d": [
        "typing.overload",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "thinc.types.Ints2d": [
        "typing.overload",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "thinc.types._Array3d": [
        "typing.overload",
        "<builtin>.classmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "thinc.types.Floats3d": [
        "typing.overload",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "thinc.types.Ints3d": [
        "typing.overload",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "thinc.types._Array4d": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "thinc.types.Floats4d": [
        "typing.overload",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "thinc.types.Ints4d": [
        "typing.overload",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "thinc.types.Generator": [
        "<builtin>.classmethod"
    ],
    "thinc.types.Ragged": [
        "<builtin>.property"
    ],
    "thinc.types.ArgsKwargs": [
        "<builtin>.classmethod"
    ],
    "thinc.api": [],
    "thinc.backends": [
        "contextlib.contextmanager"
    ],
    "thinc": [],
    "thinc.about": [],
    "thinc.config": [],
    "catalogue": [
        "catalogue._importlib_metadata.entry_points",
        "typing.TypeVar.__init__"
    ],
    "catalogue._importlib_metadata": [
        "collections.namedtuple",
        "typing.TypeVar.__init__"
    ],
    "zipp": [],
    "zipp.compat.py310": [],
    "zipp.glob": [
        "<builtin>.bool",
        "<builtin>.str"
    ],
    "zipp.CompleteDirs": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "zipp.Path": [
        "<builtin>.property"
    ],
    "catalogue._importlib_metadata._compat": [],
    "catalogue._importlib_metadata._compat.NullFinder": [
        "<builtin>.staticmethod"
    ],
    "catalogue._importlib_metadata._compat.PyPy_repr": [
        "<builtin>.hasattr"
    ],
    "configparser": [
        "<builtin>.object"
    ],
    "configparser.ParsingError": [
        "<builtin>.property"
    ],
    "configparser.BasicInterpolation": [
        "re.compile"
    ],
    "configparser.ExtendedInterpolation": [
        "re.compile"
    ],
    "configparser.LegacyInterpolation": [
        "<builtin>.staticmethod",
        "re.compile"
    ],
    "configparser.RawConfigParser": [
        "<builtin>.property",
        "re.compile"
    ],
    "configparser.SectionProxy": [
        "<builtin>.property"
    ],
    "configparser.ConverterMapping": [
        "re.compile"
    ],
    "catalogue._importlib_metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "catalogue._importlib_metadata.EntryPoint": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "re.compile"
    ],
    "catalogue._importlib_metadata.Distribution": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "abc.abstractmethod"
    ],
    "catalogue._importlib_metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "catalogue._importlib_metadata.DistributionFinder": [
        "catalogue._importlib_metadata.DistributionFinder.Context.__init__",
        "abc.abstractmethod"
    ],
    "catalogue._importlib_metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "catalogue._importlib_metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "catalogue._importlib_metadata.MetadataPathFinder": [
        "<builtin>.classmethod",
        "catalogue._importlib_metadata.DistributionFinder.Context.__init__"
    ],
    "catalogue._importlib_metadata.entry_points": [
        "catalogue._importlib_metadata.distributions",
        "<builtin>.sorted",
        "<builtin>.tuple",
        "operator.attrgetter.__init__"
    ],
    "catalogue._importlib_metadata.distributions": [
        "catalogue._importlib_metadata.Distribution.discover"
    ],
    "catalogue._importlib_metadata.Distribution.discover": [
        "catalogue._importlib_metadata.DistributionFinder.Context.__init__",
        "<builtin>.ValueError",
        "catalogue._importlib_metadata.Distribution._discover_resolvers"
    ],
    "catalogue._importlib_metadata.Distribution._discover_resolvers": [
        "<builtin>.getattr",
        "<builtin>.filter"
    ],
    "confection": [
        "re.compile"
    ],
    "srsly": [],
    "srsly._json_api": [],
    "gzip": [],
    "gzip.GzipFile": [
        "<builtin>.property"
    ],
    "srsly.ujson": [],
    "srsly.util": [],
    "srsly._msgpack_api": [],
    "srsly.msgpack": [
        "catalogue.create",
        "catalogue.Registry.register"
    ],
    "srsly.msgpack._version": [],
    "srsly.msgpack.exceptions": [],
    "srsly.msgpack._ext_type": [
        "collections.namedtuple"
    ],
    "srsly.msgpack._msgpack_numpy": [],
    "catalogue.create": [
        "catalogue.check_exists",
        "catalogue.Registry.__init__"
    ],
    "catalogue.check_exists": [],
    "catalogue.Registry.__init__": [],
    "catalogue.Registry.register": [
        "catalogue.Registry.register.do_registration"
    ],
    "catalogue.Registry.register.do_registration": [
        "<builtin>.list",
        "catalogue._set"
    ],
    "catalogue._set": [
        "<builtin>.tuple"
    ],
    "srsly._pickle_api": [],
    "srsly.cloudpickle": [],
    "srsly.cloudpickle.cloudpickle": [
        "srsly.cloudpickle.cloudpickle.f",
        "<builtin>.set",
        "platform.python_implementation",
        "srsly.cloudpickle.cloudpickle._make_cell_set_template_code",
        "weakref.WeakKeyDictionary.__init__",
        "<builtin>.type",
        "weakref.WeakValueDictionary.__init__"
    ],
    "srsly.cloudpickle.compat": [],
    "importlib._bootstrap": [
        "<builtin>.object"
    ],
    "importlib._bootstrap.ModuleSpec": [
        "<builtin>.property"
    ],
    "importlib._bootstrap.BuiltinImporter": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "importlib._bootstrap._requires_builtin"
    ],
    "importlib._bootstrap._requires_builtin": [
        "importlib._bootstrap._wrap"
    ],
    "importlib._bootstrap._wrap": [
        "<builtin>.getattr",
        "<builtin>.setattr",
        "<builtin>.hasattr"
    ],
    "<builtin>.setattr": [],
    "importlib._bootstrap.FrozenImporter": [
        "importlib._bootstrap._requires_frozen",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "importlib._bootstrap._requires_frozen": [
        "importlib._bootstrap._wrap"
    ],
    "srsly.cloudpickle.cloudpickle.f": [],
    "weakref.WeakKeyDictionary.__init__": [
        "<builtin>.set",
        "weakref.WeakKeyDictionary.update"
    ],
    "weakref.WeakKeyDictionary.update": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "platform.python_implementation": [
        "platform._sys_version"
    ],
    "platform._sys_version": [
        "<builtin>.len",
        "<builtin>.repr",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "<map>.get"
    ],
    "srsly.cloudpickle.cloudpickle._make_cell_set_template_code": [],
    "srsly.cloudpickle.cloudpickle._empty_cell_value": [
        "<builtin>.classmethod"
    ],
    "srsly.cloudpickle.cloudpickle_fast": [],
    "srsly.cloudpickle.cloudpickle_fast.CloudPickler": [
        "collections.OrderedDict.values",
        "collections.OrderedDict.__init__",
        "<builtin>.type",
        "collections.ChainMap.__init__",
        "collections.OrderedDict.keys",
        "<map>.copy",
        "collections.OrderedDict.items"
    ],
    "collections.OrderedDict.keys": [],
    "collections.OrderedDict.items": [],
    "collections.ChainMap.__init__": [
        "<builtin>.list"
    ],
    "<map>.copy": [],
    "srsly._yaml_api": [],
    "srsly.ruamel_yaml": [],
    "srsly.ruamel_yaml.main": [
        "srsly.ruamel_yaml.compat.with_metaclass",
        "<builtin>.object"
    ],
    "glob": [
        "<builtin>.getattr",
        "re.compile"
    ],
    "srsly.ruamel_yaml.resolver": [
        "<builtin>.list",
        "srsly.ruamel_yaml.resolver.BaseResolver.add_implicit_resolver_base"
    ],
    "srsly.ruamel_yaml.compat": [
        "srsly.ruamel_yaml.compat.ObjectCounter.__init__",
        "<builtin>.bool",
        "srsly.ruamel_yaml.compat.Nprint.__init__",
        "<builtin>.int"
    ],
    "srsly.ruamel_yaml.compat.ordereddict": [
        "<builtin>.hasattr"
    ],
    "srsly.ruamel_yaml.compat.ObjectCounter.__init__": [],
    "srsly.ruamel_yaml.compat.Nprint.__init__": [],
    "srsly.ruamel_yaml.compat.MutableSliceableSequence": [
        "abc.abstractmethod"
    ],
    "srsly.ruamel_yaml.error": [
        "warnings.simplefilter"
    ],
    "srsly.ruamel_yaml.nodes": [],
    "srsly.ruamel_yaml.util": [],
    "srsly.ruamel_yaml.resolver.BaseResolver": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.resolver.BaseResolver.add_implicit_resolver_base": [
        "<builtin>.dict"
    ],
    "srsly.ruamel_yaml.resolver.VersionedResolver": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.emitter": [],
    "srsly.ruamel_yaml.events": [],
    "srsly.ruamel_yaml.emitter.Emitter": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.representer": [
        "srsly.ruamel_yaml.representer.BaseRepresenter.add_representer",
        "<builtin>.type",
        "srsly.ruamel_yaml.representer.BaseRepresenter.add_multi_representer"
    ],
    "srsly.ruamel_yaml.scalarstring": [],
    "srsly.ruamel_yaml.anchor": [],
    "srsly.ruamel_yaml.scalarstring.ScalarString": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.scalarint": [],
    "srsly.ruamel_yaml.scalarint.ScalarInt": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.scalarfloat": [],
    "srsly.ruamel_yaml.scalarfloat.ScalarFloat": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.scalarbool": [],
    "srsly.ruamel_yaml.scalarbool.ScalarBoolean": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.timestamp": [],
    "srsly.ruamel_yaml.representer.BaseRepresenter": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.representer.SafeRepresenter": [
        "<builtin>.repr"
    ],
    "srsly.ruamel_yaml.representer.BaseRepresenter.add_representer": [
        "<map>.copy"
    ],
    "srsly.ruamel_yaml.representer.BaseRepresenter.add_multi_representer": [
        "<map>.copy"
    ],
    "srsly.ruamel_yaml.comments": [
        "<builtin>.classmethod"
    ],
    "srsly.ruamel_yaml.comments.Comment": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.comments.CommentedBase": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.comments.CommentedMapKeysView": [
        "<builtin>.classmethod"
    ],
    "srsly.ruamel_yaml.comments.CommentedMapItemsView": [
        "<builtin>.classmethod"
    ],
    "srsly.ruamel_yaml.comments.CommentedMap": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.comments.CommentedKeyMap": [
        "<builtin>.classmethod"
    ],
    "srsly.ruamel_yaml.parser": [],
    "srsly.ruamel_yaml.tokens": [],
    "srsly.ruamel_yaml.tokens.Token": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.scanner": [],
    "srsly.ruamel_yaml.scanner.Scanner": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.parser.Parser": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.composer": [],
    "srsly.ruamel_yaml.composer.Composer": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.constructor": [
        "srsly.ruamel_yaml.constructor.BaseConstructor.add_constructor",
        "srsly.ruamel_yaml.constructor.BaseConstructor.add_multi_constructor"
    ],
    "srsly.ruamel_yaml.constructor.BaseConstructor": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.constructor.BaseConstructor.add_constructor": [
        "<map>.copy"
    ],
    "srsly.ruamel_yaml.constructor.BaseConstructor.add_multi_constructor": [
        "<map>.copy"
    ],
    "srsly.ruamel_yaml.serializer": [],
    "srsly.ruamel_yaml.serializer.Serializer": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.loader": [],
    "srsly.ruamel_yaml.reader": [],
    "srsly.ruamel_yaml.reader.Reader": [
        "<str>.encode",
        "<builtin>.property",
        "<builtin>.range",
        "<builtin>.classmethod",
        "<builtin>.map"
    ],
    "srsly.ruamel_yaml.dumper": [],
    "srsly.ruamel_yaml.main.YAML": [
        "<builtin>.property"
    ],
    "srsly.ruamel_yaml.compat.with_metaclass": [
        "srsly.ruamel_yaml.main.YAMLObjectMetaclass.__init__"
    ],
    "srsly.ruamel_yaml.main.YAMLObjectMetaclass.__init__": [
        "<builtin>.super"
    ],
    "srsly.ruamel_yaml.main.YAMLObject": [
        "<builtin>.classmethod"
    ],
    "srsly.about": [],
    "confection.util": [
        "typing.TypeVar.__init__"
    ],
    "confection.util.Generator": [
        "<builtin>.classmethod"
    ],
    "confection.ConfigValidationError": [
        "<builtin>.classmethod"
    ],
    "confection.registry": [
        "<builtin>.classmethod"
    ],
    "thinc.config.registry": [
        "<builtin>.classmethod",
        "catalogue.create"
    ],
    "thinc.backends._cupy_allocators": [],
    "thinc.backends._param_server": [],
    "thinc.backends._param_server.ParamServer": [
        "<builtin>.property"
    ],
    "thinc.backends.cupy_ops": [],
    "thinc.backends._custom_kernels": [
        "thinc.backends._custom_kernels.LazyKernel.__init__"
    ],
    "thinc.backends._custom_kernels.LazyKernel.__init__": [],
    "thinc.backends.ops": [
        "typing.TypeVar.__init__"
    ],
    "thinc.backends.ops.Ops": [
        "typing.overload"
    ],
    "thinc.backends.mps_ops": [],
    "thinc.initializers": [],
    "thinc.layers": [],
    "thinc.layers.add": [
        "typing.TypeVar.__init__"
    ],
    "thinc.model": [
        "functools.singledispatch",
        "typing.TypeVar.__init__"
    ],
    "thinc.optimizers": [],
    "thinc.shims": [],
    "thinc.shims.mxnet": [],
    "thinc.shims.shim": [],
    "thinc.shims.shim.Shim": [
        "contextlib.contextmanager"
    ],
    "thinc.shims.pytorch": [],
    "thinc.shims.pytorch_grad_scaler": [],
    "thinc.shims.pytorch_grad_scaler.PyTorchGradScaler": [
        "<builtin>.property"
    ],
    "thinc.shims.pytorch.PyTorchShim": [
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "thinc.shims.tensorflow": [
        "catalogue.create"
    ],
    "thinc.shims.tensorflow.TensorFlowShim": [
        "contextlib.contextmanager"
    ],
    "thinc.shims.torchscript": [],
    "thinc.model.Model": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "functools.singledispatch": [
        "<builtin>.getattr",
        "functools.update_wrapper",
        "weakref.WeakKeyDictionary.__init__"
    ],
    "thinc.layers.array_getitem": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.bidirectional": [],
    "thinc.layers.cauchysimilarity": [],
    "thinc.layers.chain": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.clipped_linear": [],
    "thinc.layers.dropout": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.layernorm": [],
    "thinc.layers.clone": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.noop": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.concatenate": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.dish": [],
    "thinc.layers.embed": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.expand_window": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.gelu": [],
    "thinc.layers.hard_swish": [],
    "thinc.layers.hard_swish_mobilenet": [],
    "thinc.layers.hashembed": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.linear": [],
    "thinc.layers.list2array": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.list2padded": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.list2ragged": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.logistic": [],
    "thinc.layers.lstm": [],
    "thinc.layers.map_list": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.maxout": [],
    "thinc.layers.mish": [],
    "thinc.layers.multisoftmax": [],
    "thinc.layers.mxnetwrapper": [],
    "thinc.layers.padded2list": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.parametricattention": [],
    "thinc.layers.parametricattention_v2": [],
    "thinc.layers.pytorchwrapper": [],
    "thinc.layers.ragged2list": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.reduce_first": [],
    "thinc.layers.reduce_last": [],
    "thinc.layers.reduce_max": [],
    "thinc.layers.reduce_mean": [],
    "thinc.layers.reduce_sum": [],
    "thinc.layers.relu": [],
    "thinc.layers.remap_ids": [],
    "thinc.layers.residual": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.resizable": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.siamese": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.sigmoid": [],
    "thinc.layers.sigmoid_activation": [],
    "thinc.layers.softmax": [],
    "thinc.layers.softmax_activation": [],
    "thinc.layers.strings2arrays": [],
    "murmurhash": [],
    "murmurhash.about": [],
    "thinc.layers.swish": [],
    "thinc.layers.tensorflowwrapper": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.torchscriptwrapper": [],
    "thinc.layers.tuplify": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.uniqued": [],
    "thinc.layers.with_array": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_array2d": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_cpu": [],
    "thinc.layers.with_debug": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_flatten": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_flatten_v2": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_getitem": [],
    "thinc.layers.with_list": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_nvtx_range": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_padded": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_ragged": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_reshape": [
        "typing.TypeVar.__init__"
    ],
    "thinc.layers.with_signpost_interval": [
        "typing.TypeVar.__init__"
    ],
    "thinc.loss": [
        "typing.TypeVar.__init__"
    ],
    "thinc.loss.Loss": [
        "abc.abstractmethod"
    ],
    "thinc.schedules": [],
    "thinc.util.ArrayInfo": [
        "<builtin>.classmethod"
    ],
    "spacy.errors.setup_default_warnings": [
        "spacy.errors.filter_warning"
    ],
    "spacy.errors.filter_warning": [
        "spacy.errors._escape_warning_msg",
        "warnings.filterwarnings"
    ],
    "spacy.errors._escape_warning_msg": [],
    "spacy.pipeline": [],
    "spacy.pipeline.attributeruler": [
        "spacy.language.Language.factory.add_factory",
        "catalogue.Registry.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.language": [
        "catalogue.Registry.__init__",
        "spacy.util.load_config",
        "typing.TypeVar.__init__"
    ],
    "timeit": [],
    "spacy.about": [],
    "spacy.ty": [],
    "spacy.training": [],
    "spacy.training.alignment": [],
    "spacy.training.alignment.Alignment": [
        "<builtin>.classmethod"
    ],
    "spacy.training.augment": [
        "catalogue.Registry.__init__"
    ],
    "spacy.util": [
        "logging.Handler.setFormatter",
        "spacy.util.SimpleFrozenDict.__init__",
        "logging.Formatter.__init__",
        "catalogue.Registry.__init__",
        "logging.StreamHandler.__init__",
        "numpy._core.getlimits.iinfo.__init__",
        "contextlib.contextmanager",
        "logging.getLogger",
        "spacy.util.SimpleFrozenList.__init__"
    ],
    "pkgutil": [
        "functools.singledispatch",
        "collections.namedtuple"
    ],
    "shlex": [
        "re.compile"
    ],
    "shlex.shlex": [
        "<builtin>.property"
    ],
    "langcodes": [],
    "langcodes.tag_parser": [
        "<builtin>.range"
    ],
    "langcodes.language_distance": [],
    "langcodes.data_dicts": [
        "re.compile"
    ],
    "langcodes.Language": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "packaging.requirements": [],
    "packaging.specifiers": [
        "re.compile",
        "typing.TypeVar.__init__"
    ],
    "packaging.specifiers.BaseSpecifier": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "packaging.specifiers.Specifier": [
        "<builtin>.property",
        "re.compile"
    ],
    "packaging.specifiers.SpecifierSet": [
        "<builtin>.property"
    ],
    "spacy.tokens": [],
    "spacy.tokens._serialize": [
        "copyreg.pickle"
    ],
    "spacy.tokens._dict_proxies": [],
    "spacy.tokens._dict_proxies.SpanGroups": [
        "srsly._msgpack_api.msgpack_dumps",
        "<builtin>.tuple"
    ],
    "srsly._msgpack_api.msgpack_dumps": [
        "srsly.msgpack.packb"
    ],
    "srsly.msgpack.packb": [
        "srsly.msgpack.Packer.__init__"
    ],
    "srsly.msgpack.Packer.__init__": [
        "<map>.values",
        "catalogue.Registry.get_all",
        "<builtin>.super"
    ],
    "catalogue.Registry.get_all": [
        "<builtin>.range",
        "<builtin>.len",
        "<builtin>.all",
        "<map>.update"
    ],
    "<map>.values": [],
    "spacy.tokens._serialize.DocBin": [
        "spacy.util.SimpleFrozenList.__init__"
    ],
    "spacy.util.SimpleFrozenList.__init__": [
        "<builtin>.super"
    ],
    "logging.getLogger": [
        "<builtin>.isinstance"
    ],
    "logging.Handler.setFormatter": [],
    "spacy.util.registry": [
        "<builtin>.classmethod",
        "catalogue.create"
    ],
    "spacy.util.SimpleFrozenDict.__init__": [
        "<builtin>.super"
    ],
    "spacy.training.iob_utils": [],
    "spacy.training.batchers": [
        "catalogue.Registry.__init__",
        "typing.TypeVar.__init__"
    ],
    "spacy.training.callbacks": [
        "catalogue.Registry.__init__"
    ],
    "spacy.training.corpus": [],
    "spacy.training.loggers": [
        "catalogue.Registry.__init__"
    ],
    "tqdm": [],
    "tqdm._monitor": [],
    "tqdm._tqdm_pandas": [],
    "tqdm.cli": [
        "logging.getLogger",
        "re.compile"
    ],
    "tqdm.std": [],
    "tqdm.utils": [
        "<builtin>.any",
        "re.compile"
    ],
    "tqdm.utils.DisableOnWriteError": [
        "<builtin>.staticmethod"
    ],
    "tqdm.std.TqdmDefaultWriteLock": [
        "<builtin>.classmethod",
        "tqdm.std.TRLock"
    ],
    "tqdm.std.TRLock": [
        "threading.RLock"
    ],
    "tqdm.std.Bar": [
        "<builtin>.property",
        "<builtin>.map",
        "<builtin>.range"
    ],
    "tqdm.std.tqdm": [
        "tqdm.utils.envwrap.wrap",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "contextlib.contextmanager",
        "_weakrefset.WeakSet.__init__",
        "tqdm.utils.envwrap",
        "<builtin>.classmethod"
    ],
    "tqdm.utils.envwrap": [
        "<builtin>.len"
    ],
    "tqdm.utils.envwrap.wrap": [
        "<builtin>.getattr",
        "inspect.signature",
        "<builtin>.type"
    ],
    "tqdm.version": [],
    "tqdm._dist_ver": [],
    "tqdm.gui": [],
    "spacy.git_info": [],
    "spacy.lang.punctuation": [
        "<builtin>.list"
    ],
    "spacy.lang.char_classes": [
        "spacy.lang.char_classes.<lambda1>",
        "spacy.lang.char_classes.<lambda2>",
        "spacy.lang.char_classes.<lambda3>"
    ],
    "spacy.lang.char_classes.<lambda3>": [
        "<str>.strip"
    ],
    "spacy.lang.char_classes.<lambda2>": [
        "<str>.strip"
    ],
    "spacy.lang.char_classes.<lambda1>": [
        "<builtin>.list",
        "<str>.strip"
    ],
    "spacy.lang.tokenizer_exceptions": [
        "<builtin>.set",
        "<str>.strip",
        "re.compile"
    ],
    "spacy.lookups": [
        "<builtin>.object"
    ],
    "spacy.lookups.Table": [
        "<builtin>.classmethod"
    ],
    "spacy.lookups.Lookups": [
        "<builtin>.property",
        "spacy.util.SimpleFrozenDict.__init__"
    ],
    "spacy.pipe_analysis": [],
    "spacy.schemas": [
        "typing.TypeVar.__init__"
    ],
    "spacy.schemas.TokenPatternString": [
        "pydantic.fields.Field",
        "pydantic.deprecated.class_validators.validator.dec",
        "pydantic.deprecated.class_validators.validator"
    ],
    "pydantic.fields.Field": [
        "warnings.warn",
        "<builtin>.isinstance",
        "pydantic.fields.FieldInfo.from_field",
        "pydantic.errors.PydanticErrorMixin.__init__",
        "<builtin>.TypeError"
    ],
    "pydantic.errors.PydanticErrorMixin.__init__": [],
    "pydantic.fields.FieldInfo.from_field": [
        "<builtin>.TypeError",
        "pydantic.fields.FieldInfo.__init__"
    ],
    "pydantic.fields.FieldInfo.__init__": [
        "<builtin>.getattr",
        "pydantic.fields.FieldInfo._collect_metadata",
        "pydantic.fields.FieldInfo._extract_metadata",
        "<builtin>.any",
        "<builtin>.TypeError",
        "<map>.get"
    ],
    "pydantic.fields.FieldInfo._extract_metadata": [
        "<builtin>.list",
        "pydantic._internal._typing_extra.is_annotated",
        "typing_extensions.get_args"
    ],
    "pydantic._internal._typing_extra.is_annotated": [
        "typing_extensions.get_origin"
    ],
    "pydantic.fields.FieldInfo._collect_metadata": [
        "<builtin>.list",
        "pydantic._internal._fields.pydantic_general_metadata"
    ],
    "pydantic._internal._fields.pydantic_general_metadata": [
        "pydantic._internal._fields._general_metadata_cls._PydanticGeneralMetadata.__init__",
        "pydantic._internal._fields._general_metadata_cls"
    ],
    "pydantic._internal._fields._general_metadata_cls": [],
    "pydantic._internal._fields._general_metadata_cls._PydanticGeneralMetadata.__init__": [],
    "pydantic.deprecated.class_validators.validator": [
        "<builtin>.all",
        "pydantic.errors.PydanticErrorMixin.__init__",
        "warnings.warn",
        "<builtin>.isinstance"
    ],
    "pydantic.deprecated.class_validators.validator.dec": [
        "pydantic.errors.PydanticErrorMixin.__init__",
        "pydantic._internal._decorators.ensure_classmethod_based_on_signature",
        "pydantic._internal._decorators.is_instance_method_from_sig"
    ],
    "pydantic._internal._decorators.is_instance_method_from_sig": [
        "<builtin>.next",
        "<builtin>.iter",
        "inspect.signature",
        "pydantic._internal._decorators.unwrap_wrapped_function"
    ],
    "pydantic._internal._decorators.unwrap_wrapped_function": [
        "<builtin>.isinstance"
    ],
    "pydantic._internal._decorators.ensure_classmethod_based_on_signature": [
        "<builtin>.classmethod",
        "pydantic._internal._decorators._is_classmethod_from_sig",
        "<builtin>.isinstance",
        "pydantic._internal._decorators.unwrap_wrapped_function"
    ],
    "pydantic._internal._decorators._is_classmethod_from_sig": [
        "<builtin>.next",
        "<builtin>.iter",
        "inspect.signature",
        "pydantic._internal._decorators.unwrap_wrapped_function"
    ],
    "spacy.schemas.TokenPatternNumber": [
        "pydantic.fields.Field",
        "pydantic.deprecated.class_validators.validator.dec",
        "pydantic.deprecated.class_validators.validator"
    ],
    "spacy.schemas.TokenPatternOperatorMinMax": [
        "re.compile"
    ],
    "spacy.schemas.TokenPattern": [
        "pydantic.fields.Field",
        "pydantic.deprecated.class_validators.validator.dec",
        "pydantic.deprecated.class_validators.validator"
    ],
    "spacy.schemas.TokenPatternSchema": [
        "pydantic.fields.Field"
    ],
    "spacy.schemas.ModelMetaSchema": [
        "pydantic.fields.Field"
    ],
    "spacy.schemas.ConfigSchemaTraining": [
        "pydantic.fields.Field"
    ],
    "spacy.schemas.ConfigSchemaNlp": [
        "pydantic.fields.Field"
    ],
    "spacy.schemas.ConfigSchemaPretrain": [
        "pydantic.fields.Field"
    ],
    "spacy.schemas.ConfigSchemaInit": [
        "pydantic.fields.Field"
    ],
    "spacy.schemas.DocJSONSchema": [
        "pydantic.fields.Field"
    ],
    "spacy.scorer": [
        "<builtin>.frozenset"
    ],
    "spacy.scorer.PRFScore": [
        "<builtin>.property"
    ],
    "spacy.scorer.ROCAUCScore": [
        "<builtin>.property"
    ],
    "spacy.scorer.Scorer": [
        "<builtin>.staticmethod"
    ],
    "spacy.tokens.underscore": [],
    "spacy.tokens.underscore.Underscore": [
        "<builtin>.classmethod"
    ],
    "spacy.training.initialize": [],
    "tarfile": [],
    "tarfile.TarInfo": [
        "<builtin>.classmethod",
        "<builtin>.dict",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "tarfile.TarFile": [
        "<builtin>.classmethod"
    ],
    "spacy.training.pretrain": [],
    "spacy.util.load_config": [
        "<builtin>.IOError",
        "spacy.util.ensure_path",
        "confection.Config.__init__",
        "pathlib.Path.is_file",
        "<builtin>.str"
    ],
    "spacy.util.ensure_path": [
        "<builtin>.isinstance"
    ],
    "confection.Config.__init__": [
        "confection.Config._sort",
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "confection.Config._sort": [
        "<builtin>.sorted",
        "<builtin>.enumerate",
        "<builtin>.dict",
        "<map>.items"
    ],
    "pathlib.Path.is_file": [
        "pathlib._ignore_error",
        "stat.S_ISREG",
        "pathlib.Path.stat"
    ],
    "pathlib.Path.stat": [],
    "pathlib._ignore_error": [
        "<builtin>.getattr"
    ],
    "<builtin>.IOError": [],
    "spacy.language.BaseDefaults": [
        "confection.Config.__init__",
        "<builtin>.set"
    ],
    "spacy.language.Language": [
        "spacy.util.SimpleFrozenDict.__init__",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "contextlib.contextmanager",
        "typing.overload",
        "<builtin>.classmethod"
    ],
    "spacy.language.FactoryMeta": [
        "<builtin>.tuple"
    ],
    "spacy.matcher": [],
    "spacy.language.Language.factory": [
        "spacy.language.Language.factory.add_factory",
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "spacy.language.Language.factory.add_factory": [
        "spacy.util.get_arg_names",
        "spacy.util.SimpleFrozenDict.__init__",
        "spacy.pipe_analysis.validate_attrs",
        "spacy.language.Language.set_factory_meta",
        "catalogue.Registry.get_all",
        "<builtin>.list",
        "<map>.keys",
        "catalogue.Registry.get",
        "spacy.language.Language.get_factory_name",
        "<builtin>.ValueError",
        "spacy.util.is_same_func",
        "catalogue.Registry.register"
    ],
    "spacy.language.Language.get_factory_name": [],
    "catalogue.Registry.get": [
        "catalogue.check_exists",
        "<builtin>.sorted",
        "catalogue.Registry.get_all",
        "<builtin>.list",
        "<map>.keys",
        "catalogue._get",
        "catalogue.Registry.get_entry_point"
    ],
    "catalogue.Registry.get_entry_point": [
        "catalogue.Registry._get_entry_points"
    ],
    "catalogue.Registry._get_entry_points": [
        "<builtin>.hasattr"
    ],
    "catalogue._get": [
        "<builtin>.ValueError",
        "<builtin>.tuple",
        "<builtin>.all",
        "<builtin>.isinstance"
    ],
    "spacy.util.is_same_func": [
        "<builtin>.callable",
        "inspect.getfile",
        "inspect.getsourcelines",
        "<builtin>.hasattr"
    ],
    "inspect.getfile": [
        "<builtin>.getattr",
        "inspect.istraceback",
        "inspect.isframe",
        "<builtin>.OSError",
        "<builtin>.hasattr",
        "inspect.iscode",
        "inspect.isclass",
        "<builtin>.type",
        "inspect.ismethod",
        "inspect.isfunction",
        "<builtin>.TypeError",
        "inspect.ismodule"
    ],
    "<builtin>.OSError": [],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "inspect.getsourcelines": [
        "inspect.findsource",
        "inspect.unwrap",
        "inspect.istraceback",
        "inspect.isframe",
        "inspect.ismodule",
        "inspect.getblock"
    ],
    "inspect.findsource": [
        "inspect.istraceback",
        "inspect.isframe",
        "<builtin>.OSError",
        "linecache.checkcache",
        "inspect.iscode",
        "<builtin>.hasattr",
        "inspect.isclass",
        "inspect.getsourcefile",
        "ast.NodeVisitor.visit",
        "re.compile",
        "linecache.getlines",
        "ast.parse",
        "inspect._ClassFinder.__init__",
        "inspect.ismethod",
        "inspect.isfunction",
        "inspect.getfile",
        "inspect.ismodule",
        "inspect.getmodule"
    ],
    "inspect.getsourcefile": [
        "<builtin>.getattr",
        "posixpath.splitext",
        "genericpath.exists",
        "ntpath.splitext",
        "<builtin>.any",
        "inspect.getfile",
        "inspect.getmodule"
    ],
    "inspect.getmodule": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "inspect.getabsfile",
        "posixpath.realpath",
        "ntpath.realpath",
        "inspect.ismodule",
        "<map>.get"
    ],
    "inspect.getabsfile": [
        "inspect.getsourcefile",
        "ntpath.normcase",
        "posixpath.normcase",
        "inspect.getfile",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "ntpath.realpath": [],
    "inspect._ClassFinder.__init__": [],
    "inspect.getblock": [
        "<builtin>.iter",
        "tokenize.generate_tokens",
        "inspect.BlockFinder.tokeneater",
        "inspect.BlockFinder.__init__"
    ],
    "inspect.BlockFinder.__init__": [],
    "tokenize.generate_tokens": [
        "tokenize._tokenize"
    ],
    "inspect.BlockFinder.tokeneater": [],
    "spacy.util.get_arg_names": [
        "<builtin>.list",
        "inspect.getfullargspec"
    ],
    "inspect.getfullargspec": [
        "append",
        "<builtin>.TypeError",
        "inspect._signature_from_callable"
    ],
    "spacy.pipe_analysis.validate_attrs": [
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "spacy.util.dot_to_dict"
    ],
    "spacy.util.dot_to_dict": [
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "spacy.language.Language.set_factory_meta": [
        "spacy.language.Language.get_factory_name"
    ],
    "spacy.pipeline.attributeruler.AttributeRuler": [
        "<builtin>.property",
        "spacy.util.SimpleFrozenList.__init__"
    ],
    "spacy.pipeline.edit_tree_lemmatizer": [
        "spacy.language.Language.factory.add_factory",
        "confection.Config.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.pipeline._edit_tree_internals.schemas": [],
    "spacy.pipeline._edit_tree_internals.schemas.MatchNodeSchema": [
        "pydantic.fields.Field"
    ],
    "spacy.pipeline._edit_tree_internals.schemas.SubstNodeSchema": [
        "pydantic.fields.Field"
    ],
    "spacy.pipeline.lemmatizer": [
        "spacy.language.Language.factory.add_factory",
        "catalogue.Registry.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.pipeline.lemmatizer.Lemmatizer": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "spacy.pipeline.edit_tree_lemmatizer.EditTreeLemmatizer": [
        "<builtin>.property",
        "<builtin>.tuple"
    ],
    "spacy.pipeline.entity_linker": [
        "spacy.language.Language.factory.add_factory",
        "confection.Config.__init__",
        "catalogue.Registry.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.kb": [],
    "spacy.pipeline.legacy.entity_linker": [],
    "spacy.ml": [],
    "spacy.ml.callbacks": [
        "catalogue.Registry.__init__"
    ],
    "spacy.ml.models": [],
    "spacy.ml.models.entity_linker": [
        "catalogue.Registry.__init__"
    ],
    "spacy.ml.extract_spans": [],
    "spacy.ml.models.multi_task": [
        "catalogue.Registry.__init__"
    ],
    "spacy.ml.models.parser": [
        "catalogue.Registry.__init__"
    ],
    "spacy.ml._precomputable_affine": [],
    "spacy.ml.tb_framework": [
        "<builtin>.set"
    ],
    "spacy.ml.models.span_finder": [
        "catalogue.Registry.__init__"
    ],
    "spacy.ml.models.spancat": [
        "catalogue.Registry.__init__"
    ],
    "spacy.ml.models.tagger": [
        "catalogue.Registry.__init__"
    ],
    "spacy.ml.models.textcat": [
        "catalogue.Registry.__init__"
    ],
    "spacy.ml.extract_ngrams": [],
    "spacy.ml.staticvectors": [],
    "spacy.ml.models.tok2vec": [
        "catalogue.Registry.__init__"
    ],
    "spacy.ml._character_embed": [],
    "spacy.pipeline.tok2vec": [
        "spacy.language.Language.factory.add_factory",
        "confection.Config.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.pipeline.tok2vec.Tok2Vec": [
        "<builtin>.property"
    ],
    "spacy.pipeline.tok2vec.Tok2VecListener": [
        "<builtin>.classmethod"
    ],
    "spacy.ml.featureextractor": [],
    "spacy.pipeline.entityruler": [
        "spacy.language.Language.factory.add_factory",
        "catalogue.Registry.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.pipeline.entityruler.EntityRuler": [
        "<builtin>.property"
    ],
    "spacy.pipeline.functions": [
        "spacy.language.Language.component",
        "spacy.language.Language.factory.add_factory",
        "spacy.language.Language.component.add_component",
        "spacy.language.Language.factory"
    ],
    "spacy.language.Language.component": [
        "spacy.language.Language.component.add_component",
        "spacy.util.get_object_name",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "spacy.util.get_object_name": [
        "<builtin>.repr",
        "<builtin>.hasattr"
    ],
    "spacy.language.Language.component.add_component": [
        "spacy.language.Language.factory",
        "catalogue.Registry.get",
        "spacy.language.Language.get_factory_name",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "spacy.util.is_same_func"
    ],
    "spacy.pipeline.span_finder": [
        "spacy.language.Language.factory.add_factory",
        "confection.Config.__init__",
        "catalogue.Registry.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.pipeline.spancat": [
        "spacy.language.Language.factory.add_factory",
        "confection.Config.__init__",
        "catalogue.Registry.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.pipeline.spancat.SpanCategorizer": [
        "<builtin>.property"
    ],
    "spacy.pipeline.span_ruler": [
        "spacy.language.Language.factory.add_factory",
        "catalogue.Registry.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.pipeline.span_ruler.SpanRuler": [
        "<builtin>.property"
    ],
    "spacy.pipeline.textcat": [
        "spacy.language.Language.factory.add_factory",
        "confection.Config.__init__",
        "catalogue.Registry.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.pipeline.textcat.TextCategorizer": [
        "<builtin>.property"
    ],
    "spacy.pipeline.textcat_multilabel": [
        "spacy.language.Language.factory.add_factory",
        "confection.Config.__init__",
        "catalogue.Registry.__init__",
        "spacy.language.Language.factory"
    ],
    "spacy.pipeline.textcat_multilabel.MultiLabel_TextCategorizer": [
        "<builtin>.property"
    ],
    "spacy.cli.info": [
        "typer.params.Argument",
        "typer.main.Typer.command",
        "typer.main.Typer.command.decorator",
        "typer.params.Option"
    ],
    "spacy.cli._util": [
        "typer.main.Typer.add_typer",
        "typer.main.Typer.__init__",
        "typing.overload",
        "contextlib.contextmanager"
    ],
    "typer": [],
    "click.exceptions": [],
    "gettext": [
        "ntpath.join",
        "<builtin>.enumerate",
        "re.compile",
        "posixpath.join"
    ],
    "click._compat": [
        "weakref.WeakKeyDictionary.__init__",
        "click._compat._make_cached_stream_func",
        "re.compile"
    ],
    "click._compat._AtomicFile": [
        "<builtin>.property"
    ],
    "click._winconsole": [
        "ctypes.WINFUNCTYPE"
    ],
    "ctypes.wintypes": [],
    "ctypes.WINFUNCTYPE": [
        "<builtin>.ValueError"
    ],
    "click._winconsole._WindowsConsoleWriter": [
        "<builtin>.staticmethod"
    ],
    "click._winconsole.ConsoleStream": [
        "<builtin>.property"
    ],
    "click._compat._make_cached_stream_func": [
        "weakref.WeakKeyDictionary.__init__"
    ],
    "click.utils": [
        "typing.TypeVar.__init__",
        "typing_extensions.ParamSpec.__init__"
    ],
    "click.globals": [
        "typing.overload"
    ],
    "click.core": [
        "contextlib.contextmanager",
        "typing.TypeVar.__init__"
    ],
    "click.types": [],
    "click.shell_completion": [
        "typing.TypeVar.__init__"
    ],
    "click.parser": [
        "typing.TypeVar.__init__",
        "<builtin>.object"
    ],
    "click.parser.Option": [
        "<builtin>.property"
    ],
    "click.shell_completion.ShellComplete": [
        "<builtin>.property"
    ],
    "click.shell_completion.BashComplete": [
        "<builtin>.staticmethod"
    ],
    "click.types.CompositeParamType": [
        "<builtin>.property"
    ],
    "click.types.Tuple": [
        "<builtin>.property"
    ],
    "click.formatting": [],
    "click.formatting.HelpFormatter": [
        "contextlib.contextmanager"
    ],
    "click.termui": [
        "typing.TypeVar.__init__"
    ],
    "click._termui_impl": [
        "contextlib.contextmanager",
        "typing.TypeVar.__init__"
    ],
    "click._termui_impl.ProgressBar": [
        "<builtin>.property"
    ],
    "tty": [],
    "click.core.Context": [
        "typing.overload",
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "click.core.BaseCommand": [
        "typing.overload"
    ],
    "click.core.Group": [
        "typing.overload"
    ],
    "click.core.Parameter": [
        "typing.overload",
        "<builtin>.property"
    ],
    "click.core.Option": [
        "typing.overload"
    ],
    "click.core.Argument": [
        "<builtin>.property"
    ],
    "typer.colors": [],
    "typer.main": [
        "typer.rich_utils._get_rich_console"
    ],
    "click": [],
    "click.decorators": [
        "typing.overload",
        "typing.TypeVar.__init__",
        "typing_extensions.ParamSpec.__init__"
    ],
    "typer._typing": [
        "typing.NewType.__init__"
    ],
    "typer.completion": [
        "typer.params.Option"
    ],
    "typer._completion_classes": [],
    "typer._completion_shared": [
        "re.compile"
    ],
    "shellingham": [],
    "shellingham._core": [],
    "typer.models": [
        "typing.TypeVar.__init__",
        "<builtin>.type"
    ],
    "typer.core": [],
    "rich": [
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "rich._extension": [],
    "rich.console": [
        "<map>.items"
    ],
    "getpass": [],
    "html": [
        "re.compile"
    ],
    "html.entities": [
        "<builtin>.chr",
        "<map>.items"
    ],
    "rich._null_file": [],
    "rich.errors": [],
    "rich.themes": [
        "rich.theme.Theme.__init__"
    ],
    "rich.default_styles": [
        "rich.style.Style.__init__",
        "rich.style.Style.null"
    ],
    "rich.style": [
        "rich.style.Style.__init__"
    ],
    "rich.color": [
        "re.compile"
    ],
    "rich._palettes": [
        "rich.palette.Palette.__init__"
    ],
    "rich.palette": [],
    "rich.color_triplet": [],
    "rich.color_triplet.ColorTriplet": [
        "<builtin>.property"
    ],
    "rich.table": [],
    "rich.box": [
        "rich.box.Box.__init__"
    ],
    "rich._loop": [
        "typing.TypeVar.__init__"
    ],
    "rich.box.Box.__init__": [
        "<builtin>.iter",
        "<str>.splitlines"
    ],
    "<str>.splitlines": [],
    "rich._pick": [],
    "rich._ratio": [],
    "fractions": [
        "re.compile"
    ],
    "fractions.Fraction": [
        "fractions.Fraction._operator_fallbacks",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "fractions.Fraction._operator_fallbacks": [],
    "rich.align": [],
    "rich.constrain": [],
    "rich.jupyter": [],
    "rich.segment": [
        "logging.getLogger"
    ],
    "rich.cells": [
        "functools.lru_cache.decorating_function",
        "<builtin>.frozenset",
        "functools.lru_cache",
        "<builtin>.range",
        "<builtin>.map"
    ],
    "rich._cell_widths": [],
    "rich.repr": [
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "rich.segment.Segment": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "<builtin>.classmethod",
        "functools.lru_cache"
    ],
    "rich.terminal_theme": [
        "rich.terminal_theme.TerminalTheme.__init__"
    ],
    "rich.terminal_theme.TerminalTheme.__init__": [
        "rich.palette.Palette.__init__"
    ],
    "rich.palette.Palette.__init__": [],
    "rich.measure": [],
    "rich.protocol": [],
    "rich.measure.Measurement": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.align.Align": [
        "<builtin>.classmethod"
    ],
    "rich.padding": [],
    "rich.padding.Padding": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "rich.text": [
        "re.compile"
    ],
    "rich._wrap": [
        "re.compile"
    ],
    "rich.containers": [
        "typing.TypeVar.__init__"
    ],
    "rich.containers.Lines": [
        "typing.overload"
    ],
    "rich.control": [],
    "rich.control.Control": [
        "<builtin>.classmethod"
    ],
    "rich.emoji": [],
    "rich._emoji_codes": [],
    "rich._emoji_replace": [
        "re.compile"
    ],
    "rich.emoji.Emoji": [
        "<builtin>.classmethod"
    ],
    "rich.text.Text": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.table.Column": [
        "dataclasses.field",
        "<builtin>.property"
    ],
    "rich.table.Table": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.palette.Palette": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "rich.color.Color": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "rich.style.Style": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache",
        "rich.style._Bit.__init__",
        "<builtin>.classmethod"
    ],
    "rich.style._Bit.__init__": [],
    "rich.style.Style.__init__": [
        "rich.style.Style.__init__._make_color",
        "<builtin>.hash",
        "<builtin>.sum",
        "random.Random.randint"
    ],
    "rich.style.Style.__init__._make_color": [
        "rich.color.Color.parse",
        "<builtin>.isinstance"
    ],
    "rich.color.Color.parse": [
        "<builtin>.all",
        "<builtin>.len",
        "<map>.get",
        "<builtin>.int"
    ],
    "<builtin>.sum": [],
    "random.Random.randint": [
        "random.Random.randrange"
    ],
    "random.Random.randrange": [
        "<builtin>.TypeError",
        "warnings.warn",
        "<builtin>.ValueError",
        "operator.index",
        "random.Random._randbelow_with_getrandbits",
        "<builtin>.int"
    ],
    "operator.index": [
        "<int>.__index__"
    ],
    "<int>.__index__": [],
    "random.Random._randbelow_with_getrandbits": [],
    "<builtin>.hash": [],
    "rich.style.StyleStack": [
        "<builtin>.property"
    ],
    "rich.style.Style.null": [],
    "rich.theme": [],
    "rich.theme.Theme": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.theme.Theme.__init__": [
        "rich.style.Style.parse",
        "<builtin>.isinstance",
        "<map>.items"
    ],
    "rich.style.Style.parse": [
        "rich.style.Style.__init__",
        "<builtin>.next",
        "rich.color.Color.parse",
        "<builtin>.iter",
        "rich.style.Style.null",
        "<map>.get"
    ],
    "rich._export_format": [],
    "rich._fileno": [],
    "rich._log_render": [],
    "rich.highlighter": [],
    "rich.highlighter.Highlighter": [
        "abc.abstractmethod"
    ],
    "rich.highlighter.ReprHighlighter": [
        "rich.highlighter._combine_regex"
    ],
    "rich.highlighter._combine_regex": [],
    "rich.highlighter.JSONHighlighter": [
        "rich.highlighter._combine_regex"
    ],
    "rich.markup": [
        "re.compile"
    ],
    "rich.markup.Tag": [
        "<builtin>.property"
    ],
    "rich.pager": [],
    "rich.pager.Pager": [
        "abc.abstractmethod"
    ],
    "rich.pretty": [
        "<builtin>.tuple",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "attr": [
        "attr._make_getattr"
    ],
    "attr.converters": [],
    "attr._compat": [
        "platform.python_implementation"
    ],
    "attr._make": [
        "attr._make._make_attr_tuple_class",
        "attr._make._default_init_alias_for",
        "attr._make._add_hash",
        "attr._make._add_repr",
        "attr._make._add_eq",
        "<builtin>.object",
        "attr._make.Attribute.__init__",
        "attr.setters.pipe"
    ],
    "attr._config": [],
    "attr.setters": [
        "<builtin>.object"
    ],
    "attr.exceptions": [],
    "attr.setters.pipe": [],
    "attr._make._CacheHashWrapper": [
        "<builtin>.type"
    ],
    "attr._make._make_attr_tuple_class": [
        "append",
        "attr._make._compile_and_eval",
        "<builtin>.enumerate"
    ],
    "attr._make._compile_and_eval": [
        "<builtin>.eval",
        "<builtin>.compile"
    ],
    "attr._make.Attribute": [
        "<builtin>.classmethod"
    ],
    "attr._make._default_init_alias_for": [],
    "attr._make.Attribute.__init__": [
        "<builtin>.dict",
        "attr._make._determine_attrib_eq_order"
    ],
    "attr._make._determine_attrib_eq_order": [
        "attr._make._determine_attrib_eq_order.decide_callable_or_boolean",
        "<builtin>.ValueError",
        "<builtin>.any"
    ],
    "attr._make._determine_attrib_eq_order.decide_callable_or_boolean": [
        "<builtin>.callable"
    ],
    "attr._make._add_repr": [
        "attr._make._make_repr"
    ],
    "attr._make._make_repr": [
        "append",
        "<builtin>.tuple",
        "attr._make._generate_unique_filename",
        "attr._make._make_method"
    ],
    "attr._make._generate_unique_filename": [
        "<builtin>.getattr"
    ],
    "attr._make._make_method": [
        "attr._make._compile_and_eval",
        "<map>.setdefault",
        "<builtin>.len",
        "<str>.splitlines"
    ],
    "attr._make._add_eq": [
        "attr._make._make_eq",
        "attr._make._make_ne"
    ],
    "attr._make._make_eq": [
        "append",
        "attr._make._generate_unique_filename",
        "attr._make._make_method"
    ],
    "attr._make._make_ne": [],
    "attr._make._add_hash": [
        "attr._make._make_hash"
    ],
    "attr._make._make_hash": [
        "append",
        "<builtin>.hash",
        "attr._make._make_method",
        "<builtin>.tuple",
        "attr._make._generate_unique_filename",
        "attr._make._make_hash.append_hash_computation_lines"
    ],
    "attr._make._make_hash.append_hash_computation_lines": [
        "append",
        "extend"
    ],
    "attr._make._CountingAttr": [
        "<builtin>.tuple",
        "attr._make._default_init_alias_for",
        "attr._make.Attribute.__init__"
    ],
    "attr._make.Converter": [
        "<builtin>.staticmethod"
    ],
    "attr._make._AndValidator": [
        "attr._make.attrib"
    ],
    "attr._make.attrib": [
        "<builtin>.callable",
        "attr._make.Factory.__init__",
        "attr._make.and_",
        "<builtin>.ValueError",
        "attr._make.pipe",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "attr._make._CountingAttr.__init__",
        "attr._make._determine_attrib_eq_order",
        "attr.setters.pipe"
    ],
    "attr._make.Factory.__init__": [],
    "attr._make.and_": [],
    "attr._make.pipe": [],
    "attr._make._CountingAttr.__init__": [],
    "attr.filters": [],
    "attr.validators": [
        "contextlib.contextmanager"
    ],
    "attr.validators._InstanceOfValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MatchesReValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._OptionalValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._InValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._DeepIterable": [
        "attr._make.attrib",
        "attr.validators.is_callable",
        "attr.validators.optional"
    ],
    "attr.validators.is_callable": [],
    "attr.validators.optional": [
        "<builtin>.isinstance"
    ],
    "attr.validators._DeepMapping": [
        "attr._make.attrib",
        "attr.validators.is_callable",
        "attr.validators.optional"
    ],
    "attr.validators._NumberValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MaxLengthValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._MinLengthValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._SubclassOfValidator": [
        "attr._make.attrib"
    ],
    "attr.validators._NotValidator": [
        "attr._make.attrib",
        "attr.validators._subclass_of",
        "attr.validators.deep_iterable",
        "attr.converters.default_if_none",
        "attr.validators.instance_of"
    ],
    "attr.converters.default_if_none": [
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "attr._make.Factory.__init__",
        "<builtin>.isinstance"
    ],
    "attr.validators._subclass_of": [],
    "attr.validators.instance_of": [],
    "attr.validators.deep_iterable": [
        "attr._make.and_",
        "<builtin>.isinstance"
    ],
    "attr.validators._OrValidator": [
        "attr._make.attrib"
    ],
    "attr._cmp": [],
    "attr._funcs": [],
    "attr._next_gen": [],
    "attr._version_info": [],
    "attr._version_info.VersionInfo": [
        "<builtin>.classmethod",
        "attr._make.attrib"
    ],
    "attr._make_getattr": [],
    "rich.abc": [],
    "rich.abc.RichRenderable": [
        "<builtin>.classmethod"
    ],
    "rich.pretty._Line": [
        "<builtin>.property"
    ],
    "rich.region": [],
    "rich.scope": [],
    "rich.panel": [],
    "rich.panel.Panel": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.screen": [],
    "rich.styled": [],
    "rich._windows": [
        "<builtin>.ImportError",
        "ctypes.LibraryLoader.__init__"
    ],
    "rich._win32_console": [
        "<builtin>.ImportError",
        "typing.cast",
        "ctypes.LibraryLoader.__init__"
    ],
    "rich._win32_console.WindowsCoordinates": [
        "<builtin>.classmethod"
    ],
    "typing.cast": [],
    "rich._win32_console.LegacyWindowsTerm": [
        "<builtin>.property"
    ],
    "rich.live": [],
    "rich.file_proxy": [],
    "rich.ansi": [
        "<builtin>.print",
        "pty.spawn",
        "rich.ansi.AnsiDecoder.decode",
        "re.compile",
        "rich.ansi.AnsiDecoder.__init__",
        "rich.console.Console.__init__"
    ],
    "pty": [],
    "rich.ansi.AnsiDecoder.__init__": [
        "rich.style.Style.null"
    ],
    "pty.spawn": [
        "pty.fork",
        "<builtin>.type",
        "tty.setraw",
        "pty._copy",
        "os.execlp"
    ],
    "pty.fork": [
        "pty.openpty"
    ],
    "pty.openpty": [
        "pty.slave_open",
        "pty._open_terminal"
    ],
    "pty._open_terminal": [
        "<builtin>.OSError"
    ],
    "pty.slave_open": [],
    "os.execlp": [
        "os.execvp"
    ],
    "os.execvp": [
        "os._execvpe"
    ],
    "os._execvpe": [
        "ntpath.dirname",
        "posixpath.dirname",
        "os.get_exec_path",
        "posixpath.join",
        "ntpath.join",
        "<builtin>.map"
    ],
    "tty.setraw": [],
    "pty._copy": [
        "pty._writen",
        "remove",
        "pty._read"
    ],
    "pty._read": [],
    "pty._writen": [],
    "rich.console.Console.__init__": [
        "threading.RLock",
        "rich.console.detect_legacy_windows",
        "rich.console._is_jupyter",
        "rich.console.Console._detect_color_system",
        "rich.theme.ThemeStack.__init__",
        "rich._log_render.LogRender.__init__",
        "<builtin>.int"
    ],
    "rich.ansi.AnsiDecoder.decode": [
        "rich.ansi.AnsiDecoder.decode_line"
    ],
    "rich.ansi.AnsiDecoder.decode_line": [
        "rich.style.Style.parse",
        "rich.text.Text.__init__",
        "<builtin>.min",
        "rich.ansi._ansi_tokenize",
        "<builtin>.iter",
        "contextlib.suppress.__init__",
        "rich.text.Text.append",
        "rich.style.Style.update_link",
        "rich.style.Style.null",
        "<builtin>.int"
    ],
    "rich.text.Text.__init__": [
        "rich.control.strip_control_codes",
        "<builtin>.len"
    ],
    "rich.control.strip_control_codes": [
        "<str>.translate"
    ],
    "rich.ansi._ansi_tokenize": [
        "<builtin>.len"
    ],
    "contextlib.suppress.__init__": [],
    "rich.style.Style.update_link": [
        "random.Random.randint"
    ],
    "rich.text.Text.append": [
        "append",
        "<builtin>.len",
        "rich.control.strip_control_codes",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "rich.file_proxy.FileProxy": [
        "<builtin>.property"
    ],
    "rich.live_render": [],
    "rich.live.Live": [
        "<builtin>.property"
    ],
    "rich.status": [],
    "rich.spinner": [],
    "rich._spinners": [],
    "rich.status.Status": [
        "<builtin>.property"
    ],
    "rich.console.ConsoleOptions": [
        "<builtin>.property"
    ],
    "rich.console.Group": [
        "<builtin>.property"
    ],
    "rich.console.ConsoleThreadLocals": [
        "dataclasses.field"
    ],
    "rich.console.RenderHook": [
        "abc.abstractmethod"
    ],
    "rich.console.Console": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "typer.rich_utils": [
        "rich.console.group",
        "rich.console.group.decorator",
        "gettext.gettext",
        "os.getenv",
        "<builtin>.int"
    ],
    "rich.columns": [],
    "rich.markdown": [],
    "markdown_it": [],
    "markdown_it.main": [
        "markdown_it.presets.commonmark.make",
        "markdown_it.presets.default.make",
        "markdown_it.presets.zero.make",
        "markdown_it.presets.gfm_like.make"
    ],
    "markdown_it.helpers": [],
    "markdown_it.helpers.parse_link_destination": [],
    "markdown_it.common.utils": [
        "re.compile",
        "typing.TypeVar.__init__"
    ],
    "markdown_it.common.entities": [],
    "markdown_it.helpers.parse_link_label": [],
    "markdown_it.rules_inline": [],
    "markdown_it.rules_inline.emphasis": [],
    "markdown_it.rules_inline.state_inline": [
        "collections.namedtuple"
    ],
    "markdown_it._compat": [],
    "markdown_it.ruler": [
        "typing.TypeVar.__init__"
    ],
    "markdown_it.utils": [],
    "markdown_it.utils.OptionsDict": [
        "<builtin>.property"
    ],
    "markdown_it.ruler.StateBase": [
        "<builtin>.property"
    ],
    "markdown_it.ruler.Rule": [
        "dataclasses.field"
    ],
    "markdown_it.token": [],
    "markdown_it.token.Token": [
        "dataclasses.field",
        "<builtin>.classmethod"
    ],
    "markdown_it.rules_inline.strikethrough": [],
    "markdown_it.rules_inline.autolink": [
        "re.compile"
    ],
    "markdown_it.rules_inline.backticks": [
        "re.compile"
    ],
    "markdown_it.rules_inline.balance_pairs": [],
    "markdown_it.rules_inline.entity": [
        "re.compile"
    ],
    "markdown_it.rules_inline.escape": [],
    "markdown_it.rules_inline.fragments_join": [],
    "markdown_it.rules_inline.html_inline": [],
    "markdown_it.common.html_re": [
        "re.compile"
    ],
    "markdown_it.rules_inline.image": [],
    "markdown_it.rules_inline.link": [],
    "markdown_it.rules_inline.linkify": [
        "re.compile"
    ],
    "markdown_it.rules_inline.newline": [],
    "markdown_it.rules_inline.text": [],
    "markdown_it.helpers.parse_link_title": [],
    "markdown_it.presets": [],
    "markdown_it.presets.commonmark": [],
    "markdown_it.presets.default": [],
    "markdown_it.presets.zero": [],
    "markdown_it.presets.gfm_like": [
        "<builtin>.staticmethod"
    ],
    "markdown_it.common.normalize_url": [
        "re.compile"
    ],
    "mdurl": [],
    "mdurl._decode": [],
    "mdurl._encode": [],
    "mdurl._format": [],
    "mdurl._url": [],
    "mdurl._parse": [
        "re.compile"
    ],
    "markdown_it.parser_block": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block": [],
    "markdown_it.rules_block.blockquote": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block.state_block": [],
    "markdown_it.rules_block.code": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block.fence": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block.heading": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block.hr": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block.html_block": [
        "logging.getLogger",
        "re.compile"
    ],
    "markdown_it.common.html_blocks": [],
    "markdown_it.rules_block.lheading": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block.list": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block.paragraph": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block.reference": [
        "logging.getLogger"
    ],
    "markdown_it.rules_block.table": [
        "re.compile"
    ],
    "markdown_it.parser_core": [],
    "markdown_it.rules_core.block": [],
    "markdown_it.rules_core.state_core": [],
    "markdown_it.rules_core.inline": [],
    "markdown_it.rules_core.linkify": [
        "re.compile"
    ],
    "markdown_it.rules_core.normalize": [
        "re.compile"
    ],
    "markdown_it.rules_core": [],
    "markdown_it.rules_core.replacements": [
        "logging.getLogger",
        "re.compile"
    ],
    "markdown_it.rules_core.smartquotes": [
        "re.compile"
    ],
    "markdown_it.rules_core.text_join": [],
    "markdown_it.parser_inline": [],
    "markdown_it.renderer": [],
    "markdown_it.renderer.RendererHTML": [
        "<builtin>.staticmethod"
    ],
    "markdown_it.presets.default.make": [],
    "markdown_it.presets.zero.make": [],
    "markdown_it.presets.commonmark.make": [],
    "markdown_it.presets.gfm_like.make": [
        "markdown_it.presets.commonmark.make"
    ],
    "markdown_it.main.MarkdownIt": [
        "typing.overload",
        "contextlib.contextmanager"
    ],
    "rich._stack": [
        "typing.TypeVar.__init__"
    ],
    "rich._stack.Stack": [
        "<builtin>.property"
    ],
    "rich.rule": [],
    "rich.syntax": [
        "rich.style.Style.__init__"
    ],
    "pygments.lexer": [
        "<builtin>.staticmethod",
        "re.compile"
    ],
    "pygments.filter": [],
    "pygments.filters": [],
    "pygments.token": [
        "pygments.token._TokenType.__init__"
    ],
    "pygments.token._TokenType.__init__": [
        "<builtin>.set"
    ],
    "pygments.util": [
        "re.compile"
    ],
    "pygments.plugin": [],
    "pygments.regexopt": [
        "operator.itemgetter.__init__",
        "re.compile"
    ],
    "pygments.lexers": [
        "<builtin>.list"
    ],
    "pygments.lexers._mapping": [],
    "pygments.modeline": [
        "re.compile"
    ],
    "pygments.style": [
        "<builtin>.set"
    ],
    "pygments.styles": [],
    "pygments.styles._mapping": [],
    "rich.syntax.SyntaxTheme": [
        "abc.abstractmethod"
    ],
    "rich.syntax.Syntax": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "rich.markdown.MarkdownElement": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.Paragraph": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.Heading": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.CodeBlock": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.TableDataElement": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.ListElement": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.Link": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.ImageItem": [
        "<builtin>.classmethod"
    ],
    "rich.markdown.MarkdownContext": [
        "<builtin>.property"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.dgettext": [
        "gettext.translation",
        "<map>.get"
    ],
    "gettext.translation": [
        "warnings.catch_warnings.__init__",
        "gettext.find",
        "<map>.setdefault",
        "<map>.get",
        "gettext.NullTranslations.__init__",
        "<builtin>.open",
        "warnings.warn",
        "copy.copy",
        "<builtin>.FileNotFoundError",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "gettext.find": [
        "append",
        "gettext._expand_lang",
        "genericpath.exists",
        "posixpath.join",
        "ntpath.join"
    ],
    "gettext._expand_lang": [
        "append",
        "reverse",
        "<builtin>.range",
        "locale.normalize"
    ],
    "locale.normalize": [
        "locale._append_modifier",
        "<map>.get",
        "locale._replace_encoding"
    ],
    "locale._append_modifier": [
        "locale._replace_encoding"
    ],
    "locale._replace_encoding": [
        "encodings.normalize_encoding",
        "<map>.get"
    ],
    "encodings.normalize_encoding": [
        "append",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "reverse": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext.NullTranslations._parse": [],
    "<builtin>.FileNotFoundError": [],
    "copy.copy": [
        "<builtin>.getattr",
        "<map>",
        "<builtin>.issubclass",
        "copy._copy_immutable",
        "copy._reconstruct",
        "<builtin>.type",
        "<builtin>.isinstance",
        "<map>.get"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.setattr",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.id",
        "copy.deepcopy",
        "<builtin>.isinstance"
    ],
    "copy.deepcopy": [
        "<builtin>.getattr",
        "<builtin>.issubclass",
        "<map>",
        "copy._reconstruct",
        "<builtin>.id",
        "<builtin>.type",
        "copy._keep_alive",
        "<builtin>.isinstance",
        "copy._deepcopy_atomic",
        "<map>.get"
    ],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "rich.console.group": [],
    "rich.console.group.decorator": [
        "functools.wraps"
    ],
    "typer.models.TyperInfo": [
        "typer.models.Default"
    ],
    "typer.models.Default": [
        "typer.models.DefaultPlaceholder.__init__"
    ],
    "typer.models.DefaultPlaceholder.__init__": [],
    "typer.params": [
        "typing.overload"
    ],
    "typer.utils": [],
    "typer.params.Option": [],
    "rich.traceback": [],
    "rich.traceback.Stack": [
        "dataclasses.field"
    ],
    "rich.traceback.Traceback": [
        "rich.console.group",
        "<builtin>.classmethod",
        "rich.console.group.decorator"
    ],
    "typer.rich_utils._get_rich_console": [
        "rich.console.Console.__init__",
        "rich.theme.Theme.__init__"
    ],
    "rich.console._is_jupyter": [
        "os.getenv",
        "<builtin>.str"
    ],
    "rich.console.detect_legacy_windows": [
        "rich.console.get_windows_console_features"
    ],
    "rich.console.get_windows_console_features": [
        "rich._windows.get_windows_console_features"
    ],
    "rich._windows.get_windows_console_features": [],
    "rich.console.Console._detect_color_system": [
        "rich.console.get_windows_console_features",
        "<map>.get"
    ],
    "rich._log_render.LogRender.__init__": [],
    "rich.theme.ThemeStack.__init__": [],
    "typer.main.Typer": [
        "typer.models.Default"
    ],
    "weasel": [],
    "weasel.cli": [],
    "weasel.cli.main": [
        "typer.main.Typer.__init__"
    ],
    "typer.main.Typer.__init__": [
        "typer.models.TyperInfo.__init__"
    ],
    "typer.models.TyperInfo.__init__": [],
    "weasel.cli.assets": [
        "typer.main.Typer.command",
        "typer.main.Typer.command.decorator",
        "typer.params.Option",
        "pathlib.Path.cwd",
        "typer.params.Argument"
    ],
    "requests": [
        "<builtin>.getattr",
        "warnings.simplefilter",
        "urllib3.contrib.pyopenssl.inject_into_urllib3",
        "requests._check_cryptography",
        "logging.getLogger",
        "warnings.warn",
        "requests.check_compatibility"
    ],
    "urllib3": [
        "urllib3.contrib.emscripten.inject_into_urllib3",
        "warnings.simplefilter",
        "logging.getLogger",
        "urllib3.poolmanager.PoolManager.__init__"
    ],
    "urllib3.exceptions": [],
    "http.client": [
        "<builtin>.globals",
        "re.compile"
    ],
    "email.parser": [],
    "email.feedparser": [
        "re.compile",
        "<builtin>.object"
    ],
    "http": [],
    "http.client.HTTPConnection": [
        "<builtin>.staticmethod"
    ],
    "ssl": [
        "<builtin>.getattr",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.SSLContext": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "ssl.SSLObject": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ssl.SSLSocket": [
        "ssl._sslcopydoc",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "urllib3.connection": [
        "logging.getLogger",
        "re.compile",
        "<builtin>.hasattr"
    ],
    "urllib3.response": [
        "logging.getLogger"
    ],
    "urllib3._base_connection": [],
    "urllib3.util.connection": [
        "urllib3.util.connection._has_ipv6"
    ],
    "urllib3.util.timeout": [],
    "urllib3.util.timeout.Timeout": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "urllib3.util.connection._has_ipv6": [
        "socket.socket.close",
        "socket.socket.__init__"
    ],
    "socket.socket.__init__": [],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket._real_close": [],
    "urllib3.util.url": [
        "typing.overload",
        "<builtin>.set",
        "typing.NamedTuple",
        "re.compile"
    ],
    "urllib3.util.util": [],
    "typing.NamedTuple": [
        "<builtin>.TypeError",
        "typing._make_nmtuple"
    ],
    "typing._make_nmtuple": [
        "collections.namedtuple",
        "typing._type_check"
    ],
    "urllib3.util.url.Url": [
        "<builtin>.property"
    ],
    "urllib3._base_connection.BaseHTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.util": [],
    "urllib3.util.request": [
        "<builtin>.frozenset"
    ],
    "urllib3.util.response": [],
    "urllib3.util.retry": [
        "urllib3.util.retry.Retry.__init__",
        "logging.getLogger"
    ],
    "urllib3.connectionpool": [
        "typing.overload",
        "logging.getLogger"
    ],
    "queue": [],
    "queue.Queue": [
        "<builtin>.classmethod"
    ],
    "queue._PySimpleQueue": [
        "<builtin>.classmethod"
    ],
    "urllib3._request_methods": [],
    "urllib3.filepost": [],
    "urllib3.fields": [],
    "mimetypes": [
        "mimetypes._default_mime_types"
    ],
    "mimetypes.MimeTypes": [
        "<builtin>.classmethod"
    ],
    "mimetypes._default_mime_types": [],
    "urllib3.fields.RequestField": [
        "<builtin>.classmethod"
    ],
    "urllib3.util.proxy": [],
    "urllib3.util.ssl_match_hostname": [],
    "urllib3.util.ssl_": [
        "<builtin>.getattr",
        "urllib3.util.ssl_._is_has_never_check_common_name_reliable",
        "typing.overload"
    ],
    "hmac": [
        "<builtin>.bytes",
        "<builtin>.range"
    ],
    "hmac.HMAC": [
        "<builtin>.property"
    ],
    "urllib3.util.ssltransport": [
        "typing.TypeVar.__init__"
    ],
    "urllib3.util.ssltransport.SSLTransport": [
        "typing.overload",
        "<builtin>.staticmethod"
    ],
    "urllib3.util.ssl_._is_has_never_check_common_name_reliable": [
        "urllib3.util.ssl_._is_bpo_43522_fixed"
    ],
    "urllib3.util.ssl_._is_bpo_43522_fixed": [],
    "urllib3.util.retry.Retry": [
        "<builtin>.classmethod",
        "<builtin>.frozenset"
    ],
    "urllib3.util.retry.Retry.__init__": [
        "<builtin>.frozenset",
        "<builtin>.set"
    ],
    "urllib3.util.wait": [],
    "urllib3.response.BaseHTTPResponse": [
        "<builtin>.property"
    ],
    "urllib3.response.HTTPResponse": [
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "urllib3.http2.probe": [
        "urllib3.http2.probe._HTTP2ProbeCache.__init__"
    ],
    "urllib3.http2.probe._HTTP2ProbeCache.__init__": [],
    "urllib3._version": [],
    "urllib3.connection.HTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.exceptions.NewConnectionError": [
        "<builtin>.property"
    ],
    "urllib3.poolmanager": [
        "logging.getLogger"
    ],
    "urllib3.poolmanager.PoolManager.__init__": [
        "<map>.copy",
        "<builtin>.super"
    ],
    "urllib3.contrib.emscripten": [],
    "urllib3.contrib.emscripten.connection": [
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection.__init__",
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection.__init__"
    ],
    "urllib3.contrib.emscripten.fetch": [
        "urllib3.contrib.emscripten.fetch.is_in_node",
        "urllib3.contrib.emscripten.fetch._StreamingFetcher.__init__",
        "urllib3.contrib.emscripten.fetch.is_worker_available",
        "urllib3.contrib.emscripten.fetch.is_in_browser_main_thread",
        "urllib3.contrib.emscripten.fetch.is_cross_origin_isolated"
    ],
    "importlib.resources": [
        "functools.singledispatch"
    ],
    "urllib3.contrib.emscripten.request": [],
    "urllib3.contrib.emscripten.request.EmscriptenRequest": [
        "dataclasses.field"
    ],
    "urllib3.contrib.emscripten.response": [
        "logging.getLogger"
    ],
    "urllib3.contrib.emscripten.response.EmscriptenHttpResponseWrapper": [
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "urllib3.contrib.emscripten.fetch._ReadStream": [
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.fetch.is_worker_available": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_cross_origin_isolated": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_in_browser_main_thread": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_in_node": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch._StreamingFetcher.__init__": [
        "urllib3.contrib.emscripten.fetch._obj_from_dict"
    ],
    "urllib3.contrib.emscripten.fetch._obj_from_dict": [],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection.__init__": [
        "<builtin>.isinstance"
    ],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection.__init__": [
        "ntpath.expanduser",
        "posixpath.expanduser",
        "<builtin>.super"
    ],
    "urllib3.contrib.emscripten.inject_into_urllib3": [],
    "requests.exceptions": [],
    "requests.compat": [
        "requests.compat._resolve_char_detection"
    ],
    "requests.compat._resolve_char_detection": [
        "importlib.import_module"
    ],
    "importlib.import_module": [
        "<builtin>.TypeError",
        "<str>.startswith",
        "importlib._bootstrap._gcd_import"
    ],
    "importlib._bootstrap._gcd_import": [
        "importlib._bootstrap._find_and_load",
        "importlib._bootstrap._resolve_name",
        "importlib._bootstrap._sanity_check"
    ],
    "importlib._bootstrap._sanity_check": [
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.ImportError",
        "<builtin>.TypeError"
    ],
    "importlib._bootstrap._resolve_name": [
        "<builtin>.ImportError",
        "<builtin>.len",
        "<str>.rsplit"
    ],
    "importlib._bootstrap._find_and_load": [
        "importlib._bootstrap._lock_unlock_module",
        "importlib._bootstrap._ModuleLockManager.__init__",
        "<builtin>.ModuleNotFoundError"
    ],
    "importlib._bootstrap._ModuleLockManager.__init__": [],
    "<builtin>.ModuleNotFoundError": [],
    "importlib._bootstrap._lock_unlock_module": [
        "importlib._bootstrap._DummyModuleLock.acquire",
        "importlib._bootstrap._ModuleLock.acquire",
        "importlib._bootstrap._get_module_lock"
    ],
    "importlib._bootstrap._get_module_lock": [
        "importlib._bootstrap._DummyModuleLock.__init__",
        "importlib._bootstrap._ModuleLock.__init__"
    ],
    "importlib._bootstrap._ModuleLock.__init__": [],
    "importlib._bootstrap._DummyModuleLock.__init__": [],
    "importlib._bootstrap._ModuleLock.acquire": [],
    "importlib._bootstrap._DummyModuleLock.acquire": [],
    "http.cookiejar": [
        "append",
        "re.compile",
        "<builtin>.str"
    ],
    "urllib.request": [
        "append",
        "re.compile",
        "<builtin>.hasattr"
    ],
    "urllib.error": [],
    "urllib.response": [],
    "urllib.response.addinfourl": [
        "<builtin>.property"
    ],
    "urllib.error.HTTPError": [
        "<builtin>.property"
    ],
    "urllib.request.Request": [
        "<builtin>.property"
    ],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "nturl2path": [],
    "http.cookiejar.CookieJar": [
        "re.compile"
    ],
    "http.cookies": [
        "<builtin>.ord",
        "re.escape",
        "<builtin>.set",
        "re.compile",
        "<builtin>.range",
        "<builtin>.map"
    ],
    "http.cookies.Morsel": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "charset_normalizer": [
        "logging.getLogger"
    ],
    "charset_normalizer.api": [
        "logging.Handler.setFormatter",
        "logging.Formatter.__init__",
        "logging.getLogger",
        "logging.StreamHandler.__init__"
    ],
    "charset_normalizer.cd": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "charset_normalizer.constant": [
        "<builtin>.sorted",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.filter",
        "<builtin>.list",
        "re.compile",
        "<builtin>.range",
        "<builtin>.int"
    ],
    "charset_normalizer.md": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "charset_normalizer.utils": [
        "functools.lru_cache.decorating_function",
        "<builtin>.len",
        "functools.lru_cache"
    ],
    "charset_normalizer.md.MessDetectorPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManySymbolOrPunctuationPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManyAccentuatedPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.UnprintablePlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousDuplicateAccentPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousRange": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuperWeirdWordPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.CjkInvalidStopPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArchaicUpperLowerPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArabicIsolatedFormPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.models": [],
    "charset_normalizer.models.CharsetMatch": [
        "<builtin>.property"
    ],
    "charset_normalizer.models.CliDetectionResult": [
        "<builtin>.property"
    ],
    "charset_normalizer.legacy": [],
    "charset_normalizer.version": [],
    "requests.check_compatibility": [
        "warnings.warn",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "urllib3.contrib.pyopenssl": [
        "<builtin>.getattr",
        "logging.getLogger",
        "<map>.items",
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext": [
        "<builtin>.property"
    ],
    "urllib3.contrib.pyopenssl.inject_into_urllib3": [
        "urllib3.contrib.pyopenssl._validate_dependencies_met"
    ],
    "urllib3.contrib.pyopenssl._validate_dependencies_met": [
        "<builtin>.getattr",
        "<builtin>.ImportError"
    ],
    "requests._check_cryptography": [
        "<builtin>.list",
        "<builtin>.map",
        "warnings.warn"
    ],
    "requests.packages": [
        "<builtin>.locals",
        "<builtin>.__import__",
        "<builtin>.list"
    ],
    "requests.utils": [
        "re.split",
        "certifi.core.where",
        "<builtin>.frozenset",
        "contextlib.contextmanager",
        "urllib3.util.request.make_headers"
    ],
    "requests.certs": [],
    "certifi": [],
    "certifi.core": [],
    "requests.__version__": [],
    "requests._internal_utils": [
        "re.compile"
    ],
    "requests.cookies": [],
    "requests.cookies.MockRequest": [
        "<builtin>.property"
    ],
    "requests.structures": [],
    "certifi.core.where": [
        "ntpath.dirname",
        "posixpath.dirname",
        "ntpath.join",
        "posixpath.join"
    ],
    "urllib3.util.request.make_headers": [
        "base64.b64encode",
        "<builtin>.isinstance"
    ],
    "base64.b64encode": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "re.split": [
        "re._compile"
    ],
    "requests.api": [],
    "requests.sessions": [],
    "requests.adapters": [
        "urllib3.util.ssl_.create_urllib3_context",
        "requests.utils.extract_zipped_paths"
    ],
    "requests.auth": [],
    "requests.models": [],
    "encodings.idna": [
        "re.compile"
    ],
    "stringprep": [
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.range"
    ],
    "requests.hooks": [],
    "requests.status_codes": [
        "requests.status_codes._init",
        "requests.structures.LookupDict.__init__"
    ],
    "requests.structures.LookupDict.__init__": [
        "<builtin>.super"
    ],
    "requests.status_codes._init": [
        "<builtin>.sorted",
        "<builtin>.setattr",
        "requests.status_codes._init.doc",
        "<map>.items"
    ],
    "requests.status_codes._init.doc": [],
    "requests.models.RequestEncodingMixin": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "requests.models.PreparedRequest": [
        "<builtin>.staticmethod"
    ],
    "requests.models.Response": [
        "<builtin>.property"
    ],
    "urllib3.contrib.socks": [
        "warnings.warn"
    ],
    "urllib3.util.ssl_.create_urllib3_context": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "warnings.warn",
        "<builtin>.ValueError",
        "<builtin>.TypeError"
    ],
    "requests.utils.extract_zipped_paths": [
        "genericpath.exists",
        "posixpath.join",
        "ntpath.split",
        "zipfile.ZipFile.namelist",
        "posixpath.split",
        "ntpath.join",
        "requests.utils.atomic_open",
        "zipfile.ZipFile.__init__",
        "zipfile.ZipFile.read",
        "tempfile.gettempdir",
        "zipfile.is_zipfile"
    ],
    "zipfile.is_zipfile": [
        "zipfile._check_zipfile",
        "<builtin>.open",
        "<builtin>.hasattr"
    ],
    "zipfile._check_zipfile": [
        "zipfile._EndRecData"
    ],
    "zipfile._EndRecData": [
        "zipfile._EndRecData64",
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.max"
    ],
    "zipfile._EndRecData64": [
        "<builtin>.len"
    ],
    "zipfile.ZipFile.__init__": [
        "os._fspath",
        "<builtin>.getattr",
        "threading.RLock",
        "zipfile._Tellable.__init__",
        "zipfile._check_compression",
        "<builtin>.ValueError",
        "zipfile.ZipFile._RealGetContents",
        "<builtin>.isinstance",
        "zipfile.ZipFile._fpclose"
    ],
    "zipfile._check_compression": [
        "<builtin>.NotImplementedError",
        "<builtin>.RuntimeError"
    ],
    "zipfile.ZipFile._RealGetContents": [
        "<builtin>.print",
        "zipfile._EndRecData",
        "<builtin>.NotImplementedError",
        "<builtin>.len",
        "zipfile.ZipInfo._decodeExtra",
        "zipfile.ZipInfo.__init__"
    ],
    "zipfile.ZipInfo.__init__": [
        "<str>.find",
        "<builtin>.chr",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipInfo._decodeExtra": [
        "<builtin>.len"
    ],
    "zipfile._Tellable.__init__": [],
    "zipfile.ZipFile._fpclose": [
        "zipfile._Tellable.close"
    ],
    "zipfile._Tellable.close": [],
    "zipfile.ZipFile.namelist": [],
    "tempfile.gettempdir": [
        "tempfile._gettempdir"
    ],
    "tempfile._gettempdir": [
        "tempfile._get_default_tempdir"
    ],
    "tempfile._get_default_tempdir": [
        "<builtin>.next",
        "posixpath.join",
        "ntpath.join",
        "genericpath.isdir",
        "<builtin>.range",
        "<builtin>.FileNotFoundError",
        "tempfile._candidate_tempdir_list",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "tempfile._candidate_tempdir_list": [
        "append",
        "extend",
        "os.getenv"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "requests.utils.atomic_open": [
        "ntpath.dirname",
        "os.fdopen",
        "posixpath.dirname",
        "tempfile.mkstemp"
    ],
    "tempfile.mkstemp": [
        "tempfile._mkstemp_inner",
        "tempfile._sanitize_params"
    ],
    "tempfile._sanitize_params": [
        "tempfile.gettempdir",
        "tempfile.gettempdirb",
        "tempfile._infer_return_type"
    ],
    "tempfile._infer_return_type": [
        "os._fspath",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "tempfile.gettempdirb": [
        "tempfile._gettempdir"
    ],
    "tempfile._mkstemp_inner": [
        "<builtin>.next",
        "posixpath.join",
        "ntpath.join",
        "tempfile._get_candidate_names",
        "genericpath.isdir",
        "<builtin>.range",
        "<builtin>.FileExistsError",
        "<builtin>.map",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "tempfile._get_candidate_names": [],
    "<builtin>.FileExistsError": [],
    "os.fdopen": [
        "<builtin>.TypeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "zipfile.ZipFile.read": [
        "zipfile.ZipFile.open"
    ],
    "zipfile.ZipFile.open": [
        "zipfile.ZipFile.getinfo",
        "<builtin>.NotImplementedError",
        "<builtin>.len",
        "zipfile.ZipExtFile.__init__",
        "zipfile._SharedFile.read",
        "<builtin>.RuntimeError",
        "zipfile._SharedFile.close",
        "<builtin>.type",
        "zipfile.ZipFile._open_to_write",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "zipfile._SharedFile.__init__",
        "zipfile.ZipInfo.__init__",
        "<builtin>.TypeError"
    ],
    "zipfile.ZipFile.getinfo": [
        "<builtin>.KeyError",
        "<map>.get"
    ],
    "<str>.find": [],
    "zipfile.ZipFile._open_to_write": [
        "<builtin>.ValueError",
        "zipfile.ZipFile._writecheck",
        "zipfile.ZipInfo.FileHeader",
        "zipfile._ZipWriteFile.__init__"
    ],
    "zipfile.ZipFile._writecheck": [
        "<builtin>.len",
        "zipfile._check_compression",
        "warnings.warn",
        "<builtin>.ValueError"
    ],
    "zipfile.ZipInfo.FileHeader": [
        "zipfile.ZipInfo._encodeFilenameFlags",
        "<builtin>.len",
        "<builtin>.max"
    ],
    "zipfile.ZipInfo._encodeFilenameFlags": [],
    "zipfile._ZipWriteFile.__init__": [
        "zipfile._get_compressor"
    ],
    "zipfile._get_compressor": [
        "zipfile.LZMACompressor.__init__"
    ],
    "zipfile.LZMACompressor.__init__": [],
    "zipfile._SharedFile.__init__": [],
    "zipfile._SharedFile.read": [],
    "zipfile.ZipExtFile.__init__": [
        "<builtin>.hasattr",
        "<builtin>.RuntimeError",
        "zipfile._get_decompressor",
        "zipfile.ZipExtFile._init_decrypter",
        "zipfile._SharedFile.tell"
    ],
    "zipfile._get_decompressor": [
        "<builtin>.NotImplementedError",
        "zipfile._check_compression",
        "zipfile.LZMADecompressor.__init__",
        "<map>.get"
    ],
    "zipfile.LZMADecompressor.__init__": [],
    "zipfile._SharedFile.tell": [],
    "zipfile.ZipExtFile._init_decrypter": [
        "zipfile._ZipDecrypter"
    ],
    "zipfile._ZipDecrypter": [
        "<builtin>.list",
        "zipfile._ZipDecrypter.update_keys",
        "<builtin>.map",
        "<builtin>.range"
    ],
    "zipfile._ZipDecrypter.update_keys": [
        "zipfile._ZipDecrypter.crc32"
    ],
    "zipfile._ZipDecrypter.crc32": [],
    "zipfile._SharedFile.close": [
        "zipfile.ZipFile._fpclose"
    ],
    "weasel.util": [],
    "weasel.util.commands": [],
    "weasel.compat": [],
    "weasel.errors": [],
    "weasel.util.config": [
        "weasel.util.frozen.SimpleFrozenDict.__init__"
    ],
    "weasel.schemas": [],
    "weasel.schemas.ProjectConfigAssetGitItem": [
        "pydantic.fields.Field"
    ],
    "weasel.schemas.ProjectConfigAssetURL": [
        "pydantic.fields.Field"
    ],
    "weasel.schemas.ProjectConfigAssetGit": [
        "pydantic.fields.Field"
    ],
    "weasel.schemas.ProjectConfigCommand": [
        "pydantic.fields.Field"
    ],
    "weasel.schemas.ProjectConfigSchema": [
        "pydantic.fields.Field",
        "pydantic.deprecated.class_validators.root_validator"
    ],
    "pydantic.deprecated.class_validators.root_validator": [],
    "weasel.util.environment": [],
    "weasel.util.frozen": [],
    "weasel.util.logging": [],
    "weasel.util.validation": [
        "contextlib.contextmanager"
    ],
    "weasel.util.frozen.SimpleFrozenDict.__init__": [
        "<builtin>.super"
    ],
    "weasel.util.filesystem": [
        "contextlib.contextmanager"
    ],
    "weasel.util.git": [],
    "weasel.util.hashing": [
        "<builtin>.tuple"
    ],
    "weasel.util.modules": [],
    "weasel.util.remote": [],
    "cloudpathlib": [
        "importlib_metadata.version",
        "importlib.metadata.version"
    ],
    "cloudpathlib.anypath": [],
    "cloudpathlib.cloudpath": [
        "typing.TypeVar.__init__"
    ],
    "cloudpathlib.legacy.glob": [
        "<builtin>.len",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache",
        "functools.cache",
        "<builtin>.slice",
        "fnmatch.translate"
    ],
    "functools.cache": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "fnmatch.translate": [
        "",
        "append",
        "re.sub",
        "<builtin>.len",
        "<str>.find",
        "<builtin>.range",
        "<builtin>.object"
    ],
    "<builtin>.slice": [],
    "cloudpathlib.enums": [],
    "cloudpathlib.enums.FileCacheMode": [
        "<builtin>.classmethod"
    ],
    "cloudpathlib.exceptions": [],
    "cloudpathlib.client": [
        "typing.TypeVar.__init__"
    ],
    "cloudpathlib.client.Client": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "cloudpathlib.cloudpath.CloudImplementation": [
        "<builtin>.property"
    ],
    "cloudpathlib.cloudpath.CloudPathMeta": [
        "typing.overload"
    ],
    "cloudpathlib.cloudpath.CloudPath": [
        "abc.abstractmethod",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "typing.overload",
        "<builtin>.classmethod"
    ],
    "cloudpathlib.cloudpath._CloudPathSelectable": [
        "<builtin>.property",
        "<builtin>.staticmethod",
        "contextlib.contextmanager"
    ],
    "cloudpathlib.url_utils": [],
    "cloudpathlib.anypath.AnyPath": [
        "<builtin>.classmethod"
    ],
    "cloudpathlib.azure.azblobclient": [],
    "cloudpathlib.azure.azblobpath": [],
    "cloudpathlib.azure.azblobpath.AzureBlobPath": [
        "<builtin>.property"
    ],
    "cloudpathlib.azure.azblobclient.AzureBlobClient": [
        "<builtin>.staticmethod"
    ],
    "cloudpathlib.s3.s3client": [],
    "cloudpathlib.s3.s3path": [],
    "cloudpathlib.s3.s3path.S3Path": [
        "<builtin>.property"
    ],
    "cloudpathlib.gs.gspath": [],
    "cloudpathlib.gs.gsclient": [],
    "cloudpathlib.gs.gspath.GSPath": [
        "<builtin>.property"
    ],
    "importlib_metadata": [],
    "importlib_metadata._meta": [
        "typing.TypeVar.__init__"
    ],
    "importlib_metadata._meta.PackageMetadata": [
        "typing.overload",
        "<builtin>.property"
    ],
    "importlib_metadata._meta.SimplePath": [
        "<builtin>.property"
    ],
    "importlib_metadata.compat.py39": [],
    "importlib_metadata.compat.py311": [],
    "importlib_metadata._compat": [],
    "importlib_metadata._compat.NullFinder": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata._itertools": [],
    "importlib_metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "importlib_metadata.Sectioned": [
        "<builtin>.classmethod",
        "textwrap.dedent",
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.EntryPoint": [
        "<builtin>.property",
        "re.compile"
    ],
    "importlib_metadata.EntryPoints": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.Distribution": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "abc.abstractmethod"
    ],
    "importlib_metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib_metadata.DistributionFinder": [
        "importlib_metadata.DistributionFinder.Context.__init__",
        "abc.abstractmethod"
    ],
    "importlib_metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib_metadata.FastPath": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "importlib_metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.MetadataPathFinder": [
        "<builtin>.classmethod",
        "importlib_metadata.DistributionFinder.Context.__init__"
    ],
    "importlib_metadata.PathDistribution": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.version": [
        "importlib_metadata.distribution"
    ],
    "importlib_metadata.distribution": [
        "importlib_metadata.Distribution.from_name"
    ],
    "importlib_metadata.Distribution.from_name": [
        "<builtin>.iter",
        "<builtin>.next",
        "<builtin>.ValueError",
        "importlib_metadata.Distribution.discover"
    ],
    "importlib_metadata.Distribution.discover": [
        "importlib_metadata.DistributionFinder.Context.__init__",
        "<builtin>.ValueError",
        "importlib_metadata.Distribution._discover_resolvers"
    ],
    "importlib_metadata.Distribution._discover_resolvers": [
        "<builtin>.getattr",
        "<builtin>.filter"
    ],
    "importlib.metadata.version": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.distribution": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.Distribution.from_name": [
        "importlib.metadata.Distribution._discover_resolvers",
        "<builtin>.next",
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.iter"
    ],
    "importlib.metadata.Distribution._discover_resolvers": [
        "<builtin>.getattr",
        "<builtin>.filter"
    ],
    "weasel.util.versions": [],
    "pathlib.Path.cwd": [],
    "typer.params.Argument": [],
    "typer.main.Typer.command": [],
    "typer.main.Typer.command.decorator": [
        "typer.models.CommandInfo.__init__"
    ],
    "typer.models.CommandInfo.__init__": [],
    "weasel.cli.clone": [
        "typer.params.Argument",
        "typer.main.Typer.command",
        "typer.main.Typer.command.decorator",
        "typer.params.Option"
    ],
    "weasel.cli.document": [
        "typer.main.Typer.command",
        "typer.main.Typer.command.decorator",
        "typer.params.Option",
        "pathlib.Path.cwd",
        "typer.params.Argument"
    ],
    "weasel.cli.dvc": [
        "typer.main.Typer.command",
        "typer.main.Typer.command.decorator",
        "typer.params.Option",
        "pathlib.Path.cwd",
        "typer.params.Argument"
    ],
    "weasel.cli.pull": [
        "pathlib.Path.cwd",
        "typer.params.Argument",
        "typer.main.Typer.command",
        "typer.main.Typer.command.decorator"
    ],
    "weasel.cli.remote_storage": [],
    "site": [
        "site.main"
    ],
    "_sitebuiltins": [],
    "site.main": [
        "site.setquit",
        "site.execsitecustomize",
        "site.check_enableusersite",
        "site.removeduppaths",
        "site.venv",
        "site.abs_paths",
        "site.addusersitepackages",
        "site.sethelper",
        "site.enablerlcompleter",
        "site.addsitepackages",
        "site.execusercustomize",
        "site.setcopyright"
    ],
    "site.removeduppaths": [
        "append",
        "<builtin>.set",
        "site.makepath"
    ],
    "site.makepath": [
        "posixpath.join",
        "ntpath.join",
        "ntpath.normcase",
        "posixpath.normcase",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "site.abs_paths": [
        "<builtin>.set",
        "posixpath.abspath",
        "ntpath.abspath"
    ],
    "site.venv": [
        "ntpath.dirname",
        "posixpath.dirname",
        "posixpath.join",
        "ntpath.join",
        "posixpath.split",
        "genericpath.isfile",
        "insert",
        "ntpath.abspath",
        "<builtin>.open",
        "site.addsitepackages",
        "posixpath.abspath",
        "ntpath.split"
    ],
    "site.addsitepackages": [
        "site._trace",
        "site.getsitepackages",
        "site.addsitedir",
        "genericpath.isdir"
    ],
    "site._trace": [
        "<builtin>.print"
    ],
    "site.getsitepackages": [
        "append",
        "<builtin>.set",
        "ntpath.join",
        "posixpath.join"
    ],
    "site.addsitedir": [
        "<builtin>.sorted",
        "site.addpackage",
        "site.makepath",
        "site._trace",
        "site._init_pathinfo"
    ],
    "site._init_pathinfo": [
        "<builtin>.set",
        "genericpath.exists",
        "site.makepath"
    ],
    "site.addpackage": [
        "ntpath.join",
        "site._init_pathinfo",
        "site._trace",
        "posixpath.join"
    ],
    "site.check_enableusersite": [
        "<builtin>.hasattr"
    ],
    "site.addusersitepackages": [
        "site._trace",
        "site.addsitedir",
        "site.getusersitepackages",
        "genericpath.isdir"
    ],
    "site.getusersitepackages": [
        "site._get_path",
        "site.getuserbase"
    ],
    "site.getuserbase": [
        "site._getuserbase"
    ],
    "site._getuserbase": [
        "site._getuserbase.joinuser"
    ],
    "site._getuserbase.joinuser": [
        "ntpath.join",
        "ntpath.expanduser",
        "posixpath.expanduser",
        "posixpath.join"
    ],
    "site._get_path": [],
    "site.setquit": [
        "_sitebuiltins.Quitter.__init__"
    ],
    "_sitebuiltins.Quitter.__init__": [],
    "site.setcopyright": [
        "ntpath.dirname",
        "posixpath.dirname",
        "<builtin>.hasattr",
        "extend",
        "_sitebuiltins._Printer.__init__"
    ],
    "_sitebuiltins._Printer.__init__": [
        "ntpath.join",
        "posixpath.join"
    ],
    "site.sethelper": [],
    "site.enablerlcompleter": [],
    "site.execsitecustomize": [],
    "site.execusercustomize": [],
    "weasel.cli.run": [
        "typer.main.Typer.command",
        "typer.main.Typer.command.decorator",
        "typer.params.Option",
        "pathlib.Path.cwd",
        "typer.params.Argument",
        "weasel.util.frozen.SimpleFrozenList.__init__"
    ],
    "weasel.util.frozen.SimpleFrozenList.__init__": [
        "<builtin>.super"
    ],
    "weasel.cli.push": [
        "pathlib.Path.cwd",
        "typer.params.Argument",
        "typer.main.Typer.command",
        "typer.main.Typer.command.decorator"
    ],
    "typer.main.Typer.add_typer": [
        "typer.models.TyperInfo.__init__"
    ],
    "spacy.cli.download": [
        "typer.params.Argument",
        "typer.main.Typer.command",
        "typer.main.Typer.command.decorator",
        "typer.params.Option"
    ],
    "spacy.glossary": [],
    "handler.handle": [
        "spacy.load"
    ],
    "spacy.load": [
        "spacy.util.load_model"
    ],
    "spacy.util.load_model": [
        "spacy.util.is_package",
        "<builtin>.hasattr",
        "spacy.util.load_model_from_path",
        "pathlib.Path.exists",
        "spacy.util.get_lang_class",
        "spacy.util.load_model_from_package",
        "<builtin>.IOError",
        "<builtin>.isinstance",
        "<str>.startswith"
    ],
    "spacy.util.load_model_from_path": [
        "spacy.util.load_model_from_config",
        "spacy.util.get_model_meta",
        "pathlib.Path.exists",
        "<builtin>.IOError",
        "spacy.util.dict_to_dot",
        "spacy.util.load_config"
    ],
    "spacy.util.get_model_meta": [
        "spacy.util.ensure_path",
        "spacy.util.load_meta"
    ],
    "spacy.util.load_meta": [
        "spacy.util.get_base_version",
        "pathlib.Path.exists",
        "<builtin>.IOError",
        "spacy.util.ensure_path",
        "spacy.util.is_compatible_version",
        "<builtin>.ValueError",
        "pathlib.Path.is_file",
        "warnings.warn",
        "spacy.util.get_model_lower_version",
        "spacy.util.is_unconstrained_version",
        "srsly._json_api.read_json",
        "spacy.util.get_minor_version_range"
    ],
    "pathlib.Path.exists": [
        "pathlib._ignore_error",
        "pathlib.Path.stat"
    ],
    "srsly._json_api.read_json": [
        "srsly.util.force_path",
        "pathlib.Path.open"
    ],
    "srsly.util.force_path": [
        "pathlib.Path.exists",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "pathlib.Path.open": [],
    "spacy.util.is_compatible_version": [
        "<str>.isdigit",
        "packaging.specifiers.SpecifierSet.__init__",
        "packaging.version.Version.__init__"
    ],
    "packaging.specifiers.SpecifierSet.__init__": [
        "<builtin>.frozenset",
        "<builtin>.map"
    ],
    "spacy.util.get_model_lower_version": [
        "packaging.specifiers.SpecifierSet.__iter__",
        "packaging.specifiers.SpecifierSet.__init__"
    ],
    "packaging.specifiers.SpecifierSet.__iter__": [
        "<builtin>.iter"
    ],
    "spacy.util.get_base_version": [
        "packaging.version.Version.__init__"
    ],
    "spacy.util.is_unconstrained_version": [
        "packaging.specifiers.SpecifierSet.__init__",
        "<builtin>.len",
        "<builtin>.any"
    ],
    "spacy.util.get_minor_version_range": [
        "packaging.version.Version.__init__"
    ],
    "spacy.util.dict_to_dot": [
        "spacy.util.walk_dict"
    ],
    "spacy.util.walk_dict": [
        "spacy.util.walk_dict",
        "<builtin>.any",
        "<builtin>.isinstance"
    ],
    "spacy.util.load_model_from_config": [
        "spacy.util.get_lang_class",
        "<builtin>.ValueError"
    ],
    "spacy.util.get_lang_class": [
        "<builtin>.getattr",
        "spacy.util.find_matching_language",
        "importlib.import_module",
        "spacy.util.set_lang_class",
        "catalogue.Registry.get",
        "<builtin>.ImportError"
    ],
    "<str>.rsplit": [],
    "spacy.util.find_matching_language": [
        "pkgutil.iter_modules",
        "langcodes.closest_supported_match",
        "append",
        "langcodes.tag_is_valid"
    ],
    "spacy.lang": [],
    "pkgutil.iter_modules": [
        "pkgutil.iter_importer_modules",
        "pkgutil.iter_importers",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.map"
    ],
    "pkgutil.iter_importers": [
        "<builtin>.getattr",
        "<str>.rpartition",
        "importlib.import_module",
        "<builtin>.ImportError",
        "pkgutil.get_importer",
        "<str>.startswith"
    ],
    "pkgutil.get_importer": [],
    "pkgutil.iter_importer_modules": [
        "<builtin>.hasattr"
    ],
    "langcodes.tag_is_valid": [
        "langcodes.Language.is_valid",
        "langcodes.Language.get"
    ],
    "langcodes.Language.get": [
        "langcodes.tag_parser.normalize_characters",
        "langcodes.Language.get",
        "langcodes.Language.make",
        "<builtin>.isinstance",
        "langcodes.tag_parser.parse_tag"
    ],
    "langcodes.tag_parser.normalize_characters": [],
    "langcodes.tag_parser.parse_tag": [
        "langcodes.tag_parser.normalize_characters",
        "<str>.isalnum",
        "<builtin>.len",
        "langcodes.tag_parser.parse_subtags",
        "langcodes.tag_parser._is_ascii",
        "langcodes.tag_parser.subtag_error"
    ],
    "langcodes.tag_parser._is_ascii": [],
    "<str>.isalnum": [],
    "langcodes.tag_parser.subtag_error": [],
    "langcodes.tag_parser.parse_subtags": [
        "<str>.isdigit",
        "<str>.isalpha",
        "<str>.isalnum",
        "<builtin>.len",
        "<str>.title",
        "langcodes.tag_parser.parse_extension",
        "langcodes.tag_parser.parse_extlang",
        "langcodes.tag_parser.parse_subtags",
        "<str>.upper",
        "langcodes.tag_parser.order_error",
        "langcodes.tag_parser.subtag_error"
    ],
    "<str>.isalpha": [],
    "<str>.isdigit": [],
    "langcodes.tag_parser.order_error": [
        "<builtin>.len"
    ],
    "langcodes.tag_parser.parse_extlang": [
        "append",
        "<builtin>.len",
        "langcodes.tag_parser.parse_subtags"
    ],
    "langcodes.tag_parser.parse_extension": [
        "<builtin>.len",
        "langcodes.tag_parser.parse_subtags"
    ],
    "<str>.upper": [],
    "<str>.title": [],
    "langcodes.Language.make": [
        "<builtin>.tuple",
        "langcodes.Language.__init__"
    ],
    "langcodes.Language.__init__": [
        "langcodes.Language.to_tag"
    ],
    "langcodes.Language.to_tag": [
        "append",
        "<builtin>.sorted"
    ],
    "langcodes.Language.is_valid": [
        "append",
        "extend",
        "<builtin>.len",
        "<builtin>.set"
    ],
    "langcodes.closest_supported_match": [
        "langcodes.closest_match"
    ],
    "langcodes.closest_match": [
        "operator.itemgetter.__init__",
        "langcodes.standardize_tag",
        "langcodes.tag_distance",
        "<builtin>.str"
    ],
    "langcodes.standardize_tag": [
        "langcodes.Language.prefer_macrolanguage",
        "langcodes.Language.simplify_script",
        "langcodes.Language.get",
        "langcodes.Language.to_tag"
    ],
    "langcodes.Language.prefer_macrolanguage": [
        "langcodes.Language.update_dict"
    ],
    "langcodes.Language.update_dict": [
        "langcodes.Language.make",
        "<map>.get"
    ],
    "langcodes.Language.simplify_script": [
        "langcodes.Language.update_dict"
    ],
    "langcodes.tag_distance": [
        "langcodes.Language.get",
        "langcodes.Language.distance"
    ],
    "langcodes.Language.distance": [
        "langcodes.Language.prefer_macrolanguage",
        "langcodes.Language.maximize",
        "langcodes.language_distance.tuple_distance_cached"
    ],
    "langcodes.Language.maximize": [
        "langcodes.Language.update",
        "langcodes.Language.broader_tags",
        "<builtin>.RuntimeError",
        "langcodes.Language.get"
    ],
    "langcodes.Language.broader_tags": [
        "langcodes.Language.prefer_macrolanguage",
        "<builtin>.set",
        "langcodes.Language.to_tag"
    ],
    "langcodes.Language.update": [
        "langcodes.Language.make"
    ],
    "langcodes.language_distance.tuple_distance_cached": [
        "langcodes.language_distance._tuple_distance"
    ],
    "langcodes.language_distance._tuple_distance": [
        "langcodes.language_distance._get2"
    ],
    "langcodes.language_distance._get2": [
        "<map>.get"
    ],
    "spacy.util.set_lang_class": [
        "catalogue.Registry.register"
    ],
    "spacy.util.is_package": [
        "catalogue._importlib_metadata.distribution"
    ],
    "catalogue._importlib_metadata.distribution": [
        "catalogue._importlib_metadata.Distribution.from_name"
    ],
    "catalogue._importlib_metadata.Distribution.from_name": [
        "<builtin>.iter",
        "<builtin>.next",
        "catalogue._importlib_metadata.DistributionFinder.Context.__init__",
        "catalogue._importlib_metadata.Distribution._discover_resolvers"
    ],
    "spacy.util.load_model_from_package": [
        "importlib.import_module"
    ]
}