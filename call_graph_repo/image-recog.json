{
    "handler": [
        "handler.initialize",
        "<builtin>.print",
        "handler.handle"
    ],
    "os": [
        "os._add",
        "<builtin>.type",
        "extend",
        "<builtin>.globals",
        "<builtin>.ImportError",
        "os._Environ.__init__",
        "<builtin>.set",
        "os._fscodec",
        "os._createenviron",
        "append",
        "os._exists"
    ],
    "abc": [],
    "_py_abc": [],
    "_weakrefset": [],
    "types": [
        "types._ag",
        "<builtin>.type",
        "<builtin>.globals",
        "types._cell_factory",
        "<builtin>.object",
        "types._c",
        "types._g"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "<builtin>.object": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.property": [],
    "<builtin>.globals": [],
    "_weakrefset.WeakSet": [
        "<builtin>.classmethod"
    ],
    "<builtin>.classmethod": [],
    "stat": [],
    "<builtin>.ImportError": [],
    "append": [],
    "ntpath": [
        "<builtin>.hasattr"
    ],
    "genericpath": [],
    "<builtin>.hasattr": [],
    "extend": [],
    "posixpath": [],
    "os._exists": [
        "<builtin>.globals"
    ],
    "<builtin>.set": [],
    "os._add": [],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.encodekey"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.TypeError": [],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os.PathLike": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "abc.abstractmethod": [],
    "json": [],
    "codecs": [
        "<builtin>.SystemError"
    ],
    "<builtin>.SystemError": [],
    "encodings": [],
    "torch": [
        "torch._load_global_deps",
        "<builtin>.type",
        "<builtin>.globals",
        "os.getenv",
        "<builtin>.ImportError",
        "textwrap.dedent",
        "<str>.replace",
        "torch.manager_path",
        "ctypes.CDLL.__init__",
        "ntpath.dirname",
        "<builtin>.getattr",
        "platform.system",
        "<builtin>.Exception",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.dir",
        "genericpath.exists",
        "posixpath.dirname",
        "<builtin>.list",
        "<builtin>.all",
        "ctypes.WinError",
        "append",
        "torch.multiprocessing._atfork.register_after_fork",
        "<builtin>.filter",
        "<builtin>.print",
        "glob.glob",
        "<builtin>.hasattr",
        "extend",
        "ntpath.join",
        "os.add_dll_directory",
        "posixpath.join",
        "inspect.isclass"
    ],
    "platform": [
        "collections.namedtuple",
        "re.compile"
    ],
    "collections": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "<builtin>.frozenset": [],
    "operator": [],
    "reprlib": [
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr.__init__": [],
    "collections.OrderedDict": [
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr",
        "<builtin>.object"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "<builtin>.getattr": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr",
        "<builtin>.property"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "re": [
        "<builtin>.globals",
        "<builtin>.type",
        "functools.lru_cache",
        "<builtin>.chr",
        "copyreg.pickle",
        "functools.lru_cache.decorating_function",
        "sre_compile.compile"
    ],
    "enum": [
        "<builtin>.object"
    ],
    "enum.EnumMeta": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "<builtin>.classmethod",
        "types.DynamicClassAttribute.__init__"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "<builtin>.bool": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "<builtin>.tuple"
    ],
    "sre_parse": [
        "<builtin>.frozenset"
    ],
    "sre_constants": [
        "sre_constants._makecodes"
    ],
    "sre_constants._makecodes": [
        "<builtin>.enumerate",
        "<str>.split",
        "<str>.strip",
        "<builtin>.globals"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.enumerate": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.tuple": [],
    "functools": [
        "collections.namedtuple",
        "<builtin>.object"
    ],
    "functools.partial": [
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr"
    ],
    "functools.partialmethod": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "collections.namedtuple": [
        "<builtin>.classmethod",
        "<str>.join",
        "<builtin>.type",
        "<builtin>.eval",
        "<str>.replace",
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.dict",
        "<builtin>.list",
        "<builtin>.tuple",
        "<builtin>.reversed",
        "<builtin>.zip",
        "<str>.split",
        "<builtin>.map",
        "collections.<lambda1>",
        "<builtin>.str"
    ],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.ValueError": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<str>.join": [],
    "<builtin>.eval": [],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "operator.itemgetter.__init__": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [
        "<builtin>.classmethod"
    ],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile.dis",
        "<builtin>.print",
        "sre_parse.parse",
        "sre_compile.isstring",
        "sre_compile._code",
        "<builtin>.tuple",
        "<map>.items"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_constants.error.__init__",
        "sre_parse.fix_flags",
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.seek",
        "sre_parse.SubPattern.dump",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.State.__init__",
        "sre_parse._parse_sub"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.isinstance",
        "sre_parse.Tokenizer.__next",
        "<builtin>.str"
    ],
    "sre_parse.Tokenizer.__next": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.tell",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "",
        "<builtin>.len",
        "sre_parse.SubPattern.__init__",
        "extend",
        "sre_parse.Tokenizer.match",
        "sre_parse.SubPattern.append",
        "sre_parse.Tokenizer.tell",
        "append"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.SubPattern.append": [
        "append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "sre_constants.error.__init__": [
        "<builtin>.isinstance",
        "<str>.count",
        "<builtin>.super",
        "<str>.rfind"
    ],
    "<str>.count": [],
    "<str>.rfind": [],
    "<builtin>.super": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "<builtin>.print",
        "<builtin>.str"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "append",
        "sre_compile._compile",
        "sre_compile._compile_info"
    ],
    "sre_compile._compile_info": [
        "",
        "<builtin>.len",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._get_charset_prefix",
        "extend",
        "sre_compile._optimize_charset",
        "sre_compile._get_literal_prefix",
        "sre_compile._compile_charset"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "",
        "<builtin>.len",
        "extend",
        "sre_compile._get_literal_prefix",
        "sre_compile._combine_flags",
        "sre_compile._get_iscased"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "",
        "<builtin>.any",
        "<builtin>.range",
        "sre_compile._combine_flags",
        "sre_compile._get_iscased",
        "<builtin>.map"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "<builtin>.any",
        "<builtin>.len",
        "<builtin>.range",
        "sre_compile._bytes_to_codes",
        "<builtin>.map",
        "sre_compile._mk_bitmap",
        "<builtin>.bytearray",
        "<builtin>.bytes",
        "append"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.len",
        "<builtin>.memoryview"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "",
        "extend",
        "sre_constants.error.__init__"
    ],
    "sre_compile._compile": [
        "sre_constants.error.__init__",
        "",
        "sre_compile._compile",
        "sre_compile._optimize_charset",
        "sre_compile._combine_flags",
        "sre_compile._compile_charset",
        "sre_compile._simple"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "<builtin>.set",
        "<builtin>.len",
        "sre_compile.dis.dis_",
        "<builtin>.str"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.ValueError",
        "<builtin>.range",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.list",
        "<builtin>.chr",
        "sre_compile.dis.dis_.print_",
        "<builtin>.map",
        "<builtin>.bin",
        "sre_compile.dis.dis_",
        "sre_compile._hex_code",
        "<builtin>.str"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "<builtin>.callable",
        "functools.update_wrapper",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "functools._lru_cache_wrapper"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object"
    ],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "copyreg": [
        "<builtin>.type",
        "copyreg.pickle"
    ],
    "copyreg.pickle": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "copyreg.constructor"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "subprocess": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "subprocess._use_posix_spawn"
    ],
    "io": [],
    "signal": [
        "<builtin>.globals",
        "signal._wraps",
        "signal._wraps.decorator"
    ],
    "signal._wraps": [],
    "signal._wraps.decorator": [],
    "threading": [
        "collections.namedtuple",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.hasattr",
        "<builtin>.set",
        "threading._MainThread.__init__",
        "threading.RLock",
        "append"
    ],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.RLock": [
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [],
    "_weakrefset.WeakSet.__init__": [
        "<builtin>.set",
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [],
    "linecache": [],
    "tokenize": [
        "collections.namedtuple",
        "<builtin>.any",
        "re.compile",
        "functools.lru_cache",
        "tokenize.group",
        "<builtin>.sorted",
        "<builtin>.map",
        "<builtin>.set",
        "tokenize._all_string_prefixes",
        "tokenize.maybe"
    ],
    "token": [
        "<builtin>.globals",
        "<builtin>.isinstance",
        "extend"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.ValueError",
        "<builtin>.len",
        "<builtin>.iter",
        "<builtin>.type",
        "<builtin>.isinstance",
        "sre_compile.isstring",
        "<builtin>.TypeError",
        "sre_compile.compile",
        "<builtin>.next"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading._MainThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Thread._set_tstate_lock",
        "threading.Thread.__init__",
        "threading.Thread._set_ident",
        "threading.Event.set"
    ],
    "threading.Thread.__init__": [
        "threading._newname",
        "threading._make_invoke_excepthook",
        "threading.Event.__init__",
        "_weakrefset.WeakSet.add",
        "<builtin>.str",
        "threading.current_thread"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_ident",
        "threading.Thread.__init__",
        "threading.Thread._set_native_id",
        "threading._newname"
    ],
    "threading.Thread._set_ident": [],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "contextlib.contextmanager"
    ],
    "weakref": [],
    "weakref.finalize": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "contextlib": [],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "warnings": [
        "<builtin>.hasattr",
        "warnings.simplefilter",
        "warnings.filterwarnings",
        "warnings._processoptions"
    ],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "<builtin>.len",
        "warnings._getaction",
        "warnings.filterwarnings",
        "<builtin>.int",
        "warnings._getcategory",
        "re.escape"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.__import__",
        "<builtin>.getattr",
        "<builtin>.issubclass"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<builtin>.isinstance",
        "<str>.encode",
        "<str>.translate",
        "<builtin>.str"
    ],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "warnings._add_filter",
        "<builtin>.isinstance",
        "re.compile",
        "<builtin>.issubclass"
    ],
    "warnings._add_filter": [
        "insert",
        "append",
        "warnings._filters_mutated",
        "remove"
    ],
    "remove": [],
    "insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "<builtin>.isinstance",
        "warnings._add_filter"
    ],
    "selectors": [
        "<builtin>.hasattr",
        "collections.namedtuple",
        "selectors._can_use"
    ],
    "collections.abc": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._can_use": [
        "<builtin>.getattr"
    ],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.CompletedProcess": [
        "<builtin>.classmethod"
    ],
    "subprocess._use_posix_spawn": [
        "<builtin>.hasattr",
        "<builtin>.len",
        "<builtin>.map",
        "<builtin>.tuple"
    ],
    "subprocess.Popen": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "platform._Processor": [
        "<builtin>.classmethod"
    ],
    "platform.uname_result": [
        "functools.cached_property.__init__",
        "<builtin>.classmethod"
    ],
    "functools.cached_property.__init__": [],
    "textwrap": [
        "re.compile"
    ],
    "textwrap.TextWrapper": [
        "<builtin>.ord",
        "re.compile",
        "re.escape"
    ],
    "<builtin>.ord": [],
    "ctypes": [
        "ctypes.CFUNCTYPE",
        "ctypes._check_size",
        "ctypes.LibraryLoader.__init__",
        "ctypes.PYFUNCTYPE",
        "<builtin>.Exception",
        "ctypes._reset_cache",
        "<builtin>.int"
    ],
    "struct": [],
    "<builtin>.Exception": [],
    "ctypes._check_size": [
        "<builtin>.SystemError"
    ],
    "ctypes.LibraryLoader": [
        "<builtin>.classmethod"
    ],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "<builtin>.ValueError"
    ],
    "ctypes.PYFUNCTYPE": [],
    "ctypes._endian": [
        "<builtin>.type"
    ],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "<map>.clear": [],
    "inspect": [
        "collections.namedtuple",
        "<builtin>.globals",
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.object",
        "<map>.items"
    ],
    "ast": [
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.repr",
        "<builtin>.property"
    ],
    "<builtin>.repr": [],
    "ast._Unparser": [
        "<builtin>.frozenset",
        "contextlib.contextmanager",
        "<builtin>.property"
    ],
    "dis": [
        "collections.namedtuple"
    ],
    "opcode": [
        "opcode.jabs_op",
        "opcode.def_op",
        "<builtin>.range",
        "opcode.jrel_op",
        "append",
        "opcode.name_op"
    ],
    "opcode.def_op": [],
    "opcode.name_op": [
        "append",
        "opcode.def_op"
    ],
    "opcode.jrel_op": [
        "append",
        "opcode.def_op"
    ],
    "opcode.jabs_op": [
        "append",
        "opcode.def_op"
    ],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "<str>.replace": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "torch._utils": [],
    "typing": [
        "<builtin>.frozenset",
        "typing._tp_cache.decorator",
        "typing._SpecialGenericAlias.__init__",
        "typing.TypeVar.__init__",
        "typing._SpecialForm.__init__",
        "typing._tp_cache"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "typing._tp_cache.decorator"
    ],
    "typing._tp_cache.decorator": [
        "functools.lru_cache",
        "append",
        "functools.wraps",
        "functools.lru_cache.decorating_function"
    ],
    "typing._SpecialForm.__init__": [],
    "typing.ParamSpec": [
        "<builtin>.property"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing._CallableType": [
        "typing._tp_cache"
    ],
    "typing._TupleType": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.Annotated": [
        "typing._tp_cache"
    ],
    "typing.TypeVar.__init__": [
        "typing._type_check",
        "<builtin>.len",
        "<builtin>.super",
        "<builtin>.TypeError",
        "<builtin>.tuple"
    ],
    "typing._type_check": [
        "<builtin>.isinstance",
        "typing._type_convert",
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "typing._type_convert": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "typing.ForwardRef.__init__"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.isinstance",
        "<builtin>.SyntaxError",
        "<builtin>.compile",
        "<builtin>.TypeError"
    ],
    "<builtin>.compile": [],
    "<builtin>.SyntaxError": [],
    "typing._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.IO": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "torch._utils_internal": [
        "posixpath.dirname",
        "posixpath.basename",
        "ntpath.basename",
        "ntpath.dirname"
    ],
    "tempfile": [
        "<builtin>.hasattr"
    ],
    "shutil": [
        "<builtin>.hasattr",
        "append",
        "collections.namedtuple"
    ],
    "fnmatch": [
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "bz2": [],
    "_compression": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "random": [
        "<builtin>.hasattr",
        "random.Random.__init__"
    ],
    "bisect": [],
    "hashlib": [
        "<builtin>.range",
        "<builtin>.globals",
        "<builtin>.set",
        "<builtin>.bytes",
        "hashlib.__get_builtin_constructor",
        "logging.exception"
    ],
    "hashlib.__get_builtin_constructor": [
        "<builtin>.ValueError",
        "<map>.get"
    ],
    "<map>.get": [],
    "logging": [
        "logging.Manager.__init__",
        "posixpath.normcase",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.hasattr",
        "weakref.WeakValueDictionary.__init__",
        "logging.Formatter.__init__",
        "logging.RootLogger.__init__",
        "ntpath.normcase",
        "threading.RLock",
        "logging._StderrHandler.__init__"
    ],
    "string": [
        "string.Template.__init_subclass__"
    ],
    "string.Template.__init_subclass__": [
        "re.compile",
        "<builtin>.super",
        "re.escape"
    ],
    "<str>.translate": [],
    "<str>.encode": [],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "os._fspath": [
        "<str>.format",
        "<builtin>.type",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "<str>.format": [],
    "ntpath.normcase": [
        "<builtin>.isinstance",
        "os._fspath"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.Formatter.__init__": [
        "logging.StringTemplateStyle.validate",
        "<builtin>.ValueError",
        "<map>.keys",
        "logging.PercentStyle.validate",
        "logging.StringTemplateStyle.__init__",
        "logging.PercentStyle.__init__",
        "logging.StrFormatStyle.validate"
    ],
    "<map>.keys": [],
    "logging.StringTemplateStyle.__init__": [
        "string.Template.__init__",
        "<builtin>.super"
    ],
    "string.Template.__init__": [],
    "logging.PercentStyle.__init__": [],
    "weakref.WeakValueDictionary.__init__": [
        "<builtin>.set",
        "weakref.WeakValueDictionary.update"
    ],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.hasattr",
        "weakref.KeyedRef.__init__",
        "<builtin>.dict",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary._commit_removals": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.Handler.createLock",
        "logging._checkLevel",
        "logging._addHandlerRef",
        "logging.Filterer.__init__"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.str"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "append"
    ],
    "logging._acquireLock": [],
    "logging.Handler.createLock": [
        "logging._register_at_fork_reinit_lock",
        "threading.RLock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging.Manager": [
        "<builtin>.property"
    ],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__"
    ],
    "logging.Manager.__init__": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "<builtin>.len",
        "logging.basicConfig",
        "logging.Logger.error"
    ],
    "logging.basicConfig": [
        "<builtin>.len",
        "logging.StreamHandler.__init__",
        "<builtin>.ValueError",
        "logging.FileHandler.__init__",
        "<map>.keys",
        "logging._acquireLock",
        "logging.Logger.removeHandler",
        "logging.Formatter.__init__",
        "logging.Logger.setLevel",
        "logging.Logger.addHandler"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "remove"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "ntpath.abspath",
        "logging.StreamHandler.__init__",
        "logging.Handler.__init__",
        "posixpath.abspath",
        "logging.FileHandler._open",
        "os._fspath"
    ],
    "posixpath.abspath": [
        "posixpath.isabs",
        "posixpath.normpath",
        "<builtin>.isinstance",
        "posixpath.join",
        "os._fspath"
    ],
    "posixpath.isabs": [
        "posixpath._get_sep",
        "os._fspath"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath.join": [
        "genericpath._check_arg_types",
        "<builtin>.map",
        "posixpath._get_sep",
        "os._fspath"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "posixpath.normpath": [
        "append",
        "<builtin>.isinstance",
        "pop",
        "os._fspath"
    ],
    "pop": [],
    "ntpath.abspath": [],
    "logging.FileHandler._open": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.StrFormatStyle.validate": [
        "<builtin>.ValueError",
        "string.Formatter.parse",
        "<builtin>.set"
    ],
    "string.Formatter.parse": [],
    "logging.Logger.addHandler": [
        "logging._acquireLock",
        "append"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.isEnabledFor": [
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "<builtin>.type",
        "logging.Logger.handle",
        "<builtin>.isinstance",
        "logging.Logger.makeRecord",
        "logging.Logger.findCaller"
    ],
    "logging.Logger.findCaller": [
        "posixpath.normcase",
        "logging.currentframe",
        "<builtin>.hasattr",
        "traceback.print_stack",
        "ntpath.normcase"
    ],
    "logging.currentframe": [],
    "traceback.print_stack": [
        "traceback.extract_stack",
        "traceback.print_list"
    ],
    "traceback.extract_stack": [
        "traceback.walk_stack",
        "traceback.StackSummary.extract"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "<builtin>.getattr",
        "traceback.FrameSummary.__init__",
        "<builtin>.set",
        "linecache.lazycache",
        "linecache.checkcache"
    ],
    "linecache.lazycache": [
        "<builtin>.getattr",
        "<str>.startswith",
        "<builtin>.len",
        "<str>.endswith"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "linecache.checkcache": [
        "<map>.pop",
        "<builtin>.len",
        "<map>.keys",
        "<builtin>.list"
    ],
    "<map>.pop": [],
    "traceback.print_list": [
        "traceback.StackSummary.format",
        "<builtin>.print",
        "traceback.StackSummary.from_list"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__",
        "<builtin>.isinstance"
    ],
    "traceback.StackSummary.format": [
        "append",
        "<builtin>.sorted"
    ],
    "logging.Logger.makeRecord": [
        "<builtin>.KeyError",
        "logging.LogRecord.__init__"
    ],
    "logging.LogRecord.__init__": [
        "<builtin>.len",
        "<builtin>.hasattr",
        "logging.getLevelName",
        "<builtin>.isinstance",
        "posixpath.splitext",
        "ntpath.basename",
        "ntpath.splitext",
        "<builtin>.int",
        "posixpath.basename",
        "threading.current_thread"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "posixpath.basename": [
        "posixpath._get_sep",
        "os._fspath"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "ntpath._get_bothseps",
        "<builtin>.len",
        "ntpath.splitdrive",
        "os._fspath"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.splitdrive": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "os._fspath"
    ],
    "posixpath.splitext": [
        "<builtin>.isinstance",
        "genericpath._splitext",
        "os._fspath"
    ],
    "genericpath._splitext": [
        "<builtin>.max"
    ],
    "ntpath.splitext": [
        "<builtin>.isinstance",
        "genericpath._splitext",
        "os._fspath"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.Handler.acquire",
        "logging.Filterer.filter",
        "logging.Handler.emit"
    ],
    "logging.Handler.acquire": [],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.len",
        "<builtin>.type",
        "warnings.warn",
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.ord",
        "<builtin>.super"
    ],
    "warnings.warn": [
        "<builtin>.type",
        "<builtin>.range",
        "warnings.warn_explicit",
        "<builtin>.isinstance",
        "warnings._is_internal_frame",
        "<builtin>.TypeError",
        "<builtin>.issubclass",
        "warnings._next_external_frame"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<str>.lower",
        "<builtin>.RuntimeError",
        "warnings._showwarnmsg",
        "linecache.getlines",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.issubclass",
        "warnings.WarningMessage.__init__",
        "<map>.get",
        "<builtin>.int",
        "<map>.clear"
    ],
    "<str>.lower": [],
    "linecache.getlines": [
        "linecache.updatecache",
        "<builtin>.len",
        "linecache.clearcache"
    ],
    "linecache.updatecache": [
        "ntpath.isabs",
        "<builtin>.len",
        "<str>.endswith",
        "<map>.pop",
        "ntpath.join",
        "posixpath.isabs",
        "tokenize.open",
        "linecache.lazycache",
        "posixpath.join",
        "<str>.startswith"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "ntpath.isabs": [
        "<builtin>.len",
        "ntpath._get_bothseps",
        "<builtin>.isinstance",
        "ntpath.splitdrive",
        "os._fspath"
    ],
    "ntpath.join": [
        "<builtin>.isinstance",
        "<builtin>.map",
        "genericpath._check_arg_types",
        "ntpath.splitdrive",
        "os._fspath"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding"
    ],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.find_cookie",
        "tokenize.detect_encoding.read_or_stop"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "<builtin>.SyntaxError",
        "tokenize._get_normal_name"
    ],
    "tokenize._get_normal_name": [],
    "linecache.clearcache": [
        "<map>.clear"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "linecache.getline"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [],
    "pickle": [
        "extend",
        "append"
    ],
    "_compat_pickle": [
        "<builtin>.len",
        "<builtin>.dict",
        "<map>.items",
        "<map>.update"
    ],
    "<map>.update": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [
        "<builtin>.property"
    ],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "posixpath.dirname": [
        "<builtin>.len",
        "posixpath._get_sep",
        "os._fspath"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "torch.torch_version": [
        "<builtin>.setattr",
        "torch.torch_version._LazyImport.__init__"
    ],
    "torch.version": [],
    "torch.torch_version._LazyImport.__init__": [],
    "<builtin>.setattr": [],
    "torch._six": [],
    "os.getenv": [],
    "<builtin>.filter": [],
    "genericpath.exists": [],
    "<builtin>.all": [],
    "glob": [
        "<builtin>.getattr",
        "re.compile"
    ],
    "glob.glob": [
        "glob.iglob",
        "<builtin>.list"
    ],
    "glob.iglob": [
        "glob._iglob",
        "<builtin>.next",
        "glob._isrecursive",
        "os._fspath"
    ],
    "glob._iglob": [
        "glob._glob0",
        "ntpath.split",
        "glob.has_magic",
        "glob._isdir",
        "glob._isrecursive",
        "glob._iglob",
        "ntpath.join",
        "glob._join",
        "posixpath.split",
        "glob._lexists",
        "posixpath.join",
        "glob._glob2",
        "glob._glob1"
    ],
    "posixpath.split": [
        "<builtin>.len",
        "posixpath._get_sep",
        "os._fspath"
    ],
    "glob.has_magic": [
        "<builtin>.isinstance"
    ],
    "glob._join": [
        "ntpath.join",
        "posixpath.join"
    ],
    "glob._isdir": [
        "genericpath.isdir"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "glob._lexists": [
        "ntpath.lexists",
        "posixpath.lexists"
    ],
    "posixpath.lexists": [],
    "ntpath.lexists": [],
    "glob._isrecursive": [
        "<builtin>.isinstance"
    ],
    "glob._glob1": [
        "glob._ishidden",
        "glob._listdir",
        "fnmatch.filter"
    ],
    "glob._listdir": [
        "glob._iterdir",
        "contextlib.closing.__init__",
        "<builtin>.list"
    ],
    "glob._iterdir": [
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "contextlib.closing.__init__": [],
    "glob._ishidden": [],
    "fnmatch.filter": [
        "append",
        "ntpath.normcase",
        "posixpath.normcase",
        "fnmatch._compile_pattern"
    ],
    "fnmatch._compile_pattern": [
        "fnmatch.translate",
        "re.compile",
        "<builtin>.isinstance",
        "<builtin>.bytes",
        "<builtin>.str"
    ],
    "fnmatch.translate": [
        "",
        "<builtin>.len",
        "<builtin>.range",
        "re.sub",
        "<builtin>.object",
        "append"
    ],
    "re.sub": [
        "re._compile"
    ],
    "glob._glob2": [
        "glob._rlistdir",
        "glob._isrecursive"
    ],
    "glob._rlistdir": [
        "glob._ishidden",
        "glob._rlistdir",
        "glob._listdir",
        "glob._join"
    ],
    "glob._glob0": [
        "glob._isdir",
        "glob._join",
        "glob._lexists"
    ],
    "ctypes.WinError": [
        "<builtin>.OSError"
    ],
    "<builtin>.OSError": [],
    "os.add_dll_directory": [
        "os._AddedDllDirectory.__init__"
    ],
    "os._AddedDllDirectory.__init__": [],
    "ctypes.CDLL.__init__": [
        "<str>.endswith"
    ],
    "platform.system": [
        "platform.uname"
    ],
    "platform.uname": [
        "<builtin>.any",
        "platform._node",
        "platform._syscmd_ver",
        "platform._get_machine_win32",
        "platform.java_ver",
        "platform.win32_ver",
        "<builtin>.map"
    ],
    "platform._node": [],
    "socket": [
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "extend",
        "<builtin>.object",
        "append"
    ],
    "socket.socket": [
        "<builtin>.hasattr",
        "<builtin>.property"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "platform.win32_ver": [
        "<builtin>.getattr",
        "platform._syscmd_ver",
        "<str>.split",
        "<builtin>.map",
        "<map>.get"
    ],
    "platform._syscmd_ver": [
        "platform._norm_version",
        "subprocess.check_output"
    ],
    "subprocess.check_output": [
        "<builtin>.ValueError",
        "subprocess.run"
    ],
    "subprocess.run": [
        "<builtin>.ValueError",
        "subprocess.Popen.__exit__",
        "subprocess.Popen.__init__",
        "subprocess.Popen.wait",
        "subprocess.CalledProcessError.__init__",
        "subprocess.CompletedProcess.__init__",
        "subprocess.Popen.poll",
        "subprocess.Popen.kill",
        "subprocess.Popen.__enter__",
        "subprocess.Popen.communicate"
    ],
    "subprocess.Popen.__init__": [
        "<builtin>.ValueError",
        "<builtin>.bool",
        "<builtin>.hasattr",
        "<builtin>.type",
        "subprocess.Popen._execute_child",
        "warnings.warn",
        "<builtin>.isinstance",
        "subprocess._cleanup",
        "<builtin>.TypeError",
        "subprocess.Popen._get_handles",
        "append",
        "<builtin>.filter"
    ],
    "subprocess._cleanup": [
        "remove"
    ],
    "subprocess.Popen._get_handles": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "subprocess.Popen._get_devnull"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._execute_child": [
        "<builtin>.ValueError",
        "<builtin>.len",
        "ntpath.dirname",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.TypeError",
        "os.get_exec_path",
        "<builtin>.int",
        "posixpath.dirname",
        "<builtin>.list",
        "subprocess.Popen._posix_spawn",
        "<builtin>.bytes",
        "<builtin>.tuple",
        "<builtin>.bytearray",
        "append",
        "<builtin>.hasattr",
        "ntpath.join",
        "subprocess.Popen._handle_exitstatus",
        "<builtin>.map",
        "<builtin>.sorted",
        "posixpath.join",
        "<builtin>.issubclass"
    ],
    "subprocess.Popen._posix_spawn": [
        "<builtin>.getattr",
        "append",
        "subprocess.Popen._close_pipe_fds"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr"
    ],
    "os.get_exec_path": [
        "warnings.catch_warnings.__init__",
        "<str>.split"
    ],
    "warnings.catch_warnings.__init__": [],
    "subprocess.Popen._handle_exitstatus": [],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [],
    "subprocess.Popen.communicate": [
        "<builtin>.ValueError",
        "subprocess.Popen.wait",
        "subprocess.Popen._communicate",
        "<builtin>.min",
        "subprocess.Popen._stdin_write",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._wait"
    ],
    "subprocess.Popen._communicate": [
        "<builtin>.RuntimeError",
        "<builtin>.memoryview",
        "subprocess.Popen.wait",
        "subprocess.Popen._translate_newlines",
        "subprocess.Popen._save_input",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._check_timeout"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.set",
        "<builtin>.super"
    ],
    "subprocess.Popen._remaining_time": [],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.Popen.wait": [
        "<builtin>.min",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._wait"
    ],
    "subprocess.Popen._wait": [
        "<builtin>.min",
        "subprocess.TimeoutExpired.__init__",
        "subprocess.Popen._handle_exitstatus",
        "subprocess.Popen._try_wait",
        "subprocess.Popen._remaining_time"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [
        "subprocess.Popen.poll"
    ],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "platform._norm_version": [
        "<str>.split",
        "<builtin>.map",
        "<builtin>.list"
    ],
    "platform._get_machine_win32": [],
    "platform.java_ver": [
        "platform._java_getprop"
    ],
    "platform._java_getprop": [],
    "torch._load_global_deps": [
        "ntpath.abspath",
        "ctypes.CDLL.__init__",
        "ntpath.dirname",
        "posixpath.dirname",
        "ntpath.join",
        "platform.system",
        "posixpath.join",
        "posixpath.abspath"
    ],
    "textwrap.dedent": [
        "<builtin>.enumerate",
        "re.sub",
        "<builtin>.zip"
    ],
    "<builtin>.dir": [],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "torch._tensor": [],
    "numbers": [],
    "numbers.Complex": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "numbers.Real": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "numbers.Rational": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "numbers.Integral": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "copy": [
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "torch._namedtensor_internals": [],
    "torch.overrides": [
        "functools.lru_cache",
        "contextlib.contextmanager",
        "functools.lru_cache.decorating_function"
    ],
    "__future__": [
        "__future__._Feature.__init__"
    ],
    "__future__._Feature.__init__": [],
    "torch.utils._mode_utils": [],
    "dataclasses": [
        "re.compile",
        "dataclasses._FIELD_BASE.__init__"
    ],
    "dataclasses._FIELD_BASE.__init__": [],
    "dataclasses.Field": [
        "<builtin>.classmethod"
    ],
    "torch.overrides.TorchFunctionMode": [
        "<builtin>.classmethod"
    ],
    "torch.utils.hooks": [],
    "torch._tensor.Tensor": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "torch._tensor._handle_torch_function_and_wrap_type_error_to_not_implemented"
    ],
    "torch._tensor._handle_torch_function_and_wrap_type_error_to_not_implemented": [
        "functools.wraps"
    ],
    "torch.storage": [
        "functools.lru_cache",
        "typing.TypeVar.__init__",
        "functools.lru_cache.decorating_function"
    ],
    "torch.types": [],
    "numpy": [
        "remove",
        "<builtin>.len",
        "numpy._mac_os_check",
        "<builtin>.RuntimeError",
        "numpy._pytesttester.PytestTester.__init__",
        "extend",
        "<builtin>.ImportError",
        "warnings.catch_warnings.__init__",
        "numpy.core.multiarray._using_numpy2_behavior",
        "<builtin>.tuple",
        "<map>.update",
        "warnings.filterwarnings",
        "numpy.core.getlimits._register_known_types",
        "numpy._sanity_check",
        "<builtin>.int",
        "<builtin>.str"
    ],
    "numpy._globals": [
        "<builtin>.globals",
        "<builtin>.RuntimeError"
    ],
    "numpy._utils": [],
    "numpy._utils._convertions": [],
    "numpy.exceptions": [
        "<builtin>.globals",
        "<builtin>.RuntimeError"
    ],
    "numpy.version": [],
    "numpy._distributor_init": [],
    "numpy.__config__": [
        "<str>.lower",
        "<str>.replace",
        "numpy.__config__._cleanup",
        "<builtin>.bool"
    ],
    "numpy.__config__._cleanup": [
        "<builtin>.isinstance",
        "<map>.items",
        "numpy.__config__._cleanup"
    ],
    "numpy.core": [
        "numpy._pytesttester.PytestTester.__init__",
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.ImportError",
        "copyreg.pickle",
        "append"
    ],
    "numpy.core.multiarray": [],
    "numpy.core.overrides": [
        "collections.namedtuple",
        "<builtin>.set"
    ],
    "numpy._utils._inspect": [],
    "numpy.core.umath": [],
    "numpy.core.numerictypes": [
        "<builtin>.len",
        "numpy.core.numerictypes._register_types",
        "<builtin>.globals",
        "numpy._utils.set_module.decorator",
        "<builtin>.sorted",
        "numpy.core.numerictypes._construct_lookups",
        "numpy._utils.set_module",
        "<builtin>.tuple",
        "append"
    ],
    "numpy.core._string_helpers": [
        "<builtin>.range",
        "<builtin>.map",
        "<builtin>.tuple"
    ],
    "numpy.core._type_aliases": [
        "numpy.core._type_aliases._add_integer_aliases",
        "numpy.core._type_aliases._set_up_aliases",
        "<builtin>.list",
        "numpy.core._type_aliases._add_types",
        "numpy.core._type_aliases._add_aliases",
        "<builtin>.isinstance",
        "numpy.core._type_aliases._set_array_types",
        "<map>.items",
        "numpy.core._string_helpers.english_lower"
    ],
    "numpy.compat": [
        "extend"
    ],
    "numpy.compat.py3k": [],
    "pathlib": [
        "<builtin>.hasattr",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "urllib.parse": [
        "<builtin>.frozenset",
        "collections.namedtuple",
        "re.compile",
        "<builtin>.bytes",
        "urllib.parse._fix_result_transcoding"
    ],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse._fix_result_transcoding": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.set"
    ],
    "pathlib._NormalAccessor": [
        "<builtin>.hasattr",
        "<builtin>.staticmethod"
    ],
    "pathlib.PurePath": [
        "<builtin>.classmethod",
        "operator.attrgetter.__init__",
        "<builtin>.property"
    ],
    "operator.attrgetter.__init__": [
        "<builtin>.tuple",
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.TypeError"
    ],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "numpy.core._dtype": [],
    "numpy.core._string_helpers.english_lower": [],
    "numpy.core._type_aliases._add_types": [
        "<map>.items"
    ],
    "numpy.core._type_aliases._add_aliases": [
        "numpy.core._type_aliases.bitname",
        "<map>.items"
    ],
    "numpy.core._type_aliases.bitname": [
        "numpy.core._dtype._kind_name",
        "numpy.core._type_aliases._bits_of"
    ],
    "numpy.core._type_aliases._bits_of": [
        "<builtin>.ValueError",
        "<builtin>.next",
        "<map>.values"
    ],
    "<map>.values": [],
    "numpy.core._dtype._kind_name": [
        "<builtin>.RuntimeError"
    ],
    "numpy.core._type_aliases._add_integer_aliases": [
        "<builtin>.set",
        "<builtin>.zip"
    ],
    "numpy.core._type_aliases._set_up_aliases": [],
    "numpy.core._type_aliases._set_array_types": [
        "<builtin>.len",
        "numpy.core._type_aliases._add_array_type"
    ],
    "numpy.core._type_aliases._add_array_type": [],
    "numpy._utils.set_module": [],
    "numpy._utils.set_module.decorator": [],
    "numpy.core.numerictypes._construct_lookups": [
        "<builtin>.len"
    ],
    "numpy.core.numerictypes._register_types": [],
    "numpy.core.numeric": [
        "<builtin>.type",
        "numpy.core.numeric.extend_all",
        "numpy._utils.set_module.decorator",
        "numpy.core.overrides.set_array_function_like_doc",
        "numpy._utils.set_module"
    ],
    "numpy.core.shape_base": [
        "<builtin>.getattr"
    ],
    "numpy.core.fromnumeric": [
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.core._methods": [
        "<map>.update"
    ],
    "numpy.core._exceptions": [],
    "numpy.core._exceptions._ArrayMemoryError": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "numpy.core._ufunc_config": [
        "contextlib.contextmanager",
        "numpy._utils.set_module.decorator",
        "numpy.core._ufunc_config._setdef",
        "numpy._utils.set_module",
        "<map>.items"
    ],
    "contextvars": [],
    "numpy.core._ufunc_config._setdef": [],
    "numpy.core.overrides.set_array_function_like_doc": [],
    "numpy.core.arrayprint": [
        "contextlib.contextmanager",
        "numpy.core.arrayprint._recursive_guard.decorating_function",
        "numpy.core.overrides.array_function_dispatch",
        "<builtin>.getattr",
        "numpy.core.arrayprint._recursive_guard",
        "numpy._utils.set_module.decorator",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.core.arrayprint._recursive_guard": [],
    "numpy.core.arrayprint._recursive_guard.decorating_function": [
        "functools.wraps",
        "<builtin>.set"
    ],
    "numpy.core.overrides.array_function_dispatch": [],
    "numpy.core.overrides.array_function_dispatch.decorator": [
        "functools.wraps",
        "<builtin>.RuntimeError",
        "numpy.core.overrides.verify_matching_signatures"
    ],
    "numpy.core.overrides.verify_matching_signatures": [
        "<builtin>.len",
        "numpy._utils._inspect.getargspec",
        "<builtin>.RuntimeError",
        "<builtin>.bool"
    ],
    "numpy._utils._inspect.getargspec": [
        "numpy._utils._inspect.isfunction",
        "numpy._utils._inspect.ismethod",
        "numpy._utils._inspect.getargs",
        "<builtin>.TypeError"
    ],
    "numpy._utils._inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "numpy._utils._inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "numpy._utils._inspect.getargs": [
        "<builtin>.range",
        "<builtin>.list",
        "<builtin>.TypeError",
        "numpy._utils._inspect.iscode"
    ],
    "numpy._utils._inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "numpy.core.arrayprint.StructuredVoidFormat": [
        "<builtin>.classmethod"
    ],
    "numpy.core._asarray": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy._utils.set_module.decorator",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "numpy.core.overrides.set_array_function_like_doc",
        "numpy._utils.set_module"
    ],
    "numpy.core.numeric.extend_all": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "numpy.core.defchararray": [
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.core.records": [
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.core.memmap": [],
    "numpy.core.function_base": [],
    "numpy.core._machar": [],
    "numpy.core.getlimits": [
        "<builtin>.dict"
    ],
    "numpy.core.getlimits.MachArLike": [
        "<builtin>.property"
    ],
    "numpy.core.getlimits.finfo": [
        "<builtin>.property"
    ],
    "numpy.core.getlimits.iinfo": [
        "<builtin>.property"
    ],
    "numpy.core.einsumfunc": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "<builtin>.set"
    ],
    "numpy.core._add_newdocs": [
        "<str>.replace",
        "numpy.core.function_base.add_newdoc",
        "numpy.core._add_newdocs.refer_to_array_attribute"
    ],
    "numpy.core.function_base.add_newdoc": [
        "numpy.core.function_base._add_docstring",
        "<builtin>.globals",
        "<builtin>.getattr",
        "<builtin>.__import__",
        "<builtin>.isinstance",
        "<str>.strip"
    ],
    "numpy.core.function_base._add_docstring": [
        "warnings.warn",
        "numpy.core.function_base._needs_add_docstring"
    ],
    "numpy.core.function_base._needs_add_docstring": [
        "<builtin>.isinstance"
    ],
    "numpy.core._add_newdocs.refer_to_array_attribute": [],
    "numpy.core._add_newdocs_scalars": [
        "numpy.core._add_newdocs_scalars.add_newdoc_for_scalar_type",
        "numpy.core._add_newdocs_scalars.numeric_type_aliases",
        "numpy.core._add_newdocs_scalars._get_platform_and_machine",
        "numpy.core.function_base.add_newdoc"
    ],
    "numpy.core._add_newdocs_scalars.numeric_type_aliases": [
        "numpy.core._add_newdocs_scalars.numeric_type_aliases.type_aliases_gen",
        "<builtin>.list"
    ],
    "numpy.core._add_newdocs_scalars.numeric_type_aliases.type_aliases_gen": [
        "<builtin>.getattr"
    ],
    "numpy.core._add_newdocs_scalars._get_platform_and_machine": [],
    "numpy.core._add_newdocs_scalars.add_newdoc_for_scalar_type": [
        "<builtin>.getattr",
        "<str>.strip",
        "numpy.core.function_base.add_newdoc"
    ],
    "numpy.core._dtype_ctypes": [],
    "numpy.core._internal": [
        "re.compile",
        "<map>.keys"
    ],
    "numpy.core._internal._ctypes": [
        "<builtin>.property"
    ],
    "numpy.core._internal._Stream": [
        "<builtin>.property"
    ],
    "numpy._pytesttester": [],
    "numpy._pytesttester.PytestTester.__init__": [],
    "numpy.dtypes": [],
    "numpy.lib": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.lib.mixins": [],
    "numpy.lib.mixins.NDArrayOperatorsMixin": [
        "numpy.lib.mixins._reflected_binary_method",
        "numpy.lib.mixins._numeric_methods",
        "numpy.lib.mixins._unary_method",
        "numpy.lib.mixins._binary_method"
    ],
    "numpy.lib.mixins._binary_method": [],
    "numpy.lib.mixins._numeric_methods": [
        "numpy.lib.mixins._inplace_binary_method",
        "numpy.lib.mixins._reflected_binary_method",
        "numpy.lib.mixins._binary_method"
    ],
    "numpy.lib.mixins._reflected_binary_method": [],
    "numpy.lib.mixins._inplace_binary_method": [],
    "numpy.lib.mixins._unary_method": [],
    "numpy.lib.scimath": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy.core.overrides.array_function_dispatch.decorator"
    ],
    "numpy.lib.type_check": [
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.lib.ufunclike": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy.core.overrides.array_function_dispatch.decorator"
    ],
    "numpy.lib.index_tricks": [
        "numpy.lib.index_tricks.RClass.__init__",
        "numpy.lib.index_tricks.IndexExpression.__init__",
        "numpy._utils.set_module.decorator",
        "numpy.lib.index_tricks.CClass.__init__",
        "numpy.lib.index_tricks.MGridClass.__init__",
        "numpy.lib.index_tricks.OGridClass.__init__",
        "numpy._utils.set_module"
    ],
    "numpy.matrixlib": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.matrixlib.defmatrix": [
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.linalg": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.linalg.linalg": [
        "numpy.linalg.linalg._determine_error_states"
    ],
    "numpy.lib.twodim_base": [
        "numpy.core.getlimits.iinfo.__init__",
        "numpy.core.overrides.set_array_function_like_doc",
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.lib.stride_tricks": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.core.getlimits.iinfo.__init__": [
        "<builtin>.type",
        "<builtin>.ValueError"
    ],
    "numpy._typing": [],
    "numpy._typing._nested_sequence": [
        "typing.TypeVar.__init__"
    ],
    "numpy._typing._nbit": [],
    "numpy._typing._char_codes": [],
    "numpy._typing._scalars": [],
    "numpy._typing._shape": [],
    "numpy._typing._dtype_like": [
        "typing.TypeVar.__init__"
    ],
    "numpy._typing._dtype_like._SupportsDType": [
        "<builtin>.property"
    ],
    "numpy._typing._array_like": [
        "typing.TypeVar.__init__"
    ],
    "numpy.linalg.linalg._determine_error_states": [
        "numpy.core._ufunc_config.errstate.__init__"
    ],
    "numpy.core._ufunc_config.errstate.__init__": [],
    "numpy.matrixlib.defmatrix.matrix": [
        "<builtin>.property"
    ],
    "numpy.lib.function_base": [
        "<builtin>.hasattr",
        "<builtin>.dict",
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.lib.histograms": [],
    "numpy.lib.index_tricks.MGridClass.__init__": [
        "<builtin>.super"
    ],
    "numpy.lib.index_tricks.OGridClass.__init__": [
        "<builtin>.super"
    ],
    "numpy.lib.index_tricks.AxisConcatenator": [
        "<builtin>.staticmethod"
    ],
    "numpy.lib.index_tricks.RClass.__init__": [
        "numpy.lib.index_tricks.AxisConcatenator.__init__"
    ],
    "numpy.lib.index_tricks.AxisConcatenator.__init__": [],
    "numpy.lib.index_tricks.CClass.__init__": [
        "numpy.lib.index_tricks.AxisConcatenator.__init__"
    ],
    "numpy.lib.index_tricks.IndexExpression.__init__": [],
    "numpy.lib.nanfunctions": [],
    "numpy.lib.shape_base": [],
    "numpy.lib.polynomial": [
        "warnings.simplefilter",
        "re.compile"
    ],
    "numpy.lib.polynomial.poly1d": [
        "<builtin>.property"
    ],
    "numpy.lib.utils": [
        "re.compile",
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.lib.arraysetops": [],
    "numpy.lib.npyio": [
        "<builtin>.sorted",
        "numpy.core.overrides.set_array_function_like_doc",
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.lib.format": [
        "<builtin>.len"
    ],
    "numpy.lib._datasource": [
        "numpy.lib._datasource._FileOpeners.__init__"
    ],
    "numpy.lib._datasource._FileOpeners.__init__": [],
    "numpy.lib._iotools": [],
    "numpy.lib._iotools.NameValidator": [
        "<builtin>.set"
    ],
    "numpy.lib._iotools.StringConverter": [
        "extend",
        "append",
        "<builtin>.classmethod"
    ],
    "numpy.lib.arrayterator": [],
    "numpy.lib.arrayterator.Arrayterator": [
        "<builtin>.property"
    ],
    "numpy.lib.arraypad": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy.core.overrides.array_function_dispatch.decorator"
    ],
    "numpy.lib._version": [],
    "numpy.fft": [
        "numpy._pytesttester.PytestTester.__init__",
        "copy"
    ],
    "numpy.fft._pocketfft": [],
    "numpy.fft.helper": [
        "numpy.core.overrides.array_function_dispatch",
        "numpy.core.overrides.array_function_dispatch.decorator",
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy.polynomial": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.polynomial.polynomial": [],
    "numpy.polynomial.polyutils": [],
    "numpy.polynomial._polybase": [],
    "numpy.polynomial._polybase.ABCPolyBase": [
        "abc.abstractmethod",
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "numpy.polynomial.polynomial.Polynomial": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "numpy.polynomial.chebyshev": [],
    "numpy.polynomial.chebyshev.Chebyshev": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "numpy.polynomial.legendre": [],
    "numpy.polynomial.legendre.Legendre": [
        "<builtin>.staticmethod"
    ],
    "numpy.polynomial.hermite": [],
    "numpy.polynomial.hermite.Hermite": [
        "<builtin>.staticmethod"
    ],
    "numpy.polynomial.hermite_e": [],
    "numpy.polynomial.hermite_e.HermiteE": [
        "<builtin>.staticmethod"
    ],
    "numpy.polynomial.laguerre": [],
    "numpy.polynomial.laguerre.Laguerre": [
        "<builtin>.staticmethod"
    ],
    "numpy.random": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.random._pickle": [],
    "numpy.ctypeslib": [
        "numpy.ctypeslib._get_scalar_type_map",
        "numpy.core._internal._getintp_ctype"
    ],
    "numpy.core._internal._getintp_ctype": [
        "numpy.core._internal.dummy_ctype.__init__"
    ],
    "numpy.core._internal.dummy_ctype.__init__": [],
    "numpy.ctypeslib._ndptr": [
        "<builtin>.classmethod"
    ],
    "numpy.ctypeslib._concrete_ndptr": [
        "<builtin>.property"
    ],
    "numpy.ctypeslib._get_scalar_type_map": [],
    "numpy.ma": [
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.ma.core": [
        "numpy.ma.core._MaskedBinaryOperation.__init__",
        "numpy.ma.core._DomainGreaterEqual.__init__",
        "numpy.ma.core._DomainedBinaryOperation.__init__",
        "numpy.ma.core._extrema_operation.__init__",
        "numpy.ma.core._DomainGreater.__init__",
        "numpy.ma.core._DomainTan.__init__",
        "numpy.ma.core._MaskedPrintOption.__init__",
        "<builtin>.dict",
        "numpy.ma.core._DomainCheckInterval.__init__",
        "numpy.ma.core._MaskedUnaryOperation.__init__",
        "numpy.ma.core._frommethod.__init__",
        "numpy.ma.core.doc_note",
        "<builtin>.complex",
        "textwrap.dedent",
        "numpy.ma.core._convert2ma.__init__",
        "numpy.ma.core._DomainSafeDivide.__init__"
    ],
    "<builtin>.complex": [],
    "numpy.ma.core._MaskedUnaryOperation.__init__": [
        "<builtin>.super"
    ],
    "numpy.ma.core._DomainGreaterEqual.__init__": [],
    "numpy.ma.core._DomainGreater.__init__": [],
    "numpy.ma.core._DomainTan.__init__": [],
    "numpy.ma.core._DomainCheckInterval.__init__": [],
    "numpy.ma.core._MaskedBinaryOperation.__init__": [
        "<builtin>.super"
    ],
    "numpy.ma.core._DomainSafeDivide.__init__": [],
    "numpy.ma.core._DomainedBinaryOperation.__init__": [
        "<builtin>.super"
    ],
    "numpy.ma.core._MaskedPrintOption.__init__": [],
    "numpy.ma.core.MaskedArray": [
        "numpy.ma.core._arraymethod",
        "<builtin>.property"
    ],
    "numpy.ma.core._arraymethod": [
        "<builtin>.getattr"
    ],
    "numpy.ma.core.mvoid": [
        "<builtin>.property"
    ],
    "numpy.ma.core.MaskedConstant": [
        "<builtin>.classmethod"
    ],
    "numpy.ma.core._frommethod.__init__": [
        "numpy.ma.core._frommethod.getdoc"
    ],
    "numpy.ma.core._frommethod.getdoc": [
        "<builtin>.getattr",
        "numpy.ma.core.get_object_signature"
    ],
    "numpy.ma.core.get_object_signature": [
        "numpy._utils._inspect.getargspec",
        "numpy._utils._inspect.formatargspec"
    ],
    "numpy._utils._inspect.formatargspec": [
        "<builtin>.len",
        "<builtin>.range",
        "numpy._utils._inspect.strseq",
        "numpy._utils._inspect.<lambda3>",
        "append"
    ],
    "numpy._utils._inspect.strseq": [
        "<builtin>.type",
        "numpy._utils._inspect.strseq",
        "numpy._utils._inspect.joinseq"
    ],
    "numpy._utils._inspect.joinseq": [
        "<builtin>.len"
    ],
    "numpy._utils._inspect.<lambda3>": [
        "<builtin>.repr"
    ],
    "numpy.ma.core._extrema_operation.__init__": [
        "<builtin>.super"
    ],
    "numpy.ma.core.doc_note": [
        "inspect.cleandoc",
        "re.split"
    ],
    "inspect.cleandoc": [
        "<str>.expandtabs"
    ],
    "re.split": [
        "re._compile"
    ],
    "<str>.expandtabs": [],
    "numpy.ma.core._convert2ma.__init__": [
        "<builtin>.getattr",
        "numpy.ma.core._convert2ma.getdoc"
    ],
    "numpy.ma.core._convert2ma.getdoc": [
        "<builtin>.getattr",
        "numpy.ma.core._convert2ma._replace_return_type",
        "numpy.ma.core.get_object_signature"
    ],
    "numpy.ma.core._convert2ma._replace_return_type": [
        "<builtin>.RuntimeError"
    ],
    "numpy.ma.extras": [
        "numpy.ma.extras.mr_class.__init__",
        "numpy.ma.core.doc_note"
    ],
    "numpy.ma.extras.MAxisConcatenator": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "numpy.ma.extras.mr_class.__init__": [
        "numpy.lib.index_tricks.AxisConcatenator.__init__"
    ],
    "numpy.core.getlimits._register_known_types": [
        "numpy.core._ufunc_config.errstate.__init__",
        "numpy.core.getlimits._register_type",
        "numpy.core.getlimits.MachArLike.__init__"
    ],
    "numpy.core.getlimits.MachArLike.__init__": [
        "<builtin>.int",
        "numpy.core.getlimits.MachArLike._float_to_float",
        "numpy.core.getlimits.MachArLike._float_conv",
        "numpy.core.getlimits.MachArLike._float_to_str"
    ],
    "numpy.core.getlimits.MachArLike._float_to_float": [
        "numpy.core.getlimits._fr1",
        "numpy.core.getlimits.MachArLike._float_conv"
    ],
    "numpy.core.getlimits.MachArLike._float_conv": [],
    "numpy.core.getlimits._fr1": [],
    "numpy.core.getlimits.MachArLike._float_to_str": [
        "numpy.core.getlimits._fr0"
    ],
    "numpy.core.getlimits._fr0": [],
    "numpy.core.getlimits._register_type": [],
    "numpy._sanity_check": [
        "<builtin>.RuntimeError",
        "<builtin>.abs",
        "<builtin>.AssertionError"
    ],
    "<builtin>.abs": [],
    "<builtin>.AssertionError": [],
    "numpy._mac_os_check": [],
    "numpy.core.multiarray._using_numpy2_behavior": [],
    "torch.storage._StorageBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "torch.storage._UntypedStorage": [
        "<builtin>.property"
    ],
    "torch.storage._TypedStorage": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "torch.storage._LegacyStorage": [
        "<builtin>.classmethod"
    ],
    "torch.ByteStorage": [
        "torch._utils.classproperty"
    ],
    "torch._utils.classproperty": [
        "<builtin>.classmethod",
        "<builtin>.isinstance",
        "torch._utils._ClassPropertyDescriptor.__init__"
    ],
    "torch._utils._ClassPropertyDescriptor.__init__": [],
    "torch.DoubleStorage": [
        "torch._utils.classproperty"
    ],
    "torch.FloatStorage": [
        "torch._utils.classproperty"
    ],
    "torch.HalfStorage": [
        "torch._utils.classproperty"
    ],
    "torch.LongStorage": [
        "torch._utils.classproperty"
    ],
    "torch.IntStorage": [
        "torch._utils.classproperty"
    ],
    "torch.ShortStorage": [
        "torch._utils.classproperty"
    ],
    "torch.CharStorage": [
        "torch._utils.classproperty"
    ],
    "torch.BoolStorage": [
        "torch._utils.classproperty"
    ],
    "torch.BFloat16Storage": [
        "torch._utils.classproperty"
    ],
    "torch.ComplexDoubleStorage": [
        "torch._utils.classproperty"
    ],
    "torch.ComplexFloatStorage": [
        "torch._utils.classproperty"
    ],
    "torch.QUInt8Storage": [
        "torch._utils.classproperty"
    ],
    "torch.QInt8Storage": [
        "torch._utils.classproperty"
    ],
    "torch.QInt32Storage": [
        "torch._utils.classproperty"
    ],
    "torch.QUInt4x2Storage": [
        "torch._utils.classproperty"
    ],
    "torch.QUInt2x4Storage": [
        "torch._utils.classproperty"
    ],
    "torch.random": [
        "contextlib.contextmanager"
    ],
    "torch.serialization": [
        "copyreg.pickle",
        "contextlib.contextmanager",
        "torch.serialization.register_package"
    ],
    "difflib": [
        "collections.namedtuple",
        "re.compile"
    ],
    "heapq": [],
    "difflib.SequenceMatcher": [
        "<builtin>.classmethod"
    ],
    "tarfile": [],
    "tarfile.TarInfo": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "<builtin>.dict",
        "<builtin>.property"
    ],
    "tarfile.TarFile": [
        "<builtin>.classmethod"
    ],
    "torch._sources": [
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "torch.serialization.register_package": [
        "append",
        "sort"
    ],
    "sort": [],
    "torch._tensor_str": [],
    "torch.amp": [],
    "torch.amp.autocast_mode": [],
    "torch.manager_path": [
        "torch._utils_internal.get_file_path",
        "<builtin>.RuntimeError",
        "genericpath.exists",
        "platform.system",
        "torch._utils_internal.prepare_multiprocessing_environment"
    ],
    "torch._utils_internal.get_file_path": [
        "ntpath.join",
        "posixpath.join"
    ],
    "torch._utils_internal.prepare_multiprocessing_environment": [],
    "torch.functional": [
        "torch._jit_internal.boolean_dispatch",
        "torch._jit_internal._overload"
    ],
    "torch.nn.functional": [
        "torch._jit_internal.boolean_dispatch",
        "torch._jit_internal._overload"
    ],
    "torch._VF": [
        "torch._VF.VFModule.__init__"
    ],
    "torch._VF.VFModule.__init__": [
        "<builtin>.super"
    ],
    "torch._torch_docs": [
        "torch._torch_docs.merge_dicts",
        "torch._torch_docs.parse_kwargs"
    ],
    "torch._torch_docs.parse_kwargs": [
        "<builtin>.len",
        "re.compile"
    ],
    "torch._torch_docs.merge_dicts": [],
    "torch._jit_internal": [
        "contextlib.contextmanager",
        "<builtin>.range",
        "<builtin>.globals",
        "torch.distributed.rpc.is_available",
        "weakref.WeakKeyDictionary.__init__"
    ],
    "torch.distributed.rpc": [
        "logging.getLogger",
        "<builtin>.RuntimeError",
        "torch.distributed.rpc.api._require_initialized",
        "torch.distributed.rpc.is_available"
    ],
    "datetime": [
        "datetime._days_before_year",
        "append",
        "datetime.timezone._create"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.IsoCalendarDate": [
        "<builtin>.property"
    ],
    "datetime.time": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.datetime": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.timezone": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "<builtin>.object"
    ],
    "datetime.timezone._create": [],
    "torch.distributed": [
        "<builtin>.RuntimeError",
        "torch.distributed.is_available"
    ],
    "torch.distributed.is_available": [
        "<builtin>.hasattr"
    ],
    "torch.distributed.distributed_c10d": [
        "logging.getLogger",
        "contextlib.contextmanager",
        "torch.distributed.distributed_c10d._reduce_op.__init__"
    ],
    "torch.distributed.constants": [],
    "torch.distributed.rendezvous": [
        "torch.distributed.rendezvous.register_rendezvous_handler",
        "<builtin>.ImportError"
    ],
    "torch.distributed.rendezvous.register_rendezvous_handler": [
        "<builtin>.RuntimeError"
    ],
    "logging.getLogger": [
        "<builtin>.isinstance"
    ],
    "torch.distributed.distributed_c10d.Backend": [
        "<builtin>.classmethod"
    ],
    "torch.distributed.distributed_c10d._reduce_op.__init__": [
        "<builtin>.setattr"
    ],
    "torch.distributed.distributed_c10d.GroupMember": [
        "<builtin>.object"
    ],
    "torch.distributed.remote_device": [],
    "torch.distributed.remote_device._remote_device": [
        "<builtin>.staticmethod"
    ],
    "torch.distributed.rpc.is_available": [
        "<builtin>.hasattr"
    ],
    "torch.distributed.rpc.api": [
        "torch.distributed.rpc.api.method_factory",
        "contextlib.contextmanager",
        "typing.TypeVar.__init__",
        "<builtin>.getattr",
        "logging.getLogger",
        "inspect.getmembers",
        "<builtin>.setattr",
        "torch.distributed.rpc.api._require_initialized",
        "<builtin>.set",
        "threading.RLock"
    ],
    "torch.futures": [
        "<builtin>.type",
        "typing.TypeVar.__init__"
    ],
    "torch.distributed.rpc.internal": [
        "collections.namedtuple",
        "torch.distributed.rpc.internal._InternalRPCPickler.__init__"
    ],
    "torch.distributed.rpc.internal._InternalRPCPickler": [
        "<builtin>.classmethod"
    ],
    "torch.distributed.rpc.internal._InternalRPCPickler.__init__": [
        "<map>.copy"
    ],
    "<map>.copy": [],
    "torch.distributed.rpc.constants": [],
    "torch.distributed.rpc._utils": [
        "logging.getLogger",
        "contextlib.contextmanager"
    ],
    "torch.distributed.rpc.api._require_initialized": [
        "functools.wraps"
    ],
    "inspect.getmembers": [
        "torch.jit._script._get_methods.<lambda1>",
        "<builtin>.getattr",
        "sort",
        "<builtin>.isinstance",
        "<builtin>.set",
        "inspect.getmro",
        "inspect.isclass",
        "append",
        "<builtin>.dir"
    ],
    "inspect.getmro": [],
    "torch.distributed.rpc.api.method_factory": [],
    "torch.distributed.rpc.backend_registry": [
        "collections.namedtuple",
        "torch.distributed.rpc.backend_registry.register_backend",
        "<builtin>.dict"
    ],
    "torch.distributed.rpc.backend_registry.register_backend": [
        "torch.distributed.rpc.backend_registry.backend_registered",
        "<builtin>.RuntimeError",
        "<builtin>.dict"
    ],
    "torch.distributed.rpc.backend_registry.backend_registered": [],
    "torch.distributed.rpc.functions": [],
    "torch.distributed.autograd": [
        "<builtin>.RuntimeError",
        "torch.distributed.autograd.is_available"
    ],
    "torch.distributed.autograd.is_available": [
        "<builtin>.hasattr"
    ],
    "torch.distributed.rpc.options": [],
    "torch.distributed.rpc.server_process_global_profiler": [],
    "torch.autograd.profiler_legacy": [],
    "torch.cuda": [
        "torch.cuda._utils._dummy_type",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "torch.cuda._lazy_call",
        "torch.cuda._LazySeedTracker.__init__",
        "<builtin>.staticmethod"
    ],
    "torch.cuda._utils": [],
    "torch.cuda.graphs": [
        "<builtin>.hasattr",
        "torch.cuda._utils._dummy_type"
    ],
    "torch.cuda._utils._dummy_type": [
        "<builtin>.type"
    ],
    "torch.cuda.streams": [
        "<builtin>.hasattr",
        "torch.cuda._utils._dummy_type"
    ],
    "torch.cuda.streams.Stream": [
        "<builtin>.property"
    ],
    "torch.cuda.streams.Event": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "torch.cuda._LazySeedTracker.__init__": [],
    "torch.cuda._lazy_call": [
        "<builtin>.callable",
        "torch.cuda.is_initialized",
        "traceback.format_stack",
        "append",
        "torch.cuda._LazySeedTracker.queue_seed_all",
        "torch.cuda._LazySeedTracker.queue_seed"
    ],
    "torch.cuda.is_initialized": [],
    "traceback.format_stack": [
        "traceback.extract_stack",
        "traceback.format_list"
    ],
    "traceback.format_list": [
        "traceback.StackSummary.format",
        "traceback.StackSummary.from_list"
    ],
    "torch.cuda._LazySeedTracker.queue_seed": [],
    "torch.cuda._LazySeedTracker.queue_seed_all": [],
    "torch.cuda.memory": [
        "contextlib.contextmanager"
    ],
    "torch.cuda.random": [],
    "torch.cuda._CudaLegacyStorage": [
        "<builtin>.classmethod"
    ],
    "torch.cuda.ByteStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.DoubleStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.FloatStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.HalfStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.LongStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.IntStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.ShortStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.CharStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.BoolStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.BFloat16Storage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.ComplexDoubleStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.ComplexFloatStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.sparse": [],
    "torch.cuda.profiler": [
        "contextlib.contextmanager"
    ],
    "torch.cuda.nvtx": [
        "contextlib.contextmanager"
    ],
    "torch.cuda.nvtx._NVTXStub": [
        "<builtin>.staticmethod"
    ],
    "torch.cuda.amp": [],
    "torch.cuda.amp.autocast_mode": [],
    "torch.cuda.amp.grad_scaler": [],
    "torch.cuda.amp.common": [],
    "importlib.util": [
        "contextlib.contextmanager"
    ],
    "importlib.util.LazyLoader": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.cuda.jiterator": [],
    "torch.autograd.profiler_util": [
        "collections.namedtuple"
    ],
    "torch.autograd": [
        "<builtin>.RuntimeError"
    ],
    "torch.autograd.variable": [
        "torch._six.with_metaclass"
    ],
    "torch._six.with_metaclass": [],
    "torch._six.with_metaclass.metaclass": [
        "<builtin>.classmethod"
    ],
    "torch.autograd.function": [
        "torch._six.with_metaclass",
        "torch.autograd.function._nested_map",
        "torch.autograd.function._iter_filter"
    ],
    "torch.autograd.function._HookMixin": [
        "<builtin>.staticmethod"
    ],
    "torch.autograd.function.Function": [
        "<builtin>.staticmethod"
    ],
    "torch.autograd.function._iter_filter": [],
    "torch.autograd.function._nested_map": [],
    "torch.autograd.function.NestedIOFunction": [
        "<builtin>.property"
    ],
    "torch.autograd.gradcheck": [
        "<str>.strip"
    ],
    "torch.testing": [],
    "torch.testing._comparison": [
        "<map>.update"
    ],
    "torch.testing._comparison.Pair": [
        "abc.abstractmethod",
        "<builtin>.staticmethod"
    ],
    "torch.testing._comparison.BooleanPair": [
        "<builtin>.property"
    ],
    "torch.testing._comparison.NumberPair": [
        "<builtin>.tuple",
        "<map>.keys",
        "<builtin>.property"
    ],
    "torch.testing._creation": [
        "<map>.items"
    ],
    "torch.testing._deprecated": [
        "torch.testing._deprecated.warn_deprecated",
        "<builtin>.getattr",
        "<builtin>.globals",
        "append",
        "torch.testing._deprecated.warn_deprecated.outer_wrapper"
    ],
    "torch.testing._legacy": [],
    "torch.testing._deprecated.warn_deprecated": [],
    "torch.testing._deprecated.warn_deprecated.outer_wrapper": [
        "functools.wraps"
    ],
    "torch._vmap_internals": [],
    "torch.utils._pytree": [
        "torch.utils._pytree._register_pytree_node"
    ],
    "torch.utils._pytree._register_pytree_node": [],
    "torch.autograd.grad_mode": [
        "typing.TypeVar.__init__"
    ],
    "torch.autograd.anomaly_mode": [],
    "torch.autograd.functional": [],
    "torch.autograd.forward_ad": [
        "collections.namedtuple"
    ],
    "torch.autograd.graph": [],
    "torch.autograd.profiler": [],
    "torch.autograd.profiler.profile": [
        "<builtin>.property"
    ],
    "torch.autograd.profiler_util.EventList": [
        "<builtin>.property"
    ],
    "torch.autograd.profiler_util.FormattedTimesMixin": [
        "torch.autograd.profiler_util._attr_formatter",
        "<builtin>.property"
    ],
    "torch.autograd.profiler_util._attr_formatter": [
        "<builtin>.property"
    ],
    "torch.autograd.profiler_util.FunctionEvent": [
        "<builtin>.property"
    ],
    "torch.autograd.profiler_legacy.profile": [
        "<builtin>.property"
    ],
    "torch.package._mangling": [],
    "typing_extensions": [
        "<builtin>.frozenset",
        "<builtin>.classmethod",
        "typing_extensions._ensure_subclassable.inner",
        "typing_extensions._UnpackSpecialForm.__init__",
        "typing.TypeVar.__init__",
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.getattr",
        "typing._tp_cache",
        "typing_extensions._SpecialGenericAlias.__init__",
        "inspect.signature",
        "typing_extensions._ensure_subclassable",
        "typing_extensions._LiteralForm.__init__",
        "typing_extensions._SpecialForm.__init__",
        "append"
    ],
    "typing_extensions._LiteralForm.__init__": [],
    "typing_extensions._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing_extensions.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsRound": [
        "abc.abstractmethod"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect._signature_from_callable": [
        "<builtin>.callable",
        "inspect.isfunction",
        "inspect._signature_from_function",
        "inspect._signature_get_user_defined_method",
        "<builtin>.ValueError",
        "inspect._signature_bound_method",
        "inspect._signature_is_functionlike",
        "<builtin>.type",
        "inspect._signature_from_builtin",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "inspect.Signature.from_callable",
        "inspect._signature_is_builtin",
        "inspect._signature_get_partial",
        "inspect.unwrap"
    ],
    "inspect._signature_bound_method": [
        "<builtin>.tuple",
        "<builtin>.ValueError"
    ],
    "inspect.unwrap": [
        "<builtin>.ValueError",
        "<builtin>.len",
        "inspect.unwrap._is_wrapper",
        "<builtin>.id"
    ],
    "<builtin>.id": [],
    "inspect.unwrap._is_wrapper": [
        "<builtin>.hasattr",
        "inspect._signature_from_callable.<lambda1>"
    ],
    "inspect._signature_from_callable.<lambda1>": [],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_is_functionlike": [
        "<builtin>.getattr",
        "<builtin>.callable",
        "<builtin>.isinstance",
        "inspect.isclass"
    ],
    "inspect._signature_from_function": [
        "inspect.isfunction",
        "<builtin>.len",
        "<builtin>.getattr",
        "inspect._signature_is_functionlike",
        "<builtin>.enumerate",
        "inspect._signature_fromstr",
        "inspect.Signature.__init__",
        "<builtin>.TypeError",
        "inspect.get_annotations",
        "append"
    ],
    "inspect._signature_fromstr": [
        "ast.parse",
        "<builtin>.ValueError",
        "<builtin>.reversed",
        "inspect.ismodule",
        "inspect._signature_strip_non_python_syntax",
        "<builtin>.getattr",
        "<builtin>.enumerate",
        "<builtin>.list",
        "<builtin>.object",
        "<builtin>.zip",
        "<builtin>.isinstance",
        "inspect.Signature.__init__",
        "pop",
        "inspect._signature_fromstr.p"
    ],
    "inspect._signature_strip_non_python_syntax": [
        "tokenize.tokenize",
        "",
        "<builtin>.next",
        "<builtin>.iter"
    ],
    "tokenize.tokenize": [
        "tokenize.detect_encoding",
        "tokenize._tokenize",
        "<builtin>.iter"
    ],
    "tokenize._tokenize": [
        "<builtin>.len",
        "tokenize._compile",
        "append",
        "<map>.get",
        "<builtin>.IndentationError"
    ],
    "<builtin>.IndentationError": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "ast.parse": [
        "<builtin>.isinstance",
        "<builtin>.compile"
    ],
    "inspect._signature_fromstr.p": [
        "append",
        "ast.NodeVisitor.visit",
        "ast.literal_eval",
        "inspect._signature_fromstr.parse_name"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "ast.literal_eval": [
        "<builtin>.isinstance",
        "ast.parse",
        "ast.literal_eval._convert"
    ],
    "ast.literal_eval._convert": [
        "<builtin>.len",
        "ast.literal_eval._raise_malformed_node",
        "ast.literal_eval._convert_signed_num",
        "<builtin>.zip",
        "<builtin>.dict",
        "<builtin>.list",
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.set",
        "<builtin>.tuple",
        "ast.literal_eval._convert_num"
    ],
    "ast.literal_eval._convert_signed_num": [
        "<builtin>.isinstance",
        "ast.literal_eval._convert_num"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "ast.literal_eval._raise_malformed_node"
    ],
    "ast.literal_eval._raise_malformed_node": [
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.Signature.__init__": [
        "<builtin>.ValueError",
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.__init__": [],
    "inspect.get_annotations": [
        "<builtin>.callable",
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.vars",
        "<builtin>.dict",
        "<builtin>.isinstance",
        "<builtin>.eval",
        "<builtin>.TypeError"
    ],
    "<builtin>.vars": [],
    "inspect._signature_is_builtin": [
        "<builtin>.isinstance",
        "inspect.isbuiltin",
        "inspect.ismethoddescriptor"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "inspect.isfunction",
        "<builtin>.type",
        "<builtin>.hasattr",
        "inspect.ismethod",
        "inspect.isclass"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_from_builtin": [
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "inspect._signature_fromstr",
        "<builtin>.TypeError",
        "inspect._signature_is_builtin"
    ],
    "inspect._signature_get_partial": [
        "<builtin>.ValueError",
        "collections.OrderedDict.move_to_end",
        "collections.OrderedDict.pop",
        "collections.OrderedDict.__init__",
        "collections.OrderedDict.values"
    ],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "collections.OrderedDict.move_to_end": [],
    "collections.OrderedDict.values": [],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr"
    ],
    "typing_extensions._ensure_subclassable": [],
    "typing_extensions._ensure_subclassable.inner": [
        "<builtin>.type",
        "<builtin>.staticmethod",
        "functools.update_wrapper"
    ],
    "typing_extensions.Annotated": [
        "typing._tp_cache"
    ],
    "typing_extensions.ParamSpec": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateGenericAlias": [
        "<builtin>.property"
    ],
    "typing_extensions._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialForm.__init__": [],
    "typing_extensions._UnpackSpecialForm.__init__": [
        "<builtin>.super"
    ],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.set"
    ],
    "weakref.WeakKeyDictionary.update": [
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.len",
        "weakref.WeakKeyDictionary.update"
    ],
    "torch.nn._reduction": [],
    "torch.nn.grad": [],
    "torch.nn.modules.utils": [
        "torch.nn.modules.utils._ntuple"
    ],
    "torch.nn.modules.utils._ntuple": [],
    "torch._jit_internal.boolean_dispatch": [
        "<builtin>.RuntimeError"
    ],
    "torch._jit_internal._overload": [
        "append",
        "torch._jit_internal._check_overload_body",
        "torch._jit_internal._qualified_name"
    ],
    "torch._jit_internal._check_overload_body": [
        "<builtin>.len",
        "<builtin>.RuntimeError",
        "torch._sources.parse_def",
        "warnings.warn",
        "torch._jit_internal._check_overload_body.is_pass",
        "torch._jit_internal._check_overload_body.is_ellipsis"
    ],
    "torch._sources.parse_def": [
        "ast.parse",
        "<builtin>.len",
        "<builtin>.RuntimeError",
        "torch._sources.get_source_lines_and_file",
        "torch._sources.make_source_context",
        "<builtin>.isinstance",
        "torch._sources.normalize_source_lines",
        "textwrap.dedent"
    ],
    "torch._sources.get_source_lines_and_file": [
        "<builtin>.OSError",
        "inspect.getsourcefile",
        "inspect.getsourcelines"
    ],
    "inspect.getsourcefile": [
        "<builtin>.any",
        "genericpath.exists",
        "<builtin>.getattr",
        "inspect.getfile",
        "posixpath.splitext",
        "ntpath.splitext",
        "inspect.getmodule"
    ],
    "inspect.getfile": [
        "inspect.ismodule",
        "inspect.isfunction",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "<builtin>.type",
        "inspect.ismethod",
        "inspect.isframe",
        "<builtin>.OSError",
        "<builtin>.TypeError",
        "inspect.isclass",
        "inspect.istraceback",
        "inspect.iscode"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "inspect.getmodule": [
        "inspect.ismodule",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "ntpath.realpath",
        "posixpath.realpath",
        "<map>.get",
        "inspect.getabsfile"
    ],
    "inspect.getabsfile": [
        "ntpath.abspath",
        "posixpath.normcase",
        "inspect.getsourcefile",
        "inspect.getfile",
        "ntpath.normcase",
        "posixpath.abspath"
    ],
    "posixpath.realpath": [
        "posixpath.abspath",
        "posixpath._joinrealpath",
        "os._fspath"
    ],
    "posixpath._joinrealpath": [
        "posixpath._joinrealpath",
        "posixpath.isabs",
        "posixpath.split",
        "<builtin>.isinstance",
        "posixpath.join"
    ],
    "ntpath.realpath": [],
    "inspect.getsourcelines": [
        "inspect.ismodule",
        "inspect.findsource",
        "inspect.isframe",
        "inspect.getblock",
        "inspect.istraceback",
        "inspect.unwrap"
    ],
    "inspect.findsource": [
        "inspect.ismodule",
        "ast.parse",
        "inspect.isfunction",
        "re.compile",
        "<builtin>.hasattr",
        "linecache.getlines",
        "ast.NodeVisitor.visit",
        "inspect.getsourcefile",
        "inspect.istraceback",
        "inspect.ismethod",
        "inspect.getfile",
        "inspect.isframe",
        "<builtin>.OSError",
        "inspect.isclass",
        "inspect.getmodule",
        "inspect._ClassFinder.__init__",
        "linecache.checkcache",
        "inspect.iscode"
    ],
    "inspect._ClassFinder.__init__": [],
    "inspect.getblock": [
        "tokenize.generate_tokens",
        "<builtin>.iter",
        "inspect.BlockFinder.__init__",
        "inspect.BlockFinder.tokeneater"
    ],
    "inspect.BlockFinder.__init__": [],
    "tokenize.generate_tokens": [
        "tokenize._tokenize"
    ],
    "inspect.BlockFinder.tokeneater": [],
    "torch._sources.normalize_source_lines": [
        "<builtin>.enumerate",
        "torch._sources.normalize_source_lines.remove_prefix"
    ],
    "torch._sources.normalize_source_lines.remove_prefix": [
        "<builtin>.len"
    ],
    "torch._sources.make_source_context": [
        "torch._sources.SourceContext.__init__"
    ],
    "torch._sources.SourceContext.__init__": [
        "<builtin>.super"
    ],
    "torch._jit_internal._check_overload_body.is_pass": [
        "<builtin>.isinstance"
    ],
    "torch._jit_internal._check_overload_body.is_ellipsis": [
        "<builtin>.isinstance"
    ],
    "torch._jit_internal._qualified_name": [
        "<builtin>.RuntimeError",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "torch.package._mangling.is_mangled"
    ],
    "torch.package._mangling.is_mangled": [
        "re.match",
        "<builtin>.bool"
    ],
    "re.match": [
        "re._compile"
    ],
    "torch._lowrank": [],
    "torch._linalg_utils": [],
    "torch.cpu": [],
    "torch.cpu.amp": [],
    "torch.cpu.amp.autocast_mode": [],
    "torch.fft": [],
    "torch.nn": [],
    "torch.nn.modules": [],
    "torch.nn.modules.module": [
        "collections.namedtuple",
        "collections.OrderedDict.__init__",
        "typing.TypeVar.__init__"
    ],
    "torch.nn.parameter": [],
    "torch.nn.parameter.UninitializedTensorMixin": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "torch.nn.modules.module.Module": [
        "typing.TypeVar.__init__",
        "typing.overload"
    ],
    "typing.overload": [],
    "torch.nn.modules.linear": [],
    "torch.nn.modules.lazy": [],
    "torch.nn.modules.lazy._LazyProtocol": [
        "<builtin>.property"
    ],
    "torch.nn.modules.conv": [],
    "torch.nn.common_types": [
        "typing.TypeVar.__init__"
    ],
    "torch.nn.modules.activation": [],
    "torch.nn.init": [
        "torch.nn.init._make_deprecate"
    ],
    "torch.nn.init._make_deprecate": [],
    "torch.nn.modules.loss": [],
    "torch.nn.modules.distance": [],
    "torch.nn.modules.container": [
        "typing.TypeVar.__init__"
    ],
    "torch.nn.modules.container.Sequential": [
        "torch._jit_internal._copy_to_script_wrapper",
        "typing.overload"
    ],
    "torch._jit_internal._copy_to_script_wrapper": [],
    "torch.nn.modules.container.ModuleList": [
        "torch._jit_internal._copy_to_script_wrapper"
    ],
    "torch.nn.modules.container.ModuleDict": [
        "torch._jit_internal._copy_to_script_wrapper"
    ],
    "torch.nn.modules.container.ParameterList": [
        "typing.overload"
    ],
    "torch.nn.modules.pooling": [],
    "torch.nn.modules.batchnorm": [],
    "torch.nn.modules._functions": [],
    "torch.nn.modules._functions.SyncBatchNorm": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.modules._functions.CrossMapLRN2d": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.modules._functions.BackwardHookFunction": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.modules.batchnorm.SyncBatchNorm": [
        "<builtin>.classmethod"
    ],
    "torch.nn.modules.instancenorm": [],
    "torch.nn.modules.normalization": [],
    "torch.nn.modules.dropout": [],
    "torch.nn.modules.padding": [],
    "torch.nn.modules.sparse": [],
    "torch.nn.modules.sparse.Embedding": [
        "<builtin>.classmethod"
    ],
    "torch.nn.modules.sparse.EmbeddingBag": [
        "<builtin>.classmethod"
    ],
    "torch.nn.modules.rnn": [],
    "torch.nn.utils.rnn": [
        "collections.namedtuple"
    ],
    "torch.nn.utils.rnn.PackedSequence": [
        "<builtin>.property"
    ],
    "torch.nn.modules.rnn.RNNBase": [
        "<builtin>.property"
    ],
    "torch.nn.modules.rnn.RNN": [
        "torch._jit_internal._overload_method",
        "typing.overload"
    ],
    "torch._jit_internal._overload_method": [
        "torch._jit_internal.get_class_name_lineno",
        "<builtin>.RuntimeError",
        "torch._jit_internal._check_overload_body",
        "torch._jit_internal._qualified_name",
        "append",
        "<map>.get"
    ],
    "torch._jit_internal.get_class_name_lineno": [
        "<builtin>.range",
        "inspect.currentframe"
    ],
    "inspect.currentframe": [
        "<builtin>.hasattr"
    ],
    "torch.nn.modules.rnn.LSTM": [
        "torch._jit_internal._overload_method",
        "typing.overload"
    ],
    "torch.nn.modules.rnn.GRU": [
        "torch._jit_internal._overload_method",
        "typing.overload"
    ],
    "torch.nn.modules.pixelshuffle": [],
    "torch.nn.modules.upsampling": [],
    "torch.nn.modules.fold": [],
    "torch.nn.modules.adaptive": [
        "collections.namedtuple"
    ],
    "torch.nn.modules.transformer": [],
    "torch.nn.modules.transformer.Transformer": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.modules.flatten": [],
    "torch.nn.modules.channelshuffle": [],
    "torch.nn.parallel": [],
    "torch.nn.parallel.parallel_apply": [],
    "torch.nn.parallel.replicate": [],
    "torch.nn.parallel.comm": [],
    "torch.cuda.nccl": [],
    "torch.nn.parallel.data_parallel": [],
    "torch.nn.parallel.scatter_gather": [],
    "torch.nn.parallel._functions": [],
    "torch.nn.parallel._functions.Broadcast": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel._functions.ReduceAddCoalesced": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel._functions.Gather": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel._functions.Scatter": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel.distributed": [
        "logging.getLogger",
        "torch.distributed.is_available",
        "torch.distributed.rpc.is_available"
    ],
    "torch.distributed.algorithms.join": [],
    "torch.distributed.algorithms.join.Joinable": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "torch.distributed.algorithms.join._JoinConfig": [
        "<builtin>.staticmethod"
    ],
    "torch.distributed.algorithms.join.Join": [
        "<builtin>.staticmethod"
    ],
    "torch.distributed.utils": [],
    "torch.nn.parallel._replicated_tensor_ddp_utils": [
        "contextlib.contextmanager"
    ],
    "torch.nn.parallel.distributed._DDPSink": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel.distributed.DistributedDataParallel": [
        "<builtin>.staticmethod",
        "contextlib.contextmanager",
        "<builtin>.property"
    ],
    "torch.nn.utils": [],
    "torch.nn.utils.clip_grad": [],
    "torch.nn.utils.weight_norm": [
        "typing.TypeVar.__init__"
    ],
    "torch.nn.utils.weight_norm.WeightNorm": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.utils.convert_parameters": [],
    "torch.nn.utils.spectral_norm": [
        "typing.TypeVar.__init__"
    ],
    "torch.nn.utils.spectral_norm.SpectralNorm": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.utils.fusion": [],
    "torch.nn.utils.memory_format": [],
    "torch.nn.utils.parametrizations": [],
    "torch.utils": [
        "posixpath.dirname",
        "ntpath.join",
        "posixpath.join",
        "ntpath.dirname"
    ],
    "torch.utils.throughput_benchmark": [],
    "torch.utils.throughput_benchmark.ExecutionStats": [
        "<builtin>.property"
    ],
    "torch.utils._crash_handler": [
        "pathlib.Path.home",
        "<builtin>.str"
    ],
    "pathlib.Path.home": [
        "pathlib.Path.expanduser"
    ],
    "pathlib.Path.expanduser": [
        "<builtin>.RuntimeError",
        "pathlib.PurePath._from_parts"
    ],
    "pathlib.PurePath._from_parts": [],
    "torch.nn.utils.parametrizations._Orthogonal": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.autograd.grad_mode.no_grad.__init__": [
        "<builtin>.super",
        "torch._jit_internal.is_scripting"
    ],
    "torch._jit_internal.is_scripting": [],
    "torch.nn.utils.parametrizations._SpectralNorm": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.nn.utils.init": [],
    "torch.nn.utils.stateless": [
        "contextlib.contextmanager"
    ],
    "torch.optim": [],
    "torch.optim.adadelta": [],
    "torch.optim.optimizer": [],
    "torch.optim.adadelta.Adadelta": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.adagrad": [],
    "torch.optim.adagrad.Adagrad": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.adam": [],
    "torch.optim.adam.Adam": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.adamw": [],
    "torch.optim.adamw.AdamW": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.sparse_adam": [],
    "torch.optim._functional": [],
    "torch.optim.adamax": [],
    "torch.optim.adamax.Adamax": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.asgd": [],
    "torch.optim.asgd.ASGD": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.nadam": [],
    "torch.optim.nadam.NAdam": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.radam": [],
    "torch.optim.radam.RAdam": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.rmsprop": [],
    "torch.optim.rmsprop.RMSprop": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.rprop": [],
    "torch.optim.rprop.Rprop": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.sgd": [],
    "torch.optim.sgd.SGD": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.sparse_adam.SparseAdam": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.lbfgs": [],
    "torch.optim.lbfgs.LBFGS": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.lr_scheduler": [],
    "torch.optim.lr_scheduler.ReduceLROnPlateau": [
        "<builtin>.property"
    ],
    "torch.optim.swa_utils": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.swa_utils.SWALR": [
        "<builtin>.staticmethod"
    ],
    "torch.optim._multi_tensor": [
        "torch.optim._multi_tensor.partialclass"
    ],
    "torch.optim._multi_tensor.partialclass": [],
    "torch.optim._multi_tensor.partialclass.NewCls": [
        "functools.partialmethod.__init__"
    ],
    "functools.partialmethod.__init__": [
        "<builtin>.hasattr",
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "torch.multiprocessing": [
        "torch.multiprocessing.reductions.init_reductions"
    ],
    "torch.multiprocessing.reductions": [
        "torch.multiprocessing.reductions.SharedCache.__init__"
    ],
    "multiprocessing": [
        "<builtin>.globals",
        "<builtin>.getattr",
        "<builtin>.dir"
    ],
    "multiprocessing.context": [
        "multiprocessing.context.DefaultContext.__init__"
    ],
    "multiprocessing.process": [
        "ntpath.abspath",
        "_weakrefset.WeakSet.__init__",
        "<builtin>.list",
        "multiprocessing.process._MainProcess.__init__",
        "<builtin>.set",
        "posixpath.abspath"
    ],
    "multiprocessing.process.BaseProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process._ParentProcess": [
        "<builtin>.property"
    ],
    "multiprocessing.process._MainProcess.__init__": [],
    "multiprocessing.reduction": [
        "<builtin>.hasattr",
        "<builtin>.type",
        "multiprocessing.reduction.ForkingPickler.register"
    ],
    "multiprocessing.reduction.ForkingPickler": [
        "<builtin>.classmethod"
    ],
    "multiprocessing.reduction.ForkingPickler.register": [],
    "multiprocessing.context.BaseContext": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "multiprocessing.context.Process": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.SpawnProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.DefaultContext.__init__": [],
    "multiprocessing.context.ForkProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.context.ForkServerProcess": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.util": [
        "weakref.WeakValueDictionary.__init__",
        "multiprocessing.util._platform_supports_abstract_sockets"
    ],
    "multiprocessing.util._platform_supports_abstract_sockets": [
        "<builtin>.hasattr"
    ],
    "multiprocessing.resource_sharer": [
        "multiprocessing.resource_sharer._ResourceSharer.__init__"
    ],
    "multiprocessing.resource_sharer._ResourceSharer": [
        "<builtin>.staticmethod"
    ],
    "multiprocessing.resource_sharer._ResourceSharer.__init__": [
        "multiprocessing.util.register_after_fork"
    ],
    "multiprocessing.util.register_after_fork": [
        "<builtin>.next",
        "<builtin>.id"
    ],
    "torch.multiprocessing.reductions.SharedCache.__init__": [
        "multiprocessing.util.register_after_fork",
        "torch.multiprocessing.reductions.SharedCache._after_fork"
    ],
    "torch.multiprocessing.reductions.SharedCache._after_fork": [],
    "torch.multiprocessing.spawn": [],
    "multiprocessing.connection": [
        "<builtin>.hasattr",
        "multiprocessing.reduction.ForkingPickler.register"
    ],
    "multiprocessing.connection._ConnectionBase": [
        "<builtin>.property"
    ],
    "multiprocessing.connection.Listener": [
        "<builtin>.property"
    ],
    "multiprocessing.connection.PipeListener": [
        "<builtin>.staticmethod"
    ],
    "torch.multiprocessing.reductions.init_reductions": [
        "multiprocessing.reduction.ForkingPickler.register"
    ],
    "torch.sparse": [],
    "torch.special": [],
    "torch.utils.backcompat": [
        "<builtin>.Warning"
    ],
    "torch.utils.backcompat.Warning": [
        "<builtin>.property"
    ],
    "<builtin>.Warning": [],
    "torch.onnx": [],
    "torch.jit": [
        "<builtin>.RuntimeError",
        "torch.utils.set_module",
        "contextlib.contextmanager"
    ],
    "torch.jit._script": [
        "collections.namedtuple",
        "<builtin>.callable",
        "torch.jit._script._get_methods",
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "torch._six.with_metaclass",
        "torch.jit._script._make_fail",
        "torch.jit._builtins._register_builtin",
        "torch.jit._monkeytype_config.JitTypeTraceStore.__init__",
        "torch.utils.set_module"
    ],
    "torch.jit._recursive": [
        "<builtin>.type",
        "collections.namedtuple",
        "torch.jit._recursive.ConcreteTypeStore.__init__"
    ],
    "torch.jit.frontend": [
        "<builtin>.set",
        "<map>.update"
    ],
    "torch.jit._monkeytype_config": [],
    "torch.jit.annotations": [
        "torch.distributed.rpc.is_available"
    ],
    "torch.jit._state": [
        "torch.jit._state.EnabledProxy.__init__",
        "weakref.WeakKeyDictionary.__init__"
    ],
    "torch.jit._state.EnabledProxy.__init__": [
        "torch.jit._state.EnabledProxy.parse_env"
    ],
    "torch.jit._state.EnabledProxy.parse_env": [
        "<builtin>.ValueError",
        "<builtin>.print"
    ],
    "torch._ops": [
        "<builtin>.hasattr",
        "torch._ops._Ops.__init__",
        "contextlib.contextmanager"
    ],
    "torch._ops.OpOverload": [
        "<builtin>.property"
    ],
    "torch._ops.OpOverloadPacket": [
        "<builtin>.property"
    ],
    "torch._ops._Ops.__init__": [
        "<builtin>.set",
        "<builtin>.super"
    ],
    "torch.jit.annotations.EvalEnv": [
        "torch.jit.annotations.Module.__init__"
    ],
    "torch.jit.annotations.Module.__init__": [],
    "torch.jit.frontend.WithItemBuilder": [
        "<builtin>.staticmethod"
    ],
    "torch.jit.frontend.StmtBuilder": [
        "<builtin>.staticmethod"
    ],
    "torch.jit.frontend.ExprBuilder": [
        "<builtin>.staticmethod"
    ],
    "torch.jit._builtins": [
        "torch.jit._builtins._gen_torch_functional_registered_ops"
    ],
    "torch.backends.cudnn": [
        "torch.backends.cudnn.CudnnModule.__init__",
        "contextlib.contextmanager"
    ],
    "torch.backends": [
        "contextlib.contextmanager"
    ],
    "torch.backends.cudnn.CudnnModule": [
        "torch.backends.ContextProp.__init__"
    ],
    "torch.backends.ContextProp.__init__": [],
    "torch.backends.cudnn.CudnnModule.__init__": [
        "<builtin>.super"
    ],
    "torch.jit._builtins._gen_torch_functional_registered_ops": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "torch.jit._check": [],
    "torch.jit._recursive.ConcreteTypeStore.__init__": [
        "<builtin>.set"
    ],
    "torch.jit._fuser": [
        "contextlib.contextmanager"
    ],
    "torch.package": [],
    "torch.package.analyze.is_from_package": [],
    "torch.package.file_structure_representation": [],
    "torch.package.glob_group": [],
    "torch.package.glob_group.GlobGroup": [
        "<builtin>.staticmethod"
    ],
    "torch.package.importer": [],
    "importlib": [],
    "torch.package.importer.Importer": [
        "abc.abstractmethod"
    ],
    "torch.package.package_exporter": [],
    "pickletools": [
        "<builtin>.ValueError",
        "pickletools.StackObject.__init__",
        "<builtin>.type",
        "<builtin>.enumerate",
        "pickletools.OpcodeInfo.__init__",
        "pickletools.ArgumentDescriptor.__init__",
        "pickletools.assure_pickle_consistency"
    ],
    "pickletools.ArgumentDescriptor.__init__": [
        "<builtin>.isinstance"
    ],
    "pickletools.StackObject.__init__": [
        "<builtin>.isinstance"
    ],
    "pickletools.OpcodeInfo.__init__": [
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "pickletools.assure_pickle_consistency": [
        "<builtin>.len",
        "re.match",
        "<builtin>.print",
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<map>.copy",
        "append",
        "<map>.items"
    ],
    "torch.package._digraph": [],
    "torch.package._digraph.DiGraph": [
        "<builtin>.property"
    ],
    "torch.package._importlib": [],
    "torch.package._package_pickler": [],
    "torch.package._stdlib": [],
    "torch.package.find_file_dependencies": [],
    "torch.package.find_file_dependencies._ExtractModuleReferences": [
        "<builtin>.classmethod"
    ],
    "torch.package.package_importer": [
        "weakref.WeakValueDictionary.__init__",
        "<builtin>.object"
    ],
    "torch.package._directory_reader": [],
    "torch.package._package_unpickler": [],
    "torch.jit._serialization": [],
    "torch._classes": [
        "torch._classes._Classes.__init__"
    ],
    "torch._classes._Classes": [
        "<builtin>.property"
    ],
    "torch._classes._Classes.__init__": [
        "<builtin>.super"
    ],
    "torch.jit._monkeytype_config.JitTypeTraceStore.__init__": [],
    "torch.utils.set_module": [
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "torch.jit._script._get_methods": [
        "inspect.getmembers"
    ],
    "torch.jit._script._get_methods.<lambda1>": [
        "inspect.isfunction",
        "inspect.ismethod"
    ],
    "torch.jit._script._make_fail": [],
    "torch.jit._builtins._register_builtin": [
        "<builtin>.id",
        "torch.jit._builtins._get_builtin_table"
    ],
    "torch.jit._builtins._get_builtin_table": [
        "append",
        "<builtin>.id",
        "torch.jit._builtins._get_builtin_table.register_all",
        "torch.distributed.autograd.is_available"
    ],
    "torch.jit._builtins._get_builtin_table.register_all": [
        "<builtin>.callable",
        "<builtin>.getattr",
        "append",
        "<builtin>.dir",
        "torch.jit._builtins._is_special_functional_bound_op"
    ],
    "torch.jit._builtins._is_special_functional_bound_op": [],
    "torch.jit._trace": [
        "torch.jit._trace.TracerWarning.ignore_lib_warnings",
        "contextlib.contextmanager",
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.jit._trace.TracerWarning": [
        "<builtin>.staticmethod"
    ],
    "torch.jit._trace.TracerWarning.ignore_lib_warnings": [
        "warnings.filterwarnings"
    ],
    "torch.jit._async": [
        "torch.jit._builtins._register_builtin",
        "torch.utils.set_module"
    ],
    "torch.jit._decomposition_utils": [],
    "torch.jit._freeze": [],
    "torch.jit._ir_utils": [],
    "torch.linalg": [],
    "torch.hub": [
        "re.compile"
    ],
    "zipfile": [],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "zipfile.CompleteDirs": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "urllib.error": [],
    "urllib.response": [],
    "urllib.response.addinfourl": [
        "<builtin>.property"
    ],
    "urllib.error.HTTPError": [
        "<builtin>.property"
    ],
    "urllib.request": [
        "<builtin>.hasattr",
        "append",
        "re.compile"
    ],
    "base64": [],
    "email": [],
    "http.client": [
        "<builtin>.globals",
        "re.compile"
    ],
    "email.parser": [],
    "email.feedparser": [
        "re.compile",
        "<builtin>.object"
    ],
    "email.errors": [],
    "email._policybase": [],
    "email.header": [
        "email.charset.Charset.__init__",
        "re.compile"
    ],
    "email.quoprimime": [
        "<builtin>.range",
        "<str>.encode",
        "<builtin>.ord",
        "<builtin>.chr"
    ],
    "email.base64mime": [],
    "email.charset": [],
    "email.encoders": [],
    "quopri": [],
    "email.charset.Charset.__init__": [
        "<builtin>.isinstance",
        "<str>.encode",
        "<map>.get",
        "<builtin>.str"
    ],
    "email.utils": [
        "re.compile"
    ],
    "email._parseaddr": [],
    "calendar": [
        "<builtin>.range",
        "calendar._localized_day.__init__",
        "datetime.date.toordinal",
        "calendar._localized_month.__init__"
    ],
    "locale": [
        "re.compile",
        "<builtin>.globals",
        "functools.wraps",
        "<map>.setdefault",
        "<builtin>.sorted",
        "<map>.items"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_before_year",
        "datetime._days_in_month",
        "datetime._days_before_month"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email.message": [
        "re.compile"
    ],
    "uu": [],
    "email._encoded_words": [
        "<builtin>.ord",
        "re.compile"
    ],
    "email._encoded_words._QByteMap": [
        "<str>.encode"
    ],
    "email.iterators": [],
    "http": [],
    "http.client.HTTPConnection": [
        "<builtin>.staticmethod"
    ],
    "ssl": [
        "<builtin>.getattr",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.SSLContext": [
        "<builtin>.hasattr",
        "<builtin>.property"
    ],
    "ssl.SSLObject": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ssl.SSLSocket": [
        "<builtin>.classmethod",
        "<builtin>.property",
        "ssl._sslcopydoc"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "urllib.request.Request": [
        "<builtin>.property"
    ],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "nturl2path": [],
    "tqdm.auto": [
        "warnings.catch_warnings.__init__"
    ],
    "tqdm.std": [],
    "tqdm._monitor": [],
    "tqdm.utils": [
        "<builtin>.any",
        "re.compile"
    ],
    "tqdm.utils.DisableOnWriteError": [
        "<builtin>.staticmethod"
    ],
    "tqdm.std.TqdmDefaultWriteLock": [
        "<builtin>.classmethod",
        "tqdm.std.TRLock"
    ],
    "tqdm.std.TRLock": [
        "threading.RLock"
    ],
    "tqdm.std.Bar": [
        "<builtin>.range",
        "<builtin>.map",
        "<builtin>.property"
    ],
    "tqdm.std.tqdm": [
        "<builtin>.classmethod",
        "contextlib.contextmanager",
        "_weakrefset.WeakSet.__init__",
        "tqdm.utils.envwrap.wrap",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "tqdm.utils.envwrap"
    ],
    "tqdm.utils.envwrap": [
        "<builtin>.len"
    ],
    "tqdm.utils.envwrap.wrap": [
        "<builtin>.type",
        "<builtin>.getattr",
        "inspect.signature"
    ],
    "tqdm.asyncio": [],
    "asyncio": [],
    "asyncio.base_events": [
        "<builtin>.hasattr",
        "<builtin>.object"
    ],
    "concurrent.futures": [],
    "concurrent.futures._base": [
        "logging.getLogger",
        "collections.namedtuple"
    ],
    "concurrent.futures._base.Future": [
        "<builtin>.classmethod"
    ],
    "asyncio.constants": [],
    "asyncio.coroutines": [
        "<builtin>.set",
        "asyncio.coroutines._is_debug_mode",
        "<builtin>.object"
    ],
    "asyncio.base_futures": [
        "<builtin>.set"
    ],
    "asyncio.format_helpers": [],
    "asyncio.log": [
        "logging.getLogger"
    ],
    "asyncio.coroutines._is_debug_mode": [
        "<builtin>.bool"
    ],
    "asyncio.coroutines.CoroWrapper": [
        "<builtin>.property"
    ],
    "asyncio.events": [],
    "asyncio.exceptions": [],
    "asyncio.futures": [],
    "asyncio.futures.Future": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "asyncio.protocols": [],
    "asyncio.sslproto": [],
    "asyncio.transports": [],
    "asyncio.sslproto._SSLPipe": [
        "<builtin>.property"
    ],
    "asyncio.sslproto._SSLProtocolTransport": [
        "<builtin>.property"
    ],
    "asyncio.staggered": [],
    "asyncio.locks": [],
    "asyncio.mixins": [
        "<builtin>.object"
    ],
    "asyncio.tasks": [
        "_weakrefset.WeakSet.__init__",
        "types.coroutine"
    ],
    "asyncio.base_tasks": [],
    "asyncio.tasks.Task": [
        "<builtin>.classmethod"
    ],
    "types.coroutine": [
        "<builtin>.getattr",
        "<builtin>.callable",
        "functools.wraps",
        "<builtin>.TypeError"
    ],
    "asyncio.trsock": [],
    "asyncio.trsock.TransportSocket": [
        "<builtin>.property"
    ],
    "asyncio.base_events.Server": [
        "<builtin>.property"
    ],
    "asyncio.runners": [],
    "asyncio.queues": [],
    "asyncio.queues.Queue": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "asyncio.streams": [
        "<builtin>.hasattr"
    ],
    "asyncio.streams.StreamReaderProtocol": [
        "<builtin>.property"
    ],
    "asyncio.streams.StreamWriter": [
        "<builtin>.property"
    ],
    "asyncio.subprocess": [],
    "asyncio.subprocess.Process": [
        "<builtin>.property"
    ],
    "asyncio.threads": [],
    "asyncio.windows_events": [
        "<builtin>.ImportError"
    ],
    "asyncio.base_subprocess": [],
    "asyncio.proactor_events": [],
    "asyncio.selector_events": [],
    "asyncio.windows_utils": [
        "<builtin>.ImportError"
    ],
    "asyncio.windows_utils.PipeHandle": [
        "<builtin>.property"
    ],
    "tqdm.asyncio.tqdm_asyncio": [
        "<builtin>.classmethod"
    ],
    "tqdm": [],
    "tqdm._tqdm_pandas": [],
    "tqdm.cli": [
        "logging.getLogger",
        "re.compile"
    ],
    "tqdm.version": [],
    "tqdm._dist_ver": [],
    "tqdm.gui": [],
    "torch.distributions": [
        "extend",
        "torch.distributions.kl._add_kl_info"
    ],
    "torch.distributions.bernoulli": [],
    "torch.distributions.constraints": [
        "torch.distributions.constraints._GreaterThan.__init__",
        "torch.distributions.constraints._IndependentConstraint.__init__",
        "torch.distributions.constraints._Interval.__init__",
        "torch.distributions.constraints._GreaterThanEq.__init__",
        "torch.distributions.constraints._Dependent.__init__",
        "torch.distributions.constraints._IntegerGreaterThan.__init__"
    ],
    "torch.distributions.constraints._Dependent": [
        "<builtin>.property"
    ],
    "torch.distributions.constraints._IndependentConstraint": [
        "<builtin>.property"
    ],
    "torch.distributions.constraints._Cat": [
        "<builtin>.property"
    ],
    "torch.distributions.constraints._Stack": [
        "<builtin>.property"
    ],
    "torch.distributions.constraints._Dependent.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraints._IntegerGreaterThan.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraints._IndependentConstraint.__init__": [
        "<builtin>.isinstance",
        "<builtin>.super"
    ],
    "torch.distributions.constraints._GreaterThan.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraints._GreaterThanEq.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraints._Interval.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.exp_family": [],
    "torch.distributions.distribution": [],
    "torch.distributions.utils": [],
    "torch.distributions.distribution.Distribution": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "torch.distributions.exp_family.ExponentialFamily": [
        "<builtin>.property"
    ],
    "torch.distributions.bernoulli.Bernoulli": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.utils.lazy_property.__init__": [
        "functools.update_wrapper"
    ],
    "torch.distributions.beta": [],
    "torch.distributions.dirichlet": [],
    "torch.distributions.dirichlet._Dirichlet": [
        "torch.autograd.function.once_differentiable",
        "<builtin>.staticmethod"
    ],
    "torch.autograd.function.once_differentiable": [
        "functools.wraps"
    ],
    "torch.distributions.dirichlet.Dirichlet": [
        "torch.distributions.constraints._IndependentConstraint.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.beta.Beta": [
        "<builtin>.property"
    ],
    "torch.distributions.binomial": [],
    "torch.distributions.binomial.Binomial": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.constraints._DependentProperty.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.categorical": [],
    "torch.distributions.categorical.Categorical": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.cauchy": [],
    "torch.distributions.cauchy.Cauchy": [
        "<builtin>.property"
    ],
    "torch.distributions.chi2": [],
    "torch.distributions.gamma": [],
    "torch.distributions.gamma.Gamma": [
        "<builtin>.property"
    ],
    "torch.distributions.chi2.Chi2": [
        "<builtin>.property"
    ],
    "torch.distributions.constraint_registry": [
        "torch.distributions.constraint_registry.ConstraintRegistry.register",
        "torch.distributions.constraint_registry.ConstraintRegistry.__init__"
    ],
    "torch.distributions.transforms": [
        "torch.distributions.transforms.ComposeTransform.__init__"
    ],
    "torch.distributions.transforms.Transform": [
        "<builtin>.property"
    ],
    "torch.distributions.transforms._InverseTransform": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.ComposeTransform": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.ComposeTransform.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.transforms.IndependentTransform": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.ReshapeTransform": [
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.TanhTransform": [
        "torch.distributions.constraints._Interval.__init__"
    ],
    "torch.distributions.transforms.AffineTransform": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.LowerCholeskyTransform": [
        "torch.distributions.constraints._IndependentConstraint.__init__"
    ],
    "torch.distributions.transforms.CatTransform": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.StackTransform": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.CumulativeDistributionTransform": [
        "<builtin>.property"
    ],
    "torch.distributions.constraint_registry.ConstraintRegistry.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraint_registry.ConstraintRegistry.register": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "torch.distributions.continuous_bernoulli": [],
    "torch.distributions.continuous_bernoulli.ContinuousBernoulli": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.exponential": [],
    "torch.distributions.exponential.Exponential": [
        "<builtin>.property"
    ],
    "torch.distributions.fishersnedecor": [],
    "torch.distributions.fishersnedecor.FisherSnedecor": [
        "<builtin>.property"
    ],
    "torch.distributions.geometric": [],
    "torch.distributions.geometric.Geometric": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.gumbel": [],
    "torch.distributions.uniform": [],
    "torch.distributions.uniform.Uniform": [
        "torch.distributions.constraints._Dependent.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transformed_distribution": [],
    "torch.distributions.independent": [],
    "torch.distributions.independent.Independent": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transformed_distribution.TransformedDistribution": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.gumbel.Gumbel": [
        "<builtin>.property"
    ],
    "torch.distributions.half_cauchy": [],
    "torch.distributions.half_cauchy.HalfCauchy": [
        "<builtin>.property"
    ],
    "torch.distributions.half_normal": [],
    "torch.distributions.normal": [],
    "torch.distributions.normal.Normal": [
        "<builtin>.property"
    ],
    "torch.distributions.half_normal.HalfNormal": [
        "<builtin>.property"
    ],
    "torch.distributions.kl": [
        "torch.distributions.kl.register_kl.decorator",
        "torch.distributions.kl.register_kl"
    ],
    "torch.distributions.laplace": [],
    "torch.distributions.laplace.Laplace": [
        "<builtin>.property"
    ],
    "torch.distributions.lowrank_multivariate_normal": [],
    "torch.distributions.multivariate_normal": [],
    "torch.distributions.multivariate_normal.MultivariateNormal": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.lowrank_multivariate_normal.LowRankMultivariateNormal": [
        "torch.distributions.constraints._IndependentConstraint.__init__",
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.one_hot_categorical": [],
    "torch.distributions.one_hot_categorical.OneHotCategorical": [
        "<builtin>.property"
    ],
    "torch.distributions.pareto": [],
    "torch.distributions.pareto.Pareto": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.poisson": [],
    "torch.distributions.poisson.Poisson": [
        "<builtin>.property"
    ],
    "torch.distributions.kl.register_kl": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.issubclass"
    ],
    "torch.distributions.kl.register_kl.decorator": [],
    "torch.distributions.kumaraswamy": [],
    "torch.distributions.kumaraswamy.Kumaraswamy": [
        "<builtin>.property"
    ],
    "torch.distributions.lkj_cholesky": [],
    "torch.distributions.log_normal": [],
    "torch.distributions.log_normal.LogNormal": [
        "<builtin>.property"
    ],
    "torch.distributions.logistic_normal": [],
    "torch.distributions.logistic_normal.LogisticNormal": [
        "<builtin>.property"
    ],
    "torch.distributions.mixture_same_family": [],
    "torch.distributions.mixture_same_family.MixtureSameFamily": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.multinomial": [],
    "torch.distributions.multinomial.Multinomial": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.negative_binomial": [],
    "torch.distributions.negative_binomial.NegativeBinomial": [
        "torch.distributions.constraints._HalfOpenInterval.__init__",
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._GreaterThanEq.__init__"
    ],
    "torch.distributions.constraints._HalfOpenInterval.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.relaxed_bernoulli": [],
    "torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.relaxed_bernoulli.RelaxedBernoulli": [
        "<builtin>.property"
    ],
    "torch.distributions.relaxed_categorical": [],
    "torch.distributions.relaxed_categorical.ExpRelaxedCategorical": [
        "<builtin>.property"
    ],
    "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical": [
        "<builtin>.property"
    ],
    "torch.distributions.studentT": [],
    "torch.distributions.studentT.StudentT": [
        "<builtin>.property"
    ],
    "torch.distributions.von_mises": [
        "torch.jit.script_if_tracing"
    ],
    "torch.jit.script_if_tracing": [
        "torch.jit._trace._script_if_tracing"
    ],
    "torch.jit._trace._script_if_tracing": [
        "functools.wraps"
    ],
    "torch.distributions.von_mises.VonMises": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.distributions.weibull": [],
    "torch.distributions.weibull.Weibull": [
        "<builtin>.property"
    ],
    "torch.distributions.wishart": [],
    "torch.distributions.wishart.Wishart": [
        "torch.distributions.constraints._GreaterThan.__init__",
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.kl._add_kl_info": [
        "append",
        "<builtin>.sorted"
    ],
    "torch.backends.cuda": [
        "<map>.keys",
        "torch.backends.cuda.cuFFTPlanCacheManager.__init__"
    ],
    "torch.backends.cuda.cuFFTPlanCache": [
        "torch.backends.cuda.cuFFTPlanCacheAttrContextProp.__init__"
    ],
    "torch.backends.cuda.cuFFTPlanCacheAttrContextProp.__init__": [],
    "torch.backends.cuda.cuFFTPlanCacheManager.__init__": [],
    "torch.backends.mps": [
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "torch.backends.mkl": [],
    "torch.backends.mkldnn": [
        "contextlib.contextmanager",
        "torch.backends.mkldnn.MkldnnModule.__init__"
    ],
    "torch.backends.mkldnn.MkldnnModule": [
        "torch.backends.ContextProp.__init__"
    ],
    "torch.backends.mkldnn.MkldnnModule.__init__": [
        "<builtin>.super"
    ],
    "torch.backends.openmp": [],
    "torch.backends.quantized": [
        "torch.backends.quantized.QuantizedEngine.__init__"
    ],
    "torch.backends.quantized.QuantizedEngine.__init__": [
        "<builtin>.super"
    ],
    "torch.utils.data": [
        "<builtin>.sorted"
    ],
    "torch.utils.data.sampler": [
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.sampler.RandomSampler": [
        "<builtin>.property"
    ],
    "torch.utils.data.dataset": [
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.dataset.ConcatDataset": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "torch.utils.data.datapipes.datapipe": [
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.datapipes._typing": [
        "<builtin>.type",
        "torch.utils.data.datapipes._typing._DataPipeType.__init__",
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.datapipes._typing._DataPipeType.__init__": [],
    "torch.utils.data.datapipes._typing._DataPipeMeta": [
        "typing._tp_cache"
    ],
    "torch.utils.data.datapipes.utils.common": [],
    "torch.utils.data._utils.serialization": [],
    "torch.utils.data.datapipes.datapipe.IterDataPipe": [
        "<builtin>.classmethod"
    ],
    "torch.utils.data.datapipes.datapipe.MapDataPipe": [
        "<builtin>.classmethod"
    ],
    "torch.utils.data.dataloader": [
        "logging.getLogger",
        "typing.TypeVar.__init__"
    ],
    "queue": [],
    "queue.Queue": [
        "<builtin>.classmethod"
    ],
    "queue._PySimpleQueue": [
        "<builtin>.classmethod"
    ],
    "torch.utils.data.graph_settings": [],
    "torch.utils.data.graph": [],
    "torch.utils.data.datapipes.iter": [
        "<builtin>.sorted"
    ],
    "torch.utils.data.datapipes.iter.utils": [],
    "torch.utils.data.datapipes.iter.callable": [
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.datapipes._decorator": [],
    "torch.utils.data._utils.collate": [
        "re.compile"
    ],
    "torch.utils.data.datapipes.iter.combinatorics": [
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.datapipes.iter.combining": [
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.datapipes.iter.filelister": [],
    "torch.utils.data.datapipes.iter.fileopener": [],
    "torch.utils.data.datapipes.iter.grouping": [
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.datapipes.iter.routeddecoder": [],
    "torch.utils.data.datapipes.utils.decoder": [],
    "torch.utils.data.datapipes.utils.decoder.Decoder": [
        "<builtin>.staticmethod"
    ],
    "torch.utils.data.datapipes.iter.selecting": [
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.datapipes.dataframe.dataframe_wrapper": [],
    "torch.utils.data.datapipes.dataframe.dataframe_wrapper.PandasWrapper": [
        "<builtin>.classmethod"
    ],
    "torch.utils.data.datapipes.iter.streamreader": [],
    "torch.utils.data._utils": [],
    "torch.utils.data._utils.worker": [],
    "torch.utils.data._utils.signal_handling": [],
    "ctypes.wintypes": [],
    "torch.utils.data._utils.pin_memory": [],
    "torch.utils.data._utils.fetch": [],
    "torch.utils.data.dataloader._DatasetKind": [
        "<builtin>.staticmethod"
    ],
    "torch.utils.data.dataloader.DataLoader": [
        "<builtin>.property"
    ],
    "torch.utils.data.dataloader._MultiProcessingDataLoaderIter": [
        "<builtin>.staticmethod"
    ],
    "torch.utils.data.distributed": [
        "typing.TypeVar.__init__"
    ],
    "torch.utils.data.dataloader_experimental": [],
    "torch.utils.data.backward_compatibility": [],
    "torch.utils.data.communication": [],
    "torch.utils.data.communication.eventloop": [],
    "torch.utils.data.communication.iter": [],
    "torch.utils.data.communication.iter.NonBlocking": [
        "<builtin>.staticmethod"
    ],
    "torch.utils.data.communication.map": [],
    "torch.utils.data.communication.map.NonBlockingMap": [
        "<builtin>.staticmethod"
    ],
    "torch.utils.data.communication.messages": [],
    "torch.utils.data.communication.protocol": [],
    "torch.utils.data.communication.queue": [],
    "torch.__config__": [],
    "torch.__future__": [],
    "torch.profiler": [],
    "torch.profiler.profiler": [],
    "gzip": [],
    "gzip.GzipFile": [
        "<builtin>.property"
    ],
    "torch.nn.intrinsic": [],
    "torch.nn.intrinsic.modules": [],
    "torch.nn.intrinsic.modules.fused": [],
    "torch.nn.utils.parametrize": [
        "contextlib.contextmanager"
    ],
    "torch.nn.quantizable": [],
    "torch.nn.quantizable.modules": [],
    "torch.nn.quantizable.modules.activation": [],
    "torch.nn.quantized": [],
    "torch.nn.quantized.modules": [],
    "torch.nn.quantized.modules.activation": [],
    "torch.nn.quantized.functional": [],
    "torch.nn.quantized.modules.utils": [
        "torch.nn.quantized.modules.utils._ntuple_from_first"
    ],
    "torch.nn.quantized.modules.utils.WeightedQuantizedModule": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.utils._ntuple_from_first": [],
    "torch.nn.quantized.modules.activation.ReLU6": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantized.modules.activation.Hardswish": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantized.modules.activation.ELU": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantized.modules.activation.LeakyReLU": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.activation.Sigmoid": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.activation.Softmax": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantized.modules.dropout": [],
    "torch.nn.quantized.modules.dropout.Dropout": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.batchnorm": [],
    "torch.nn.quantized.modules.batchnorm._BatchNorm": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantized.modules.batchnorm.BatchNorm2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.batchnorm.BatchNorm3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.normalization": [],
    "torch.nn.quantized.modules.normalization.LayerNorm": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.normalization.GroupNorm": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.normalization.InstanceNorm1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.normalization.InstanceNorm2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.normalization.InstanceNorm3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.conv": [
        "typing.TypeVar.__init__"
    ],
    "torch.nn.intrinsic.qat": [],
    "torch.nn.intrinsic.qat.modules": [],
    "torch.nn.intrinsic.qat.modules.linear_relu": [],
    "torch.nn.qat": [],
    "torch.nn.qat.modules": [],
    "torch.nn.qat.modules.linear": [],
    "torch.nn.qat.modules.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.nn.qat.modules.conv": [
        "typing.TypeVar.__init__"
    ],
    "torch.nn.qat.modules.conv._ConvNd": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.qat.modules.conv.Conv1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.qat.modules.conv.Conv2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.qat.modules.conv.Conv3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.qat.modules.embedding_ops": [],
    "torch.nn.qat.modules.embedding_ops.Embedding": [
        "<builtin>.classmethod"
    ],
    "torch.nn.qat.modules.embedding_ops.EmbeddingBag": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.qat.modules.linear_relu.LinearReLU": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.qat.modules.linear_fused": [],
    "torch.nn.intrinsic.qat.modules.linear_fused.LinearBn1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.qat.modules.conv_fused": [
        "typing.TypeVar.__init__"
    ],
    "torch.nn.intrinsic.qat.modules.conv_fused._ConvBnNd": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.qat.modules.conv_fused.ConvBnReLU1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.qat.modules.conv_fused.ConvReLU1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.qat.modules.conv_fused.ConvBnReLU2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.qat.modules.conv_fused.ConvReLU2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.qat.modules.conv_fused.ConvBnReLU3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.qat.modules.conv_fused.ConvReLU3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.conv._ConvNd": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "torch._jit_internal.export"
    ],
    "torch._jit_internal.export": [],
    "torch.nn.quantized.modules.conv.Conv1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.conv.Conv2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.conv.Conv3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.conv._ConvTransposeNd": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantized.modules.conv.ConvTranspose1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.conv.ConvTranspose2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.conv.ConvTranspose3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.linear": [],
    "torch.nn.quantized.modules.linear.LinearPackedParams": [
        "torch._jit_internal.export"
    ],
    "torch.nn.quantized.modules.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.embedding_ops": [],
    "torch.nn.quantized.modules.embedding_ops.EmbeddingPackedParams": [
        "torch._jit_internal.export"
    ],
    "torch.nn.quantized.modules.embedding_ops.Embedding": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.embedding_ops.EmbeddingBag": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.functional_modules": [],
    "torch.nn.quantized.modules.functional_modules.QFunctional": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.modules.Quantize": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantized.modules.DeQuantize": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantizable.modules.activation.MultiheadAttention": [
        "<builtin>.classmethod",
        "torch._jit_internal.unused"
    ],
    "torch._jit_internal.unused": [
        "<builtin>.setattr",
        "<builtin>.isinstance"
    ],
    "torch.nn.quantizable.modules.rnn": [],
    "torch.nn.quantizable.modules.rnn.LSTMCell": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantizable.modules.rnn._LSTMSingleLayer": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantizable.modules.rnn._LSTMLayer": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantizable.modules.rnn.LSTM": [
        "<builtin>.classmethod"
    ],
    "torch.ao": [],
    "torch._tensor_docs": [
        "torch._tensor_docs.add_docstr_all",
        "torch._torch_docs.parse_kwargs"
    ],
    "torch._tensor_docs.add_docstr_all": [
        "<builtin>.getattr"
    ],
    "torch._storage_docs": [
        "torch._storage_docs.add_docstr_all"
    ],
    "torch._storage_docs.add_docstr_all": [
        "<builtin>.getattr"
    ],
    "torch.quantization": [],
    "torch.quantization.quantize": [],
    "torch.ao.quantization.quantize": [],
    "torch.ao.quantization.quantization_mappings": [],
    "torch.nn.intrinsic.quantized": [],
    "torch.nn.intrinsic.quantized.modules": [],
    "torch.nn.intrinsic.quantized.modules.linear_relu": [],
    "torch.nn.intrinsic.quantized.modules.linear_relu.LinearReLU": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.quantized.modules.conv_relu": [],
    "torch.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.quantized.modules.bn_relu": [],
    "torch.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.quantized.dynamic": [],
    "torch.nn.intrinsic.quantized.dynamic.modules": [],
    "torch.nn.intrinsic.quantized.dynamic.modules.linear_relu": [],
    "torch.nn.quantized.dynamic": [],
    "torch.nn.quantized.dynamic.modules": [],
    "torch.nn.quantized.dynamic.modules.linear": [],
    "torch.nn.quantized.dynamic.modules.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.dynamic.modules.rnn": [],
    "torch.nn.quantized.dynamic.modules.rnn.RNNBase": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.dynamic.modules.rnn.LSTM": [
        "<builtin>.classmethod",
        "torch._jit_internal.ignore",
        "torch._jit_internal.export"
    ],
    "torch._jit_internal.ignore": [
        "<builtin>.callable",
        "<builtin>.isinstance",
        "<builtin>.RuntimeError",
        "warnings.warn"
    ],
    "torch.nn.quantized.dynamic.modules.rnn.GRU": [
        "<builtin>.classmethod",
        "torch._jit_internal.ignore",
        "torch._jit_internal.export"
    ],
    "torch.nn.quantized.dynamic.modules.rnn.RNNCellBase": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.dynamic.modules.rnn.RNNCell": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.dynamic.modules.rnn.LSTMCell": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.dynamic.modules.rnn.GRUCell": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized.dynamic.modules.conv": [],
    "torch.nn.intrinsic.quantized.dynamic.modules.linear_relu.LinearReLU": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference": [],
    "torch.nn.quantized._reference.modules": [],
    "torch.nn.quantized._reference.modules.linear": [],
    "torch.nn.quantized._reference.modules.utils": [],
    "torch.nn.quantized._reference.modules.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.conv": [],
    "torch.nn.quantized._reference.modules.conv._ConvNd": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantized._reference.modules.conv.Conv1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.conv.Conv2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.conv.Conv3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.conv._ConvTransposeNd": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.quantized._reference.modules.conv.ConvTranspose1d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.conv.ConvTranspose2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.conv.ConvTranspose3d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.rnn": [],
    "torch.nn.quantized._reference.modules.rnn.RNNCell": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.rnn.LSTMCell": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.rnn.GRUCell": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.rnn.LSTM": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.sparse": [],
    "torch.nn.quantized._reference.modules.sparse.Embedding": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized._reference.modules.sparse.EmbeddingBag": [
        "<builtin>.classmethod"
    ],
    "torch.nn.qat.dynamic": [],
    "torch.nn.qat.dynamic.modules": [],
    "torch.nn.qat.dynamic.modules.linear": [],
    "torch.ao.quantization": [],
    "torch.ao.quantization.fake_quantize": [],
    "torch.ao.quantization.observer": [
        "<builtin>.str"
    ],
    "torch.ao.quantization.utils": [],
    "torch.ao.quantization.quant_type": [],
    "torch.ao.quantization.observer.ObserverBase": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "torch.ao.quantization.observer.UniformQuantizationObserverBase": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.MinMaxObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.PerChannelMinMaxObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.HistogramObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.FixedQParamsObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.PlaceholderObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.RecordingObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.NoopObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.ReuseInputObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.fake_quantize.FakeQuantizeBase": [
        "abc.abstractmethod",
        "<builtin>.classmethod",
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.fake_quantize.FakeQuantize": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.fake_quantize.FixedQParamsFakeQuantize": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.fake_quantize.FusedMovingAvgObsFakeQuantize": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.fuse_modules": [],
    "torch.ao.quantization.fuser_method_mappings": [
        "torch.ao.quantization.fuser_method_mappings.reverse3",
        "torch.ao.quantization.fuser_method_mappings.reverse2",
        "torch.ao.quantization.fuser_method_mappings.sequential_wrapper2",
        "torch.ao.quantization.fuser_method_mappings.reverse_sequential_wrapper2"
    ],
    "torch.ao.quantization.fuser_method_mappings.sequential_wrapper2": [],
    "torch.ao.quantization.fuser_method_mappings.reverse2": [],
    "torch.ao.quantization.fuser_method_mappings.reverse3": [],
    "torch.ao.quantization.fuser_method_mappings.reverse_sequential_wrapper2": [],
    "torch.ao.quantization.qconfig": [
        "collections.namedtuple"
    ],
    "torch.ao.quantization.quantize_jit": [],
    "torch.ao.quantization.stubs": [],
    "torch.ao.nn": [],
    "torch.ao.nn.sparse": [],
    "torch.ao.nn.sparse.quantized": [],
    "torch.ao.nn.sparse.quantized.dynamic": [],
    "torch.ao.nn.sparse.quantized.dynamic.linear": [],
    "torch.ao.nn.sparse.quantized.linear": [],
    "torch.ao.nn.sparse.quantized.linear.LinearPackedParams": [
        "torch._jit_internal.export"
    ],
    "torch.ao.nn.sparse.quantized.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.sparse.quantized.utils": [],
    "torch.ao.nn.sparse.quantized.utils.LinearBlockSparsePattern": [
        "<builtin>.staticmethod",
        "threading.RLock"
    ],
    "torch.ao.nn.sparse.quantized.dynamic.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.quantization.observer": [],
    "torch.quantization.qconfig": [],
    "torch.quantization.fake_quantize": [],
    "torch.quantization.fuse_modules": [],
    "torch.quantization.fuser_method_mappings": [],
    "torch.quantization.stubs": [],
    "torch.quantization.quant_type": [],
    "torch.quantization.quantize_jit": [],
    "torch.quantization.quantization_mappings": [],
    "torch.quasirandom": [],
    "torch.multiprocessing._atfork": [],
    "torch.multiprocessing._atfork.register_after_fork": [
        "torch.multiprocessing._atfork._register"
    ],
    "torch.multiprocessing._atfork._register": [],
    "torch._lobpcg": [],
    "torch._lobpcg.LOBPCGAutogradFunction": [
        "<builtin>.staticmethod"
    ],
    "torch._lobpcg.LOBPCG": [
        "torch._jit_internal.unused"
    ],
    "torch.utils.dlpack": [],
    "torch._masked": [
        "torch._masked._apply_docstring_templates"
    ],
    "torch._masked._docs": [],
    "torch._masked._apply_docstring_templates": [
        "<builtin>.getattr",
        "append",
        "warnings.warn"
    ],
    "torch.return_types": [
        "<builtin>.getattr",
        "<builtin>.globals",
        "torch.return_types.pytree_register_structseq",
        "inspect.isclass",
        "<builtin>.issubclass",
        "append",
        "<builtin>.dir"
    ],
    "torch.return_types.pytree_register_structseq": [
        "torch.utils._pytree._register_pytree_node"
    ],
    "torch.library": [
        "<builtin>.set"
    ],
    "torch._meta_registrations": [
        "torch.library.impl.wrap",
        "torch.library.Library.__init__",
        "torch.library.impl"
    ],
    "torch._prims.utils": [
        "<builtin>.hasattr"
    ],
    "torch._prims.utils.TensorMeta": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.library.Library.__init__": [
        "traceback.extract_stack",
        "<builtin>.set",
        "<builtin>.ValueError"
    ],
    "torch.library.impl": [],
    "torch.library.impl.wrap": [
        "torch.library.Library.impl"
    ],
    "torch.library.Library.impl": [
        "<builtin>.isinstance",
        "<builtin>.RuntimeError"
    ],
    "torchvision.transforms": [],
    "torchvision.transforms.transforms": [],
    "torchvision.utils": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "PIL.Image": [
        "<builtin>.getattr",
        "logging.getLogger",
        "<builtin>.hasattr",
        "<builtin>.ImportError",
        "PIL.Image._apply_env_variables",
        "warnings.warn",
        "PIL._util.DeferredError.__init__",
        "<builtin>.int",
        "<builtin>.str"
    ],
    "PIL.ImageMode": [],
    "PIL.TiffTags": [
        "PIL.TiffTags._populate",
        "collections.namedtuple"
    ],
    "PIL.TiffTags._populate": [
        "<builtin>.len",
        "<map>.items"
    ],
    "PIL._binary": [],
    "PIL._deprecate": [],
    "PIL._util": [],
    "PIL._util.DeferredError.__init__": [],
    "cffi": [],
    "cffi.api": [
        "<builtin>.object"
    ],
    "cffi.lock": [],
    "cffi.error": [],
    "cffi.model": [
        "weakref.WeakValueDictionary.__init__",
        "cffi.model.VoidType.__init__",
        "cffi.model.PrimitiveType.__init__",
        "cffi.model.PointerType.__init__",
        "cffi.model.ArrayType.__init__",
        "cffi.model.ConstPointerType"
    ],
    "cffi.model.VoidType.__init__": [],
    "cffi.model.PointerType.__init__": [
        "<str>.lstrip",
        "cffi.model.qualify"
    ],
    "<str>.lstrip": [],
    "cffi.model.qualify": [
        "<str>.lstrip"
    ],
    "cffi.model.ConstPointerType": [
        "cffi.model.PointerType.__init__"
    ],
    "cffi.model.PrimitiveType.__init__": [],
    "cffi.model.ArrayType.__init__": [],
    "cffi.api.FFI": [
        "<builtin>.property"
    ],
    "PIL.Image.Image": [
        "<builtin>.property"
    ],
    "PIL.Image._apply_env_variables": [
        "<builtin>.len",
        "<builtin>.int",
        "warnings.warn"
    ],
    "PIL.ImageColor": [],
    "PIL.ImageDraw": [],
    "PIL.ImageFont": [
        "<builtin>.object"
    ],
    "torchvision.transforms.functional": [
        "torch._jit_internal.unused"
    ],
    "torchvision.transforms.functional_pil": [
        "torch._jit_internal.unused"
    ],
    "PIL.ImageOps": [],
    "PIL.ImageEnhance": [],
    "PIL.ImageFilter": [],
    "PIL.ImageFilter.Color3DLUT": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "PIL.ImageStat": [],
    "torchvision.transforms._pil_constants": [
        "<builtin>.hasattr"
    ],
    "torchvision.transforms.functional_tensor": [],
    "torchvision.transforms.transforms.RandomCrop": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.RandomPerspective": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.RandomResizedCrop": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.ColorJitter": [
        "torch._jit_internal.unused",
        "<builtin>.staticmethod",
        "<builtin>.float"
    ],
    "<builtin>.float": [],
    "torchvision.transforms.transforms.RandomRotation": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.RandomAffine": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.RandomErasing": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.GaussianBlur": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.autoaugment": [],
    "torchvision.transforms.autoaugment.AutoAugment": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.autoaugment.AugMix": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models": [],
    "torchvision.models.alexnet": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.transforms._presets": [],
    "torchvision.models._api": [],
    "torchvision._utils": [
        "typing.TypeVar.__init__"
    ],
    "torchvision._internally_replaced_utils": [
        "ntpath.join",
        "torch.hub._get_torch_home",
        "posixpath.join"
    ],
    "torch.hub._get_torch_home": [
        "os.getenv",
        "ntpath.join",
        "ntpath.expanduser",
        "posixpath.expanduser",
        "posixpath.join"
    ],
    "posixpath.expanduser": [
        "<builtin>.len",
        "os._fspath",
        "<builtin>.isinstance",
        "posixpath._get_sep",
        "<builtin>.str"
    ],
    "ntpath.expanduser": [
        "<builtin>.len",
        "ntpath.dirname",
        "ntpath._get_bothseps",
        "ntpath.join",
        "<builtin>.isinstance",
        "ntpath.basename",
        "os._fspath"
    ],
    "torch.utils.model_zoo": [],
    "torchvision.models._api.WeightsEnum": [
        "<builtin>.classmethod"
    ],
    "torchvision.models._meta": [],
    "torchvision.models._utils": [
        "typing.TypeVar.__init__"
    ],
    "torchvision.models._utils.handle_legacy_interface": [],
    "torchvision.models._utils.handle_legacy_interface.outer_wrapper": [
        "functools.wraps",
        "torchvision.models._utils.kwonly_to_pos_or_kw"
    ],
    "torchvision.models._utils.kwonly_to_pos_or_kw": [
        "<builtin>.enumerate",
        "functools.wraps",
        "inspect.signature",
        "<builtin>.TypeError",
        "<builtin>.tuple",
        "<builtin>.next"
    ],
    "torchvision.models.convnext": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.ops.misc": [],
    "torchvision.ops.stochastic_depth": [
        "torch.fx._symbolic_trace.wrap"
    ],
    "torch.fx": [],
    "torch.fx.graph_module": [
        "torch.fx.graph_module._EvalCacheLoader.__init__",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx.graph": [
        "<builtin>.type",
        "<builtin>.dict",
        "torch.fx.graph._register_custom_builtin"
    ],
    "torch.fx.node": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "<builtin>.float"
    ],
    "torch.fx._compatibility": [],
    "torch.fx.immutable_collections": [
        "torch.fx.immutable_collections._create_immutable_container",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.utils._pytree._register_pytree_node",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.immutable_collections._create_immutable_container": [
        "<builtin>.type",
        "<builtin>.setattr"
    ],
    "torch.fx._compatibility.compatibility": [],
    "torch.fx._compatibility.compatibility.mark_back_compat": [
        "<builtin>.getattr",
        "textwrap.dedent"
    ],
    "torch.fx._compatibility.compatibility.mark_not_back_compat": [
        "<builtin>.getattr",
        "textwrap.dedent"
    ],
    "torch.fx.operator_schemas": [
        "typing.TypeVar.__init__",
        "<builtin>.type",
        "<builtin>.getattr",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "<builtin>.dir",
        "torch.fx.operator_schemas._nonzero_schemas"
    ],
    "torch.fx.operator_schemas._nonzero_schemas": [
        "append"
    ],
    "torch.fx.node.Node": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "<builtin>.property",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx._pytree": [
        "torch.fx._pytree.register_pytree_flatten_spec"
    ],
    "torch.fx._pytree.register_pytree_flatten_spec": [],
    "torch.fx._symbolic_trace": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx._symbolic_trace.wrap",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx.proxy": [
        "torch.fx.proxy._scope",
        "torch.fx._compatibility.compatibility",
        "torch.fx.proxy._define_reflectable",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.proxy.TracerBase": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx.proxy.Proxy": [
        "<builtin>.classmethod",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx.proxy.Attribute": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "<builtin>.property",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx.proxy.ParameterProxy": [
        "<builtin>.property"
    ],
    "torch.fx.proxy._scope": [
        "<builtin>.setattr"
    ],
    "torch.fx.proxy._define_reflectable": [
        "<builtin>.setattr"
    ],
    "torch.fx._symbolic_trace.Tracer": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx._symbolic_trace.wrap": [
        "<builtin>.callable",
        "<builtin>.RuntimeError",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.NotImplementedError",
        "inspect.currentframe"
    ],
    "torch.fx.graph._register_custom_builtin": [],
    "torch.fx.graph.Graph": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "<builtin>.property",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx.graph_module._EvalCacheLoader.__init__": [],
    "torch.fx.graph_module._WrappedCall": [
        "<builtin>.staticmethod"
    ],
    "torch.fx.graph_module.GraphModule": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "<builtin>.property",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx.interpreter": [],
    "torch.fx.interpreter.Interpreter": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx.interpreter.Transformer": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torch.fx.subgraph_rewriter": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx._compatibility.compatibility.mark_not_back_compat"
    ],
    "torchvision.models.densenet": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torch.utils.checkpoint": [],
    "torch.utils.checkpoint.CheckpointFunction": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.densenet._DenseLayer": [
        "torch._jit_internal.unused",
        "torch._jit_internal._overload_method"
    ],
    "torchvision.models.efficientnet": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.ops": [
        "torchvision.ops._register_onnx_ops._register_custom_op"
    ],
    "torchvision.ops._register_onnx_ops": [],
    "torchvision.ops.boxes": [
        "torch.jit._trace._script_if_tracing"
    ],
    "torchvision": [
        "ntpath.dirname",
        "posixpath.dirname",
        "ntpath.join",
        "warnings.warn",
        "ntpath.realpath",
        "posixpath.realpath",
        "posixpath.join"
    ],
    "torchvision.datasets": [],
    "torchvision.datasets._optical_flow": [],
    "torchvision.io.image": [
        "warnings.warn",
        "torchvision.extension._load_library"
    ],
    "torchvision.extension": [
        "torchvision._internally_replaced_utils._get_extension_path",
        "torch._ops._Ops.load_library",
        "torchvision.extension._check_cuda_version"
    ],
    "torchvision._internally_replaced_utils._get_extension_path": [
        "ntpath.dirname",
        "posixpath.dirname",
        "<builtin>.hasattr",
        "os.add_dll_directory",
        "ctypes.WinError"
    ],
    "torch._ops._Ops.load_library": [
        "torch._ops.dl_open_guard"
    ],
    "torch._ops.dl_open_guard": [],
    "torchvision.extension._check_cuda_version": [
        "<builtin>.int",
        "<builtin>.RuntimeError",
        "<builtin>.str"
    ],
    "torchvision.extension._load_library": [
        "<builtin>.hasattr",
        "torchvision._internally_replaced_utils._get_extension_path",
        "torch._ops._Ops.load_library",
        "warnings.warn"
    ],
    "torchvision.datasets.utils": [
        "typing.TypeVar.__init__"
    ],
    "urllib": [],
    "requests": [
        "requests.check_compatibility",
        "<builtin>.getattr",
        "logging.getLogger",
        "warnings.warn",
        "requests._check_cryptography",
        "warnings.simplefilter",
        "urllib3.contrib.pyopenssl.inject_into_urllib3"
    ],
    "urllib3": [
        "warnings.simplefilter",
        "logging.getLogger",
        "urllib3.contrib.emscripten.inject_into_urllib3",
        "urllib3.poolmanager.PoolManager.__init__"
    ],
    "urllib3.exceptions": [],
    "urllib3.connection": [
        "<builtin>.hasattr",
        "logging.getLogger",
        "re.compile"
    ],
    "urllib3.response": [
        "logging.getLogger"
    ],
    "urllib3._base_connection": [],
    "urllib3.util.connection": [
        "urllib3.util.connection._has_ipv6"
    ],
    "urllib3.util.timeout": [],
    "urllib3.util.timeout.Timeout": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "urllib3.util.connection._has_ipv6": [
        "socket.socket.close",
        "socket.socket.__init__"
    ],
    "socket.socket.__init__": [],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket._real_close": [],
    "urllib3.util.url": [
        "typing.overload",
        "<builtin>.set",
        "re.compile",
        "typing.NamedTuple"
    ],
    "urllib3.util.util": [],
    "typing.NamedTuple": [
        "<builtin>.TypeError",
        "typing._make_nmtuple"
    ],
    "typing._make_nmtuple": [
        "typing._type_check",
        "collections.namedtuple"
    ],
    "urllib3.util.url.Url": [
        "<builtin>.property"
    ],
    "urllib3._base_connection.BaseHTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.util": [],
    "urllib3.util.request": [
        "<builtin>.frozenset"
    ],
    "urllib3.util.response": [],
    "urllib3.util.retry": [
        "logging.getLogger",
        "urllib3.util.retry.Retry.__init__"
    ],
    "urllib3.connectionpool": [
        "logging.getLogger",
        "typing.overload"
    ],
    "urllib3._request_methods": [],
    "urllib3.filepost": [],
    "urllib3.fields": [],
    "mimetypes": [
        "mimetypes._default_mime_types"
    ],
    "mimetypes.MimeTypes": [
        "<builtin>.classmethod"
    ],
    "mimetypes._default_mime_types": [],
    "urllib3.fields.RequestField": [
        "<builtin>.classmethod"
    ],
    "urllib3.util.proxy": [],
    "urllib3.util.ssl_match_hostname": [],
    "ipaddress": [],
    "ipaddress._IPAddressBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress._BaseNetwork": [
        "functools.cached_property.__init__",
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "ipaddress._BaseV4": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Address": [
        "functools.lru_cache",
        "<builtin>.property",
        "functools.lru_cache.decorating_function"
    ],
    "ipaddress.IPv4Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Network": [
        "functools.lru_cache",
        "<builtin>.property",
        "functools.lru_cache.decorating_function"
    ],
    "ipaddress._IPv4Constants": [
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv4Network.__init__": [
        "<builtin>.ValueError",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._BaseV4._make_netmask",
        "<builtin>.int"
    ],
    "ipaddress._IPAddressBase._split_addr_prefix": [
        "ipaddress._split_optional_netmask",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "ipaddress._split_optional_netmask": [
        "<builtin>.len",
        "<builtin>.str"
    ],
    "ipaddress.IPv4Address.__init__": [
        "ipaddress._IPAddressBase._check_int_address",
        "ipaddress._BaseV4._ip_int_from_string",
        "<builtin>.isinstance",
        "ipaddress._IPAddressBase._check_packed_address",
        "<builtin>.str"
    ],
    "ipaddress._IPAddressBase._check_int_address": [],
    "ipaddress._IPAddressBase._check_packed_address": [
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._ip_int_from_string": [
        "<builtin>.len",
        "<builtin>.map"
    ],
    "ipaddress._BaseV4._make_netmask": [
        "<builtin>.isinstance",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress._BaseV6": [
        "<builtin>.frozenset",
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress.IPv6Address": [
        "functools.lru_cache",
        "<builtin>.property",
        "functools.lru_cache.decorating_function"
    ],
    "ipaddress.IPv6Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv6Network": [
        "<builtin>.property"
    ],
    "ipaddress._IPv6Constants": [
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.IPv6Network.__init__": [
        "<builtin>.ValueError",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress._BaseV6._make_netmask",
        "ipaddress.IPv6Address.__init__",
        "<builtin>.int"
    ],
    "ipaddress.IPv6Address.__init__": [
        "ipaddress._IPAddressBase._check_int_address",
        "ipaddress._BaseV6._split_scope_id",
        "<builtin>.isinstance",
        "ipaddress._BaseV6._ip_int_from_string",
        "ipaddress._IPAddressBase._check_packed_address",
        "<builtin>.str"
    ],
    "ipaddress._BaseV6._split_scope_id": [],
    "ipaddress._BaseV6._ip_int_from_string": [
        "<builtin>.range",
        "<builtin>.len",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._BaseV6._parse_hextet"
    ],
    "ipaddress._BaseV6._parse_hextet": [
        "<builtin>.ValueError",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._make_netmask": [
        "<builtin>.isinstance",
        "ipaddress.IPv6Address.__init__"
    ],
    "urllib3.util.ssl_": [
        "<builtin>.getattr",
        "typing.overload",
        "urllib3.util.ssl_._is_has_never_check_common_name_reliable"
    ],
    "hmac": [
        "<builtin>.range",
        "<builtin>.bytes"
    ],
    "hmac.HMAC": [
        "<builtin>.property"
    ],
    "urllib3.util.ssltransport": [
        "typing.TypeVar.__init__"
    ],
    "urllib3.util.ssltransport.SSLTransport": [
        "<builtin>.staticmethod",
        "typing.overload"
    ],
    "urllib3.util.ssl_._is_has_never_check_common_name_reliable": [
        "urllib3.util.ssl_._is_bpo_43522_fixed"
    ],
    "urllib3.util.ssl_._is_bpo_43522_fixed": [],
    "urllib3.util.retry.Retry": [
        "<builtin>.frozenset",
        "<builtin>.classmethod"
    ],
    "urllib3.util.retry.Retry.__init__": [
        "<builtin>.frozenset",
        "<builtin>.set"
    ],
    "urllib3.util.wait": [],
    "urllib3.response.BaseHTTPResponse": [
        "<builtin>.property"
    ],
    "urllib3.response.HTTPResponse": [
        "contextlib.contextmanager",
        "<builtin>.property"
    ],
    "urllib3.http2.probe": [
        "urllib3.http2.probe._HTTP2ProbeCache.__init__"
    ],
    "urllib3.http2.probe._HTTP2ProbeCache.__init__": [],
    "urllib3._version": [],
    "urllib3.connection.HTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.exceptions.NewConnectionError": [
        "<builtin>.property"
    ],
    "urllib3.poolmanager": [
        "logging.getLogger"
    ],
    "urllib3.poolmanager.PoolManager.__init__": [
        "<builtin>.super",
        "<map>.copy"
    ],
    "urllib3.contrib.emscripten": [],
    "urllib3.contrib.emscripten.connection": [
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection.__init__",
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection.__init__"
    ],
    "urllib3.contrib.emscripten.fetch": [
        "urllib3.contrib.emscripten.fetch._StreamingFetcher.__init__",
        "urllib3.contrib.emscripten.fetch.is_worker_available",
        "urllib3.contrib.emscripten.fetch.is_cross_origin_isolated",
        "urllib3.contrib.emscripten.fetch.is_in_node",
        "urllib3.contrib.emscripten.fetch.is_in_browser_main_thread"
    ],
    "importlib.resources": [
        "functools.singledispatch"
    ],
    "importlib.abc": [
        "importlib.abc._register"
    ],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "functools.singledispatch": [
        "<builtin>.getattr",
        "functools.update_wrapper",
        "weakref.WeakKeyDictionary.__init__"
    ],
    "urllib3.contrib.emscripten.request": [],
    "urllib3.contrib.emscripten.request.EmscriptenRequest": [
        "dataclasses.field"
    ],
    "dataclasses.field": [
        "<builtin>.ValueError",
        "dataclasses.Field.__init__"
    ],
    "dataclasses.Field.__init__": [],
    "urllib3.contrib.emscripten.response": [
        "logging.getLogger"
    ],
    "urllib3.contrib.emscripten.response.EmscriptenHttpResponseWrapper": [
        "contextlib.contextmanager",
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.fetch._ReadStream": [
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.fetch.is_worker_available": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_cross_origin_isolated": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_in_browser_main_thread": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_in_node": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch._StreamingFetcher.__init__": [
        "urllib3.contrib.emscripten.fetch._obj_from_dict"
    ],
    "urllib3.contrib.emscripten.fetch._obj_from_dict": [],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection.__init__": [
        "<builtin>.isinstance"
    ],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection.__init__": [
        "ntpath.expanduser",
        "posixpath.expanduser",
        "<builtin>.super"
    ],
    "urllib3.contrib.emscripten.inject_into_urllib3": [],
    "requests.exceptions": [],
    "requests.compat": [
        "requests.compat._resolve_char_detection"
    ],
    "requests.compat._resolve_char_detection": [
        "importlib.import_module"
    ],
    "importlib.import_module": [
        "<builtin>.TypeError"
    ],
    "http.cookiejar": [
        "append",
        "re.compile",
        "<builtin>.str"
    ],
    "http.cookiejar.CookieJar": [
        "re.compile"
    ],
    "http.cookies": [
        "re.compile",
        "<builtin>.range",
        "<builtin>.set",
        "<builtin>.map",
        "<builtin>.ord",
        "re.escape"
    ],
    "http.cookies.Morsel": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "charset_normalizer": [
        "logging.getLogger"
    ],
    "charset_normalizer.api": [
        "logging.getLogger",
        "logging.Formatter.__init__",
        "logging.StreamHandler.__init__",
        "logging.Handler.setFormatter"
    ],
    "charset_normalizer.cd": [
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "charset_normalizer.constant": [
        "<builtin>.len",
        "re.compile",
        "<builtin>.range",
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.sorted",
        "<builtin>.int",
        "<builtin>.filter"
    ],
    "charset_normalizer.md": [
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "charset_normalizer.utils": [
        "functools.lru_cache",
        "<builtin>.len",
        "functools.lru_cache.decorating_function"
    ],
    "charset_normalizer.md.MessDetectorPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManySymbolOrPunctuationPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManyAccentuatedPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.UnprintablePlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousDuplicateAccentPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousRange": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuperWeirdWordPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.CjkInvalidStopPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArchaicUpperLowerPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArabicIsolatedFormPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.models": [],
    "charset_normalizer.models.CharsetMatch": [
        "<builtin>.property"
    ],
    "charset_normalizer.models.CliDetectionResult": [
        "<builtin>.property"
    ],
    "logging.Handler.setFormatter": [],
    "charset_normalizer.legacy": [],
    "charset_normalizer.version": [],
    "requests.check_compatibility": [
        "<builtin>.len",
        "<builtin>.int",
        "warnings.warn"
    ],
    "urllib3.contrib.pyopenssl": [
        "<builtin>.hasattr",
        "logging.getLogger",
        "<builtin>.getattr",
        "<map>.items"
    ],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext": [
        "<builtin>.property"
    ],
    "urllib3.contrib.pyopenssl.inject_into_urllib3": [
        "urllib3.contrib.pyopenssl._validate_dependencies_met"
    ],
    "urllib3.contrib.pyopenssl._validate_dependencies_met": [
        "<builtin>.getattr",
        "<builtin>.ImportError"
    ],
    "requests._check_cryptography": [
        "<builtin>.map",
        "warnings.warn",
        "<builtin>.list"
    ],
    "requests.packages": [
        "<builtin>.__import__",
        "<builtin>.locals",
        "<builtin>.list"
    ],
    "<builtin>.locals": [],
    "requests.utils": [
        "<builtin>.frozenset",
        "<str>.encode",
        "contextlib.contextmanager",
        "certifi.core.where",
        "urllib3.util.request.make_headers",
        "re.split"
    ],
    "requests.certs": [],
    "certifi": [],
    "certifi.core": [],
    "requests.__version__": [],
    "requests._internal_utils": [
        "re.compile"
    ],
    "requests.cookies": [],
    "requests.cookies.MockRequest": [
        "<builtin>.property"
    ],
    "requests.structures": [],
    "certifi.core.where": [
        "posixpath.dirname",
        "ntpath.join",
        "posixpath.join",
        "ntpath.dirname"
    ],
    "urllib3.util.request.make_headers": [
        "<builtin>.isinstance",
        "base64.b64encode"
    ],
    "base64.b64encode": [
        "<builtin>.len",
        "<builtin>.repr"
    ],
    "requests.api": [],
    "requests.sessions": [],
    "requests.adapters": [
        "urllib3.util.ssl_.create_urllib3_context",
        "requests.utils.extract_zipped_paths"
    ],
    "requests.auth": [],
    "requests.models": [],
    "encodings.idna": [
        "re.compile"
    ],
    "stringprep": [
        "<builtin>.range",
        "<builtin>.set",
        "<builtin>.list"
    ],
    "requests.hooks": [],
    "requests.status_codes": [
        "requests.structures.LookupDict.__init__",
        "requests.status_codes._init"
    ],
    "requests.structures.LookupDict.__init__": [
        "<builtin>.super"
    ],
    "requests.status_codes._init": [
        "<builtin>.setattr",
        "requests.status_codes._init.doc",
        "<map>.items",
        "<builtin>.sorted"
    ],
    "requests.status_codes._init.doc": [],
    "requests.models.RequestEncodingMixin": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "requests.models.PreparedRequest": [
        "<builtin>.staticmethod"
    ],
    "requests.models.Response": [
        "<builtin>.property"
    ],
    "urllib3.contrib.socks": [
        "warnings.warn"
    ],
    "urllib3.util.ssl_.create_urllib3_context": [
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "<builtin>.hasattr",
        "warnings.warn",
        "<builtin>.TypeError"
    ],
    "requests.utils.extract_zipped_paths": [
        "tempfile.gettempdir",
        "genericpath.exists",
        "ntpath.split",
        "requests.utils.atomic_open",
        "zipfile.ZipFile.__init__",
        "ntpath.join",
        "posixpath.split",
        "zipfile.is_zipfile",
        "zipfile.ZipFile.read",
        "posixpath.join",
        "zipfile.ZipFile.namelist"
    ],
    "zipfile.is_zipfile": [
        "<builtin>.hasattr",
        "<builtin>.open",
        "zipfile._check_zipfile"
    ],
    "<builtin>.open": [],
    "zipfile._check_zipfile": [
        "zipfile._EndRecData"
    ],
    "zipfile._EndRecData": [
        "zipfile._EndRecData64",
        "<builtin>.len",
        "<builtin>.max",
        "<builtin>.list"
    ],
    "zipfile._EndRecData64": [
        "<builtin>.len"
    ],
    "zipfile.ZipFile.__init__": [
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "zipfile.ZipFile._RealGetContents",
        "<builtin>.isinstance",
        "zipfile._Tellable.__init__",
        "threading.RLock",
        "zipfile._check_compression",
        "zipfile.ZipFile._fpclose",
        "os._fspath"
    ],
    "zipfile._check_compression": [
        "<builtin>.NotImplementedError",
        "<builtin>.RuntimeError"
    ],
    "zipfile.ZipFile._RealGetContents": [
        "<builtin>.len",
        "<builtin>.print",
        "zipfile.ZipInfo.__init__",
        "<builtin>.NotImplementedError",
        "zipfile._EndRecData",
        "zipfile.ZipInfo._decodeExtra"
    ],
    "zipfile.ZipInfo.__init__": [
        "<builtin>.ValueError",
        "<builtin>.chr",
        "<str>.find"
    ],
    "zipfile.ZipInfo._decodeExtra": [
        "<builtin>.len"
    ],
    "zipfile._Tellable.__init__": [],
    "zipfile.ZipFile._fpclose": [
        "zipfile._Tellable.close"
    ],
    "zipfile._Tellable.close": [],
    "zipfile.ZipFile.namelist": [],
    "tempfile.gettempdir": [
        "tempfile._gettempdir"
    ],
    "tempfile._gettempdir": [
        "tempfile._get_default_tempdir"
    ],
    "tempfile._get_default_tempdir": [
        "ntpath.abspath",
        "<builtin>.range",
        "ntpath.join",
        "genericpath.isdir",
        "<builtin>.FileNotFoundError",
        "posixpath.join",
        "posixpath.abspath",
        "<builtin>.next",
        "tempfile._candidate_tempdir_list"
    ],
    "tempfile._candidate_tempdir_list": [
        "extend",
        "append",
        "os.getenv"
    ],
    "<builtin>.FileNotFoundError": [],
    "requests.utils.atomic_open": [
        "posixpath.dirname",
        "os.fdopen",
        "ntpath.dirname",
        "tempfile.mkstemp"
    ],
    "tempfile.mkstemp": [
        "tempfile._sanitize_params",
        "tempfile._mkstemp_inner"
    ],
    "tempfile._sanitize_params": [
        "tempfile.gettempdirb",
        "tempfile.gettempdir",
        "tempfile._infer_return_type"
    ],
    "tempfile._infer_return_type": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "os._fspath"
    ],
    "tempfile.gettempdirb": [
        "tempfile._gettempdir"
    ],
    "tempfile._mkstemp_inner": [
        "ntpath.abspath",
        "<builtin>.FileExistsError",
        "<builtin>.range",
        "ntpath.join",
        "genericpath.isdir",
        "tempfile._get_candidate_names",
        "<builtin>.map",
        "posixpath.join",
        "posixpath.abspath",
        "<builtin>.next"
    ],
    "tempfile._get_candidate_names": [],
    "<builtin>.FileExistsError": [],
    "os.fdopen": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "zipfile.ZipFile.read": [
        "zipfile.ZipFile.open"
    ],
    "zipfile.ZipFile.open": [
        "<builtin>.ValueError",
        "zipfile._SharedFile.read",
        "<builtin>.len",
        "zipfile.ZipInfo.__init__",
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "zipfile.ZipExtFile.__init__",
        "zipfile.ZipFile._open_to_write",
        "zipfile._SharedFile.close",
        "<builtin>.isinstance",
        "zipfile.ZipFile.getinfo",
        "<builtin>.NotImplementedError",
        "<builtin>.TypeError",
        "zipfile._SharedFile.__init__"
    ],
    "zipfile.ZipFile.getinfo": [
        "<builtin>.KeyError",
        "<map>.get"
    ],
    "<str>.find": [],
    "zipfile.ZipFile._open_to_write": [
        "zipfile._ZipWriteFile.__init__",
        "zipfile.ZipFile._writecheck",
        "<builtin>.ValueError",
        "zipfile.ZipInfo.FileHeader"
    ],
    "zipfile.ZipFile._writecheck": [
        "<builtin>.ValueError",
        "<builtin>.len",
        "warnings.warn",
        "zipfile._check_compression"
    ],
    "zipfile.ZipInfo.FileHeader": [
        "<builtin>.len",
        "zipfile.ZipInfo._encodeFilenameFlags",
        "<builtin>.max"
    ],
    "zipfile.ZipInfo._encodeFilenameFlags": [],
    "zipfile._ZipWriteFile.__init__": [
        "zipfile._get_compressor"
    ],
    "zipfile._get_compressor": [
        "zipfile.LZMACompressor.__init__"
    ],
    "zipfile.LZMACompressor.__init__": [],
    "zipfile._SharedFile.__init__": [],
    "zipfile._SharedFile.read": [],
    "zipfile.ZipExtFile.__init__": [
        "<builtin>.RuntimeError",
        "zipfile._get_decompressor",
        "<builtin>.hasattr",
        "zipfile.ZipExtFile._init_decrypter",
        "zipfile._SharedFile.tell"
    ],
    "zipfile._get_decompressor": [
        "<map>.get",
        "<builtin>.NotImplementedError",
        "zipfile._check_compression",
        "zipfile.LZMADecompressor.__init__"
    ],
    "zipfile.LZMADecompressor.__init__": [],
    "zipfile._SharedFile.tell": [],
    "zipfile.ZipExtFile._init_decrypter": [
        "zipfile._ZipDecrypter"
    ],
    "zipfile._ZipDecrypter": [
        "<builtin>.range",
        "<builtin>.map",
        "<builtin>.list",
        "zipfile._ZipDecrypter.update_keys"
    ],
    "zipfile._ZipDecrypter.update_keys": [
        "zipfile._ZipDecrypter.crc32"
    ],
    "zipfile._ZipDecrypter.crc32": [],
    "zipfile._SharedFile.close": [
        "zipfile.ZipFile._fpclose"
    ],
    "torchvision.datasets.vision": [],
    "torchvision.datasets._optical_flow.FlowDataset": [
        "abc.abstractmethod"
    ],
    "torchvision.datasets.caltech": [],
    "torchvision.datasets.celeba": [
        "collections.namedtuple"
    ],
    "csv": [],
    "csv.DictReader": [
        "<builtin>.property"
    ],
    "PIL": [],
    "PIL._version": [],
    "torchvision.datasets.cifar": [],
    "torchvision.datasets.cityscapes": [],
    "torchvision.datasets.cityscapes.Cityscapes": [
        "collections.namedtuple"
    ],
    "torchvision.datasets.clevr": [],
    "torchvision.datasets.coco": [],
    "torchvision.datasets.country211": [],
    "torchvision.datasets.folder": [],
    "torchvision.datasets.folder.DatasetFolder": [
        "<builtin>.staticmethod"
    ],
    "torchvision.datasets.dtd": [],
    "torchvision.datasets.eurosat": [],
    "torchvision.datasets.fakedata": [],
    "torchvision.datasets.fer2013": [],
    "torchvision.datasets.fgvc_aircraft": [],
    "torchvision.datasets.flickr": [],
    "html.parser": [
        "re.compile"
    ],
    "_markupbase": [
        "re.compile"
    ],
    "html": [
        "re.compile"
    ],
    "html.entities": [
        "<map>.items",
        "<builtin>.chr"
    ],
    "torchvision.datasets.flowers102": [],
    "torchvision.datasets.food101": [],
    "torchvision.datasets.gtsrb": [],
    "torchvision.datasets.hmdb51": [],
    "torchvision.datasets.video_utils": [
        "typing.TypeVar.__init__"
    ],
    "fractions": [
        "re.compile"
    ],
    "decimal": [],
    "_pydecimal": [
        "collections.namedtuple",
        "re.compile",
        "_pydecimal.Context.__init__",
        "_pydecimal._Log10Memoize.__init__",
        "<builtin>.pow"
    ],
    "_pydecimal.Decimal": [
        "<builtin>.classmethod",
        "<builtin>.dict",
        "<builtin>.property"
    ],
    "_pydecimal._Log10Memoize.__init__": [],
    "_pydecimal.Context.__init__": [
        "<builtin>.isinstance",
        "<builtin>.int",
        "<builtin>.dict",
        "copy"
    ],
    "<builtin>.pow": [],
    "fractions.Fraction": [
        "<builtin>.classmethod",
        "fractions.Fraction._operator_fallbacks",
        "<builtin>.property"
    ],
    "fractions.Fraction._operator_fallbacks": [],
    "torchvision.io": [],
    "torchvision.io._load_gpu_decoder": [
        "torchvision.extension._load_library"
    ],
    "torchvision.io._video_opt": [
        "torchvision.extension._load_library"
    ],
    "torchvision.io.video": [
        "<builtin>.hasattr",
        "<builtin>.ImportError"
    ],
    "torchvision.io.video_reader": [],
    "torchvision.datasets.video_utils.VideoClips": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "torchvision.datasets.hmdb51.HMDB51": [
        "<builtin>.property"
    ],
    "torchvision.datasets.imagenet": [],
    "torchvision.datasets.imagenet.ImageNet": [
        "<builtin>.property"
    ],
    "torchvision.datasets.inaturalist": [],
    "torchvision.datasets.kinetics": [],
    "torchvision.datasets.kinetics.Kinetics": [
        "<builtin>.property"
    ],
    "torchvision.datasets.kitti": [],
    "torchvision.datasets.kitti.Kitti": [
        "<builtin>.property"
    ],
    "torchvision.datasets.lfw": [],
    "torchvision.datasets.lsun": [],
    "torchvision.datasets.mnist": [],
    "torchvision.datasets.mnist.MNIST": [
        "<builtin>.property"
    ],
    "torchvision.datasets.mnist.EMNIST": [
        "<builtin>.list",
        "<builtin>.property",
        "<builtin>.set",
        "<builtin>.sorted",
        "<builtin>.staticmethod"
    ],
    "torchvision.datasets.mnist.QMNIST": [
        "<builtin>.property"
    ],
    "torchvision.datasets.omniglot": [],
    "torchvision.datasets.oxford_iiit_pet": [],
    "torchvision.datasets.pcam": [],
    "torchvision.datasets.phototour": [],
    "torchvision.datasets.places365": [],
    "torchvision.datasets.places365.Places365": [
        "<builtin>.property"
    ],
    "torchvision.datasets.rendered_sst2": [],
    "torchvision.datasets.sbd": [],
    "torchvision.datasets.sbu": [],
    "torchvision.datasets.semeion": [],
    "torchvision.datasets.stanford_cars": [],
    "torchvision.datasets.stl10": [],
    "torchvision.datasets.sun397": [],
    "torchvision.datasets.svhn": [],
    "torchvision.datasets.ucf101": [],
    "torchvision.datasets.ucf101.UCF101": [
        "<builtin>.property"
    ],
    "torchvision.datasets.usps": [],
    "torchvision.datasets.voc": [
        "ntpath.join",
        "posixpath.join"
    ],
    "xml.etree.ElementTree": [
        "<builtin>.set",
        "re.compile",
        "contextlib.contextmanager"
    ],
    "xml.etree.ElementPath": [
        "re.compile"
    ],
    "torchvision.datasets.voc.VOCSegmentation": [
        "<builtin>.property"
    ],
    "torchvision.datasets.voc.VOCDetection": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "torchvision.datasets.widerface": [],
    "torchvision.version": [
        "torchvision.extension._check_cuda_version"
    ],
    "torchvision.ops._box_convert": [],
    "torchvision.ops._utils": [],
    "torchvision.ops.ciou_loss": [],
    "torchvision.ops.diou_loss": [],
    "torchvision.ops.deform_conv": [],
    "torchvision.ops.drop_block": [
        "torch.fx._symbolic_trace.wrap"
    ],
    "torchvision.ops.feature_pyramid_network": [],
    "torchvision.ops.focal_loss": [],
    "torchvision.ops.giou_loss": [],
    "torchvision.ops.poolers": [
        "torch._jit_internal.unused",
        "torch.fx._symbolic_trace.wrap"
    ],
    "torchvision.ops.roi_align": [],
    "torchvision.ops.ps_roi_align": [],
    "torchvision.ops.ps_roi_pool": [],
    "torchvision.ops.roi_pool": [],
    "torchvision.ops._register_onnx_ops._register_custom_op": [
        "torch.onnx.register_custom_op_symbolic",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.symbolic_helper": [
        "<builtin>.set"
    ],
    "torch.onnx._patch_torch": [
        "re.compile"
    ],
    "torch.onnx._globals": [
        "torch.onnx._globals._InternalGlobals.__init__"
    ],
    "torch.onnx._constants": [
        "<builtin>.range",
        "<builtin>.tuple"
    ],
    "torch.onnx._globals._InternalGlobals": [
        "<builtin>.property"
    ],
    "torch.onnx._globals._InternalGlobals.__init__": [],
    "torch.onnx.symbolic_opset11": [
        "torch.onnx.symbolic_opset11._avg_pool",
        "torch.onnx.symbolic_helper.quantized_args.decorator",
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_opset11._interpolate"
    ],
    "torch.onnx.symbolic_opset9": [
        "torch.onnx.symbolic_opset9.wrap_logical_op_with_cast_to_and_from",
        "torch.onnx.symbolic_opset9._adaptive_pool",
        "torch.onnx.symbolic_opset9.wrap_logical_op_with_negation",
        "torch.onnx.symbolic_opset9._max_pool",
        "torch.onnx.symbolic_opset9._unsupported_dropout",
        "<builtin>.globals",
        "torch.onnx.symbolic_opset9._interpolate",
        "torch.onnx.symbolic_helper.quantized_args.decorator",
        "torch.onnx.symbolic_opset9.wrap_logical_op_with_cast_to_and_from.decorator",
        "torch.onnx.symbolic_opset9._one_hidden_rnn",
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "<map>.items",
        "torch.onnx.symbolic_opset9._avg_pool",
        "torch.onnx.symbolic_opset9._reduce_with_dtype"
    ],
    "torch.onnx.symbolic_helper.parse_args": [],
    "torch.onnx.symbolic_helper.parse_args.decorator": [
        "functools.wraps"
    ],
    "torch.onnx.symbolic_helper.quantized_args": [],
    "torch.onnx.symbolic_helper.quantized_args.decorator": [
        "functools.wraps"
    ],
    "torch.onnx.symbolic_opset9._reduce_with_dtype": [
        "torch.onnx.symbolic_opset9._reduce_op_symbolic",
        "torch.onnx.symbolic_opset9.overload_by_arg_count"
    ],
    "torch.onnx.symbolic_opset9._reduce_op_symbolic": [],
    "torch.onnx.symbolic_opset9.overload_by_arg_count": [
        "functools.wraps"
    ],
    "torch.onnx.symbolic_opset9._max_pool": [
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.quantized_args.decorator",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.symbolic_opset9._avg_pool": [
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.quantized_args.decorator",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.symbolic_opset9._adaptive_pool": [
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.quantized_args.decorator"
    ],
    "torch.onnx.symbolic_opset9._interpolate": [],
    "torch.onnx.symbolic_opset9.wrap_logical_op_with_negation": [],
    "torch.onnx.symbolic_opset9.wrap_logical_op_with_cast_to_and_from": [],
    "torch.onnx.symbolic_opset9.wrap_logical_op_with_cast_to_and_from.decorator": [],
    "torch.onnx.symbolic_opset9._unsupported_dropout": [
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.symbolic_opset9._one_hidden_rnn": [
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.symbolic_opset9.Prim": [
        "<builtin>.staticmethod"
    ],
    "torch.onnx.symbolic_opset9.Onnx": [
        "<builtin>.staticmethod"
    ],
    "torch.onnx.symbolic_opset10": [
        "torch.onnx.symbolic_opset10._avg_pool",
        "torch.onnx.symbolic_opset10._interpolate",
        "torch.onnx.symbolic_opset10._max_pool",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper.parse_args.decorator"
    ],
    "torch.onnx.symbolic_opset10._max_pool": [
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.quantized_args.decorator",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.symbolic_opset10._avg_pool": [
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.quantized_args.decorator",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.symbolic_opset10._interpolate": [
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.quantized_args.decorator"
    ],
    "torch.onnx.symbolic_opset10.Quantized": [
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "<builtin>.staticmethod",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.utils": [
        "contextlib.contextmanager"
    ],
    "torch.onnx.symbolic_caffe2": [
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.symbolic_registry": [],
    "torch.onnx.symbolic_opset11._interpolate": [
        "torch.onnx.symbolic_helper._interpolate_helper"
    ],
    "torch.onnx.symbolic_helper._interpolate_helper": [
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.quantized_args.decorator"
    ],
    "torch.onnx.symbolic_opset11._avg_pool": [
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.quantized_args.decorator",
        "torch.onnx.symbolic_helper.parse_args"
    ],
    "torch.onnx.symbolic_opset11.Prim": [
        "<builtin>.staticmethod"
    ],
    "torch.onnx.register_custom_op_symbolic": [
        "torch.onnx.utils.register_custom_op_symbolic"
    ],
    "torch.onnx.utils.register_custom_op_symbolic": [
        "torch.onnx.utils.get_ns_op_name_from_custom_op",
        "torch.onnx.symbolic_registry.register_op"
    ],
    "torch.onnx.utils.get_ns_op_name_from_custom_op": [
        "<builtin>.ValueError",
        "re.match",
        "<builtin>.bool"
    ],
    "torch.onnx.symbolic_registry.register_op": [
        "torch.onnx.symbolic_registry.is_registered_version",
        "warnings.warn"
    ],
    "torch.onnx.symbolic_registry.is_registered_version": [],
    "torchvision.models.efficientnet._MBConvConfig": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.efficientnet.MBConvConfig": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.googlenet": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "collections.namedtuple",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.googlenet.GoogLeNet": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.inception": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "collections.namedtuple",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.inception.Inception3": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.mnasnet": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.mobilenet": [],
    "torchvision.models.mobilenetv2": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.mobilenetv3": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.mobilenetv3.InvertedResidualConfig": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.regnet": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.regnet.BlockParams": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torchvision.models.resnet": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.shufflenetv2": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.shufflenetv2.InvertedResidual": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.squeezenet": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.vgg": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.vgg.VGG16_Weights": [
        "<builtin>.float"
    ],
    "torchvision.models.vision_transformer": [
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._utils.handle_legacy_interface"
    ],
    "torchvision.models.swin_transformer": [
        "torch.fx._symbolic_trace.wrap"
    ],
    "torchvision.models.detection": [],
    "torchvision.models.detection.faster_rcnn": [],
    "torchvision.models.detection._utils": [
        "torch.jit._trace._script_if_tracing",
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.anchor_utils": [],
    "torchvision.models.detection.image_list": [],
    "torchvision.models.detection.backbone_utils": [],
    "torchvision.models.detection.generalized_rcnn": [],
    "torchvision.models.detection.generalized_rcnn.GeneralizedRCNN": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.roi_heads": [
        "torch.jit._trace._script_if_tracing",
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.rpn": [],
    "torchvision.models.detection.transform": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.transform.GeneralizedRCNNTransform": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.fcos": [],
    "torchvision.models.detection.fcos.FCOS": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.keypoint_rcnn": [],
    "torchvision.models.detection.mask_rcnn": [],
    "torchvision.models.detection.retinanet": [],
    "torchvision.models.detection.retinanet.RetinaNet": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.ssd": [],
    "torchvision.models.detection.ssd.SSD": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.ssdlite": [],
    "torchvision.models.optical_flow": [],
    "torchvision.models.optical_flow.raft": [],
    "torchvision.models.optical_flow._utils": [],
    "torchvision.models.quantization": [],
    "torchvision.models.quantization.googlenet": [],
    "torchvision.models.quantization.utils": [],
    "torchvision.models.quantization.inception": [],
    "torchvision.models.quantization.mobilenet": [],
    "torchvision.models.quantization.mobilenetv2": [],
    "torchvision.models.quantization.mobilenetv3": [],
    "torchvision.models.quantization.resnet": [],
    "torchvision.models.quantization.shufflenetv2": [],
    "torchvision.models.segmentation": [],
    "torchvision.models.segmentation.deeplabv3": [],
    "torchvision.models.segmentation._utils": [],
    "torchvision.models.segmentation.fcn": [],
    "torchvision.models.segmentation.lraspp": [],
    "torchvision.models.video": [],
    "torchvision.models.video.resnet": [],
    "torchvision.models.video.resnet.Conv3DSimple": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.video.resnet.Conv2Plus1D": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.video.resnet.Conv3DNoTemporal": [
        "<builtin>.staticmethod"
    ],
    "handler.initialize": [
        "<builtin>.len",
        "json.load",
        "torch.nn.modules.module.Module.load_state_dict",
        "<builtin>.range",
        "torch.nn.modules.module.Module.eval",
        "ntpath.join",
        "torch.serialization.load",
        "posixpath.join",
        "<builtin>.open",
        "torchvision.models.resnet.resnet50",
        "<builtin>.str"
    ],
    "json.load": [
        "json.loads"
    ],
    "json.loads": [
        "<builtin>.isinstance",
        "json.detect_encoding",
        "<builtin>.TypeError"
    ],
    "json.detect_encoding": [
        "<builtin>.len"
    ],
    "torchvision.models.resnet.resnet50": [
        "torchvision.models._api.WeightsEnum.verify",
        "torchvision.models.resnet._resnet"
    ],
    "torchvision.models._api.WeightsEnum.verify": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "torchvision.models.resnet._resnet": [
        "<builtin>.len",
        "torchvision.models._utils._ovewrite_named_param",
        "torch.nn.modules.module.Module.load_state_dict",
        "torchvision.models.resnet.ResNet.__init__"
    ],
    "torchvision.models._utils._ovewrite_named_param": [
        "<builtin>.ValueError"
    ],
    "torchvision.models.resnet.ResNet.__init__": [
        "torch.nn.modules.activation.ReLU.__init__",
        "<builtin>.ValueError",
        "<builtin>.len",
        "torchvision.models.resnet.ResNet._make_layer",
        "torch.nn.modules.conv.Conv2d.__init__",
        "torch.nn.modules.linear.Linear.__init__",
        "<builtin>.isinstance",
        "torch.nn.init.kaiming_normal_",
        "<builtin>.super",
        "torch.nn.modules.module.Module.modules",
        "torchvision.utils._log_api_usage_once",
        "torch.nn.init.constant_"
    ],
    "torchvision.utils._log_api_usage_once": [
        "<builtin>.isinstance"
    ],
    "torch.nn.modules.conv.Conv2d.__init__": [
        "<builtin>.isinstance",
        "<builtin>.super",
        "torch.nn.modules.utils._ntuple.parse"
    ],
    "torch.nn.modules.utils._ntuple.parse": [
        "<builtin>.tuple",
        "<builtin>.isinstance"
    ],
    "torch.nn.modules.activation.ReLU.__init__": [
        "<builtin>.super"
    ],
    "torchvision.models.resnet.ResNet._make_layer": [
        "torch.nn.modules.container.Sequential.__init__",
        "append",
        "torchvision.models.resnet.conv1x1",
        "<builtin>.range"
    ],
    "torchvision.models.resnet.conv1x1": [
        "torch.nn.modules.conv.Conv2d.__init__"
    ],
    "torch.nn.modules.container.Sequential.__init__": [],
    "torch.nn.modules.linear.Linear.__init__": [
        "torch.nn.modules.linear.Linear.reset_parameters",
        "<builtin>.super",
        "torch.nn.modules.module.Module.register_parameter"
    ],
    "torch.nn.modules.module.Module.register_parameter": [
        "<builtin>.ValueError",
        "<builtin>.hasattr",
        "<builtin>.KeyError",
        "<builtin>.AttributeError",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "torch.typename"
    ],
    "torch.typename": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "<builtin>.AttributeError": [],
    "torch.nn.modules.linear.Linear.reset_parameters": [],
    "torch.nn.modules.module.Module.modules": [
        "torch.nn.modules.module.Module.named_modules"
    ],
    "torch.nn.modules.module.Module.named_modules": [
        "<builtin>.set"
    ],
    "torch.nn.init.constant_": [
        "torch.overrides.handle_torch_function",
        "torch.nn.init._no_grad_fill_"
    ],
    "torch.overrides.handle_torch_function": [
        "<builtin>.hasattr",
        "<builtin>.type",
        "warnings.warn",
        "<builtin>.map",
        "<builtin>.tuple",
        "torch.overrides._no_torch_function_mode",
        "<builtin>.TypeError",
        "torch.overrides._get_overloaded_args"
    ],
    "torch.overrides._get_overloaded_args": [
        "<builtin>.len",
        "<builtin>.type",
        "<builtin>.enumerate",
        "<builtin>.hasattr",
        "<builtin>.set",
        "<builtin>.issubclass"
    ],
    "torch.overrides._no_torch_function_mode": [],
    "torch.nn.init._no_grad_fill_": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.nn.init.kaiming_normal_": [
        "torch.nn.init.calculate_gain",
        "torch.nn.init._calculate_correct_fan",
        "warnings.warn",
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.nn.init._calculate_correct_fan": [
        "torch.nn.init._calculate_fan_in_and_fan_out",
        "<builtin>.ValueError"
    ],
    "torch.nn.init._calculate_fan_in_and_fan_out": [
        "<builtin>.ValueError"
    ],
    "torch.nn.init.calculate_gain": [
        "<builtin>.isinstance",
        "<builtin>.ValueError"
    ],
    "torch.nn.modules.module.Module.load_state_dict": [
        "<builtin>.len",
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "<builtin>.getattr",
        "torch.nn.modules.module.Module.load_state_dict.load",
        "<builtin>.isinstance",
        "collections.OrderedDict.__init__",
        "<builtin>.TypeError"
    ],
    "torch.nn.modules.module.Module.load_state_dict.load": [
        "torch.nn.modules.module.Module.load_state_dict.load",
        "torch.nn.modules.module.Module._load_from_state_dict"
    ],
    "torch.nn.modules.module.Module._load_from_state_dict": [
        "torch.nn.parameter.is_lazy",
        "<builtin>.len",
        "collections.OrderedDict.keys",
        "torch.autograd.grad_mode.no_grad.__init__",
        "<builtin>.type",
        "<builtin>.getattr",
        "torch.overrides.is_tensor_like",
        "torch.nn.modules.module.Module.set_extra_state"
    ],
    "torch.overrides.is_tensor_like": [
        "<builtin>.type",
        "<builtin>.hasattr"
    ],
    "torch.nn.parameter.is_lazy": [
        "<builtin>.isinstance"
    ],
    "torch.nn.modules.module.Module.set_extra_state": [
        "<builtin>.RuntimeError"
    ],
    "collections.OrderedDict.keys": [],
    "torch.serialization.load": [
        "torch.serialization._is_torchscript_zip",
        "torch.serialization._is_zipfile",
        "torch.jit._serialization.load",
        "torch.serialization._load",
        "torch.serialization._legacy_load",
        "warnings.warn",
        "torch.serialization._opener.__enter__",
        "torch.serialization._open_zipfile_reader.__init__",
        "torch.serialization._open_file_like",
        "torch.serialization._check_dill_version",
        "torch.serialization._opener.__exit__"
    ],
    "torch.serialization._check_dill_version": [
        "<builtin>.ValueError",
        "torch.serialization.check_module_version_greater_or_equal",
        "<builtin>.str"
    ],
    "torch.serialization.check_module_version_greater_or_equal": [
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "<builtin>.enumerate",
        "warnings.warn",
        "<builtin>.tuple",
        "<builtin>.str"
    ],
    "torch.serialization._open_file_like": [
        "torch.serialization._open_buffer_reader.__init__",
        "torch.serialization._is_path",
        "<builtin>.RuntimeError",
        "torch.serialization._open_file.__init__"
    ],
    "torch.serialization._is_path": [
        "<builtin>.isinstance"
    ],
    "torch.serialization._open_buffer_reader.__init__": [
        "torch.serialization._check_seekable",
        "<builtin>.super"
    ],
    "torch.serialization._check_seekable": [
        "torch.serialization._check_seekable.raise_err_msg"
    ],
    "torch.serialization._check_seekable.raise_err_msg": [
        "<builtin>.type",
        "<builtin>.str"
    ],
    "torch.serialization._open_file.__init__": [
        "<builtin>.open",
        "<builtin>.super"
    ],
    "torch.serialization._is_zipfile": [
        "append",
        "<builtin>.len"
    ],
    "torch.serialization._open_zipfile_reader.__init__": [
        "<builtin>.super"
    ],
    "torch.serialization._opener.__enter__": [],
    "torch.serialization._opener.__exit__": [],
    "torch.serialization._is_torchscript_zip": [],
    "torch.jit._serialization.load": [
        "<builtin>.ValueError",
        "genericpath.exists",
        "torch.jit._serialization.validate_map_location",
        "torch.jit._recursive.wrap_cpp_module",
        "genericpath.isdir",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "torch.jit._serialization.validate_map_location": [
        "<builtin>.ValueError",
        "torch.serialization.validate_cuda_device",
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.str"
    ],
    "torch.serialization.validate_cuda_device": [
        "torch.cuda._utils._get_device_index",
        "torch.cuda.is_available",
        "<builtin>.RuntimeError",
        "torch.cuda.device_count"
    ],
    "torch.cuda._utils._get_device_index": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "torch._utils._get_device_index",
        "torch._jit_internal.is_scripting"
    ],
    "torch._utils._get_device_index": [
        "<builtin>.ValueError",
        "torch._utils.get_current_device_index",
        "<builtin>.isinstance",
        "torch._utils._get_current_device_index",
        "torch._jit_internal.is_scripting"
    ],
    "torch._utils._get_current_device_index": [
        "torch._utils._get_device_attr"
    ],
    "torch._utils._get_device_attr": [
        "torch._utils._get_current_device_index.<lambda1>",
        "torch._utils._get_available_device_type"
    ],
    "torch._utils._get_available_device_type": [
        "torch.cuda.is_available"
    ],
    "torch.cuda.is_available": [
        "<builtin>.hasattr"
    ],
    "torch._utils._get_current_device_index.<lambda1>": [
        "torch.cuda.current_device"
    ],
    "torch.cuda.current_device": [
        "torch.cuda._lazy_init"
    ],
    "torch.cuda._lazy_init": [
        "<builtin>.hasattr",
        "torch.cuda.is_initialized"
    ],
    "torch._utils.get_current_device_index": [
        "torch.cuda.current_device",
        "torch.cuda.device_count"
    ],
    "torch.cuda.device_count": [
        "torch.cuda.is_available"
    ],
    "torch.jit._recursive.wrap_cpp_module": [
        "torch.jit._script.RecursiveScriptModule._construct"
    ],
    "torch.jit._script.RecursiveScriptModule._construct": [],
    "torch.serialization._load": [
        "pickle._Unpickler.load",
        "torch.serialization._get_restore_location",
        "torch._utils._validate_loaded_sparse_tensors"
    ],
    "torch.serialization._get_restore_location": [
        "<builtin>.isinstance"
    ],
    "pickle._Unpickler.load": [
        "pickle._Unpickler.load_stop",
        "pickle._Unframer.__init__",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "pickle._Unframer.read"
    ],
    "pickle._Unframer.__init__": [],
    "pickle._Unframer.read": [
        "<builtin>.len"
    ],
    "pickle._Unpickler.load_stop": [
        "pickle._Stop.__init__"
    ],
    "pickle._Stop.__init__": [],
    "torch._utils._validate_loaded_sparse_tensors": [
        "<builtin>.NotImplementedError"
    ],
    "torch.serialization._legacy_load": [
        "torch._utils._element_size",
        "<builtin>.RuntimeError",
        "torch.serialization._is_zipfile",
        "torch.serialization._get_restore_location",
        "<builtin>.hasattr",
        "<builtin>.type",
        "pickle._Unpickler.load",
        "torch.serialization._should_read_directly",
        "pickle._load",
        "torch.serialization._check_seekable",
        "torch.serialization._legacy_load.legacy_load",
        "torch._utils._validate_loaded_sparse_tensors"
    ],
    "torch.serialization._should_read_directly": [
        "torch.serialization._is_compressed_file"
    ],
    "torch.serialization._is_compressed_file": [],
    "torch.serialization._legacy_load.legacy_load": [
        "torch._utils._element_size",
        "torch.serialization.mkdtemp",
        "<builtin>.range",
        "ntpath.join",
        "pickle._Unpickler.load",
        "pickle._load",
        "torch.serialization._get_restore_location.restore_location",
        "typing.cast",
        "contextlib.closing.__init__",
        "posixpath.join",
        "torch.storage._TypedStorage.__init__",
        "<builtin>.open",
        "tarfile.TarFile.open"
    ],
    "tarfile.TarFile.open": [
        "append",
        "<builtin>.ValueError",
        "tarfile.TarFile.taropen",
        "<builtin>.getattr",
        "<builtin>.sorted",
        "tarfile.TarFile.__init__",
        "tarfile._Stream.close",
        "tarfile._Stream.__init__"
    ],
    "tarfile.TarFile.taropen": [
        "<builtin>.ValueError",
        "tarfile.TarFile.__init__"
    ],
    "tarfile.TarFile.__init__": [
        "<builtin>.ValueError",
        "ntpath.abspath",
        "genericpath.exists",
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<map>.copy",
        "append",
        "posixpath.abspath",
        "tarfile.TarFile.next"
    ],
    "tarfile.TarFile.next": [
        "tarfile.TarFile._check",
        "<builtin>.isinstance",
        "tarfile.TarFile._dbg",
        "<builtin>.str"
    ],
    "tarfile.TarFile._check": [
        "<builtin>.OSError"
    ],
    "tarfile.TarFile._dbg": [
        "<builtin>.print"
    ],
    "tarfile._Stream.__init__": [
        "tarfile._StreamProxy.__init__",
        "tarfile._StreamProxy.getcomptype",
        "tarfile._LowLevelFile.__init__",
        "tarfile._Stream._init_read_gz",
        "tarfile._Stream._init_write_gz"
    ],
    "tarfile._LowLevelFile.__init__": [
        "<builtin>.hasattr"
    ],
    "tarfile._StreamProxy.__init__": [
        "tarfile._LowLevelFile.read"
    ],
    "tarfile._LowLevelFile.read": [],
    "tarfile._StreamProxy.getcomptype": [],
    "tarfile._Stream._init_write_gz": [
        "<builtin>.int",
        "ntpath.basename",
        "posixpath.basename",
        "tarfile._Stream.__write"
    ],
    "tarfile._Stream.__write": [
        "<builtin>.len"
    ],
    "tarfile._Stream._init_read_gz": [
        "<builtin>.ord",
        "tarfile._Stream.__read",
        "tarfile._Stream.read"
    ],
    "tarfile._Stream.__read": [
        "append",
        "<builtin>.len"
    ],
    "tarfile._Stream.read": [
        "<builtin>.len",
        "tarfile._Stream._read"
    ],
    "tarfile._Stream._read": [
        "append",
        "<builtin>.len",
        "tarfile._Stream.__read"
    ],
    "tarfile._Stream.close": [],
    "torch.serialization.mkdtemp": [
        "shutil.rmtree",
        "tempfile.mkdtemp"
    ],
    "tempfile.mkdtemp": [
        "<builtin>.FileExistsError",
        "<builtin>.range",
        "ntpath.join",
        "genericpath.isdir",
        "tempfile._get_candidate_names",
        "tempfile._sanitize_params",
        "<builtin>.map",
        "posixpath.join",
        "<builtin>.next"
    ],
    "shutil.rmtree": [
        "<builtin>.isinstance",
        "genericpath.samestat",
        "<builtin>.OSError",
        "shutil._rmtree_unsafe",
        "shutil._rmtree_islink",
        "shutil._rmtree_safe_fd",
        "shutil.rmtree.onerror"
    ],
    "shutil._rmtree_islink": [
        "posixpath.islink",
        "ntpath.islink"
    ],
    "posixpath.islink": [
        "stat.S_ISLNK"
    ],
    "stat.S_ISLNK": [
        "stat.S_IFMT"
    ],
    "ntpath.islink": [
        "stat.S_ISLNK"
    ],
    "shutil.rmtree.onerror": [],
    "shutil._rmtree_unsafe": [
        "shutil._rmtree_isdir",
        "<builtin>.list",
        "<builtin>.OSError",
        "shutil._rmtree_unsafe",
        "shutil.rmtree.onerror"
    ],
    "shutil._rmtree_isdir": [],
    "genericpath.samestat": [],
    "shutil._rmtree_safe_fd": [
        "ntpath.join",
        "<builtin>.list",
        "posixpath.join",
        "shutil.rmtree.onerror"
    ],
    "pickle._load": [
        "pickle._Unpickler.__init__",
        "pickle._Unpickler.load"
    ],
    "pickle._Unpickler.__init__": [
        "<builtin>.iter"
    ],
    "typing.cast": [],
    "torch._utils._element_size": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.RuntimeError"
    ],
    "torch.serialization._get_restore_location.restore_location": [
        "torch.serialization.default_restore_location"
    ],
    "torch.serialization.default_restore_location": [
        "torch.typename",
        "<builtin>.RuntimeError"
    ],
    "torch.storage._TypedStorage.__init__": [
        "<builtin>.len",
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "torch.storage._get_storage_from_sequence",
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "torch.storage._isint",
        "torch.storage._TypedStorage.element_size",
        "<builtin>.int"
    ],
    "torch.storage._isint": [
        "<builtin>.isinstance"
    ],
    "torch.storage._get_storage_from_sequence": [],
    "torch.storage._TypedStorage.element_size": [
        "torch._utils._element_size"
    ],
    "torch.nn.modules.module.Module.eval": [
        "torch.nn.modules.module.Module.train"
    ],
    "torch.nn.modules.module.Module.train": [
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "torch.nn.modules.module.Module.children"
    ],
    "torch.nn.modules.module.Module.children": [
        "torch.nn.modules.module.Module.named_children"
    ],
    "torch.nn.modules.module.Module.named_children": [
        "<builtin>.set"
    ],
    "handler.handle": [
        "torch.autograd.grad_mode.no_grad.__init__",
        "torchvision.transforms.transforms.ToTensor.__init__",
        "ntpath.join",
        "torchvision.transforms.transforms.Normalize.__init__",
        "torchvision.transforms.transforms.CenterCrop.__init__",
        "torchvision.transforms.transforms.Compose.__init__",
        "torchvision.transforms.transforms.Resize.__init__",
        "posixpath.join",
        "handler.initialize"
    ],
    "torchvision.transforms.transforms.Resize.__init__": [
        "<builtin>.len",
        "<builtin>.ValueError",
        "torchvision.transforms.functional._interpolation_modes_from_int",
        "<builtin>.type",
        "warnings.warn",
        "<builtin>.isinstance",
        "<builtin>.super",
        "<builtin>.TypeError",
        "torchvision.utils._log_api_usage_once"
    ],
    "torchvision.transforms.functional._interpolation_modes_from_int": [],
    "torchvision.transforms.transforms.CenterCrop.__init__": [
        "torchvision.transforms.transforms._setup_size",
        "torchvision.utils._log_api_usage_once",
        "<builtin>.super"
    ],
    "torchvision.transforms.transforms._setup_size": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.len",
        "<builtin>.int"
    ],
    "torchvision.transforms.transforms.ToTensor.__init__": [
        "torchvision.utils._log_api_usage_once"
    ],
    "torchvision.transforms.transforms.Normalize.__init__": [
        "torchvision.utils._log_api_usage_once",
        "<builtin>.super"
    ],
    "torchvision.transforms.transforms.Compose.__init__": [
        "torch.jit._trace.is_tracing",
        "torchvision.utils._log_api_usage_once",
        "torch._jit_internal.is_scripting"
    ],
    "torch.jit._trace.is_tracing": [
        "torch._jit_internal.is_scripting"
    ]
}