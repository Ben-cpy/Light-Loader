{"handler": ["<builtin>.print"], "bidict": ["<builtin>.tuple", "contextlib.suppress.__init__", "<builtin>.getattr", "<builtin>.locals"], "__future__": ["__future__._Feature.__init__"], "__future__._Feature.__init__": [], "contextlib": [], "abc": [], "_py_abc": [], "_weakrefset": [], "types": ["types._c", "<builtin>.globals", "types._g", "types._cell_factory", "<builtin>.type", "<builtin>.object", "types._ag"], "<builtin>.type": [], "types._cell_factory": [], "types._g": [], "types._c": [], "types._ag": [], "<builtin>.object": [], "types._GeneratorWrapper": ["<builtin>.property"], "<builtin>.property": [], "<builtin>.globals": [], "_weakrefset.WeakSet": ["<builtin>.classmethod"], "<builtin>.classmethod": [], "collections": [], "keyword": ["<builtin>.frozenset"], "<builtin>.frozenset": [], "operator": [], "reprlib": ["reprlib.Repr.__init__"], "reprlib.Repr.__init__": [], "collections.OrderedDict": ["<builtin>.object", "reprlib.recursive_repr", "reprlib.recursive_repr.decorating_function", "<builtin>.classmethod"], "reprlib.recursive_repr": [], "reprlib.recursive_repr.decorating_function": ["<builtin>.set", "<builtin>.getattr"], "<builtin>.set": [], "<builtin>.getattr": [], "collections.Counter": ["<builtin>.classmethod"], "collections.ChainMap": ["<builtin>.property", "reprlib.recursive_repr", "reprlib.recursive_repr.decorating_function", "<builtin>.classmethod"], "collections.UserDict": ["<builtin>.classmethod"], "functools": ["<builtin>.object", "collections.namedtuple"], "functools.partial": ["reprlib.recursive_repr", "reprlib.recursive_repr.decorating_function"], "functools.partialmethod": ["<builtin>.property", "<builtin>.classmethod"], "collections.namedtuple": ["<builtin>.len", "<builtin>.list", "<builtin>.TypeError", "<builtin>.tuple", "<builtin>.reversed", "<builtin>.dict", "<builtin>.str", "<builtin>.zip", "<builtin>.map", "<builtin>.set", "<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.type", "<str>.join", "<builtin>.ValueError", "<builtin>.eval", "collections.<lambda1>", "<builtin>.classmethod"], "<builtin>.isinstance": [], "<builtin>.map": [], "<builtin>.list": [], "<builtin>.str": [], "<builtin>.enumerate": [], "<builtin>.TypeError": [], "<builtin>.ValueError": [], "<builtin>.tuple": [], "<builtin>.len": [], "<builtin>.reversed": [], "<builtin>.zip": [], "<builtin>.dict": [], "<str>.join": [], "<builtin>.eval": [], "collections.<lambda1>": ["operator.itemgetter.__init__", "<builtin>.property"], "operator.itemgetter.__init__": [], "functools.singledispatchmethod": ["<builtin>.property"], "functools.cached_property": ["<builtin>.classmethod"], "contextlib.AbstractContextManager": ["abc.abstractmethod", "<builtin>.classmethod"], "abc.abstractmethod": [], "contextlib.AbstractAsyncContextManager": ["abc.abstractmethod", "<builtin>.classmethod"], "contextlib._BaseExitStack": ["<builtin>.staticmethod"], "<builtin>.staticmethod": [], "contextlib.AsyncExitStack": ["<builtin>.staticmethod"], "bidict._base": ["bidict._base.BidictBase._init_class", "typing.TypeVar.__init__"], "typing": ["typing._tp_cache", "typing._tp_cache.decorator", "<builtin>.frozenset", "typing._SpecialForm.__init__", "typing._SpecialGenericAlias.__init__", "typing.TypeVar.__init__"], "collections.abc": [], "re": ["<builtin>.chr", "<builtin>.globals", "sre_compile.compile", "copyreg.pickle", "<builtin>.type", "functools.lru_cache.decorating_function", "functools.lru_cache"], "enum": ["<builtin>.object"], "enum.EnumMeta": ["<builtin>.property", "<builtin>.staticmethod", "<builtin>.classmethod"], "enum.Enum": ["<builtin>.classmethod", "types.DynamicClassAttribute.__init__"], "types.DynamicClassAttribute.__init__": ["<builtin>.bool", "<builtin>.getattr"], "<builtin>.bool": [], "enum.Flag": ["<builtin>.classmethod"], "enum.IntFlag": ["<builtin>.classmethod"], "sre_compile": ["<builtin>.tuple"], "sre_parse": ["<builtin>.frozenset"], "sre_constants": ["sre_constants._makecodes"], "sre_constants._makecodes": ["<builtin>.globals", "<str>.strip", "<builtin>.enumerate", "<str>.split"], "<str>.strip": [], "<str>.split": [], "sre_parse.State": ["<builtin>.property"], "sre_parse.Tokenizer": ["<builtin>.property"], "<builtin>.chr": [], "sre_compile.compile": ["<builtin>.print", "<builtin>.tuple", "sre_compile.dis", "sre_compile.isstring", "<map>.items", "sre_compile._code", "sre_parse.parse"], "sre_compile.isstring": ["<builtin>.isinstance"], "sre_parse.parse": ["sre_parse.fix_flags", "sre_parse._parse_sub", "sre_parse.State.__init__", "sre_constants.error.__init__", "sre_parse.SubPattern.dump", "sre_parse.Tokenizer.seek", "sre_parse.Tokenizer.__init__", "sre_parse.Tokenizer.error"], "sre_parse.Tokenizer.__init__": ["<builtin>.str", "<builtin>.isinstance", "sre_parse.Tokenizer.__next"], "sre_parse.Tokenizer.__next": ["sre_parse.Tokenizer.error", "<builtin>.len"], "sre_parse.Tokenizer.error": ["sre_parse.Tokenizer.error", "sre_parse.Tokenizer.tell"], "sre_parse.Tokenizer.tell": ["<builtin>.len"], "sre_parse.State.__init__": [], "sre_parse._parse_sub": ["", "sre_parse.Tokenizer.tell", "<builtin>.len", "sre_parse.SubPattern.append", "sre_parse.Tokenizer.match", "append", "extend", "sre_parse.SubPattern.__init__"], "sre_parse.Tokenizer.match": ["sre_parse.Tokenizer.__next"], "sre_parse.SubPattern.__init__": [], "extend": [], "append": [], "sre_parse.SubPattern.append": ["append"], "sre_parse.Tokenizer.seek": ["sre_parse.Tokenizer.__next"], "sre_parse.fix_flags": ["<builtin>.ValueError", "<builtin>.isinstance"], "sre_constants.error.__init__": ["<str>.rfind", "<str>.count", "<builtin>.isinstance", "<builtin>.super"], "<str>.count": [], "<str>.rfind": [], "<builtin>.super": [], "sre_parse.SubPattern.dump": ["<builtin>.str", "<builtin>.print", "<builtin>.isinstance", "<builtin>.enumerate"], "<builtin>.print": [], "sre_compile._code": ["append", "sre_compile._compile", "sre_compile._compile_info"], "sre_compile._compile_info": ["", "sre_compile._get_charset_prefix", "sre_compile._get_literal_prefix", "sre_parse.SubPattern.getwidth", "<builtin>.len", "sre_compile._optimize_charset", "extend", "sre_compile._compile_charset"], "sre_parse.SubPattern.getwidth": ["<builtin>.max", "<builtin>.min"], "<builtin>.min": [], "<builtin>.max": [], "sre_compile._get_literal_prefix": ["", "sre_compile._get_literal_prefix", "<builtin>.len", "sre_compile._combine_flags", "extend", "sre_compile._get_iscased"], "sre_compile._get_iscased": [], "sre_compile._combine_flags": [], "sre_compile._get_charset_prefix": ["", "sre_compile._combine_flags", "<builtin>.map", "sre_compile._get_iscased", "<builtin>.any", "<builtin>.range"], "<builtin>.range": [], "<builtin>.any": [], "sre_compile._optimize_charset": ["<builtin>.bytes", "<builtin>.len", "sre_compile._mk_bitmap", "append", "<builtin>.map", "<builtin>.bytearray", "<builtin>.any", "<builtin>.range", "sre_compile._bytes_to_codes"], "<builtin>.bytearray": [], "sre_compile._mk_bitmap": ["<builtin>.range", "<builtin>.len"], "<builtin>.bytes": [], "sre_compile._bytes_to_codes": ["<builtin>.memoryview", "<builtin>.len"], "<builtin>.memoryview": [], "sre_compile._compile_charset": ["", "sre_constants.error.__init__", "extend"], "sre_compile._compile": ["", "sre_constants.error.__init__", "sre_compile._compile", "sre_compile._optimize_charset", "sre_compile._combine_flags", "sre_compile._simple", "sre_compile._compile_charset"], "sre_compile._simple": ["sre_compile._simple", "<builtin>.len"], "sre_compile.dis": ["<builtin>.str", "sre_compile.dis.dis_", "<builtin>.set", "<builtin>.len"], "sre_compile.dis.dis_": ["<builtin>.chr", "<builtin>.list", "<builtin>.str", "<builtin>.map", "sre_compile.dis.dis_", "sre_compile._hex_code", "sre_compile.dis.dis_.print_2", "<builtin>.ValueError", "sre_compile.dis.dis_.print_", "<builtin>.range", "<builtin>.bin"], "<builtin>.bin": [], "sre_compile.dis.dis_.print_": ["<builtin>.print"], "sre_compile.dis.dis_.print_2": ["<builtin>.print"], "sre_compile._hex_code": [], "<map>.items": [], "functools.lru_cache": ["<builtin>.callable", "<builtin>.TypeError", "functools._lru_cache_wrapper", "functools.update_wrapper", "<builtin>.isinstance"], "<builtin>.callable": [], "functools._lru_cache_wrapper": ["<builtin>.object"], "functools.update_wrapper": ["<builtin>.getattr"], "functools.lru_cache.decorating_function": ["functools.update_wrapper", "functools._lru_cache_wrapper"], "copyreg": ["<builtin>.type", "copyreg.pickle"], "copyreg.pickle": ["<builtin>.callable", "<builtin>.TypeError", "copyreg.constructor"], "copyreg.constructor": ["<builtin>.callable", "<builtin>.TypeError"], "typing._SpecialForm": ["typing._tp_cache"], "typing._tp_cache": ["typing._tp_cache.decorator"], "typing._tp_cache.decorator": ["functools.lru_cache.decorating_function", "functools.lru_cache", "append", "functools.wraps"], "functools.wraps": [], "typing._SpecialForm.__init__": [], "typing.ParamSpec": ["<builtin>.property"], "typing._GenericAlias": ["typing._tp_cache"], "typing._SpecialGenericAlias": ["typing._tp_cache"], "typing._CallableType": ["typing._tp_cache"], "typing._TupleType": ["typing._tp_cache"], "typing.Generic": ["typing._tp_cache"], "typing.Annotated": ["typing._tp_cache"], "typing.TypeVar.__init__": ["<builtin>.len", "<builtin>.TypeError", "<builtin>.tuple", "typing._type_check", "<builtin>.super"], "typing._type_check": ["typing._type_convert", "<builtin>.TypeError", "<builtin>.callable", "<builtin>.isinstance"], "typing._type_convert": ["<builtin>.type", "<builtin>.isinstance", "typing.ForwardRef.__init__"], "typing.ForwardRef.__init__": ["<builtin>.TypeError", "<builtin>.SyntaxError", "<builtin>.isinstance", "<builtin>.compile"], "<builtin>.compile": [], "<builtin>.SyntaxError": [], "typing._SpecialGenericAlias.__init__": ["<builtin>.super"], "typing.SupportsInt": ["abc.abstractmethod"], "typing.SupportsFloat": ["abc.abstractmethod"], "typing.SupportsComplex": ["abc.abstractmethod"], "typing.SupportsBytes": ["abc.abstractmethod"], "typing.SupportsIndex": ["abc.abstractmethod"], "typing.SupportsAbs": ["abc.abstractmethod"], "typing.SupportsRound": ["abc.abstractmethod"], "typing.IO": ["abc.abstractmethod", "<builtin>.property"], "typing.BinaryIO": ["abc.abstractmethod"], "typing.TextIO": ["abc.abstractmethod", "<builtin>.property"], "weakref": [], "weakref.finalize": ["<builtin>.property", "<builtin>.classmethod"], "bidict._dup": [], "bidict._exc": [], "bidict._iter": ["operator.itemgetter.__init__"], "bidict._typing": ["typing.TypeVar.__init__"], "bidict._base.BidictBase": ["<builtin>.property", "<builtin>.staticmethod", "<builtin>.classmethod"], "bidict._base.BidictBase._init_class": ["bidict._base.BidictBase._set_reversed", "bidict._base.BidictBase._ensure_inv_cls"], "bidict._base.BidictBase._ensure_inv_cls": ["<builtin>.getattr", "bidict._base.BidictBase._make_inv_cls"], "bidict._base.BidictBase._make_inv_cls": ["<builtin>.all", "typing.cast", "bidict._base.BidictBase._inv_cls_dict_diff", "<builtin>.type", "<map>.items", "<builtin>.getattr"], "bidict._base.BidictBase._inv_cls_dict_diff": [], "<builtin>.all": [], "typing.cast": [], "bidict._base.BidictBase._set_reversed": ["<builtin>.all", "<builtin>.issubclass"], "<builtin>.issubclass": [], "bidict._bidict": [], "bidict._bidict.MutableBidict": ["typing.overload", "<builtin>.property"], "typing.overload": [], "bidict._bidict.bidict": ["<builtin>.property"], "bidict._frozen": [], "bidict._frozen.frozenbidict": ["<builtin>.property"], "bidict._orderedbase": ["typing.TypeVar.__init__"], "bidict._orderedbase.Node": ["bidict._orderedbase.WeakAttr.__init__"], "bidict._orderedbase.WeakAttr.__init__": [], "bidict._orderedbase.SentinelNode": ["bidict._orderedbase.WeakAttr.__init__"], "bidict._orderedbase.OrderedBidictBase": ["<builtin>.property"], "bidict._orderedbidict": ["<str>.split", "bidict._orderedbidict._override_set_methods_to_use_backing_dict"], "bidict._orderedbidict.OrderedBidict": ["<builtin>.property"], "bidict._orderedbidict._override_set_methods_to_use_backing_dict": ["<builtin>.setattr", "bidict._orderedbidict._override_set_methods_to_use_backing_dict.make_proxy_method"], "bidict._orderedbidict._override_set_methods_to_use_backing_dict.make_proxy_method": [], "<builtin>.setattr": [], "bidict.metadata": [], "<builtin>.locals": [], "contextlib.suppress.__init__": [], "handler.handle": ["bidict", "<builtin>.print", "<builtin>.len"]}