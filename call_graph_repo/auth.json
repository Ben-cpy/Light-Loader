{
    "handler": [
        "flask.sansio.scaffold.Scaffold.route",
        "authlib.integrations.flask_client.OAuth.__init__",
        "flask.app.Flask.__init__",
        "flask.sansio.scaffold.Scaffold.route.decorator",
        "authlib.integrations.flask_client.OAuth.register"
    ],
    "flask": [],
    "__future__": [
        "__future__._Feature.__init__"
    ],
    "__future__._Feature.__init__": [],
    "typing": [
        "typing._SpecialForm.__init__",
        "<builtin>.frozenset",
        "typing._SpecialGenericAlias.__init__",
        "typing._tp_cache",
        "typing._tp_cache.decorator",
        "typing.TypeVar.__init__"
    ],
    "abc": [],
    "_py_abc": [],
    "_weakrefset": [],
    "types": [
        "<builtin>.object",
        "<builtin>.type",
        "types._c",
        "<builtin>.globals",
        "types._ag",
        "types._cell_factory",
        "types._g"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "<builtin>.object": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.property": [],
    "<builtin>.globals": [],
    "_weakrefset.WeakSet": [
        "<builtin>.classmethod"
    ],
    "<builtin>.classmethod": [],
    "collections": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "<builtin>.frozenset": [],
    "operator": [],
    "reprlib": [
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr.__init__": [],
    "collections.OrderedDict": [
        "<builtin>.object",
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr"
    ],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "<builtin>.set": [],
    "<builtin>.getattr": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "<builtin>.property",
        "reprlib.recursive_repr",
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function"
    ],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "collections.abc": [],
    "contextlib": [],
    "functools": [
        "<builtin>.object",
        "collections.namedtuple"
    ],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "collections.namedtuple": [
        "<builtin>.classmethod",
        "<builtin>.reversed",
        "<builtin>.tuple",
        "<builtin>.dict",
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.eval",
        "<str>.replace",
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.map",
        "<str>.split",
        "<builtin>.TypeError",
        "<builtin>.enumerate",
        "<builtin>.set",
        "<builtin>.str",
        "<str>.join",
        "<builtin>.zip",
        "collections.<lambda1>"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.enumerate": [],
    "<builtin>.TypeError": [],
    "<builtin>.ValueError": [],
    "<builtin>.tuple": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<str>.join": [],
    "<builtin>.eval": [],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "operator.itemgetter.__init__": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [
        "<builtin>.classmethod"
    ],
    "contextlib.AbstractContextManager": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "abc.abstractmethod": [],
    "contextlib.AbstractAsyncContextManager": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "re": [
        "<builtin>.chr",
        "<builtin>.type",
        "functools.lru_cache.decorating_function",
        "<builtin>.globals",
        "functools.lru_cache",
        "copyreg.pickle",
        "sre_compile.compile"
    ],
    "enum": [
        "<builtin>.object"
    ],
    "enum.EnumMeta": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "enum.Enum": [
        "types.DynamicClassAttribute.__init__",
        "<builtin>.classmethod"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "<builtin>.bool": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "<builtin>.tuple"
    ],
    "sre_parse": [
        "<builtin>.frozenset"
    ],
    "sre_constants": [
        "sre_constants._makecodes"
    ],
    "sre_constants._makecodes": [
        "<builtin>.enumerate",
        "<str>.strip",
        "<builtin>.globals",
        "<str>.split"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_parse.parse",
        "sre_compile.isstring",
        "sre_compile._code",
        "<builtin>.tuple",
        "sre_compile.dis",
        "<builtin>.print",
        "<map>.items"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.Tokenizer.seek",
        "sre_constants.error.__init__",
        "sre_parse.State.__init__",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.SubPattern.dump",
        "sre_parse._parse_sub",
        "sre_parse.Tokenizer.error",
        "sre_parse.fix_flags"
    ],
    "sre_parse.Tokenizer.__init__": [
        "sre_parse.Tokenizer.__next",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.error",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "",
        "extend",
        "sre_parse.Tokenizer.tell",
        "append",
        "sre_parse.SubPattern.__init__",
        "sre_parse.SubPattern.append",
        "<builtin>.len",
        "sre_parse.Tokenizer.match"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "extend": [],
    "append": [],
    "sre_parse.SubPattern.append": [
        "append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "sre_constants.error.__init__": [
        "<str>.rfind",
        "<builtin>.super",
        "<str>.count",
        "<builtin>.isinstance"
    ],
    "<str>.count": [],
    "<str>.rfind": [],
    "<builtin>.super": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.enumerate",
        "<builtin>.str",
        "<builtin>.print",
        "<builtin>.isinstance"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "sre_compile._compile",
        "sre_compile._compile_info",
        "append"
    ],
    "sre_compile._compile_info": [
        "",
        "extend",
        "sre_compile._get_literal_prefix",
        "sre_compile._compile_charset",
        "<builtin>.len",
        "sre_compile._optimize_charset",
        "sre_compile._get_charset_prefix",
        "sre_parse.SubPattern.getwidth"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.min",
        "<builtin>.max"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "",
        "extend",
        "sre_compile._get_literal_prefix",
        "sre_compile._combine_flags",
        "<builtin>.len",
        "sre_compile._get_iscased"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "",
        "<builtin>.map",
        "<builtin>.range",
        "<builtin>.any",
        "sre_compile._combine_flags",
        "sre_compile._get_iscased"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "<builtin>.bytearray",
        "sre_compile._bytes_to_codes",
        "<builtin>.map",
        "<builtin>.range",
        "append",
        "<builtin>.any",
        "<builtin>.bytes",
        "<builtin>.len",
        "sre_compile._mk_bitmap"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.len",
        "<builtin>.memoryview"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "",
        "sre_constants.error.__init__",
        "extend"
    ],
    "sre_compile._compile": [
        "",
        "sre_constants.error.__init__",
        "sre_compile._simple",
        "sre_compile._compile_charset",
        "sre_compile._compile",
        "sre_compile._combine_flags",
        "sre_compile._optimize_charset"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "<builtin>.set",
        "<builtin>.str",
        "sre_compile.dis.dis_",
        "<builtin>.len"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.ValueError",
        "<builtin>.bin",
        "<builtin>.chr",
        "<builtin>.map",
        "<builtin>.list",
        "<builtin>.range",
        "sre_compile._hex_code",
        "<builtin>.str",
        "sre_compile.dis.dis_.print_",
        "sre_compile.dis.dis_",
        "sre_compile.dis.dis_.print_2"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.callable",
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object"
    ],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "copyreg": [
        "<builtin>.type",
        "copyreg.pickle"
    ],
    "copyreg.pickle": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "copyreg.constructor"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "typing._tp_cache.decorator"
    ],
    "typing._tp_cache.decorator": [
        "functools.lru_cache.decorating_function",
        "functools.wraps",
        "append",
        "functools.lru_cache"
    ],
    "functools.wraps": [],
    "typing._SpecialForm.__init__": [],
    "typing.ParamSpec": [
        "<builtin>.property"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing._CallableType": [
        "typing._tp_cache"
    ],
    "typing._TupleType": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.Annotated": [
        "typing._tp_cache"
    ],
    "typing.TypeVar.__init__": [
        "<builtin>.tuple",
        "<builtin>.TypeError",
        "<builtin>.len",
        "typing._type_check",
        "<builtin>.super"
    ],
    "typing._type_check": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "typing._type_convert"
    ],
    "typing._type_convert": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "typing.ForwardRef.__init__"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.compile",
        "<builtin>.SyntaxError",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "<builtin>.compile": [],
    "<builtin>.SyntaxError": [],
    "typing._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.IO": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "flask.json": [],
    "json": [],
    "codecs": [
        "<builtin>.SystemError"
    ],
    "<builtin>.SystemError": [],
    "encodings": [],
    "flask.globals": [
        "werkzeug.local.LocalProxy.__init__"
    ],
    "contextvars": [],
    "werkzeug.local": [
        "typing.TypeVar.__init__"
    ],
    "copy": [
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "weakref": [],
    "weakref.finalize": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "werkzeug.wsgi": [],
    "io": [],
    "werkzeug.exceptions": [
        "werkzeug.exceptions._find_exceptions",
        "werkzeug.exceptions.Aborter.__init__"
    ],
    "datetime": [
        "append",
        "datetime._days_before_year",
        "datetime.timezone._create"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.IsoCalendarDate": [
        "<builtin>.property"
    ],
    "datetime.time": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.datetime": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.timezone": [
        "<builtin>.object",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "datetime.timezone._create": [],
    "markupsafe": [],
    "string": [
        "string.Template.__init_subclass__"
    ],
    "string.Template.__init_subclass__": [
        "re.compile",
        "<builtin>.super",
        "re.escape"
    ],
    "re.escape": [
        "<str>.translate",
        "<builtin>.str",
        "<builtin>.isinstance",
        "<str>.encode"
    ],
    "<str>.translate": [],
    "<str>.encode": [],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.iter",
        "<builtin>.isinstance",
        "sre_compile.isstring",
        "<builtin>.TypeError",
        "<builtin>.next",
        "<builtin>.len",
        "sre_compile.compile"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "markupsafe._native": [],
    "typing_extensions": [
        "typing_extensions._UnpackSpecialForm.__init__",
        "<builtin>.type",
        "<builtin>.classmethod",
        "typing_extensions._ensure_subclassable",
        "<builtin>.frozenset",
        "typing._tp_cache",
        "append",
        "typing.TypeVar.__init__",
        "typing_extensions._ensure_subclassable.inner",
        "<builtin>.getattr",
        "inspect.signature",
        "typing_extensions._SpecialForm.__init__",
        "<builtin>.hasattr",
        "typing_extensions._SpecialGenericAlias.__init__",
        "typing_extensions._LiteralForm.__init__"
    ],
    "inspect": [
        "<builtin>.object",
        "<builtin>.type",
        "collections.namedtuple",
        "<builtin>.globals",
        "<builtin>.hasattr",
        "<map>.items"
    ],
    "ast": [
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.property",
        "<builtin>.repr"
    ],
    "<builtin>.hasattr": [],
    "<builtin>.repr": [],
    "ast._Unparser": [
        "contextlib.contextmanager",
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "dis": [
        "collections.namedtuple"
    ],
    "opcode": [
        "opcode.def_op",
        "<builtin>.range",
        "append",
        "opcode.name_op",
        "opcode.jrel_op",
        "opcode.jabs_op"
    ],
    "opcode.def_op": [],
    "opcode.name_op": [
        "append",
        "opcode.def_op"
    ],
    "opcode.jrel_op": [
        "append",
        "opcode.def_op"
    ],
    "opcode.jabs_op": [
        "append",
        "opcode.def_op"
    ],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "linecache": [],
    "os": [
        "<builtin>.ImportError",
        "extend",
        "<builtin>.type",
        "os._fscodec",
        "<builtin>.set",
        "append",
        "<builtin>.globals",
        "os._Environ.__init__",
        "os._add",
        "os._exists",
        "os._createenviron"
    ],
    "stat": [],
    "<builtin>.ImportError": [],
    "ntpath": [
        "<builtin>.hasattr"
    ],
    "genericpath": [],
    "posixpath": [],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._add": [],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.encodekey"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os.PathLike": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "tokenize": [
        "tokenize.group",
        "<builtin>.map",
        "<builtin>.set",
        "collections.namedtuple",
        "<builtin>.any",
        "re.compile",
        "functools.lru_cache",
        "<builtin>.sorted",
        "tokenize._all_string_prefixes",
        "tokenize.maybe"
    ],
    "token": [
        "extend",
        "<builtin>.globals",
        "<builtin>.isinstance"
    ],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "warnings": [
        "<builtin>.hasattr",
        "warnings.simplefilter",
        "warnings._processoptions",
        "warnings.filterwarnings"
    ],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "<builtin>.int",
        "warnings.filterwarnings",
        "warnings._getcategory",
        "warnings._getaction",
        "<builtin>.len",
        "re.escape"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.getattr",
        "<builtin>.issubclass",
        "<builtin>.__import__"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "<builtin>.issubclass",
        "warnings._add_filter",
        "<builtin>.isinstance",
        "re.compile"
    ],
    "warnings._add_filter": [
        "remove",
        "insert",
        "append",
        "warnings._filters_mutated"
    ],
    "remove": [],
    "insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "<str>.replace": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "typing_extensions._LiteralForm.__init__": [],
    "typing_extensions._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing_extensions.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing_extensions.SupportsRound": [
        "abc.abstractmethod"
    ],
    "inspect.signature": [
        "inspect.Signature.from_callable"
    ],
    "inspect.Signature.from_callable": [
        "inspect._signature_from_callable"
    ],
    "inspect._signature_from_callable": [
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.isinstance",
        "inspect._signature_bound_method",
        "inspect._signature_get_partial",
        "inspect.unwrap",
        "inspect._signature_get_user_defined_method",
        "inspect.Signature.from_callable",
        "inspect._signature_from_builtin",
        "inspect._signature_from_function",
        "inspect._signature_is_builtin",
        "<builtin>.TypeError",
        "inspect.isfunction",
        "<builtin>.callable",
        "inspect._signature_is_functionlike",
        "<str>.format"
    ],
    "<str>.format": [],
    "inspect._signature_bound_method": [
        "<builtin>.ValueError",
        "<builtin>.tuple"
    ],
    "inspect.unwrap": [
        "<builtin>.ValueError",
        "inspect.unwrap._is_wrapper",
        "<builtin>.len",
        "<builtin>.id"
    ],
    "<builtin>.id": [],
    "inspect.unwrap._is_wrapper": [
        "<builtin>.hasattr",
        "inspect._signature_from_callable.<lambda1>"
    ],
    "inspect._signature_from_callable.<lambda1>": [],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_is_functionlike": [
        "<builtin>.getattr",
        "<builtin>.callable",
        "<builtin>.isinstance",
        "inspect.isclass"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_from_function": [
        "<builtin>.enumerate",
        "append",
        "inspect.Signature.__init__",
        "inspect._signature_fromstr",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<builtin>.getattr",
        "inspect.isfunction",
        "inspect.get_annotations",
        "inspect._signature_is_functionlike"
    ],
    "inspect._signature_fromstr": [
        "<builtin>.object",
        "<builtin>.ValueError",
        "<builtin>.enumerate",
        "<builtin>.reversed",
        "<builtin>.isinstance",
        "<builtin>.list",
        "ast.parse",
        "inspect.ismodule",
        "inspect._signature_strip_non_python_syntax",
        "inspect._signature_fromstr.p",
        "<builtin>.zip",
        "<builtin>.getattr",
        "pop",
        "inspect.Signature.__init__"
    ],
    "inspect._signature_strip_non_python_syntax": [
        "",
        "<builtin>.iter",
        "<builtin>.next",
        "tokenize.tokenize"
    ],
    "tokenize.tokenize": [
        "<builtin>.iter",
        "tokenize.detect_encoding",
        "tokenize._tokenize"
    ],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.find_cookie",
        "tokenize.detect_encoding.read_or_stop"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "tokenize._get_normal_name",
        "<builtin>.SyntaxError"
    ],
    "tokenize._get_normal_name": [],
    "tokenize._tokenize": [
        "tokenize._compile",
        "append",
        "<builtin>.IndentationError",
        "<builtin>.len",
        "<map>.get"
    ],
    "<builtin>.IndentationError": [],
    "tokenize._compile": [
        "re.compile"
    ],
    "<map>.get": [],
    "ast.parse": [
        "<builtin>.compile",
        "<builtin>.isinstance"
    ],
    "inspect._signature_fromstr.p": [
        "ast.NodeVisitor.visit",
        "append",
        "inspect._signature_fromstr.parse_name",
        "ast.literal_eval"
    ],
    "inspect._signature_fromstr.parse_name": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "ast.literal_eval": [
        "ast.parse",
        "<builtin>.isinstance",
        "ast.literal_eval._convert"
    ],
    "ast.literal_eval._convert": [
        "<builtin>.dict",
        "ast.literal_eval._convert_signed_num",
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.list",
        "ast.literal_eval._raise_malformed_node",
        "<builtin>.set",
        "ast.literal_eval._convert_num",
        "<builtin>.tuple",
        "<builtin>.len",
        "<builtin>.zip"
    ],
    "ast.literal_eval._convert_signed_num": [
        "ast.literal_eval._convert_num",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._convert_num": [
        "ast.literal_eval._raise_malformed_node",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._raise_malformed_node": [
        "<builtin>.getattr",
        "<builtin>.ValueError"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "pop": [],
    "inspect.Signature.__init__": [
        "<builtin>.ValueError",
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.__init__": [],
    "inspect.get_annotations": [
        "<builtin>.ValueError",
        "<builtin>.dict",
        "<builtin>.isinstance",
        "<builtin>.vars",
        "<builtin>.TypeError",
        "<builtin>.eval",
        "<builtin>.getattr",
        "<builtin>.callable",
        "<builtin>.hasattr"
    ],
    "<builtin>.vars": [],
    "inspect._signature_is_builtin": [
        "inspect.isbuiltin",
        "inspect.ismethoddescriptor",
        "<builtin>.isinstance"
    ],
    "inspect.isbuiltin": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethoddescriptor": [
        "inspect.ismethod",
        "<builtin>.type",
        "<builtin>.hasattr",
        "inspect.isfunction",
        "inspect.isclass"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect._signature_from_builtin": [
        "<builtin>.ValueError",
        "inspect._signature_is_builtin",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "inspect._signature_fromstr"
    ],
    "inspect._signature_get_partial": [
        "<builtin>.ValueError",
        "collections.OrderedDict.move_to_end",
        "collections.OrderedDict.pop",
        "collections.OrderedDict.values",
        "collections.OrderedDict.__init__"
    ],
    "collections.OrderedDict.pop": [
        "<builtin>.KeyError"
    ],
    "<builtin>.KeyError": [],
    "collections.OrderedDict.move_to_end": [],
    "collections.OrderedDict.values": [],
    "inspect._signature_get_user_defined_method": [
        "<builtin>.getattr"
    ],
    "typing_extensions._ensure_subclassable": [],
    "typing_extensions._ensure_subclassable.inner": [
        "<builtin>.type",
        "<builtin>.staticmethod",
        "functools.update_wrapper"
    ],
    "typing_extensions.Annotated": [
        "typing._tp_cache"
    ],
    "typing_extensions.ParamSpec": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateGenericAlias": [
        "<builtin>.property"
    ],
    "typing_extensions._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing_extensions._SpecialForm.__init__": [],
    "typing_extensions._UnpackSpecialForm.__init__": [
        "<builtin>.super"
    ],
    "markupsafe.Markup": [
        "<builtin>.classmethod"
    ],
    "werkzeug._internal": [
        "typing.overload",
        "typing.TypeVar.__init__",
        "re.compile"
    ],
    "logging": [
        "posixpath.normcase",
        "logging.Manager.__init__",
        "weakref.WeakValueDictionary.__init__",
        "logging.Formatter.__init__",
        "logging._StderrHandler.__init__",
        "<builtin>.hasattr",
        "threading.RLock",
        "logging.RootLogger.__init__",
        "ntpath.normcase",
        "_weakrefset.WeakSet.__init__"
    ],
    "traceback": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading": [
        "threading._MainThread.__init__",
        "<builtin>.set",
        "collections.namedtuple",
        "append",
        "<builtin>.hasattr",
        "threading.RLock",
        "_weakrefset.WeakSet.__init__"
    ],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.RLock": [
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [],
    "_weakrefset.WeakSet.__init__": [
        "<builtin>.set",
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "threading._MainThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident",
        "threading.Event.set",
        "threading.Thread.__init__",
        "threading.Thread._set_tstate_lock"
    ],
    "threading.Thread.__init__": [
        "threading._make_invoke_excepthook",
        "threading._newname",
        "<builtin>.str",
        "threading.Event.__init__",
        "_weakrefset.WeakSet.add",
        "threading.current_thread"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id",
        "threading.Thread.__init__",
        "threading._newname"
    ],
    "threading.Thread._set_ident": [],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "contextlib.contextmanager"
    ],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "os._fspath": [
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "ntpath.normcase": [
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.Formatter.__init__": [
        "logging.PercentStyle.validate",
        "<builtin>.ValueError",
        "logging.StringTemplateStyle.validate",
        "logging.StringTemplateStyle.__init__",
        "logging.PercentStyle.__init__",
        "<map>.keys",
        "logging.StrFormatStyle.validate"
    ],
    "<map>.keys": [],
    "logging.StringTemplateStyle.__init__": [
        "<builtin>.super",
        "string.Template.__init__"
    ],
    "string.Template.__init__": [],
    "logging.PercentStyle.__init__": [],
    "weakref.WeakValueDictionary.__init__": [
        "<builtin>.set",
        "weakref.WeakValueDictionary.update"
    ],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.hasattr",
        "<builtin>.dict",
        "weakref.KeyedRef.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary._commit_removals": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__",
        "logging.Handler.createLock",
        "logging._addHandlerRef"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.str",
        "<builtin>.TypeError",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "append"
    ],
    "logging._acquireLock": [],
    "logging.Handler.createLock": [
        "threading.RLock",
        "logging._register_at_fork_reinit_lock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging.Manager": [
        "<builtin>.property"
    ],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__"
    ],
    "logging.Manager.__init__": [],
    "werkzeug.wrappers.request": [],
    "werkzeug.datastructures": [],
    "werkzeug.datastructures.accept": [
        "re.compile"
    ],
    "werkzeug.datastructures.structures": [
        "typing.TypeVar.__init__"
    ],
    "werkzeug": [],
    "werkzeug.serving": [
        "<builtin>.hasattr",
        "<builtin>.__import__"
    ],
    "selectors": [
        "<builtin>.hasattr",
        "collections.namedtuple",
        "selectors._can_use"
    ],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._can_use": [
        "<builtin>.getattr"
    ],
    "socket": [
        "extend",
        "<builtin>.object",
        "append",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "socket.socket": [
        "<builtin>.hasattr",
        "<builtin>.property"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "socketserver": [
        "<builtin>.hasattr",
        "extend"
    ],
    "http.server": [],
    "email.utils": [
        "re.compile"
    ],
    "random": [
        "<builtin>.hasattr",
        "random.Random.__init__"
    ],
    "bisect": [],
    "hashlib": [
        "<builtin>.range",
        "hashlib.__get_builtin_constructor",
        "<builtin>.set",
        "<builtin>.globals",
        "logging.exception",
        "<builtin>.bytes"
    ],
    "hashlib.__get_builtin_constructor": [
        "<builtin>.ValueError",
        "<map>.get"
    ],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.basicConfig",
        "logging.Logger.error",
        "<builtin>.len"
    ],
    "logging.basicConfig": [
        "<builtin>.ValueError",
        "logging.Logger.setLevel",
        "logging.Formatter.__init__",
        "logging.Logger.removeHandler",
        "logging._acquireLock",
        "<builtin>.len",
        "<map>.keys",
        "logging.Logger.addHandler",
        "logging.FileHandler.__init__",
        "logging.StreamHandler.__init__"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "remove"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "os._fspath",
        "posixpath.abspath",
        "ntpath.abspath",
        "logging.FileHandler._open",
        "logging.Handler.__init__",
        "logging.StreamHandler.__init__"
    ],
    "posixpath.abspath": [
        "posixpath.join",
        "posixpath.isabs",
        "os._fspath",
        "<builtin>.isinstance",
        "posixpath.normpath"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "posixpath._get_sep"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath.join": [
        "genericpath._check_arg_types",
        "os._fspath",
        "<builtin>.map",
        "posixpath._get_sep"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "posixpath.normpath": [
        "append",
        "os._fspath",
        "<builtin>.isinstance",
        "pop"
    ],
    "ntpath.abspath": [],
    "logging.FileHandler._open": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.set",
        "<builtin>.ValueError"
    ],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.StrFormatStyle.validate": [
        "<builtin>.set",
        "<builtin>.ValueError",
        "string.Formatter.parse"
    ],
    "string.Formatter.parse": [],
    "logging.Logger.addHandler": [
        "logging._acquireLock",
        "append"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.isEnabledFor": [
        "logging._acquireLock",
        "logging.Logger.getEffectiveLevel"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "logging.Logger.findCaller",
        "<builtin>.type",
        "<builtin>.isinstance",
        "logging.Logger.handle",
        "logging.Logger.makeRecord"
    ],
    "logging.Logger.findCaller": [
        "posixpath.normcase",
        "traceback.print_stack",
        "logging.currentframe",
        "ntpath.normcase",
        "<builtin>.hasattr"
    ],
    "logging.currentframe": [],
    "traceback.print_stack": [
        "traceback.print_list",
        "traceback.extract_stack"
    ],
    "traceback.extract_stack": [
        "traceback.StackSummary.extract",
        "traceback.walk_stack"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "<builtin>.set",
        "traceback.FrameSummary.__init__",
        "linecache.checkcache",
        "linecache.lazycache",
        "<builtin>.getattr"
    ],
    "linecache.lazycache": [
        "<builtin>.getattr",
        "<str>.startswith",
        "<str>.endswith",
        "<builtin>.len"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "linecache.checkcache": [
        "<map>.keys",
        "<builtin>.len",
        "<map>.pop",
        "<builtin>.list"
    ],
    "<map>.pop": [],
    "traceback.print_list": [
        "<builtin>.print",
        "traceback.StackSummary.format",
        "traceback.StackSummary.from_list"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__",
        "<builtin>.isinstance"
    ],
    "traceback.StackSummary.format": [
        "<builtin>.sorted",
        "append"
    ],
    "logging.Logger.makeRecord": [
        "logging.LogRecord.__init__",
        "<builtin>.KeyError"
    ],
    "logging.LogRecord.__init__": [
        "ntpath.basename",
        "<builtin>.int",
        "ntpath.splitext",
        "<builtin>.isinstance",
        "posixpath.basename",
        "posixpath.splitext",
        "<builtin>.len",
        "<builtin>.hasattr",
        "threading.current_thread",
        "logging.getLevelName"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "posixpath.basename": [
        "os._fspath",
        "posixpath._get_sep"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "ntpath._get_bothseps",
        "os._fspath",
        "<builtin>.len",
        "ntpath.splitdrive"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.splitdrive": [
        "os._fspath",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "posixpath.splitext": [
        "genericpath._splitext",
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "genericpath._splitext": [
        "<builtin>.max"
    ],
    "ntpath.splitext": [
        "genericpath._splitext",
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "logging.Logger.handle": [
        "logging.Logger.callHandlers",
        "logging.Filterer.filter"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.Handler.emit",
        "logging.Handler.acquire",
        "logging.Filterer.filter"
    ],
    "logging.Handler.acquire": [],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.map",
        "warnings.warn",
        "<builtin>.ord",
        "<builtin>.len",
        "<builtin>.super"
    ],
    "warnings.warn": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "warnings._is_internal_frame",
        "<builtin>.range",
        "warnings._next_external_frame",
        "<builtin>.issubclass",
        "warnings.warn_explicit",
        "<builtin>.TypeError"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "<builtin>.int",
        "<builtin>.isinstance",
        "<map>.clear",
        "<builtin>.str",
        "<builtin>.issubclass",
        "warnings._showwarnmsg",
        "warnings.WarningMessage.__init__",
        "linecache.getlines",
        "<str>.lower",
        "<builtin>.RuntimeError",
        "<map>.get"
    ],
    "<str>.lower": [],
    "<map>.clear": [],
    "linecache.getlines": [
        "linecache.clearcache",
        "linecache.updatecache",
        "<builtin>.len"
    ],
    "linecache.updatecache": [
        "posixpath.join",
        "posixpath.isabs",
        "<str>.endswith",
        "<map>.pop",
        "tokenize.open",
        "linecache.lazycache",
        "<builtin>.len",
        "<str>.startswith",
        "ntpath.join",
        "ntpath.isabs"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "ntpath.isabs": [
        "ntpath._get_bothseps",
        "os._fspath",
        "<builtin>.isinstance",
        "<builtin>.len",
        "ntpath.splitdrive"
    ],
    "ntpath.join": [
        "os._fspath",
        "<builtin>.isinstance",
        "<builtin>.map",
        "genericpath._check_arg_types",
        "ntpath.splitdrive"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding"
    ],
    "linecache.clearcache": [
        "<map>.clear"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "linecache.getline"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [],
    "fnmatch": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "pickle": [
        "extend",
        "append"
    ],
    "struct": [],
    "_compat_pickle": [
        "<builtin>.dict",
        "<map>.update",
        "<builtin>.len",
        "<map>.items"
    ],
    "<map>.update": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [
        "<builtin>.property"
    ],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.ord": [],
    "urllib.parse": [
        "<builtin>.frozenset",
        "collections.namedtuple",
        "<builtin>.bytes",
        "re.compile",
        "urllib.parse._fix_result_transcoding"
    ],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse._fix_result_transcoding": [],
    "email._parseaddr": [],
    "calendar": [
        "calendar._localized_month.__init__",
        "datetime.date.toordinal",
        "calendar._localized_day.__init__",
        "<builtin>.range"
    ],
    "locale": [
        "<map>.setdefault",
        "<builtin>.globals",
        "functools.wraps",
        "re.compile",
        "<builtin>.sorted",
        "<map>.items"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_before_month",
        "datetime._days_before_year",
        "datetime._days_in_month"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "email.charset": [],
    "email.base64mime": [],
    "base64": [],
    "email.quoprimime": [
        "<builtin>.chr",
        "<builtin>.ord",
        "<str>.encode",
        "<builtin>.range"
    ],
    "email.errors": [],
    "email.encoders": [],
    "quopri": [],
    "html": [
        "re.compile"
    ],
    "html.entities": [
        "<builtin>.chr",
        "<map>.items"
    ],
    "http.client": [
        "<builtin>.globals",
        "re.compile"
    ],
    "email.parser": [],
    "email.feedparser": [
        "<builtin>.object",
        "re.compile"
    ],
    "email._policybase": [],
    "email.header": [
        "email.charset.Charset.__init__",
        "re.compile"
    ],
    "email.charset.Charset.__init__": [
        "<builtin>.str",
        "<map>.get",
        "<builtin>.isinstance",
        "<str>.encode"
    ],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email.message": [
        "re.compile"
    ],
    "uu": [],
    "email._encoded_words": [
        "<builtin>.ord",
        "re.compile"
    ],
    "email._encoded_words._QByteMap": [
        "<str>.encode"
    ],
    "email.iterators": [],
    "http": [],
    "http.client.HTTPConnection": [
        "<builtin>.staticmethod"
    ],
    "ssl": [
        "<builtin>.getattr",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "ssl._ASN1Object": [
        "<builtin>.classmethod"
    ],
    "ssl.SSLContext": [
        "<builtin>.hasattr",
        "<builtin>.property"
    ],
    "ssl.SSLObject": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ssl.SSLSocket": [
        "ssl._sslcopydoc",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ssl._sslcopydoc": [
        "<builtin>.getattr"
    ],
    "mimetypes": [
        "mimetypes._default_mime_types"
    ],
    "mimetypes.MimeTypes": [
        "<builtin>.classmethod"
    ],
    "mimetypes._default_mime_types": [],
    "shutil": [
        "<builtin>.hasattr",
        "append",
        "collections.namedtuple"
    ],
    "bz2": [],
    "_compression": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "http.server.CGIHTTPRequestHandler": [
        "<builtin>.hasattr"
    ],
    "werkzeug.urls": [
        "<builtin>.bytes",
        "werkzeug.urls._make_unquote_part",
        "<builtin>.range"
    ],
    "werkzeug.urls._make_unquote_part": [
        "re.compile",
        "<builtin>.ord",
        "<builtin>.sorted"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa": [],
    "cryptography.hazmat.primitives._serialization": [],
    "cryptography.utils": [],
    "cryptography.hazmat.primitives.hashes": [],
    "cryptography.hazmat.primitives.hashes.HashAlgorithm": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.HashContext": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SHAKE128": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.SHAKE256": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.BLAKE2b": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.hashes.BLAKE2s": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives._asymmetric": [],
    "cryptography.hazmat.primitives._asymmetric.AsymmetricPadding": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.utils": [],
    "cryptography.hazmat.primitives.asymmetric.utils.Prehashed": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.x509": [],
    "cryptography.x509.certificate_transparency": [],
    "cryptography.x509.certificate_transparency.SignedCertificateTimestamp": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.verification": [],
    "cryptography.x509.general_name": [],
    "ipaddress": [],
    "ipaddress._IPAddressBase": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress._BaseNetwork": [
        "functools.cached_property.__init__",
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "functools.cached_property.__init__": [],
    "ipaddress._BaseV4": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Address": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress.IPv4Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv4Network": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress._IPv4Constants": [
        "ipaddress.IPv4Network.__init__",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress.IPv4Network.__init__": [
        "<builtin>.int",
        "<builtin>.ValueError",
        "ipaddress.IPv4Address.__init__",
        "ipaddress._BaseV4._make_netmask",
        "ipaddress._IPAddressBase._split_addr_prefix"
    ],
    "ipaddress._IPAddressBase._split_addr_prefix": [
        "ipaddress._split_optional_netmask",
        "<builtin>.isinstance",
        "<builtin>.len"
    ],
    "ipaddress._split_optional_netmask": [
        "<builtin>.str",
        "<builtin>.len"
    ],
    "ipaddress.IPv4Address.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "ipaddress._IPAddressBase._check_int_address",
        "ipaddress._BaseV4._ip_int_from_string",
        "ipaddress._IPAddressBase._check_packed_address"
    ],
    "ipaddress._IPAddressBase._check_int_address": [],
    "ipaddress._IPAddressBase._check_packed_address": [
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._ip_int_from_string": [
        "<builtin>.map",
        "<builtin>.len"
    ],
    "ipaddress._BaseV4._make_netmask": [
        "<builtin>.isinstance",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress._BaseV6": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "<builtin>.frozenset"
    ],
    "ipaddress.IPv6Address": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "ipaddress.IPv6Interface": [
        "functools.cached_property.__init__",
        "<builtin>.property"
    ],
    "ipaddress.IPv6Network": [
        "<builtin>.property"
    ],
    "ipaddress._IPv6Constants": [
        "ipaddress.IPv6Network.__init__"
    ],
    "ipaddress.IPv6Network.__init__": [
        "<builtin>.ValueError",
        "<builtin>.int",
        "ipaddress._BaseV6._make_netmask",
        "ipaddress._IPAddressBase._split_addr_prefix",
        "ipaddress.IPv6Address.__init__"
    ],
    "ipaddress.IPv6Address.__init__": [
        "<builtin>.isinstance",
        "<builtin>.str",
        "ipaddress._BaseV6._split_scope_id",
        "ipaddress._IPAddressBase._check_int_address",
        "ipaddress._BaseV6._ip_int_from_string",
        "ipaddress._IPAddressBase._check_packed_address"
    ],
    "ipaddress._BaseV6._split_scope_id": [],
    "ipaddress._BaseV6._ip_int_from_string": [
        "<builtin>.range",
        "ipaddress._BaseV6._parse_hextet",
        "<builtin>.len",
        "ipaddress.IPv4Address.__init__"
    ],
    "ipaddress._BaseV6._parse_hextet": [
        "<builtin>.ValueError",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "ipaddress._BaseV6._make_netmask": [
        "ipaddress.IPv6Address.__init__",
        "<builtin>.isinstance"
    ],
    "cryptography.x509.name": [],
    "cryptography.x509.oid": [],
    "cryptography.hazmat._oid": [],
    "cryptography.x509.name.NameAttribute": [
        "<builtin>.property"
    ],
    "cryptography.x509.name.Name": [
        "<builtin>.classmethod",
        "typing.overload",
        "<builtin>.property"
    ],
    "typing.overload": [],
    "cryptography.x509.name._RFC4514NameParser": [
        "<builtin>.chr",
        "re.compile"
    ],
    "cryptography.x509.general_name.GeneralName": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.RFC822Name": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.DNSName": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.UniformResourceIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.DirectoryName": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.RegisteredID": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.IPAddress": [
        "<builtin>.property"
    ],
    "cryptography.x509.general_name.OtherName": [
        "<builtin>.property"
    ],
    "cryptography.x509.base": [],
    "cryptography.hazmat.primitives.serialization": [],
    "cryptography.hazmat.primitives.serialization.base": [],
    "cryptography.hazmat.primitives.serialization.ssh": [
        "<builtin>.bytearray",
        "<builtin>.range",
        "<builtin>.memoryview",
        "re.compile",
        "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__"
    ],
    "dataclasses": [
        "dataclasses._FIELD_BASE.__init__",
        "re.compile"
    ],
    "dataclasses._FIELD_BASE.__init__": [],
    "dataclasses.Field": [
        "<builtin>.classmethod"
    ],
    "cryptography.exceptions": [],
    "cryptography.hazmat.primitives.asymmetric.dsa": [],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPrivateKey": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dsa.DSAPublicKey": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec": [],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ec.ECDSA": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519": [],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PublicKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed25519.Ed25519PrivateKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding": [],
    "cryptography.hazmat.primitives.asymmetric.padding.PSS": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.OAEP": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers": [],
    "cryptography.hazmat.primitives._cipheralgorithm": [],
    "cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.base": [
        "typing.TypeVar.__init__"
    ],
    "cryptography.hazmat.primitives.ciphers.modes": [],
    "cryptography.hazmat.primitives.ciphers.algorithms": [
        "cryptography.utils.deprecated"
    ],
    "cryptography.hazmat.decrepit.ciphers.algorithms": [],
    "cryptography.hazmat.decrepit.ciphers.algorithms.ARC4": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.decrepit.ciphers.algorithms.Blowfish": [
        "<builtin>.property",
        "<builtin>.frozenset",
        "<builtin>.range"
    ],
    "cryptography.hazmat.decrepit.ciphers.algorithms.CAST5": [
        "<builtin>.property",
        "<builtin>.frozenset",
        "<builtin>.range"
    ],
    "cryptography.hazmat.decrepit.ciphers.algorithms.SEED": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.decrepit.ciphers.algorithms.IDEA": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.decrepit.ciphers.algorithms.RC2": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES128": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.AES256": [
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.Camellia": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.utils.deprecated": [
        "<builtin>.setattr",
        "cryptography.utils._DeprecatedValue.__init__",
        "<builtin>.isinstance",
        "cryptography.utils._ModuleWithDeprecations.__init__"
    ],
    "cryptography.utils._ModuleWithDeprecations.__init__": [
        "<builtin>.super"
    ],
    "cryptography.utils._DeprecatedValue.__init__": [],
    "<builtin>.setattr": [],
    "cryptography.hazmat.primitives.ciphers.algorithms.ChaCha20": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.algorithms.SM4": [
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.Mode": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithInitializationVector": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithTweak": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithNonce": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.ModeWithAuthenticationTag": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CBC": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.XTS": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.OFB": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CFB8": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.CTR": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.modes.GCM": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.base.CipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADCipherContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADDecryptionContext": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.ciphers.base.AEADEncryptionContext": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.ciphers.base.Cipher": [
        "typing.overload"
    ],
    "cryptography.hazmat.primitives.serialization.ssh._SSHFormatECDSA.__init__": [],
    "cryptography.hazmat.primitives.serialization.ssh.SSHCertificate": [
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448": [
        "<builtin>.hasattr"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PublicKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.ed448.Ed448PrivateKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448": [
        "<builtin>.hasattr"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PublicKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x448.X448PrivateKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519": [],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PublicKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.x25519.X25519PrivateKey": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.types": [
        "cryptography.utils.deprecated"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh": [],
    "cryptography.hazmat.primitives.asymmetric.dh.DHParameters": [
        "abc.abstractmethod"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPublicKey": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.hazmat.primitives.asymmetric.dh.DHPrivateKey": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions": [
        "typing.TypeVar.__init__"
    ],
    "cryptography.hazmat.primitives.constant_time": [],
    "hmac": [
        "<builtin>.bytes",
        "<builtin>.range"
    ],
    "hmac.HMAC": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.Extensions": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions._make_sequence_methods": [],
    "cryptography.x509.extensions.CRLNumber": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.AuthorityKeyIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.SubjectKeyIdentifier": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.AuthorityInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectInformationAccess": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.AccessDescription": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.BasicConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.DeltaCRLIndicator": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.CRLDistributionPoints": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.FreshestCRL": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.DistributionPoint": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.PolicyConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.CertificatePolicies": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.PolicyInformation": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.UserNotice": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NoticeReference": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.ExtendedKeyUsage": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.TLSFeature": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.InhibitAnyPolicy": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.KeyUsage": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.NameConstraints": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.Extension": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.GeneralNames": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SubjectAlternativeName": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.IssuerAlternativeName": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CertificateIssuer": [
        "typing.overload",
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.CRLReason": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.InvalidityDate": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.PrecertificateSignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.SignedCertificateTimestamps": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.extensions.OCSPNonce": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.IssuingDistributionPoint": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.MSCertificateTemplate": [
        "<builtin>.property"
    ],
    "cryptography.x509.extensions.UnrecognizedExtension": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.Attribute": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.Attributes": [
        "cryptography.x509.extensions._make_sequence_methods"
    ],
    "cryptography.x509.base.Certificate": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.base.RevokedCertificate": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "cryptography.x509.base._RawRevokedCertificate": [
        "<builtin>.property"
    ],
    "cryptography.x509.base.CertificateRevocationList": [
        "abc.abstractmethod",
        "typing.overload",
        "<builtin>.property"
    ],
    "cryptography.x509.base.CertificateSigningRequest": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "werkzeug.serving.WSGIRequestHandler": [
        "<builtin>.ord",
        "<builtin>.property",
        "<builtin>.range"
    ],
    "werkzeug.test": [
        "typing.TypeVar.__init__"
    ],
    "tempfile": [
        "<builtin>.hasattr"
    ],
    "tempfile._RandomNameSequence": [
        "<builtin>.property"
    ],
    "tempfile.SpooledTemporaryFile": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "tempfile.TemporaryDirectory": [
        "<builtin>.classmethod"
    ],
    "werkzeug.http": [
        "<builtin>.frozenset",
        "typing.overload",
        "typing.TypeVar.__init__",
        "re.compile",
        "<map>.update"
    ],
    "urllib.request": [
        "<builtin>.hasattr",
        "append",
        "re.compile"
    ],
    "email": [],
    "urllib.error": [],
    "urllib.response": [],
    "urllib.response.addinfourl": [
        "<builtin>.property"
    ],
    "urllib.error.HTTPError": [
        "<builtin>.property"
    ],
    "urllib.request.Request": [
        "<builtin>.property"
    ],
    "urllib.request.AbstractBasicAuthHandler": [
        "re.compile"
    ],
    "nturl2path": [],
    "werkzeug.sansio.http": [
        "re.compile"
    ],
    "werkzeug.sansio.multipart": [
        "re.compile"
    ],
    "werkzeug.utils": [
        "<builtin>.range",
        "typing.TypeVar.__init__",
        "re.compile"
    ],
    "pkgutil": [
        "collections.namedtuple",
        "functools.singledispatch"
    ],
    "importlib": [],
    "importlib.util": [
        "contextlib.contextmanager"
    ],
    "importlib.util.LazyLoader": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "functools.singledispatch": [
        "<builtin>.getattr",
        "weakref.WeakKeyDictionary.__init__",
        "functools.update_wrapper"
    ],
    "weakref.WeakKeyDictionary.__init__": [
        "weakref.WeakKeyDictionary.update",
        "<builtin>.set"
    ],
    "weakref.WeakKeyDictionary.update": [
        "<builtin>.hasattr",
        "<builtin>.type",
        "weakref.WeakKeyDictionary.update",
        "<builtin>.len"
    ],
    "werkzeug.security": [
        "<builtin>.list"
    ],
    "secrets": [],
    "werkzeug.wrappers.response": [],
    "werkzeug.sansio.response": [],
    "werkzeug.datastructures.cache_control": [],
    "werkzeug.datastructures.mixins": [
        "typing.TypeVar.__init__"
    ],
    "werkzeug.datastructures.mixins.ImmutableDictMixin": [
        "<builtin>.classmethod",
        "typing.overload"
    ],
    "werkzeug.datastructures.mixins.UpdateDictMixin": [
        "typing.overload",
        "werkzeug.datastructures.mixins._always_update"
    ],
    "werkzeug.datastructures.mixins._always_update": [
        "functools.update_wrapper"
    ],
    "werkzeug.datastructures.cache_control._CacheControl": [
        "<builtin>.staticmethod",
        "werkzeug.datastructures.cache_control.cache_control_property"
    ],
    "werkzeug.datastructures.cache_control.cache_control_property": [
        "inspect.cleandoc",
        "append",
        "<builtin>.property"
    ],
    "inspect.cleandoc": [
        "<str>.expandtabs",
        "<str>.split"
    ],
    "<str>.expandtabs": [],
    "werkzeug.datastructures.cache_control.RequestCacheControl": [
        "werkzeug.datastructures.cache_control.cache_control_property"
    ],
    "werkzeug.datastructures.cache_control.ResponseCacheControl": [
        "werkzeug.datastructures.cache_control.cache_control_property"
    ],
    "werkzeug.sansio.response.Response": [
        "werkzeug.sansio.response._set_property",
        "<builtin>.property"
    ],
    "werkzeug.sansio.response._set_property": [
        "<builtin>.property"
    ],
    "werkzeug.wrappers.response.Response": [
        "werkzeug.utils.cached_property.__init__",
        "<builtin>.classmethod",
        "typing.overload",
        "<builtin>.property"
    ],
    "werkzeug.utils.cached_property.__init__": [
        "<builtin>.super"
    ],
    "werkzeug.wrappers.response.ResponseStream": [
        "<builtin>.property"
    ],
    "werkzeug.test.EnvironBuilder": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "werkzeug.test.TestResponse": [
        "werkzeug.utils.cached_property.__init__"
    ],
    "werkzeug.test.Cookie": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "werkzeug.wrappers": [],
    "werkzeug.datastructures.structures.TypeConversionDict": [
        "typing.overload"
    ],
    "werkzeug.datastructures.structures.MultiDict": [
        "typing.overload"
    ],
    "werkzeug.datastructures.structures._OrderedMultiDict": [
        "typing.overload"
    ],
    "werkzeug.datastructures.structures.CombinedMultiDict": [
        "<builtin>.classmethod",
        "typing.overload"
    ],
    "werkzeug.datastructures.accept.Accept": [
        "typing.overload",
        "<builtin>.property"
    ],
    "werkzeug.datastructures.accept.MIMEAccept": [
        "<builtin>.property"
    ],
    "werkzeug.datastructures.accept.LanguageAccept": [
        "typing.overload"
    ],
    "werkzeug.datastructures.auth": [],
    "werkzeug.datastructures.auth.Authorization": [
        "<builtin>.classmethod"
    ],
    "werkzeug.datastructures.auth.WWWAuthenticate": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "werkzeug.datastructures.csp": [],
    "werkzeug.datastructures.csp.ContentSecurityPolicy": [
        "werkzeug.datastructures.csp.csp_property"
    ],
    "werkzeug.datastructures.csp.csp_property": [
        "<builtin>.property"
    ],
    "werkzeug.datastructures.etag": [],
    "werkzeug.datastructures.file_storage": [],
    "werkzeug.datastructures.headers": [
        "typing.TypeVar.__init__",
        "re.compile"
    ],
    "werkzeug.datastructures.headers.Headers": [
        "typing.overload"
    ],
    "werkzeug.datastructures.file_storage.FileStorage": [
        "<builtin>.property"
    ],
    "werkzeug.datastructures.range": [
        "typing.TypeVar.__init__"
    ],
    "werkzeug.datastructures.range._CallbackProperty": [
        "typing.overload"
    ],
    "werkzeug.formparser": [
        "typing.TypeVar.__init__"
    ],
    "werkzeug.sansio.request": [],
    "werkzeug.user_agent": [],
    "werkzeug.sansio.utils": [],
    "werkzeug.sansio.request.Request": [
        "werkzeug.utils.cached_property.__init__",
        "<builtin>.property"
    ],
    "werkzeug.wrappers.request.Request": [
        "werkzeug.utils.cached_property.__init__",
        "<builtin>.classmethod",
        "typing.overload",
        "<builtin>.property"
    ],
    "werkzeug._internal._DictAccessorProperty": [
        "typing.overload"
    ],
    "werkzeug.exceptions.HTTPException": [
        "<builtin>.property"
    ],
    "werkzeug.exceptions.BadRequestKeyError": [
        "<builtin>.property"
    ],
    "werkzeug.exceptions._find_exceptions": [
        "<builtin>.issubclass",
        "<builtin>.globals"
    ],
    "werkzeug.exceptions.Aborter.__init__": [
        "<builtin>.dict"
    ],
    "werkzeug.wsgi.LimitedStream": [
        "<builtin>.property"
    ],
    "werkzeug.local.LocalStack": [
        "<builtin>.property"
    ],
    "werkzeug.local.LocalProxy": [
        "werkzeug.local._l_to_r_op",
        "werkzeug.local._ProxyLookup.__init__",
        "werkzeug.local._ProxyIOp.__init__"
    ],
    "werkzeug.local._ProxyLookup.__init__": [
        "<builtin>.hasattr"
    ],
    "werkzeug.local._l_to_r_op": [
        "typing.cast"
    ],
    "typing.cast": [],
    "werkzeug.local._ProxyIOp.__init__": [
        "<builtin>.super"
    ],
    "flask.app": [
        "typing.TypeVar.__init__"
    ],
    "click": [],
    "click.core": [
        "contextlib.contextmanager",
        "typing.TypeVar.__init__"
    ],
    "gettext": [
        "posixpath.join",
        "ntpath.join",
        "<builtin>.enumerate",
        "re.compile"
    ],
    "click.types": [],
    "click._compat": [
        "weakref.WeakKeyDictionary.__init__",
        "click._compat._make_cached_stream_func",
        "re.compile"
    ],
    "click._compat._AtomicFile": [
        "<builtin>.property"
    ],
    "click._winconsole": [
        "ctypes.WINFUNCTYPE"
    ],
    "ctypes": [
        "<builtin>.int",
        "ctypes.PYFUNCTYPE",
        "ctypes.LibraryLoader.__init__",
        "ctypes._check_size",
        "ctypes.CFUNCTYPE",
        "<builtin>.Exception",
        "ctypes._reset_cache"
    ],
    "<builtin>.Exception": [],
    "ctypes._check_size": [
        "<builtin>.SystemError"
    ],
    "ctypes.LibraryLoader": [
        "<builtin>.classmethod"
    ],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "<builtin>.ValueError"
    ],
    "ctypes.PYFUNCTYPE": [],
    "ctypes._endian": [
        "<builtin>.type"
    ],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "ctypes.wintypes": [],
    "ctypes.WINFUNCTYPE": [
        "<builtin>.ValueError"
    ],
    "click._winconsole._WindowsConsoleWriter": [
        "<builtin>.staticmethod"
    ],
    "click._winconsole.ConsoleStream": [
        "<builtin>.property"
    ],
    "click._compat._make_cached_stream_func": [
        "weakref.WeakKeyDictionary.__init__"
    ],
    "click.exceptions": [],
    "click.utils": [
        "typing_extensions.ParamSpec.__init__",
        "typing.TypeVar.__init__"
    ],
    "click.globals": [
        "typing.overload"
    ],
    "typing_extensions.ParamSpec.__init__": [
        "typing_extensions._caller",
        "typing_extensions._set_default",
        "<builtin>.bool",
        "typing._type_check"
    ],
    "typing_extensions._set_default": [],
    "typing_extensions._caller": [],
    "click.shell_completion": [
        "typing.TypeVar.__init__"
    ],
    "click.parser": [
        "<builtin>.object",
        "typing.TypeVar.__init__"
    ],
    "click.parser.Option": [
        "<builtin>.property"
    ],
    "click.shell_completion.ShellComplete": [
        "<builtin>.property"
    ],
    "click.shell_completion.BashComplete": [
        "<builtin>.staticmethod"
    ],
    "click.types.CompositeParamType": [
        "<builtin>.property"
    ],
    "click.types.Tuple": [
        "<builtin>.property"
    ],
    "click.formatting": [],
    "click.formatting.HelpFormatter": [
        "contextlib.contextmanager"
    ],
    "click.termui": [
        "typing.TypeVar.__init__"
    ],
    "click._termui_impl": [
        "contextlib.contextmanager",
        "typing.TypeVar.__init__"
    ],
    "click._termui_impl.ProgressBar": [
        "<builtin>.property"
    ],
    "tty": [],
    "click.core.Context": [
        "contextlib.contextmanager",
        "typing.overload",
        "<builtin>.property"
    ],
    "click.core.BaseCommand": [
        "typing.overload"
    ],
    "click.core.Group": [
        "typing.overload"
    ],
    "click.core.Parameter": [
        "typing.overload",
        "<builtin>.property"
    ],
    "click.core.Option": [
        "typing.overload"
    ],
    "click.core.Argument": [
        "<builtin>.property"
    ],
    "click.decorators": [
        "typing_extensions.ParamSpec.__init__",
        "typing.overload",
        "typing.TypeVar.__init__"
    ],
    "werkzeug.routing": [],
    "werkzeug.routing.converters": [],
    "uuid": [
        "<builtin>.getattr",
        "platform.system",
        "uuid.UUID.__init__"
    ],
    "platform": [
        "collections.namedtuple",
        "re.compile"
    ],
    "subprocess": [
        "<builtin>.getattr",
        "subprocess._use_posix_spawn",
        "<builtin>.hasattr"
    ],
    "signal": [
        "<builtin>.globals",
        "signal._wraps.decorator",
        "signal._wraps"
    ],
    "signal._wraps": [],
    "signal._wraps.decorator": [],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.CompletedProcess": [
        "<builtin>.classmethod"
    ],
    "subprocess._use_posix_spawn": [
        "<builtin>.hasattr",
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.len"
    ],
    "subprocess.Popen": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "platform._Processor": [
        "<builtin>.classmethod"
    ],
    "platform.uname_result": [
        "functools.cached_property.__init__",
        "<builtin>.classmethod"
    ],
    "platform.system": [
        "platform.uname"
    ],
    "platform.uname": [
        "platform._node",
        "platform.java_ver",
        "<builtin>.map",
        "platform.win32_ver",
        "<builtin>.any",
        "platform._get_machine_win32",
        "platform._syscmd_ver"
    ],
    "platform._node": [],
    "platform.win32_ver": [
        "<builtin>.map",
        "<str>.split",
        "<builtin>.getattr",
        "<map>.get",
        "platform._syscmd_ver"
    ],
    "platform._syscmd_ver": [
        "subprocess.check_output",
        "platform._norm_version"
    ],
    "subprocess.check_output": [
        "<builtin>.ValueError",
        "subprocess.run"
    ],
    "subprocess.run": [
        "<builtin>.ValueError",
        "subprocess.Popen.__init__",
        "subprocess.Popen.__enter__",
        "subprocess.CalledProcessError.__init__",
        "subprocess.CompletedProcess.__init__",
        "subprocess.Popen.communicate",
        "subprocess.Popen.wait",
        "subprocess.Popen.poll",
        "subprocess.Popen.__exit__",
        "subprocess.Popen.kill"
    ],
    "subprocess.Popen.__init__": [
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.filter",
        "<builtin>.isinstance",
        "append",
        "warnings.warn",
        "<builtin>.TypeError",
        "<builtin>.bool",
        "<builtin>.hasattr",
        "subprocess.Popen._execute_child",
        "subprocess.Popen._get_handles",
        "subprocess._cleanup"
    ],
    "subprocess._cleanup": [
        "remove"
    ],
    "subprocess.Popen._get_handles": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "subprocess.Popen._get_devnull"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._execute_child": [
        "posixpath.join",
        "<builtin>.int",
        "<builtin>.tuple",
        "<builtin>.bytearray",
        "<builtin>.list",
        "<builtin>.sorted",
        "subprocess.Popen._close_pipe_fds",
        "<builtin>.len",
        "<builtin>.getattr",
        "<builtin>.ValueError",
        "posixpath.dirname",
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "<builtin>.hasattr",
        "os.get_exec_path",
        "subprocess.Popen._handle_exitstatus",
        "ntpath.dirname",
        "<builtin>.set",
        "append",
        "<builtin>.bytes",
        "ntpath.join",
        "subprocess.Popen._posix_spawn"
    ],
    "posixpath.dirname": [
        "os._fspath",
        "<builtin>.len",
        "posixpath._get_sep"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "subprocess.Popen._posix_spawn": [
        "<builtin>.getattr",
        "append",
        "subprocess.Popen._close_pipe_fds"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr"
    ],
    "os.get_exec_path": [
        "warnings.catch_warnings.__init__",
        "<str>.split"
    ],
    "warnings.catch_warnings.__init__": [],
    "subprocess.Popen._handle_exitstatus": [],
    "<builtin>.filter": [],
    "subprocess.Popen.__enter__": [],
    "subprocess.Popen.__exit__": [],
    "subprocess.Popen.communicate": [
        "<builtin>.ValueError",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen.wait",
        "<builtin>.min",
        "subprocess.Popen._communicate",
        "subprocess.Popen._stdin_write",
        "subprocess.Popen._wait"
    ],
    "subprocess.Popen._communicate": [
        "subprocess.Popen._remaining_time",
        "subprocess.Popen._check_timeout",
        "subprocess.Popen._save_input",
        "subprocess.Popen.wait",
        "<builtin>.memoryview",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._translate_newlines",
        "<builtin>.RuntimeError"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.set",
        "<builtin>.super"
    ],
    "subprocess.Popen._remaining_time": [],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.Popen.wait": [
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time",
        "<builtin>.min"
    ],
    "subprocess.Popen._wait": [
        "subprocess.Popen._try_wait",
        "subprocess.Popen._remaining_time",
        "subprocess.TimeoutExpired.__init__",
        "<builtin>.min",
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "subprocess.Popen.kill": [
        "subprocess.Popen.send_signal"
    ],
    "subprocess.Popen.send_signal": [
        "subprocess.Popen.poll"
    ],
    "subprocess.Popen.poll": [
        "subprocess.Popen._internal_poll"
    ],
    "subprocess.Popen._internal_poll": [
        "subprocess.Popen._handle_exitstatus"
    ],
    "subprocess.CalledProcessError.__init__": [],
    "subprocess.CompletedProcess.__init__": [],
    "platform._norm_version": [
        "<builtin>.list",
        "<str>.split",
        "<builtin>.map"
    ],
    "platform._get_machine_win32": [],
    "platform.java_ver": [
        "platform._java_getprop"
    ],
    "platform._java_getprop": [],
    "uuid.UUID": [
        "<builtin>.property"
    ],
    "uuid.UUID.__init__": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.repr",
        "<str>.strip",
        "<builtin>.TypeError",
        "<builtin>.len",
        "<str>.replace"
    ],
    "werkzeug.routing.map": [],
    "pprint": [
        "<builtin>.type",
        "<builtin>.frozenset"
    ],
    "werkzeug.routing.exceptions": [],
    "difflib": [
        "collections.namedtuple",
        "re.compile"
    ],
    "heapq": [],
    "difflib.SequenceMatcher": [
        "<builtin>.classmethod"
    ],
    "werkzeug.routing.rules": [
        "werkzeug.routing.rules._prefix_names",
        "typing.TypeVar.__init__",
        "re.compile"
    ],
    "werkzeug.routing.rules._prefix_names": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "ast.walk",
        "ast.parse",
        "<builtin>.TypeError"
    ],
    "ast.walk": [
        "ast.iter_child_nodes"
    ],
    "ast.iter_child_nodes": [
        "ast.iter_fields",
        "<builtin>.isinstance"
    ],
    "ast.iter_fields": [
        "<builtin>.getattr"
    ],
    "werkzeug.routing.rules.Rule": [
        "<builtin>.staticmethod"
    ],
    "werkzeug.routing.exceptions.BuildError": [
        "werkzeug.utils.cached_property.__init__"
    ],
    "werkzeug.routing.matcher": [],
    "werkzeug.routing.matcher.State": [
        "dataclasses.field"
    ],
    "dataclasses.field": [
        "<builtin>.ValueError",
        "dataclasses.Field.__init__"
    ],
    "dataclasses.Field.__init__": [],
    "werkzeug.routing.map.Map": [
        "<builtin>.property"
    ],
    "werkzeug.routing.map.MapAdapter": [
        "typing.overload"
    ],
    "werkzeug.routing.converters.NumberConverter": [
        "<builtin>.property"
    ],
    "flask.cli": [
        "click.decorators.option",
        "click.types.Choice.__init__",
        "click.decorators.command",
        "flask.cli.CertParamType.__init__",
        "typing.overload",
        "typing.TypeVar.__init__",
        "click.decorators.make_pass_decorator",
        "click.decorators.make_pass_decorator.decorator",
        "click.decorators.option.decorator",
        "click.core.Option.__init__",
        "click.types.Path.__init__",
        "flask.cli.FlaskGroup.__init__",
        "flask.cli.with_appcontext"
    ],
    "importlib.metadata": [
        "collections.namedtuple"
    ],
    "csv": [],
    "csv.DictReader": [
        "<builtin>.property"
    ],
    "pathlib": [
        "<builtin>.hasattr",
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "pathlib._WindowsFlavour": [
        "<builtin>.set"
    ],
    "pathlib._NormalAccessor": [
        "<builtin>.hasattr",
        "<builtin>.staticmethod"
    ],
    "pathlib.PurePath": [
        "operator.attrgetter.__init__",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "operator.attrgetter.__init__": [
        "<builtin>.tuple",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.map"
    ],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "zipfile": [],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "zipfile.CompleteDirs": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod"
    ],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "textwrap": [
        "re.compile"
    ],
    "textwrap.TextWrapper": [
        "re.compile",
        "<builtin>.ord",
        "re.escape"
    ],
    "importlib.metadata._adapters": [],
    "importlib.metadata._text": [],
    "importlib.metadata._adapters.Message": [
        "<builtin>.set",
        "<builtin>.property",
        "<builtin>.map"
    ],
    "importlib.metadata._meta": [
        "typing.TypeVar.__init__"
    ],
    "importlib.metadata._meta.PackageMetadata": [
        "<builtin>.property"
    ],
    "importlib.metadata._itertools": [],
    "importlib.abc": [
        "importlib.abc._register"
    ],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "importlib.metadata.Sectioned": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "textwrap.dedent"
    ],
    "textwrap.dedent": [
        "<builtin>.enumerate",
        "re.sub",
        "<builtin>.zip"
    ],
    "re.sub": [
        "re._compile"
    ],
    "importlib.metadata.EntryPoint": [
        "<builtin>.property",
        "re.compile"
    ],
    "importlib.metadata.EntryPoints": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "importlib.metadata.SelectableGroups": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "importlib.metadata.Distribution": [
        "<builtin>.property",
        "abc.abstractmethod",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib.metadata.DistributionFinder": [
        "abc.abstractmethod",
        "importlib.metadata.DistributionFinder.Context.__init__"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib.metadata.FastPath": [
        "functools.lru_cache.decorating_function",
        "<builtin>.property",
        "functools.lru_cache"
    ],
    "importlib.metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.MetadataPathFinder": [
        "<builtin>.classmethod",
        "importlib.metadata.DistributionFinder.Context.__init__"
    ],
    "importlib.metadata.PathDistribution": [
        "<builtin>.property"
    ],
    "flask.helpers": [
        "typing.overload",
        "functools.cache"
    ],
    "flask.signals": [
        "blinker.base.Namespace.signal"
    ],
    "blinker": [],
    "blinker.base": [
        "blinker._utilities.Symbol.__init__",
        "typing.TypeVar.__init__"
    ],
    "blinker._utilities": [
        "typing.TypeVar.__init__"
    ],
    "blinker._utilities.Symbol.__init__": [],
    "blinker.base.Signal": [
        "functools.cached_property.__init__",
        "contextlib.contextmanager"
    ],
    "blinker.base.Namespace.signal": [
        "blinker.base.NamedSignal.__init__"
    ],
    "blinker.base.NamedSignal.__init__": [
        "<builtin>.super"
    ],
    "flask.wrappers": [],
    "flask.wrappers.Request": [
        "<builtin>.property"
    ],
    "flask.wrappers.Response": [
        "<builtin>.property"
    ],
    "functools.cache": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "click.core.Option.__init__": [
        "<builtin>.isinstance",
        "<builtin>.TypeError",
        "<builtin>.bool",
        "click.types.convert_type",
        "inspect.cleandoc",
        "<builtin>.super"
    ],
    "click.types.convert_type": [
        "<builtin>.AssertionError",
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.map",
        "click.types.Tuple.__init__",
        "<builtin>.issubclass",
        "click.types.FuncParamType.__init__",
        "<builtin>.tuple"
    ],
    "click.types.Tuple.__init__": [
        "click.types.convert_type"
    ],
    "<builtin>.AssertionError": [],
    "click.types.FuncParamType.__init__": [],
    "click.decorators.make_pass_decorator": [],
    "click.types.Path.__init__": [
        "gettext.gettext"
    ],
    "gettext.gettext": [
        "gettext.dgettext"
    ],
    "gettext.dgettext": [
        "<map>.get",
        "gettext.translation"
    ],
    "gettext.translation": [
        "warnings.catch_warnings.__init__",
        "posixpath.abspath",
        "ntpath.abspath",
        "<map>.setdefault",
        "<builtin>.FileNotFoundError",
        "<builtin>.open",
        "warnings.warn",
        "gettext.NullTranslations.__init__",
        "<map>.get",
        "gettext.find",
        "copy.copy"
    ],
    "gettext.find": [
        "posixpath.join",
        "append",
        "genericpath.exists",
        "ntpath.join",
        "gettext._expand_lang"
    ],
    "gettext._expand_lang": [
        "locale.normalize",
        "append",
        "reverse",
        "<builtin>.range"
    ],
    "locale.normalize": [
        "locale._replace_encoding",
        "<map>.get",
        "<str>.replace",
        "locale._append_modifier"
    ],
    "locale._append_modifier": [
        "locale._replace_encoding"
    ],
    "locale._replace_encoding": [
        "encodings.normalize_encoding",
        "<map>.get"
    ],
    "encodings.normalize_encoding": [
        "<builtin>.str",
        "append",
        "<builtin>.isinstance"
    ],
    "reverse": [],
    "genericpath.exists": [],
    "gettext.NullTranslations.__init__": [
        "gettext.NullTranslations._parse"
    ],
    "gettext.NullTranslations._parse": [],
    "<builtin>.FileNotFoundError": [],
    "<builtin>.open": [],
    "copy.copy": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<map>",
        "copy._reconstruct",
        "<builtin>.issubclass",
        "copy._copy_immutable",
        "<builtin>.getattr",
        "<map>.get"
    ],
    "<map>": [],
    "copy._copy_immutable": [],
    "copy._reconstruct": [
        "<builtin>.setattr",
        "<builtin>.isinstance",
        "<builtin>.id",
        "<builtin>.len",
        "copy.deepcopy",
        "<builtin>.hasattr"
    ],
    "copy.deepcopy": [
        "<builtin>.type",
        "copy._deepcopy_atomic",
        "<builtin>.isinstance",
        "<builtin>.id",
        "<map>",
        "copy._reconstruct",
        "<builtin>.issubclass",
        "copy._keep_alive",
        "<builtin>.getattr",
        "<map>.get"
    ],
    "copy._deepcopy_atomic": [],
    "copy._keep_alive": [
        "<builtin>.id"
    ],
    "click.decorators.make_pass_decorator.decorator": [
        "functools.update_wrapper"
    ],
    "click.decorators.option": [],
    "click.decorators.option.decorator": [
        "click.decorators._param_memo",
        "click.core.Option.__init__"
    ],
    "click.decorators._param_memo": [
        "<builtin>.hasattr",
        "append",
        "<builtin>.isinstance"
    ],
    "flask.cli.CertParamType.__init__": [
        "click.types.Path.__init__"
    ],
    "click.decorators.command": [],
    "flask.cli.with_appcontext": [
        "functools.update_wrapper",
        "click.decorators.pass_context"
    ],
    "click.decorators.pass_context": [
        "functools.update_wrapper"
    ],
    "click.types.Choice.__init__": [],
    "flask.cli.FlaskGroup.__init__": [
        "<builtin>.super",
        "<builtin>.list",
        "click.core.Group.add_command"
    ],
    "click.core.Group.add_command": [
        "click.core._check_multicommand",
        "<builtin>.TypeError"
    ],
    "click.core._check_multicommand": [
        "<builtin>.type",
        "<builtin>.RuntimeError",
        "<builtin>.isinstance"
    ],
    "flask.typing": [
        "typing.TypeVar.__init__"
    ],
    "flask.ctx": [
        "<builtin>.object",
        "typing.TypeVar.__init__"
    ],
    "flask.sessions": [
        "flask.json.tag.TaggedJSONSerializer.__init__"
    ],
    "itsdangerous": [],
    "itsdangerous.encoding": [
        "typing.cast",
        "<str>.encode"
    ],
    "itsdangerous.exc": [],
    "itsdangerous.serializer": [
        "typing.TypeVar.__init__"
    ],
    "itsdangerous.signer": [],
    "itsdangerous.signer.HMACAlgorithm": [
        "<builtin>.staticmethod"
    ],
    "itsdangerous.signer.Signer": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "itsdangerous.serializer.Serializer": [
        "typing.overload",
        "<builtin>.property"
    ],
    "itsdangerous.timed": [],
    "itsdangerous.timed.TimestampSigner": [
        "typing.overload"
    ],
    "itsdangerous.url_safe": [],
    "itsdangerous._json": [],
    "itsdangerous._json._CompactJSON": [
        "<builtin>.staticmethod"
    ],
    "flask.json.tag": [],
    "flask.sessions.SessionMixin": [
        "<builtin>.property"
    ],
    "flask.json.tag.TaggedJSONSerializer.__init__": [
        "flask.json.tag.TaggedJSONSerializer.register"
    ],
    "flask.json.tag.TaggedJSONSerializer.register": [
        "<builtin>.KeyError"
    ],
    "flask.sessions.SecureCookieSessionInterface": [
        "<builtin>.staticmethod"
    ],
    "flask.sansio.app": [
        "typing.TypeVar.__init__"
    ],
    "flask.config": [
        "typing.TypeVar.__init__"
    ],
    "flask.config.ConfigAttribute": [
        "typing.overload"
    ],
    "flask.json.provider": [],
    "decimal": [],
    "_pydecimal": [
        "collections.namedtuple",
        "re.compile",
        "_pydecimal.Context.__init__",
        "<builtin>.pow",
        "_pydecimal._Log10Memoize.__init__"
    ],
    "numbers": [],
    "numbers.Complex": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "numbers.Real": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "numbers.Rational": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "numbers.Integral": [
        "abc.abstractmethod",
        "<builtin>.property"
    ],
    "_pydecimal.Decimal": [
        "<builtin>.dict",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "_pydecimal._Log10Memoize.__init__": [],
    "_pydecimal.Context.__init__": [
        "copy",
        "<builtin>.int",
        "<builtin>.dict",
        "<builtin>.isinstance"
    ],
    "<builtin>.pow": [],
    "flask.json.provider.DefaultJSONProvider": [
        "<builtin>.staticmethod"
    ],
    "flask.logging": [
        "werkzeug.local.LocalProxy.__init__"
    ],
    "werkzeug.local.LocalProxy.__init__": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "operator.attrgetter.__init__",
        "<builtin>.TypeError",
        "<builtin>.callable"
    ],
    "flask.templating": [],
    "jinja2": [],
    "jinja2.bccache": [
        "pickle._dumps"
    ],
    "jinja2.environment": [
        "functools.lru_cache.decorating_function",
        "typing.TypeVar.__init__",
        "functools.lru_cache"
    ],
    "jinja2.nodes": [
        "<builtin>.staticmethod",
        "typing.TypeVar.__init__"
    ],
    "jinja2.utils": [
        "<builtin>.set",
        "<builtin>.type",
        "typing.TypeVar.__init__",
        "re.compile"
    ],
    "jinja2.utils._PassArg": [
        "<builtin>.classmethod"
    ],
    "jinja2.utils.Cycler": [
        "<builtin>.property"
    ],
    "jinja2.nodes.Const": [
        "<builtin>.classmethod"
    ],
    "jinja2.compiler": [
        "typing.TypeVar.__init__"
    ],
    "jinja2.exceptions": [],
    "jinja2.runtime": [
        "typing.TypeVar.__init__"
    ],
    "jinja2.async_utils": [
        "<builtin>.type",
        "typing.TypeVar.__init__"
    ],
    "jinja2.runtime.Context": [
        "jinja2.utils.internalcode",
        "jinja2.runtime._dict_method_all"
    ],
    "jinja2.utils.internalcode": [],
    "jinja2.runtime._dict_method_all": [
        "typing.cast",
        "functools.wraps"
    ],
    "jinja2.runtime.BlockReference": [
        "jinja2.utils.internalcode",
        "<builtin>.property"
    ],
    "jinja2.runtime.LoopContext": [
        "jinja2.utils.internalcode",
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "jinja2.runtime.AsyncLoopContext": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "jinja2.runtime.Macro": [
        "jinja2.utils.internalcode",
        "jinja2.utils.pass_eval_context"
    ],
    "jinja2.utils.pass_eval_context": [],
    "jinja2.runtime.Undefined": [
        "jinja2.utils.internalcode",
        "<builtin>.property"
    ],
    "jinja2.exceptions.TemplateError": [
        "<builtin>.property"
    ],
    "jinja2.idtracking": [],
    "jinja2.visitor": [],
    "jinja2.optimizer": [],
    "jinja2.compiler.CodeGenerator": [
        "contextlib.contextmanager",
        "jinja2.compiler._make_unop",
        "jinja2.compiler.optimizeconst",
        "<builtin>.property",
        "<builtin>.staticmethod",
        "jinja2.compiler._make_binop"
    ],
    "jinja2.compiler._make_binop": [
        "jinja2.compiler.optimizeconst"
    ],
    "jinja2.compiler.optimizeconst": [
        "typing.cast",
        "functools.update_wrapper"
    ],
    "jinja2.compiler._make_unop": [
        "jinja2.compiler.optimizeconst"
    ],
    "jinja2.defaults": [],
    "jinja2.filters": [
        "typing.TypeVar.__init__",
        "jinja2.async_utils.async_variant",
        "typing.overload",
        "re.compile",
        "jinja2.utils.pass_environment",
        "jinja2.async_utils.async_variant.decorator",
        "jinja2.utils.pass_context",
        "jinja2.utils.pass_eval_context"
    ],
    "jinja2.sandbox": [
        "<builtin>.set",
        "typing.TypeVar.__init__",
        "<builtin>.frozenset"
    ],
    "jinja2.sandbox.SandboxedEnvironment": [
        "<builtin>.frozenset"
    ],
    "jinja2.utils.pass_environment": [],
    "jinja2.async_utils.async_variant": [],
    "jinja2.async_utils.async_variant.decorator": [
        "jinja2.utils._PassArg.from_obj",
        "<builtin>.set",
        "functools.wraps",
        "<builtin>.tuple",
        "jinja2.utils.pass_eval_context"
    ],
    "jinja2.utils._PassArg.from_obj": [
        "<builtin>.hasattr"
    ],
    "jinja2.utils.pass_context": [],
    "jinja2.tests": [
        "jinja2.utils.pass_environment"
    ],
    "jinja2.lexer": [
        "<builtin>.frozenset",
        "re.compile",
        "jinja2.utils.LRUCache.__init__",
        "<builtin>.sorted",
        "<builtin>.len",
        "<map>.items",
        "re.escape"
    ],
    "jinja2._identifier": [
        "re.compile"
    ],
    "jinja2.utils.LRUCache.__init__": [
        "jinja2.utils.LRUCache._postinit"
    ],
    "jinja2.utils.LRUCache._postinit": [],
    "jinja2.lexer.TokenStream": [
        "<builtin>.property"
    ],
    "jinja2.parser": [
        "typing.TypeVar.__init__",
        "<builtin>.frozenset"
    ],
    "jinja2.parser.Parser": [
        "typing.overload"
    ],
    "jinja2.ext": [
        "jinja2.utils.pass_context",
        "re.compile"
    ],
    "jinja2.ext.Extension": [
        "<builtin>.set"
    ],
    "jinja2.loaders": [],
    "jinja2.loaders.BaseLoader": [
        "jinja2.utils.internalcode"
    ],
    "jinja2.loaders.PrefixLoader": [
        "jinja2.utils.internalcode"
    ],
    "jinja2.loaders.ChoiceLoader": [
        "jinja2.utils.internalcode"
    ],
    "jinja2.loaders.ModuleLoader": [
        "jinja2.utils.internalcode",
        "<builtin>.staticmethod"
    ],
    "jinja2.environment.Environment": [
        "jinja2.utils.internalcode",
        "typing.overload",
        "<builtin>.property"
    ],
    "jinja2.environment.Template": [
        "jinja2.utils.internalcode",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "pickle._dumps": [
        "pickle._Pickler.__init__",
        "<builtin>.isinstance",
        "pickle._Pickler.dump"
    ],
    "pickle._Pickler.__init__": [
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.int",
        "pickle._Framer.__init__"
    ],
    "pickle._Framer.__init__": [],
    "pickle._Pickler.dump": [
        "pickle._Framer.start_framing",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "pickle._Framer.end_framing",
        "<builtin>.hasattr"
    ],
    "pickle._Framer.write": [],
    "pickle._Framer.start_framing": [],
    "pickle._Pickler.save": [
        "pickle._Pickler.persistent_id",
        "<builtin>.type",
        "pickle._Pickler.get",
        "<builtin>.isinstance",
        "<map>",
        "<builtin>.issubclass",
        "pickle._Framer.write",
        "pickle._Pickler.save_pers",
        "pickle._Pickler.save_reduce",
        "pickle._Framer.commit_frame",
        "<builtin>.len",
        "<builtin>.getattr",
        "pickle._Pickler.save_global",
        "<map>.get"
    ],
    "pickle._Framer.commit_frame": [
        "pickle._Framer.write",
        "<builtin>.len"
    ],
    "pickle._Pickler.persistent_id": [],
    "pickle._Pickler.save_pers": [
        "<builtin>.str",
        "pickle._Framer.write",
        "pickle._Pickler.save"
    ],
    "pickle._Pickler.get": [
        "<builtin>.repr"
    ],
    "pickle._Pickler.save_global": [
        "pickle._getattribute",
        "pickle._Pickler.memoize",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.bytes",
        "pickle._Pickler.save_reduce",
        "<builtin>.getattr",
        "pickle.whichmodule",
        "<builtin>.__import__"
    ],
    "pickle.whichmodule": [
        "<builtin>.getattr",
        "pickle._getattribute"
    ],
    "pickle._getattribute": [
        "<builtin>.getattr",
        "<builtin>.AttributeError"
    ],
    "<builtin>.AttributeError": [],
    "pickle._Pickler.save_reduce": [
        "pickle._Pickler._batch_appends",
        "pickle._Pickler._batch_setitems",
        "pickle._Pickler.get",
        "<builtin>.isinstance",
        "<builtin>.id",
        "pickle._Pickler.memoize",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.getattr",
        "<builtin>.callable",
        "<builtin>.hasattr"
    ],
    "pickle._Pickler.memoize": [
        "pickle._Pickler.put",
        "pickle._Framer.write",
        "<builtin>.len",
        "<builtin>.id"
    ],
    "pickle._Pickler.put": [
        "<builtin>.repr"
    ],
    "pickle._Pickler._batch_appends": [
        "<builtin>.iter",
        "<builtin>.list",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.len"
    ],
    "pickle._Pickler._batch_setitems": [
        "<builtin>.iter",
        "<builtin>.list",
        "pickle._Framer.write",
        "pickle._Pickler.save",
        "<builtin>.len"
    ],
    "pickle._Framer.end_framing": [
        "pickle._Framer.commit_frame"
    ],
    "flask.sansio.scaffold": [
        "<builtin>.object",
        "typing.TypeVar.__init__"
    ],
    "flask.sansio.scaffold.Scaffold": [
        "<builtin>.staticmethod",
        "werkzeug.utils.cached_property.__init__",
        "flask.sansio.scaffold.setupmethod",
        "<builtin>.property"
    ],
    "flask.sansio.scaffold.setupmethod": [
        "typing.cast",
        "functools.update_wrapper"
    ],
    "flask.testing": [],
    "click.testing": [
        "contextlib.contextmanager"
    ],
    "shlex": [
        "re.compile"
    ],
    "shlex.shlex": [
        "<builtin>.property"
    ],
    "click.testing._NamedTextIOWrapper": [
        "<builtin>.property"
    ],
    "click.testing.Result": [
        "<builtin>.property"
    ],
    "click.testing.CliRunner": [
        "contextlib.contextmanager"
    ],
    "flask.testing.FlaskClient": [
        "contextlib.contextmanager"
    ],
    "flask.sansio.blueprints": [
        "typing.TypeVar.__init__"
    ],
    "flask.sansio.blueprints.Blueprint": [
        "flask.sansio.scaffold.setupmethod"
    ],
    "flask.sansio.app.App": [
        "<builtin>.property",
        "werkzeug.utils.cached_property.__init__",
        "flask.sansio.scaffold.setupmethod",
        "flask.config.ConfigAttribute.__init__"
    ],
    "flask.config.ConfigAttribute.__init__": [],
    "flask.blueprints": [],
    "authlib.integrations.flask_client": [],
    "authlib.integrations.flask_client.integration": [],
    "authlib.integrations.base_client": [],
    "authlib.integrations.base_client.registry": [],
    "authlib.integrations.base_client.framework_integration": [],
    "authlib.integrations.base_client.framework_integration.FrameworkIntegration": [
        "<builtin>.staticmethod"
    ],
    "authlib.integrations.base_client.sync_app": [
        "logging.getLogger"
    ],
    "authlib.common.urls": [
        "<builtin>.set",
        "re.compile"
    ],
    "authlib.common.encoding": [],
    "authlib.consts": [],
    "authlib.common.security": [],
    "authlib.integrations.base_client.errors": [],
    "authlib.common.errors": [],
    "logging.getLogger": [
        "<builtin>.isinstance"
    ],
    "authlib.integrations.base_client.sync_app.OAuth2Base": [
        "<builtin>.staticmethod"
    ],
    "authlib.integrations.base_client.sync_openid": [],
    "authlib.jose": [
        "authlib.jose.rfc7518.register_jws_rfc7518",
        "<builtin>.list",
        "<map>.keys",
        "authlib.jose.rfc7518.register_jwe_rfc7518",
        "authlib.jose.rfc7519.jwt.JsonWebToken.__init__",
        "authlib.jose.rfc8037.jws_eddsa.register_jws_rfc8037"
    ],
    "authlib.jose.rfc7515": [],
    "authlib.jose.rfc7515.jws": [],
    "authlib.jose.util": [],
    "authlib.jose.errors": [],
    "authlib.jose.rfc7515.models": [],
    "authlib.jose.rfc7515.models.JWSHeader": [
        "<builtin>.classmethod"
    ],
    "authlib.jose.rfc7515.models.JWSObject": [
        "<builtin>.property"
    ],
    "authlib.jose.rfc7515.jws.JsonWebSignature": [
        "<builtin>.classmethod",
        "<builtin>.frozenset"
    ],
    "authlib.jose.rfc7516": [],
    "authlib.jose.rfc7516.jwe": [],
    "authlib.jose.rfc7516.models": [],
    "authlib.jose.rfc7516.models.JWESharedHeader": [
        "<builtin>.classmethod"
    ],
    "authlib.jose.rfc7516.jwe.JsonWebEncryption": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "<builtin>.frozenset"
    ],
    "authlib.jose.rfc7517": [],
    "authlib.jose.rfc7517._cryptography_key": [],
    "cryptography.hazmat.backends": [],
    "authlib.jose.rfc7517.base_key": [],
    "authlib.jose.rfc7517.base_key.Key": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "authlib.jose.rfc7517.asymmetric_key": [],
    "authlib.jose.rfc7517.asymmetric_key.AsymmetricKey": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "authlib.jose.rfc7517.key_set": [],
    "authlib.jose.rfc7517.jwk": [],
    "authlib.jose.rfc7517.jwk.JsonWebKey": [
        "<builtin>.classmethod"
    ],
    "authlib.jose.rfc7518": [],
    "authlib.jose.rfc7518.oct_key": [],
    "authlib.jose.rfc7518.oct_key.OctKey": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "authlib.jose.rfc7518.rsa_key": [],
    "authlib.jose.rfc7518.rsa_key.RSAKey": [
        "<builtin>.classmethod"
    ],
    "authlib.jose.rfc7518.ec_key": [],
    "authlib.jose.rfc7518.ec_key.ECKey": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "authlib.jose.rfc7518.jws_algs": [
        "authlib.jose.rfc7518.jws_algs.RSAPSSAlgorithm.__init__",
        "authlib.jose.rfc7518.jws_algs.RSAAlgorithm.__init__",
        "authlib.jose.rfc7518.jws_algs.HMACAlgorithm.__init__",
        "authlib.jose.rfc7518.jws_algs.ECAlgorithm.__init__"
    ],
    "authlib.jose.rfc7518.util": [],
    "authlib.jose.rfc7518.jws_algs.HMACAlgorithm.__init__": [
        "<builtin>.getattr"
    ],
    "authlib.jose.rfc7518.jws_algs.RSAAlgorithm.__init__": [
        "<builtin>.getattr"
    ],
    "authlib.jose.rfc7518.jws_algs.ECAlgorithm.__init__": [
        "<builtin>.getattr"
    ],
    "authlib.jose.rfc7518.jws_algs.RSAPSSAlgorithm.__init__": [
        "<builtin>.getattr"
    ],
    "authlib.jose.rfc7518.jwe_algs": [
        "cryptography.hazmat.primitives.asymmetric.padding.OAEP.__init__",
        "authlib.jose.rfc7518.jwe_algs.AESGCMAlgorithm.__init__",
        "authlib.jose.rfc7518.jwe_algs.RSAAlgorithm.__init__",
        "authlib.jose.rfc7518.jwe_algs.AESAlgorithm.__init__",
        "cryptography.hazmat.primitives.asymmetric.padding.MGF1.__init__",
        "authlib.jose.rfc7518.jwe_algs.ECDHESAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.keywrap": [],
    "cryptography.hazmat.primitives.kdf.concatkdf": [],
    "cryptography.hazmat.primitives.hmac": [],
    "cryptography.hazmat.primitives.kdf": [],
    "cryptography.hazmat.primitives.kdf.KeyDerivationFunction": [
        "abc.abstractmethod"
    ],
    "authlib.jose.rfc7518.jwe_algs.AESGCMAlgorithm": [
        "<builtin>.frozenset"
    ],
    "authlib.jose.rfc7518.jwe_algs.RSAAlgorithm.__init__": [],
    "cryptography.hazmat.primitives.asymmetric.padding.MGF1.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "cryptography.hazmat.primitives.asymmetric.padding.OAEP.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "authlib.jose.rfc7518.jwe_algs.AESAlgorithm.__init__": [],
    "authlib.jose.rfc7518.jwe_algs.AESGCMAlgorithm.__init__": [],
    "authlib.jose.rfc7518.jwe_algs.ECDHESAlgorithm.__init__": [
        "authlib.jose.rfc7518.jwe_algs.AESAlgorithm.__init__"
    ],
    "authlib.jose.rfc7518.jwe_encs": [
        "authlib.jose.rfc7518.jwe_encs.CBCHS2EncAlgorithm.__init__",
        "authlib.jose.rfc7518.jwe_encs.GCMEncAlgorithm.__init__"
    ],
    "cryptography.hazmat.primitives.padding": [],
    "cryptography.hazmat.primitives.padding.PaddingContext": [
        "abc.abstractmethod"
    ],
    "authlib.jose.rfc7518.jwe_encs.CBCHS2EncAlgorithm.__init__": [
        "<builtin>.getattr"
    ],
    "authlib.jose.rfc7518.jwe_encs.GCMEncAlgorithm.__init__": [],
    "authlib.jose.rfc7518.jwe_zips": [],
    "authlib.jose.rfc7519": [],
    "authlib.jose.rfc7519.jwt": [],
    "authlib.jose.rfc7519.claims": [],
    "authlib.jose.rfc7519.jwt.JsonWebToken": [
        "re.compile"
    ],
    "authlib.jose.rfc8037": [],
    "authlib.jose.rfc8037.okp_key": [],
    "authlib.jose.rfc8037.okp_key.OKPKey": [
        "<map>.values",
        "<builtin>.tuple",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "<map>.values": [],
    "authlib.jose.rfc8037.jws_eddsa": [],
    "authlib.jose.rfc7518.register_jws_rfc7518": [
        "authlib.jose.rfc7515.jws.JsonWebSignature.register_algorithm"
    ],
    "authlib.jose.rfc7515.jws.JsonWebSignature.register_algorithm": [
        "<builtin>.ValueError"
    ],
    "authlib.jose.rfc8037.jws_eddsa.register_jws_rfc8037": [
        "authlib.jose.rfc7515.jws.JsonWebSignature.register_algorithm"
    ],
    "authlib.jose.rfc7518.register_jwe_rfc7518": [
        "authlib.jose.rfc7516.jwe.JsonWebEncryption.register_algorithm"
    ],
    "authlib.jose.rfc7516.jwe.JsonWebEncryption.register_algorithm": [
        "<builtin>.ValueError"
    ],
    "authlib.jose.rfc7519.jwt.JsonWebToken.__init__": [
        "authlib.jose.rfc7516.jwe.JsonWebEncryption.__init__",
        "authlib.jose.rfc7515.jws.JsonWebSignature.__init__"
    ],
    "authlib.jose.rfc7515.jws.JsonWebSignature.__init__": [],
    "authlib.jose.rfc7516.jwe.JsonWebEncryption.__init__": [],
    "authlib.oidc.core": [],
    "authlib.oidc.core.models": [],
    "authlib.oauth2.rfc6749": [],
    "authlib.oauth2.rfc6749.requests": [],
    "authlib.oauth2.rfc6749.errors": [],
    "authlib.oauth2.base": [],
    "authlib.oauth2.rfc6749.errors.InsecureTransportError": [
        "<builtin>.classmethod"
    ],
    "authlib.oauth2.rfc6749.requests.OAuth2Request": [
        "<builtin>.property"
    ],
    "authlib.oauth2.rfc6749.requests.JsonRequest": [
        "<builtin>.property"
    ],
    "authlib.oauth2.rfc6749.wrappers": [],
    "authlib.oauth2.rfc6749.wrappers.OAuth2Token": [
        "<builtin>.classmethod"
    ],
    "authlib.oauth2.rfc6749.models": [],
    "authlib.deprecate": [
        "warnings.simplefilter"
    ],
    "authlib.oauth2.rfc6749.authenticate_client": [
        "logging.getLogger"
    ],
    "authlib.oauth2.rfc6749.util": [],
    "authlib.oauth2.rfc6749.authorization_server": [],
    "authlib.oauth2.rfc6749.resource_protector": [],
    "authlib.oauth2.rfc6749.resource_protector.TokenValidator": [
        "<builtin>.staticmethod"
    ],
    "authlib.oauth2.rfc6749.token_endpoint": [],
    "authlib.oauth2.rfc6749.grants": [],
    "authlib.oauth2.rfc6749.grants.base": [],
    "authlib.oauth2.rfc6749.grants.base.BaseGrant": [
        "<builtin>.property"
    ],
    "authlib.oauth2.rfc6749.grants.base.TokenEndpointMixin": [
        "<builtin>.classmethod"
    ],
    "authlib.oauth2.rfc6749.grants.base.AuthorizationEndpointMixin": [
        "<builtin>.set",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "authlib.oauth2.rfc6749.grants.authorization_code": [
        "logging.getLogger"
    ],
    "authlib.oauth2.rfc6749.grants.implicit": [
        "logging.getLogger"
    ],
    "authlib.oauth2.rfc6749.grants.resource_owner_password_credentials": [
        "logging.getLogger"
    ],
    "authlib.oauth2.rfc6749.grants.client_credentials": [
        "logging.getLogger"
    ],
    "authlib.oauth2.rfc6749.grants.refresh_token": [
        "logging.getLogger"
    ],
    "authlib.oidc.core.claims": [],
    "authlib.oidc.core.util": [],
    "authlib.oidc.core.grants": [],
    "authlib.oidc.core.grants.code": [
        "logging.getLogger"
    ],
    "authlib.oidc.core.grants.util": [],
    "authlib.oidc.core.errors": [],
    "authlib.oauth2": [],
    "authlib.oauth2.auth": [],
    "authlib.oauth2.rfc6750": [],
    "authlib.oauth2.rfc6750.errors": [],
    "authlib.oauth2.rfc6750.parameters": [],
    "authlib.oauth2.rfc6750.token": [],
    "authlib.oauth2.rfc6750.token.BearerTokenGenerator": [
        "<builtin>.staticmethod"
    ],
    "authlib.oauth2.rfc6750.validator": [],
    "authlib.oauth2.client": [],
    "authlib.oauth2.rfc6749.parameters": [],
    "authlib.oauth2.rfc7009": [],
    "authlib.oauth2.rfc7009.parameters": [],
    "authlib.oauth2.rfc7009.revocation": [],
    "authlib.oauth2.rfc7636": [],
    "authlib.oauth2.rfc7636.challenge": [
        "re.compile"
    ],
    "authlib.oauth2.client.OAuth2Client": [
        "<builtin>.property"
    ],
    "authlib.oidc.core.grants.implicit": [
        "logging.getLogger"
    ],
    "authlib.oidc.core.grants.hybrid": [
        "logging.getLogger"
    ],
    "authlib.integrations.flask_client.integration.FlaskIntegration": [
        "<builtin>.staticmethod"
    ],
    "authlib.integrations.flask_client.apps": [],
    "authlib.integrations.requests_client": [],
    "authlib.integrations.requests_client.oauth1_session": [],
    "requests": [
        "requests.check_compatibility",
        "urllib3.contrib.pyopenssl.inject_into_urllib3",
        "warnings.simplefilter",
        "warnings.warn",
        "<builtin>.getattr",
        "requests._check_cryptography",
        "logging.getLogger"
    ],
    "urllib3": [
        "urllib3.poolmanager.PoolManager.__init__",
        "warnings.simplefilter",
        "logging.getLogger",
        "urllib3.contrib.emscripten.inject_into_urllib3"
    ],
    "urllib3.exceptions": [],
    "urllib3.connection": [
        "<builtin>.hasattr",
        "logging.getLogger",
        "re.compile"
    ],
    "urllib3.response": [
        "logging.getLogger"
    ],
    "urllib3._base_connection": [],
    "urllib3.util.connection": [
        "urllib3.util.connection._has_ipv6"
    ],
    "urllib3.util.timeout": [],
    "urllib3.util.timeout.Timeout": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "urllib3.util.connection._has_ipv6": [
        "socket.socket.__init__",
        "socket.socket.close"
    ],
    "socket.socket.__init__": [],
    "socket.socket.close": [
        "socket.socket._real_close"
    ],
    "socket.socket._real_close": [],
    "urllib3.util.url": [
        "<builtin>.set",
        "typing.NamedTuple",
        "typing.overload",
        "re.compile"
    ],
    "urllib3.util.util": [],
    "typing.NamedTuple": [
        "typing._make_nmtuple",
        "<builtin>.TypeError"
    ],
    "typing._make_nmtuple": [
        "collections.namedtuple",
        "typing._type_check"
    ],
    "urllib3.util.url.Url": [
        "<builtin>.property"
    ],
    "urllib3._base_connection.BaseHTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.util": [],
    "urllib3.util.request": [
        "<builtin>.frozenset"
    ],
    "urllib3.util.response": [],
    "urllib3.util.retry": [
        "logging.getLogger",
        "urllib3.util.retry.Retry.__init__"
    ],
    "urllib3.connectionpool": [
        "typing.overload",
        "logging.getLogger"
    ],
    "queue": [],
    "queue.Queue": [
        "<builtin>.classmethod"
    ],
    "queue._PySimpleQueue": [
        "<builtin>.classmethod"
    ],
    "urllib3._request_methods": [],
    "urllib3.filepost": [],
    "urllib3.fields": [],
    "urllib3.fields.RequestField": [
        "<builtin>.classmethod"
    ],
    "urllib3.util.proxy": [],
    "urllib3.util.ssl_match_hostname": [],
    "urllib3.util.ssl_": [
        "<builtin>.getattr",
        "typing.overload",
        "urllib3.util.ssl_._is_has_never_check_common_name_reliable"
    ],
    "urllib3.util.ssltransport": [
        "typing.TypeVar.__init__"
    ],
    "urllib3.util.ssltransport.SSLTransport": [
        "<builtin>.staticmethod",
        "typing.overload"
    ],
    "urllib3.util.ssl_._is_has_never_check_common_name_reliable": [
        "urllib3.util.ssl_._is_bpo_43522_fixed"
    ],
    "urllib3.util.ssl_._is_bpo_43522_fixed": [],
    "urllib3.util.retry.Retry": [
        "<builtin>.classmethod",
        "<builtin>.frozenset"
    ],
    "urllib3.util.retry.Retry.__init__": [
        "<builtin>.set",
        "<builtin>.frozenset"
    ],
    "urllib3.util.wait": [],
    "urllib3.response.BaseHTTPResponse": [
        "<builtin>.property"
    ],
    "urllib3.response.HTTPResponse": [
        "contextlib.contextmanager",
        "<builtin>.property"
    ],
    "urllib3.http2.probe": [
        "urllib3.http2.probe._HTTP2ProbeCache.__init__"
    ],
    "urllib3.http2.probe._HTTP2ProbeCache.__init__": [],
    "urllib3._version": [],
    "urllib3.connection.HTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.exceptions.NewConnectionError": [
        "<builtin>.property"
    ],
    "urllib3.poolmanager": [
        "logging.getLogger"
    ],
    "urllib3.poolmanager.PoolManager.__init__": [
        "<map>.copy",
        "<builtin>.super"
    ],
    "<map>.copy": [],
    "urllib3.contrib.emscripten": [],
    "urllib3.contrib.emscripten.connection": [
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection.__init__",
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection.__init__"
    ],
    "urllib3.contrib.emscripten.fetch": [
        "urllib3.contrib.emscripten.fetch.is_worker_available",
        "urllib3.contrib.emscripten.fetch.is_in_browser_main_thread",
        "urllib3.contrib.emscripten.fetch._StreamingFetcher.__init__",
        "urllib3.contrib.emscripten.fetch.is_in_node",
        "urllib3.contrib.emscripten.fetch.is_cross_origin_isolated"
    ],
    "importlib.resources": [
        "functools.singledispatch"
    ],
    "urllib3.contrib.emscripten.request": [],
    "urllib3.contrib.emscripten.request.EmscriptenRequest": [
        "dataclasses.field"
    ],
    "urllib3.contrib.emscripten.response": [
        "logging.getLogger"
    ],
    "urllib3.contrib.emscripten.response.EmscriptenHttpResponseWrapper": [
        "contextlib.contextmanager",
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.fetch._ReadStream": [
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.fetch.is_worker_available": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_cross_origin_isolated": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_in_browser_main_thread": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_in_node": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch._StreamingFetcher.__init__": [
        "urllib3.contrib.emscripten.fetch._obj_from_dict"
    ],
    "urllib3.contrib.emscripten.fetch._obj_from_dict": [],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection.__init__": [
        "<builtin>.isinstance"
    ],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection.__init__": [
        "<builtin>.super",
        "ntpath.expanduser",
        "posixpath.expanduser"
    ],
    "posixpath.expanduser": [
        "os._fspath",
        "<builtin>.isinstance",
        "<builtin>.str",
        "posixpath._get_sep",
        "<builtin>.len"
    ],
    "ntpath.expanduser": [
        "ntpath.basename",
        "ntpath._get_bothseps",
        "os._fspath",
        "<builtin>.isinstance",
        "<builtin>.len",
        "ntpath.join",
        "ntpath.dirname"
    ],
    "urllib3.contrib.emscripten.inject_into_urllib3": [],
    "requests.exceptions": [],
    "requests.compat": [
        "requests.compat._resolve_char_detection"
    ],
    "requests.compat._resolve_char_detection": [
        "importlib.import_module"
    ],
    "importlib.import_module": [
        "<builtin>.TypeError"
    ],
    "http.cookiejar": [
        "<builtin>.str",
        "append",
        "re.compile"
    ],
    "http.cookiejar.CookieJar": [
        "re.compile"
    ],
    "http.cookies": [
        "<builtin>.map",
        "<builtin>.range",
        "<builtin>.set",
        "re.compile",
        "<builtin>.ord",
        "re.escape"
    ],
    "http.cookies.Morsel": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "charset_normalizer": [
        "logging.getLogger"
    ],
    "charset_normalizer.api": [
        "logging.Handler.setFormatter",
        "logging.Formatter.__init__",
        "logging.getLogger",
        "logging.StreamHandler.__init__"
    ],
    "charset_normalizer.cd": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "charset_normalizer.constant": [
        "<builtin>.int",
        "<builtin>.filter",
        "<builtin>.list",
        "<builtin>.range",
        "<builtin>.set",
        "re.compile",
        "<builtin>.sorted",
        "<builtin>.len"
    ],
    "charset_normalizer.md": [
        "functools.lru_cache.decorating_function",
        "functools.lru_cache"
    ],
    "charset_normalizer.utils": [
        "functools.lru_cache.decorating_function",
        "<builtin>.len",
        "functools.lru_cache"
    ],
    "charset_normalizer.md.MessDetectorPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManySymbolOrPunctuationPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManyAccentuatedPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.UnprintablePlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousDuplicateAccentPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousRange": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuperWeirdWordPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.CjkInvalidStopPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArchaicUpperLowerPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArabicIsolatedFormPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.models": [],
    "charset_normalizer.models.CharsetMatch": [
        "<builtin>.property"
    ],
    "charset_normalizer.models.CliDetectionResult": [
        "<builtin>.property"
    ],
    "logging.Handler.setFormatter": [],
    "charset_normalizer.legacy": [],
    "charset_normalizer.version": [],
    "requests.check_compatibility": [
        "<builtin>.int",
        "warnings.warn",
        "<builtin>.len"
    ],
    "urllib3.contrib.pyopenssl": [
        "<builtin>.hasattr",
        "logging.getLogger",
        "<builtin>.getattr",
        "<map>.items"
    ],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext": [
        "<builtin>.property"
    ],
    "urllib3.contrib.pyopenssl.inject_into_urllib3": [
        "urllib3.contrib.pyopenssl._validate_dependencies_met"
    ],
    "urllib3.contrib.pyopenssl._validate_dependencies_met": [
        "<builtin>.getattr",
        "<builtin>.ImportError"
    ],
    "cryptography": [],
    "cryptography.__about__": [],
    "requests._check_cryptography": [
        "warnings.warn",
        "<builtin>.list",
        "<builtin>.map"
    ],
    "requests.packages": [
        "<builtin>.list",
        "<builtin>.locals",
        "<builtin>.__import__"
    ],
    "<builtin>.locals": [],
    "requests.utils": [
        "contextlib.contextmanager",
        "<str>.encode",
        "<builtin>.frozenset",
        "re.split",
        "certifi.core.where",
        "urllib3.util.request.make_headers"
    ],
    "requests.certs": [],
    "certifi": [],
    "certifi.core": [],
    "requests.__version__": [],
    "requests._internal_utils": [
        "re.compile"
    ],
    "requests.cookies": [],
    "requests.cookies.MockRequest": [
        "<builtin>.property"
    ],
    "requests.structures": [],
    "certifi.core.where": [
        "posixpath.join",
        "ntpath.join",
        "posixpath.dirname",
        "ntpath.dirname"
    ],
    "urllib3.util.request.make_headers": [
        "base64.b64encode",
        "<builtin>.isinstance"
    ],
    "base64.b64encode": [
        "<builtin>.repr",
        "<builtin>.len"
    ],
    "re.split": [
        "re._compile"
    ],
    "requests.api": [],
    "requests.sessions": [],
    "requests.adapters": [
        "urllib3.util.ssl_.create_urllib3_context",
        "requests.utils.extract_zipped_paths"
    ],
    "requests.auth": [],
    "requests.models": [],
    "encodings.idna": [
        "re.compile"
    ],
    "stringprep": [
        "<builtin>.set",
        "<builtin>.list",
        "<builtin>.range"
    ],
    "requests.hooks": [],
    "requests.status_codes": [
        "requests.status_codes._init",
        "requests.structures.LookupDict.__init__"
    ],
    "requests.structures.LookupDict.__init__": [
        "<builtin>.super"
    ],
    "requests.status_codes._init": [
        "<builtin>.setattr",
        "requests.status_codes._init.doc",
        "<map>.items",
        "<builtin>.sorted"
    ],
    "requests.status_codes._init.doc": [],
    "requests.models.RequestEncodingMixin": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "requests.models.PreparedRequest": [
        "<builtin>.staticmethod"
    ],
    "requests.models.Response": [
        "<builtin>.property"
    ],
    "urllib3.contrib.socks": [
        "warnings.warn"
    ],
    "urllib3.util.ssl_.create_urllib3_context": [
        "<builtin>.ValueError",
        "warnings.warn",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "<builtin>.hasattr"
    ],
    "requests.utils.extract_zipped_paths": [
        "posixpath.join",
        "ntpath.join",
        "ntpath.split",
        "requests.utils.atomic_open",
        "genericpath.exists",
        "zipfile.ZipFile.__init__",
        "tempfile.gettempdir",
        "posixpath.split",
        "zipfile.is_zipfile",
        "zipfile.ZipFile.namelist",
        "zipfile.ZipFile.read"
    ],
    "posixpath.split": [
        "os._fspath",
        "<builtin>.len",
        "posixpath._get_sep"
    ],
    "zipfile.is_zipfile": [
        "<builtin>.hasattr",
        "zipfile._check_zipfile",
        "<builtin>.open"
    ],
    "zipfile._check_zipfile": [
        "zipfile._EndRecData"
    ],
    "zipfile._EndRecData": [
        "<builtin>.max",
        "<builtin>.list",
        "zipfile._EndRecData64",
        "<builtin>.len"
    ],
    "zipfile._EndRecData64": [
        "<builtin>.len"
    ],
    "zipfile.ZipFile.__init__": [
        "<builtin>.ValueError",
        "zipfile.ZipFile._fpclose",
        "os._fspath",
        "<builtin>.isinstance",
        "zipfile.ZipFile._RealGetContents",
        "zipfile._check_compression",
        "zipfile._Tellable.__init__",
        "<builtin>.getattr",
        "threading.RLock"
    ],
    "zipfile._check_compression": [
        "<builtin>.RuntimeError",
        "<builtin>.NotImplementedError"
    ],
    "zipfile.ZipFile._RealGetContents": [
        "zipfile.ZipInfo._decodeExtra",
        "<builtin>.NotImplementedError",
        "<builtin>.len",
        "zipfile._EndRecData",
        "zipfile.ZipInfo.__init__",
        "<builtin>.print"
    ],
    "zipfile.ZipInfo.__init__": [
        "<builtin>.chr",
        "<builtin>.ValueError",
        "<str>.find",
        "<str>.replace"
    ],
    "zipfile.ZipInfo._decodeExtra": [
        "<builtin>.len"
    ],
    "zipfile._Tellable.__init__": [],
    "zipfile.ZipFile._fpclose": [
        "zipfile._Tellable.close"
    ],
    "zipfile._Tellable.close": [],
    "zipfile.ZipFile.namelist": [],
    "tempfile.gettempdir": [
        "tempfile._gettempdir"
    ],
    "tempfile._gettempdir": [
        "tempfile._get_default_tempdir"
    ],
    "tempfile._get_default_tempdir": [
        "tempfile._candidate_tempdir_list",
        "posixpath.join",
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.range",
        "genericpath.isdir",
        "<builtin>.FileNotFoundError",
        "<builtin>.next",
        "ntpath.join"
    ],
    "tempfile._candidate_tempdir_list": [
        "extend",
        "append",
        "os.getenv"
    ],
    "os.getenv": [],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "requests.utils.atomic_open": [
        "os.fdopen",
        "tempfile.mkstemp",
        "posixpath.dirname",
        "ntpath.dirname"
    ],
    "tempfile.mkstemp": [
        "tempfile._mkstemp_inner",
        "tempfile._sanitize_params"
    ],
    "tempfile._sanitize_params": [
        "tempfile._infer_return_type",
        "tempfile.gettempdirb",
        "tempfile.gettempdir"
    ],
    "tempfile._infer_return_type": [
        "os._fspath",
        "<builtin>.isinstance",
        "<builtin>.TypeError"
    ],
    "tempfile.gettempdirb": [
        "tempfile._gettempdir"
    ],
    "tempfile._mkstemp_inner": [
        "tempfile._get_candidate_names",
        "posixpath.join",
        "posixpath.abspath",
        "ntpath.abspath",
        "<builtin>.map",
        "<builtin>.range",
        "<builtin>.FileExistsError",
        "genericpath.isdir",
        "<builtin>.next",
        "ntpath.join"
    ],
    "tempfile._get_candidate_names": [],
    "<builtin>.FileExistsError": [],
    "os.fdopen": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "zipfile.ZipFile.read": [
        "zipfile.ZipFile.open"
    ],
    "zipfile.ZipFile.open": [
        "<builtin>.ValueError",
        "<builtin>.type",
        "zipfile.ZipFile.getinfo",
        "<builtin>.isinstance",
        "zipfile.ZipFile._open_to_write",
        "<builtin>.NotImplementedError",
        "zipfile._SharedFile.close",
        "zipfile.ZipExtFile.__init__",
        "<builtin>.TypeError",
        "zipfile.ZipInfo.__init__",
        "<builtin>.len",
        "zipfile._SharedFile.__init__",
        "<builtin>.RuntimeError",
        "zipfile._SharedFile.read"
    ],
    "zipfile.ZipFile.getinfo": [
        "<builtin>.KeyError",
        "<map>.get"
    ],
    "<str>.find": [],
    "zipfile.ZipFile._open_to_write": [
        "<builtin>.ValueError",
        "zipfile._ZipWriteFile.__init__",
        "zipfile.ZipFile._writecheck",
        "zipfile.ZipInfo.FileHeader"
    ],
    "zipfile.ZipFile._writecheck": [
        "zipfile._check_compression",
        "warnings.warn",
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "zipfile.ZipInfo.FileHeader": [
        "<builtin>.max",
        "zipfile.ZipInfo._encodeFilenameFlags",
        "<builtin>.len"
    ],
    "zipfile.ZipInfo._encodeFilenameFlags": [],
    "zipfile._ZipWriteFile.__init__": [
        "zipfile._get_compressor"
    ],
    "zipfile._get_compressor": [
        "zipfile.LZMACompressor.__init__"
    ],
    "zipfile.LZMACompressor.__init__": [],
    "zipfile._SharedFile.__init__": [],
    "zipfile._SharedFile.read": [],
    "zipfile.ZipExtFile.__init__": [
        "zipfile.ZipExtFile._init_decrypter",
        "zipfile._get_decompressor",
        "<builtin>.hasattr",
        "zipfile._SharedFile.tell",
        "<builtin>.RuntimeError"
    ],
    "zipfile._get_decompressor": [
        "zipfile._check_compression",
        "zipfile.LZMADecompressor.__init__",
        "<map>.get",
        "<builtin>.NotImplementedError"
    ],
    "zipfile.LZMADecompressor.__init__": [],
    "zipfile._SharedFile.tell": [],
    "zipfile.ZipExtFile._init_decrypter": [
        "zipfile._ZipDecrypter"
    ],
    "zipfile._ZipDecrypter": [
        "<builtin>.list",
        "zipfile._ZipDecrypter.update_keys",
        "<builtin>.map",
        "<builtin>.range"
    ],
    "zipfile._ZipDecrypter.update_keys": [
        "zipfile._ZipDecrypter.crc32"
    ],
    "zipfile._ZipDecrypter.crc32": [],
    "zipfile._SharedFile.close": [
        "zipfile.ZipFile._fpclose"
    ],
    "authlib.oauth1": [],
    "authlib.oauth1.rfc5849": [],
    "authlib.oauth1.rfc5849.wrapper": [],
    "authlib.oauth1.rfc5849.signature": [],
    "authlib.oauth1.rfc5849.util": [],
    "authlib.oauth1.rfc5849.errors": [],
    "authlib.oauth1.rfc5849.errors.InsecureTransportError": [
        "<builtin>.classmethod"
    ],
    "authlib.oauth1.rfc5849.wrapper.OAuth1Request": [
        "<builtin>.property"
    ],
    "authlib.oauth1.rfc5849.client_auth": [],
    "authlib.oauth1.rfc5849.parameters": [],
    "authlib.oauth1.rfc5849.client_auth.ClientAuth": [
        "<builtin>.classmethod"
    ],
    "authlib.oauth1.rfc5849.models": [],
    "authlib.oauth1.rfc5849.authorization_server": [],
    "authlib.oauth1.rfc5849.base_server": [],
    "authlib.oauth1.rfc5849.base_server.BaseServer": [
        "<builtin>.classmethod"
    ],
    "authlib.oauth1.rfc5849.resource_protector": [],
    "authlib.oauth1.client": [],
    "authlib.oauth1.client.OAuth1Client": [
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "authlib.integrations.requests_client.utils": [],
    "authlib.integrations.requests_client.oauth1_session.OAuth1Session": [
        "<builtin>.staticmethod"
    ],
    "authlib.integrations.requests_client.oauth2_session": [],
    "authlib.integrations.requests_client.assertion_session": [],
    "authlib.oauth2.rfc7521": [],
    "authlib.oauth2.rfc7521.client": [],
    "authlib.oauth2.rfc7521.client.AssertionClient": [
        "<builtin>.property"
    ],
    "authlib.oauth2.rfc7523": [],
    "authlib.oauth2.rfc7523.jwt_bearer": [
        "logging.getLogger"
    ],
    "authlib.oauth2.rfc7523.assertion": [],
    "authlib.oauth2.rfc7523.jwt_bearer.JWTBearerGrant": [
        "<builtin>.staticmethod"
    ],
    "authlib.oauth2.rfc7523.client": [
        "logging.getLogger"
    ],
    "authlib.oauth2.rfc7523.auth": [],
    "authlib.oauth2.rfc7523.token": [],
    "authlib.oauth2.rfc7523.token.JWTBearerTokenGenerator": [
        "<builtin>.staticmethod"
    ],
    "authlib.oauth2.rfc7523.validator": [
        "logging.getLogger"
    ],
    "authlib.integrations.flask_client.apps.FlaskAppMixin": [
        "<builtin>.property"
    ],
    "flask.app.Flask.__init__": [
        "flask.sansio.app.App.add_url_rule",
        "<builtin>.super",
        "<builtin>.bool"
    ],
    "flask.sansio.app.App.add_url_rule": [
        "<builtin>.AssertionError",
        "<builtin>.isinstance",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "werkzeug.routing.rules.Rule.__init__",
        "flask.sansio.scaffold._endpoint_from_view_func"
    ],
    "flask.sansio.scaffold._endpoint_from_view_func": [],
    "werkzeug.routing.rules.Rule.__init__": [
        "<builtin>.ValueError",
        "<str>.endswith",
        "<builtin>.isinstance",
        "<builtin>.map",
        "<builtin>.set",
        "<builtin>.TypeError",
        "<str>.startswith"
    ],
    "authlib.integrations.flask_client.OAuth.__init__": [
        "authlib.integrations.flask_client.OAuth.init_app",
        "<builtin>.super"
    ],
    "authlib.integrations.flask_client.OAuth.init_app": [
        "<builtin>.getattr"
    ],
    "authlib.integrations.flask_client.OAuth.register": [
        "authlib.integrations.flask_client.OAuth.create_client",
        "werkzeug.local.LocalProxy.__init__"
    ],
    "authlib.integrations.flask_client.OAuth.create_client": [
        "<builtin>.super",
        "<builtin>.RuntimeError"
    ],
    "flask.sansio.scaffold.Scaffold.route": [],
    "flask.sansio.scaffold.Scaffold.route.decorator": [
        "flask.sansio.scaffold.Scaffold.add_url_rule"
    ],
    "flask.sansio.scaffold.Scaffold.add_url_rule": [],
    "handler.login": [
        "flask.helpers.url_for"
    ],
    "flask.helpers.url_for": []
}