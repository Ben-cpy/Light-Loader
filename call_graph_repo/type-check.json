{
    "handler": [
        "<builtin>.print",
        "handler.handle"
    ],
    "cerberus": [
        "importlib.metadata.version",
        "importlib_metadata.version"
    ],
    "__future__": [
        "__future__._Feature.__init__"
    ],
    "__future__._Feature.__init__": [],
    "cerberus.platform": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "collections.abc": [],
    "collections": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "<builtin>.frozenset": [],
    "operator": [],
    "reprlib": [
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr.__init__": [],
    "collections.OrderedDict": [
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr",
        "<builtin>.object",
        "<builtin>.classmethod"
    ],
    "<builtin>.object": [],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.getattr",
        "<builtin>.set"
    ],
    "<builtin>.set": [],
    "<builtin>.getattr": [],
    "<builtin>.classmethod": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "<builtin>.property": [],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "importlib.metadata": [
        "collections.namedtuple"
    ],
    "os": [
        "os._add",
        "append",
        "extend",
        "<builtin>.type",
        "os._createenviron",
        "os._fscodec",
        "os._Environ.__init__",
        "<builtin>.ImportError",
        "<builtin>.set",
        "os._exists",
        "<builtin>.globals"
    ],
    "abc": [],
    "_py_abc": [],
    "_weakrefset": [],
    "types": [
        "types._c",
        "types._cell_factory",
        "<builtin>.type",
        "types._g",
        "<builtin>.object",
        "types._ag",
        "<builtin>.globals"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.globals": [],
    "_weakrefset.WeakSet": [
        "<builtin>.classmethod"
    ],
    "stat": [],
    "<builtin>.ImportError": [],
    "append": [],
    "ntpath": [
        "<builtin>.hasattr"
    ],
    "genericpath": [],
    "<builtin>.hasattr": [],
    "extend": [],
    "posixpath": [],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._add": [],
    "os._createenviron": [
        "os._Environ.__init__",
        "os._createenviron.encodekey"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.TypeError": [],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os.PathLike": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "re": [
        "functools.lru_cache",
        "<builtin>.type",
        "<builtin>.chr",
        "functools.lru_cache.decorating_function",
        "sre_compile.compile",
        "copyreg.pickle",
        "<builtin>.globals"
    ],
    "enum": [
        "<builtin>.object"
    ],
    "enum.EnumMeta": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "enum.Enum": [
        "types.DynamicClassAttribute.__init__",
        "<builtin>.classmethod"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "<builtin>.bool": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "sre_compile": [
        "<builtin>.tuple"
    ],
    "sre_parse": [
        "<builtin>.frozenset"
    ],
    "sre_constants": [
        "sre_constants._makecodes"
    ],
    "sre_constants._makecodes": [
        "<str>.split",
        "<builtin>.enumerate",
        "<str>.strip",
        "<builtin>.globals"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "<builtin>.enumerate": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.tuple": [],
    "functools": [
        "<builtin>.object",
        "collections.namedtuple"
    ],
    "functools.partial": [
        "reprlib.recursive_repr.decorating_function",
        "reprlib.recursive_repr"
    ],
    "functools.partialmethod": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "collections.namedtuple": [
        "<builtin>.ValueError",
        "<builtin>.type",
        "<builtin>.map",
        "<builtin>.list",
        "<builtin>.reversed",
        "<builtin>.zip",
        "<str>.split",
        "<builtin>.classmethod",
        "<str>.replace",
        "<builtin>.isinstance",
        "<str>.join",
        "<builtin>.str",
        "<builtin>.len",
        "collections.<lambda1>",
        "<builtin>.set",
        "<builtin>.eval",
        "<builtin>.dict",
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "<builtin>.TypeError"
    ],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.ValueError": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<str>.join": [],
    "<builtin>.eval": [],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "operator.itemgetter.__init__": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [
        "<builtin>.classmethod"
    ],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "sre_compile.isstring",
        "sre_parse.parse",
        "<map>.items",
        "sre_compile.dis",
        "<builtin>.print",
        "sre_compile._code",
        "<builtin>.tuple"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_constants.error.__init__",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.Tokenizer.seek",
        "sre_parse.fix_flags",
        "sre_parse._parse_sub",
        "sre_parse.Tokenizer.error",
        "sre_parse.SubPattern.dump",
        "sre_parse.State.__init__"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.str",
        "sre_parse.Tokenizer.__next",
        "<builtin>.isinstance"
    ],
    "sre_parse.Tokenizer.__next": [
        "sre_parse.Tokenizer.error",
        "<builtin>.len"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.tell",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "",
        "append",
        "extend",
        "sre_parse.Tokenizer.tell",
        "sre_parse.SubPattern.append",
        "<builtin>.len",
        "sre_parse.Tokenizer.match",
        "sre_parse.SubPattern.__init__"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.SubPattern.append": [
        "append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "sre_constants.error.__init__": [
        "<str>.count",
        "<builtin>.super",
        "<str>.rfind",
        "<builtin>.isinstance"
    ],
    "<str>.count": [],
    "<str>.rfind": [],
    "<builtin>.super": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.str",
        "<builtin>.print",
        "<builtin>.enumerate",
        "<builtin>.isinstance"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "sre_compile._compile",
        "append",
        "sre_compile._compile_info"
    ],
    "sre_compile._compile_info": [
        "",
        "sre_parse.SubPattern.getwidth",
        "extend",
        "sre_compile._get_literal_prefix",
        "<builtin>.len",
        "sre_compile._optimize_charset",
        "sre_compile._compile_charset",
        "sre_compile._get_charset_prefix"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "",
        "extend",
        "sre_compile._get_literal_prefix",
        "sre_compile._combine_flags",
        "<builtin>.len",
        "sre_compile._get_iscased"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "",
        "<builtin>.any",
        "sre_compile._combine_flags",
        "<builtin>.map",
        "<builtin>.range",
        "sre_compile._get_iscased"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "append",
        "<builtin>.any",
        "<builtin>.map",
        "<builtin>.range",
        "<builtin>.len",
        "sre_compile._bytes_to_codes",
        "sre_compile._mk_bitmap",
        "<builtin>.bytearray",
        "<builtin>.bytes"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.len",
        "<builtin>.memoryview"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "",
        "sre_constants.error.__init__",
        "extend"
    ],
    "sre_compile._compile": [
        "",
        "sre_constants.error.__init__",
        "sre_compile._simple",
        "sre_compile._combine_flags",
        "sre_compile._optimize_charset",
        "sre_compile._compile_charset",
        "sre_compile._compile"
    ],
    "sre_compile._simple": [
        "sre_compile._simple",
        "<builtin>.len"
    ],
    "sre_compile.dis": [
        "sre_compile.dis.dis_",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.set"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.bin",
        "<builtin>.ValueError",
        "sre_compile._hex_code",
        "sre_compile.dis.dis_.print_2",
        "<builtin>.map",
        "<builtin>.range",
        "<builtin>.chr",
        "<builtin>.str",
        "sre_compile.dis.dis_.print_",
        "<builtin>.list",
        "sre_compile.dis.dis_"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "<builtin>.callable",
        "<builtin>.isinstance",
        "functools.update_wrapper",
        "<builtin>.TypeError",
        "functools._lru_cache_wrapper"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object"
    ],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "copyreg": [
        "copyreg.pickle",
        "<builtin>.type"
    ],
    "copyreg.pickle": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "copyreg.constructor"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "csv": [],
    "io": [],
    "csv.DictReader": [
        "<builtin>.property"
    ],
    "email": [],
    "pathlib": [
        "<builtin>.hasattr",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "fnmatch": [
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "warnings": [
        "warnings.simplefilter",
        "<builtin>.hasattr",
        "warnings._processoptions",
        "warnings.filterwarnings"
    ],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "warnings._getcategory",
        "<builtin>.len",
        "<builtin>.int",
        "warnings._getaction",
        "re.escape",
        "warnings.filterwarnings"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.__import__",
        "<builtin>.issubclass",
        "<builtin>.getattr"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<str>.encode",
        "<builtin>.str",
        "<str>.translate",
        "<builtin>.isinstance"
    ],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "<builtin>.issubclass",
        "re.compile",
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.next",
        "<builtin>.ValueError",
        "sre_compile.isstring",
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.len",
        "sre_compile.compile",
        "<builtin>.iter",
        "<builtin>.TypeError"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "warnings._add_filter": [
        "insert",
        "append",
        "warnings._filters_mutated",
        "remove"
    ],
    "remove": [],
    "insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "urllib.parse": [
        "urllib.parse._fix_result_transcoding",
        "<builtin>.frozenset",
        "re.compile",
        "<builtin>.bytes",
        "collections.namedtuple"
    ],
    "urllib.parse._NetlocResultMixinBase": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "urllib.parse._NetlocResultMixinStr": [
        "<builtin>.property"
    ],
    "urllib.parse._NetlocResultMixinBytes": [
        "<builtin>.property"
    ],
    "urllib.parse._fix_result_transcoding": [],
    "pathlib._WindowsFlavour": [
        "<builtin>.set"
    ],
    "pathlib._NormalAccessor": [
        "<builtin>.hasattr",
        "<builtin>.staticmethod"
    ],
    "pathlib.PurePath": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "operator.attrgetter.__init__"
    ],
    "operator.attrgetter.__init__": [
        "<builtin>.isinstance",
        "<str>.split",
        "<builtin>.map",
        "<builtin>.tuple",
        "<builtin>.TypeError"
    ],
    "pathlib.Path": [
        "<builtin>.classmethod"
    ],
    "zipfile": [],
    "importlib.util": [
        "contextlib.contextmanager"
    ],
    "contextlib": [],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "importlib.util.LazyLoader": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "shutil": [
        "<builtin>.hasattr",
        "append",
        "collections.namedtuple"
    ],
    "bz2": [],
    "_compression": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "struct": [],
    "threading": [
        "_weakrefset.WeakSet.__init__",
        "append",
        "threading._MainThread.__init__",
        "threading.RLock",
        "<builtin>.set",
        "<builtin>.hasattr",
        "collections.namedtuple"
    ],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.RLock": [
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [],
    "_weakrefset.WeakSet.__init__": [
        "_weakrefset.WeakSet.update",
        "<builtin>.set"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet._commit_removals",
        "_weakrefset.WeakSet.add"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [],
    "linecache": [],
    "tokenize": [
        "tokenize.group",
        "functools.lru_cache",
        "tokenize._all_string_prefixes",
        "<builtin>.sorted",
        "<builtin>.any",
        "<builtin>.map",
        "re.compile",
        "<builtin>.set",
        "tokenize.maybe",
        "collections.namedtuple"
    ],
    "codecs": [
        "<builtin>.SystemError"
    ],
    "<builtin>.SystemError": [],
    "encodings": [],
    "token": [
        "extend",
        "<builtin>.globals",
        "<builtin>.isinstance"
    ],
    "<str>.replace": [],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading._MainThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Event.set",
        "threading.Thread._set_ident",
        "threading.Thread.__init__",
        "threading.Thread._set_tstate_lock"
    ],
    "threading.Thread.__init__": [
        "_weakrefset.WeakSet.add",
        "threading.current_thread",
        "threading._newname",
        "<builtin>.str",
        "threading.Event.__init__",
        "threading._make_invoke_excepthook"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_native_id",
        "threading.Thread._set_ident",
        "threading.Thread.__init__",
        "threading._newname"
    ],
    "threading.Thread._set_ident": [],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "contextlib.contextmanager"
    ],
    "weakref": [],
    "weakref.finalize": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "zipfile.ZipInfo": [
        "<builtin>.classmethod"
    ],
    "zipfile._ZipWriteFile": [
        "<builtin>.property"
    ],
    "zipfile.ZipFile": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "zipfile.CompleteDirs": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "zipfile.Path": [
        "<builtin>.property"
    ],
    "textwrap": [
        "re.compile"
    ],
    "textwrap.TextWrapper": [
        "re.escape",
        "re.compile",
        "<builtin>.ord"
    ],
    "<builtin>.ord": [],
    "importlib.metadata._adapters": [],
    "email.message": [
        "re.compile"
    ],
    "uu": [],
    "quopri": [],
    "email.utils": [
        "re.compile"
    ],
    "random": [
        "<builtin>.hasattr",
        "random.Random.__init__"
    ],
    "bisect": [],
    "hashlib": [
        "logging.exception",
        "<builtin>.range",
        "hashlib.__get_builtin_constructor",
        "<builtin>.bytes",
        "<builtin>.set",
        "<builtin>.globals"
    ],
    "hashlib.__get_builtin_constructor": [
        "<map>.get",
        "<builtin>.ValueError"
    ],
    "<map>.get": [],
    "logging": [
        "_weakrefset.WeakSet.__init__",
        "logging.RootLogger.__init__",
        "posixpath.normcase",
        "logging.Manager.__init__",
        "threading.RLock",
        "logging._StderrHandler.__init__",
        "<builtin>.hasattr",
        "weakref.WeakValueDictionary.__init__",
        "ntpath.normcase",
        "logging.Formatter.__init__"
    ],
    "string": [
        "string.Template.__init_subclass__"
    ],
    "string.Template.__init_subclass__": [
        "re.escape",
        "<builtin>.super",
        "re.compile"
    ],
    "<str>.translate": [],
    "<str>.encode": [],
    "ntpath.normcase": [
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "os._fspath": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<str>.format",
        "<builtin>.hasattr",
        "<builtin>.TypeError"
    ],
    "<str>.format": [],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "logging.PercentStyle": [
        "re.compile"
    ],
    "logging.StrFormatStyle": [
        "re.compile"
    ],
    "logging.Formatter.__init__": [
        "logging.StrFormatStyle.validate",
        "<builtin>.ValueError",
        "<map>.keys",
        "logging.PercentStyle.validate",
        "logging.PercentStyle.__init__",
        "logging.StringTemplateStyle.validate",
        "logging.StringTemplateStyle.__init__"
    ],
    "<map>.keys": [],
    "logging.PercentStyle.__init__": [],
    "logging.StringTemplateStyle.__init__": [
        "<builtin>.super",
        "string.Template.__init__"
    ],
    "string.Template.__init__": [],
    "weakref.WeakValueDictionary.__init__": [
        "weakref.WeakValueDictionary.update",
        "<builtin>.set"
    ],
    "weakref.WeakValueDictionary.update": [
        "<builtin>.hasattr",
        "<builtin>.dict",
        "weakref.KeyedRef.__init__",
        "weakref.WeakValueDictionary._commit_removals"
    ],
    "weakref.WeakValueDictionary._commit_removals": [],
    "weakref.KeyedRef.__init__": [
        "<builtin>.super"
    ],
    "logging.Handler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler": [
        "<builtin>.property"
    ],
    "logging._StderrHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.Handler.__init__": [
        "logging.Handler.createLock",
        "logging._checkLevel",
        "logging._addHandlerRef",
        "logging.Filterer.__init__"
    ],
    "logging.Filterer.__init__": [],
    "logging._checkLevel": [
        "<builtin>.ValueError",
        "<builtin>.str",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "logging._addHandlerRef": [
        "logging._acquireLock",
        "append"
    ],
    "logging._acquireLock": [],
    "logging.Handler.createLock": [
        "threading.RLock",
        "logging._register_at_fork_reinit_lock"
    ],
    "logging._register_at_fork_reinit_lock": [
        "logging._acquireLock",
        "_weakrefset.WeakSet.add"
    ],
    "logging.Manager": [
        "<builtin>.property"
    ],
    "logging.LoggerAdapter": [
        "<builtin>.property"
    ],
    "logging.RootLogger.__init__": [
        "logging.Logger.__init__"
    ],
    "logging.Logger.__init__": [
        "logging._checkLevel",
        "logging.Filterer.__init__"
    ],
    "logging.Manager.__init__": [],
    "logging.exception": [
        "logging.error"
    ],
    "logging.error": [
        "logging.basicConfig",
        "<builtin>.len",
        "logging.Logger.error"
    ],
    "logging.basicConfig": [
        "logging._acquireLock",
        "<builtin>.ValueError",
        "<map>.keys",
        "logging.Logger.setLevel",
        "<builtin>.len",
        "logging.StreamHandler.__init__",
        "logging.Logger.removeHandler",
        "logging.Logger.addHandler",
        "logging.Formatter.__init__",
        "logging.FileHandler.__init__"
    ],
    "logging.Logger.removeHandler": [
        "logging._acquireLock",
        "remove"
    ],
    "logging.StreamHandler.__init__": [
        "logging.Handler.__init__"
    ],
    "logging.FileHandler.__init__": [
        "logging.Handler.__init__",
        "posixpath.abspath",
        "logging.FileHandler._open",
        "logging.StreamHandler.__init__",
        "ntpath.abspath",
        "os._fspath"
    ],
    "ntpath.abspath": [],
    "posixpath.abspath": [
        "posixpath.normpath",
        "<builtin>.isinstance",
        "posixpath.join",
        "posixpath.isabs",
        "os._fspath"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "posixpath._get_sep"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath.join": [
        "os._fspath",
        "posixpath._get_sep",
        "<builtin>.map",
        "genericpath._check_arg_types"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "posixpath.normpath": [
        "os._fspath",
        "pop",
        "append",
        "<builtin>.isinstance"
    ],
    "pop": [],
    "logging.FileHandler._open": [],
    "logging.PercentStyle.validate": [
        "<builtin>.ValueError"
    ],
    "logging.StrFormatStyle.validate": [
        "<builtin>.ValueError",
        "string.Formatter.parse",
        "<builtin>.set"
    ],
    "string.Formatter.parse": [],
    "logging.StringTemplateStyle.validate": [
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "logging.Logger.addHandler": [
        "logging._acquireLock",
        "append"
    ],
    "logging.Logger.setLevel": [
        "logging._checkLevel"
    ],
    "logging.Logger.error": [
        "logging.Logger._log",
        "logging.Logger.isEnabledFor"
    ],
    "logging.Logger.isEnabledFor": [
        "logging.Logger.getEffectiveLevel",
        "logging._acquireLock"
    ],
    "logging.Logger.getEffectiveLevel": [],
    "logging.Logger._log": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "logging.Logger.handle",
        "logging.Logger.findCaller",
        "logging.Logger.makeRecord"
    ],
    "logging.Logger.findCaller": [
        "logging.currentframe",
        "posixpath.normcase",
        "<builtin>.hasattr",
        "ntpath.normcase",
        "traceback.print_stack"
    ],
    "logging.currentframe": [],
    "traceback.print_stack": [
        "traceback.extract_stack",
        "traceback.print_list"
    ],
    "traceback.extract_stack": [
        "traceback.StackSummary.extract",
        "traceback.walk_stack"
    ],
    "traceback.walk_stack": [],
    "traceback.StackSummary.extract": [
        "traceback.FrameSummary.__init__",
        "linecache.checkcache",
        "linecache.lazycache",
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "linecache.lazycache": [
        "<builtin>.getattr",
        "<str>.startswith",
        "<builtin>.len",
        "<str>.endswith"
    ],
    "traceback.FrameSummary.__init__": [
        "<builtin>.repr"
    ],
    "<builtin>.repr": [],
    "linecache.checkcache": [
        "<map>.keys",
        "<builtin>.len",
        "<builtin>.list",
        "<map>.pop"
    ],
    "<map>.pop": [],
    "traceback.print_list": [
        "traceback.StackSummary.from_list",
        "<builtin>.print",
        "traceback.StackSummary.format"
    ],
    "traceback.StackSummary.from_list": [
        "traceback.FrameSummary.__init__",
        "<builtin>.isinstance"
    ],
    "traceback.StackSummary.format": [
        "append",
        "<builtin>.sorted"
    ],
    "logging.Logger.makeRecord": [
        "logging.LogRecord.__init__",
        "<builtin>.KeyError"
    ],
    "logging.LogRecord.__init__": [
        "posixpath.splitext",
        "<builtin>.isinstance",
        "threading.current_thread",
        "ntpath.basename",
        "<builtin>.len",
        "posixpath.basename",
        "logging.getLevelName",
        "<builtin>.int",
        "<builtin>.hasattr",
        "ntpath.splitext"
    ],
    "logging.getLevelName": [
        "<map>.get"
    ],
    "ntpath.basename": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "ntpath.splitdrive",
        "os._fspath",
        "<builtin>.len",
        "ntpath._get_bothseps"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.splitdrive": [
        "os._fspath",
        "<builtin>.len",
        "<builtin>.isinstance"
    ],
    "posixpath.basename": [
        "os._fspath",
        "posixpath._get_sep"
    ],
    "ntpath.splitext": [
        "os._fspath",
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "genericpath._splitext": [
        "<builtin>.max"
    ],
    "posixpath.splitext": [
        "os._fspath",
        "genericpath._splitext",
        "<builtin>.isinstance"
    ],
    "<builtin>.KeyError": [],
    "logging.Logger.handle": [
        "logging.Filterer.filter",
        "logging.Logger.callHandlers"
    ],
    "logging.Filterer.filter": [
        "<builtin>.hasattr"
    ],
    "logging.Logger.callHandlers": [
        "logging.Handler.handle"
    ],
    "logging.Handler.handle": [
        "logging.Handler.acquire",
        "logging.Filterer.filter",
        "logging.Handler.emit"
    ],
    "logging.Handler.acquire": [],
    "logging.Handler.emit": [
        "<builtin>.NotImplementedError"
    ],
    "<builtin>.NotImplementedError": [],
    "random.Random.__init__": [
        "random.Random.seed"
    ],
    "random.Random.seed": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.super",
        "warnings.warn",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.ord"
    ],
    "warnings.warn": [
        "<builtin>.type",
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "<builtin>.range",
        "warnings.warn_explicit",
        "warnings._next_external_frame",
        "<builtin>.TypeError",
        "warnings._is_internal_frame"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "warnings._showwarnmsg",
        "linecache.getlines",
        "<builtin>.isinstance",
        "<builtin>.issubclass",
        "<builtin>.str",
        "<str>.lower",
        "<builtin>.RuntimeError",
        "<builtin>.int",
        "<map>.get",
        "warnings.WarningMessage.__init__",
        "<map>.clear"
    ],
    "<str>.lower": [],
    "<map>.clear": [],
    "linecache.getlines": [
        "linecache.updatecache",
        "linecache.clearcache",
        "<builtin>.len"
    ],
    "linecache.updatecache": [
        "<map>.pop",
        "<str>.startswith",
        "linecache.lazycache",
        "<builtin>.len",
        "ntpath.isabs",
        "tokenize.open",
        "posixpath.isabs",
        "ntpath.join",
        "posixpath.join",
        "<str>.endswith"
    ],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "ntpath.isabs": [
        "<builtin>.isinstance",
        "<builtin>.len",
        "ntpath.splitdrive",
        "ntpath._get_bothseps",
        "os._fspath"
    ],
    "ntpath.join": [
        "<builtin>.isinstance",
        "<builtin>.map",
        "ntpath.splitdrive",
        "genericpath._check_arg_types",
        "os._fspath"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding"
    ],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.read_or_stop",
        "tokenize.detect_encoding.find_cookie"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "tokenize._get_normal_name",
        "<builtin>.SyntaxError"
    ],
    "<builtin>.SyntaxError": [],
    "tokenize._get_normal_name": [],
    "linecache.clearcache": [
        "<map>.clear"
    ],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "linecache.getline"
    ],
    "linecache.getline": [
        "linecache.getlines",
        "<builtin>.len"
    ],
    "tracemalloc": [],
    "pickle": [
        "append",
        "extend"
    ],
    "_compat_pickle": [
        "<map>.items",
        "<builtin>.len",
        "<builtin>.dict",
        "<map>.update"
    ],
    "<map>.update": [],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [
        "<builtin>.property"
    ],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "socket": [
        "append",
        "extend",
        "<builtin>.object",
        "<builtin>.hasattr",
        "<builtin>.getattr"
    ],
    "selectors": [
        "<builtin>.hasattr",
        "collections.namedtuple",
        "selectors._can_use"
    ],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._can_use": [
        "<builtin>.getattr"
    ],
    "socket.socket": [
        "<builtin>.hasattr",
        "<builtin>.property"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "datetime": [
        "datetime._days_before_year",
        "append",
        "datetime.timezone._create"
    ],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.IsoCalendarDate": [
        "<builtin>.property"
    ],
    "datetime.time": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.datetime": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "datetime.timezone": [
        "<builtin>.object",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "datetime.timezone._create": [],
    "email._parseaddr": [],
    "calendar": [
        "calendar._localized_month.__init__",
        "<builtin>.range",
        "datetime.date.toordinal",
        "calendar._localized_day.__init__"
    ],
    "locale": [
        "functools.wraps",
        "<map>.items",
        "re.compile",
        "<map>.setdefault",
        "<builtin>.globals",
        "<builtin>.sorted"
    ],
    "encodings.aliases": [],
    "<map>.setdefault": [],
    "calendar._localized_month": [
        "<builtin>.range"
    ],
    "calendar._localized_day": [
        "<builtin>.range"
    ],
    "calendar._localized_day.__init__": [],
    "calendar._localized_month.__init__": [],
    "calendar.Calendar": [
        "<builtin>.property"
    ],
    "datetime.date.toordinal": [
        "datetime._ymd2ord"
    ],
    "datetime._ymd2ord": [
        "datetime._days_in_month",
        "datetime._days_before_year",
        "datetime._days_before_month"
    ],
    "datetime._days_in_month": [
        "datetime._is_leap"
    ],
    "datetime._is_leap": [],
    "datetime._days_before_month": [
        "datetime._is_leap"
    ],
    "email.charset": [],
    "email.base64mime": [],
    "base64": [],
    "email.quoprimime": [
        "<str>.encode",
        "<builtin>.chr",
        "<builtin>.ord",
        "<builtin>.range"
    ],
    "email.errors": [],
    "email.encoders": [],
    "email._policybase": [],
    "email.header": [
        "email.charset.Charset.__init__",
        "re.compile"
    ],
    "email.charset.Charset.__init__": [
        "<str>.encode",
        "<map>.get",
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "email._policybase.Policy": [
        "abc.abstractmethod"
    ],
    "email._encoded_words": [
        "re.compile",
        "<builtin>.ord"
    ],
    "email._encoded_words._QByteMap": [
        "<str>.encode"
    ],
    "email.iterators": [],
    "importlib.metadata._text": [],
    "importlib.metadata._adapters.Message": [
        "<builtin>.map",
        "<builtin>.property",
        "<builtin>.set"
    ],
    "importlib.metadata._meta": [
        "typing.TypeVar.__init__"
    ],
    "typing": [
        "typing.TypeVar.__init__",
        "typing._tp_cache.decorator",
        "<builtin>.frozenset",
        "typing._SpecialGenericAlias.__init__",
        "typing._SpecialForm.__init__",
        "typing._tp_cache"
    ],
    "typing._SpecialForm": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [
        "typing._tp_cache.decorator"
    ],
    "typing._tp_cache.decorator": [
        "append",
        "functools.wraps",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "typing._SpecialForm.__init__": [],
    "typing.ParamSpec": [
        "<builtin>.property"
    ],
    "typing._GenericAlias": [
        "typing._tp_cache"
    ],
    "typing._SpecialGenericAlias": [
        "typing._tp_cache"
    ],
    "typing._CallableType": [
        "typing._tp_cache"
    ],
    "typing._TupleType": [
        "typing._tp_cache"
    ],
    "typing.Generic": [
        "typing._tp_cache"
    ],
    "typing.Annotated": [
        "typing._tp_cache"
    ],
    "typing.TypeVar.__init__": [
        "<builtin>.super",
        "<builtin>.len",
        "typing._type_check",
        "<builtin>.tuple",
        "<builtin>.TypeError"
    ],
    "typing._type_check": [
        "<builtin>.callable",
        "typing._type_convert",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "typing._type_convert": [
        "<builtin>.isinstance",
        "typing.ForwardRef.__init__",
        "<builtin>.type"
    ],
    "typing.ForwardRef.__init__": [
        "<builtin>.compile",
        "<builtin>.SyntaxError",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "<builtin>.compile": [],
    "typing._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "typing.SupportsInt": [
        "abc.abstractmethod"
    ],
    "typing.SupportsFloat": [
        "abc.abstractmethod"
    ],
    "typing.SupportsComplex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsBytes": [
        "abc.abstractmethod"
    ],
    "typing.SupportsIndex": [
        "abc.abstractmethod"
    ],
    "typing.SupportsAbs": [
        "abc.abstractmethod"
    ],
    "typing.SupportsRound": [
        "abc.abstractmethod"
    ],
    "typing.IO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "typing.BinaryIO": [
        "abc.abstractmethod"
    ],
    "typing.TextIO": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "importlib.metadata._meta.PackageMetadata": [
        "<builtin>.property"
    ],
    "importlib.metadata._itertools": [],
    "importlib": [],
    "importlib.abc": [
        "importlib.abc._register"
    ],
    "importlib.abc._register": [
        "<builtin>.getattr"
    ],
    "importlib.abc.InspectLoader": [
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "importlib.metadata.Sectioned": [
        "textwrap.dedent",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "textwrap.dedent": [
        "<builtin>.zip",
        "<builtin>.enumerate",
        "re.sub"
    ],
    "re.sub": [
        "re._compile"
    ],
    "importlib.metadata.EntryPoint": [
        "re.compile",
        "<builtin>.property"
    ],
    "importlib.metadata.EntryPoints": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.SelectableGroups": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.Distribution": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "abc.abstractmethod",
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib.metadata.DistributionFinder": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "abc.abstractmethod"
    ],
    "importlib.metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "<builtin>.vars": [],
    "importlib.metadata.FastPath": [
        "<builtin>.property",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "importlib.metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "importlib.metadata.MetadataPathFinder": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.classmethod"
    ],
    "importlib.metadata.PathDistribution": [
        "<builtin>.property"
    ],
    "importlib_metadata": [],
    "json": [],
    "zipp": [],
    "zipp.compat.py310": [],
    "zipp.glob": [
        "<builtin>.str",
        "<builtin>.bool"
    ],
    "zipp.CompleteDirs": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "zipp.Path": [
        "<builtin>.property"
    ],
    "inspect": [
        "<builtin>.type",
        "<map>.items",
        "<builtin>.object",
        "<builtin>.hasattr",
        "<builtin>.globals",
        "collections.namedtuple"
    ],
    "ast": [
        "<builtin>.hasattr",
        "<builtin>.repr",
        "<builtin>.property",
        "<builtin>.type"
    ],
    "ast._Unparser": [
        "contextlib.contextmanager",
        "<builtin>.property",
        "<builtin>.frozenset"
    ],
    "dis": [
        "collections.namedtuple"
    ],
    "opcode": [
        "opcode.jrel_op",
        "append",
        "opcode.jabs_op",
        "opcode.name_op",
        "<builtin>.range",
        "opcode.def_op"
    ],
    "opcode.def_op": [],
    "opcode.name_op": [
        "append",
        "opcode.def_op"
    ],
    "opcode.jrel_op": [
        "append",
        "opcode.def_op"
    ],
    "opcode.jabs_op": [
        "append",
        "opcode.def_op"
    ],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "importlib_metadata._meta": [
        "typing.TypeVar.__init__"
    ],
    "importlib_metadata._meta.PackageMetadata": [
        "typing.overload",
        "<builtin>.property"
    ],
    "typing.overload": [],
    "importlib_metadata._meta.SimplePath": [
        "<builtin>.property"
    ],
    "importlib_metadata.compat.py39": [],
    "importlib_metadata.compat.py311": [],
    "importlib_metadata._compat": [],
    "platform": [
        "re.compile",
        "collections.namedtuple"
    ],
    "subprocess": [
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "subprocess._use_posix_spawn"
    ],
    "signal": [
        "signal._wraps.decorator",
        "signal._wraps",
        "<builtin>.globals"
    ],
    "signal._wraps": [],
    "signal._wraps.decorator": [],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.CompletedProcess": [
        "<builtin>.classmethod"
    ],
    "subprocess._use_posix_spawn": [
        "<builtin>.hasattr",
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.tuple"
    ],
    "subprocess.Popen": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "platform._Processor": [
        "<builtin>.classmethod"
    ],
    "platform.uname_result": [
        "functools.cached_property.__init__",
        "<builtin>.classmethod"
    ],
    "functools.cached_property.__init__": [],
    "importlib_metadata._compat.NullFinder": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata._itertools": [],
    "importlib_metadata.PackageNotFoundError": [
        "<builtin>.property"
    ],
    "importlib_metadata.Sectioned": [
        "textwrap.dedent",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.EntryPoint": [
        "re.compile",
        "<builtin>.property"
    ],
    "importlib_metadata.EntryPoints": [
        "<builtin>.staticmethod",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "importlib_metadata.Distribution": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "abc.abstractmethod",
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.DistributionFinder.Context": [
        "<builtin>.property"
    ],
    "importlib_metadata.DistributionFinder": [
        "importlib_metadata.DistributionFinder.Context.__init__",
        "abc.abstractmethod"
    ],
    "importlib_metadata.DistributionFinder.Context.__init__": [
        "<builtin>.vars"
    ],
    "importlib_metadata.FastPath": [
        "<builtin>.property",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "importlib_metadata.Prepared": [
        "<builtin>.staticmethod"
    ],
    "importlib_metadata.MetadataPathFinder": [
        "importlib_metadata.DistributionFinder.Context.__init__",
        "<builtin>.classmethod"
    ],
    "importlib_metadata.PathDistribution": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "cerberus.schema": [],
    "cerberus.errors": [
        "collections.namedtuple"
    ],
    "copy": [
        "<builtin>.getattr",
        "<builtin>.type"
    ],
    "pprint": [
        "<builtin>.frozenset",
        "<builtin>.type"
    ],
    "dataclasses": [
        "re.compile",
        "dataclasses._FIELD_BASE.__init__"
    ],
    "dataclasses._FIELD_BASE.__init__": [],
    "dataclasses.Field": [
        "<builtin>.classmethod"
    ],
    "cerberus.utils": [
        "collections.namedtuple"
    ],
    "cerberus.errors.ValidationError": [
        "<builtin>.property"
    ],
    "cerberus.errors.ErrorTreeNode": [
        "<builtin>.property"
    ],
    "cerberus.errors.BasicErrorHandler": [
        "cerberus.errors.encode_unicode",
        "<builtin>.property"
    ],
    "cerberus.errors.encode_unicode": [
        "functools.wraps"
    ],
    "cerberus.errors.SchemaErrorHandler": [
        "<map>.copy"
    ],
    "<map>.copy": [],
    "cerberus.schema.DefinitionSchema": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "cerberus.schema.SchemaValidatorMixin": [
        "<builtin>.property"
    ],
    "cerberus.schema.SchemaRegistry": [
        "<builtin>.classmethod"
    ],
    "cerberus.schema.RulesSetRegistry": [
        "<builtin>.classmethod"
    ],
    "cerberus.validator": [
        "cerberus.validator.InspectedValidator.__init__"
    ],
    "cerberus.validator.BareValidator": [
        "<builtin>.property",
        "<builtin>.set",
        "<builtin>.staticmethod",
        "cerberus.validator.dummy_for_rule_validation",
        "<builtin>.classmethod"
    ],
    "cerberus.validator.dummy_for_rule_validation": [],
    "cerberus.validator.InspectedValidator.__init__": [
        "<map>.update",
        "<builtin>.super",
        "cerberus.validator.InspectedValidator.__get_rule_schema",
        "warnings.warn",
        "<builtin>.len",
        "cerberus.validator.InspectedValidator.__init__.attributes_with_prefix",
        "<builtin>.tuple"
    ],
    "cerberus.validator.InspectedValidator.__init__.attributes_with_prefix": [
        "<builtin>.dir",
        "<builtin>.tuple",
        "<builtin>.len"
    ],
    "<builtin>.dir": [],
    "cerberus.validator.InspectedValidator.__get_rule_schema": [
        "warnings.warn",
        "<str>.split",
        "ast.literal_eval",
        "<builtin>.getattr"
    ],
    "ast.literal_eval": [
        "ast.literal_eval._convert",
        "ast.parse",
        "<builtin>.isinstance"
    ],
    "ast.parse": [
        "<builtin>.compile",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._convert": [
        "ast.literal_eval._raise_malformed_node",
        "ast.literal_eval._convert_signed_num",
        "<builtin>.isinstance",
        "<builtin>.dict",
        "<builtin>.zip",
        "<builtin>.map",
        "<builtin>.len",
        "ast.literal_eval._convert_num",
        "<builtin>.set",
        "<builtin>.tuple",
        "<builtin>.list"
    ],
    "ast.literal_eval._convert_signed_num": [
        "ast.literal_eval._convert_num",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._convert_num": [
        "<builtin>.type",
        "ast.literal_eval._raise_malformed_node",
        "<builtin>.isinstance"
    ],
    "ast.literal_eval._raise_malformed_node": [
        "<builtin>.ValueError",
        "<builtin>.getattr"
    ],
    "importlib_metadata.version": [
        "importlib_metadata.distribution"
    ],
    "importlib_metadata.distribution": [
        "importlib_metadata.Distribution.from_name"
    ],
    "importlib_metadata.Distribution.from_name": [
        "importlib_metadata.Distribution.discover",
        "<builtin>.next",
        "<builtin>.ValueError",
        "<builtin>.iter"
    ],
    "importlib_metadata.Distribution.discover": [
        "importlib_metadata.DistributionFinder.Context.__init__",
        "importlib_metadata.Distribution._discover_resolvers",
        "<builtin>.ValueError"
    ],
    "importlib_metadata.Distribution._discover_resolvers": [
        "<builtin>.filter",
        "<builtin>.getattr"
    ],
    "<builtin>.filter": [],
    "importlib.metadata.version": [
        "importlib.metadata.distribution"
    ],
    "importlib.metadata.distribution": [
        "importlib.metadata.Distribution.from_name"
    ],
    "importlib.metadata.Distribution.from_name": [
        "importlib.metadata.DistributionFinder.Context.__init__",
        "<builtin>.iter",
        "importlib.metadata.Distribution._discover_resolvers",
        "<builtin>.next"
    ],
    "importlib.metadata.Distribution._discover_resolvers": [
        "<builtin>.filter",
        "<builtin>.getattr"
    ],
    "handler.handle": [
        "cerberus.validator.InspectedValidator.__init__"
    ]
}