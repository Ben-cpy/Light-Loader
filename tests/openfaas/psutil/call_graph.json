{
    "handler": [
        "handler.handle",
        "<builtin>.print"
    ],
    "psutil": [
        "extend",
        "<builtin>.tuple",
        "<builtin>.dir",
        "<builtin>.int",
        "<str>.replace",
        "<builtin>.str",
        "<builtin>.hasattr",
        "<builtin>.NotImplementedError",
        "<builtin>.set",
        "<builtin>.getattr",
        "append",
        "<builtin>.globals",
        "<builtin>.ImportError",
        "<builtin>.object",
        "threading.current_thread",
        "psutil.cpu_times",
        "<map>.copy",
        "<str>.split"
    ],
    "__future__": [
        "__future__._Feature.__init__"
    ],
    "__future__._Feature.__init__": [],
    "collections": [],
    "keyword": [
        "<builtin>.frozenset"
    ],
    "<builtin>.frozenset": [],
    "operator": [],
    "reprlib": [
        "reprlib.Repr.__init__"
    ],
    "reprlib.Repr.__init__": [],
    "collections.OrderedDict": [
        "reprlib.recursive_repr",
        "<builtin>.object",
        "<builtin>.classmethod",
        "reprlib.recursive_repr.decorating_function"
    ],
    "<builtin>.object": [],
    "reprlib.recursive_repr": [],
    "reprlib.recursive_repr.decorating_function": [
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "<builtin>.set": [],
    "<builtin>.getattr": [],
    "<builtin>.classmethod": [],
    "collections.Counter": [
        "<builtin>.classmethod"
    ],
    "collections.ChainMap": [
        "reprlib.recursive_repr",
        "<builtin>.classmethod",
        "<builtin>.property",
        "reprlib.recursive_repr.decorating_function"
    ],
    "<builtin>.property": [],
    "collections.UserDict": [
        "<builtin>.classmethod"
    ],
    "contextlib": [],
    "abc": [],
    "_py_abc": [],
    "_weakrefset": [],
    "types": [
        "<builtin>.type",
        "types._cell_factory",
        "types._c",
        "<builtin>.globals",
        "<builtin>.object",
        "types._ag",
        "types._g"
    ],
    "<builtin>.type": [],
    "types._cell_factory": [],
    "types._g": [],
    "types._c": [],
    "types._ag": [],
    "types._GeneratorWrapper": [
        "<builtin>.property"
    ],
    "<builtin>.globals": [],
    "_weakrefset.WeakSet": [
        "<builtin>.classmethod"
    ],
    "functools": [
        "collections.namedtuple",
        "<builtin>.object"
    ],
    "functools.partial": [
        "reprlib.recursive_repr",
        "reprlib.recursive_repr.decorating_function"
    ],
    "functools.partialmethod": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "collections.namedtuple": [
        "<builtin>.type",
        "<builtin>.tuple",
        "<builtin>.list",
        "<builtin>.ValueError",
        "<str>.join",
        "<builtin>.TypeError",
        "<builtin>.map",
        "<str>.replace",
        "<builtin>.reversed",
        "<builtin>.dict",
        "collections.<lambda1>",
        "<builtin>.eval",
        "<builtin>.zip",
        "<builtin>.enumerate",
        "<builtin>.isinstance",
        "<builtin>.classmethod",
        "<builtin>.len",
        "<builtin>.str",
        "<builtin>.set",
        "<str>.split"
    ],
    "<builtin>.isinstance": [],
    "<builtin>.map": [],
    "<builtin>.list": [],
    "<builtin>.str": [],
    "<builtin>.enumerate": [],
    "<builtin>.TypeError": [],
    "<builtin>.ValueError": [],
    "<builtin>.tuple": [],
    "<builtin>.len": [],
    "<builtin>.reversed": [],
    "<builtin>.zip": [],
    "<builtin>.dict": [],
    "<str>.join": [],
    "<builtin>.eval": [],
    "collections.<lambda1>": [
        "operator.itemgetter.__init__",
        "<builtin>.property"
    ],
    "operator.itemgetter.__init__": [],
    "functools.singledispatchmethod": [
        "<builtin>.property"
    ],
    "functools.cached_property": [
        "<builtin>.classmethod"
    ],
    "contextlib.AbstractContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "contextlib.AbstractAsyncContextManager": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "contextlib._BaseExitStack": [
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "contextlib.AsyncExitStack": [
        "<builtin>.staticmethod"
    ],
    "datetime": [
        "datetime._days_before_year",
        "datetime.timezone._create",
        "append"
    ],
    "append": [],
    "datetime._days_before_year": [],
    "datetime.timedelta": [
        "<builtin>.property"
    ],
    "datetime.date": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.IsoCalendarDate": [
        "<builtin>.property"
    ],
    "datetime.time": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.datetime": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "datetime.timezone": [
        "<builtin>.classmethod",
        "<builtin>.object",
        "<builtin>.staticmethod"
    ],
    "datetime.timezone._create": [],
    "os": [
        "<builtin>.type",
        "extend",
        "os._fscodec",
        "os._Environ.__init__",
        "os._exists",
        "os._add",
        "<builtin>.set",
        "append",
        "<builtin>.ImportError",
        "<builtin>.globals",
        "os._createenviron"
    ],
    "stat": [],
    "<builtin>.ImportError": [],
    "ntpath": [
        "<builtin>.hasattr"
    ],
    "genericpath": [],
    "<builtin>.hasattr": [],
    "extend": [],
    "posixpath": [],
    "os._exists": [
        "<builtin>.globals"
    ],
    "os._add": [],
    "os._createenviron": [
        "os._createenviron.encodekey",
        "os._Environ.__init__"
    ],
    "os._createenviron.encodekey": [
        "os._createenviron.encode"
    ],
    "os._createenviron.encode": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "os._Environ.__init__": [],
    "os._fscodec": [],
    "os.PathLike": [
        "abc.abstractmethod",
        "<builtin>.classmethod"
    ],
    "signal": [
        "signal._wraps",
        "signal._wraps.decorator",
        "<builtin>.globals"
    ],
    "enum": [
        "<builtin>.object"
    ],
    "enum.EnumMeta": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "<builtin>.property"
    ],
    "enum.Enum": [
        "<builtin>.classmethod",
        "types.DynamicClassAttribute.__init__"
    ],
    "types.DynamicClassAttribute.__init__": [
        "<builtin>.getattr",
        "<builtin>.bool"
    ],
    "<builtin>.bool": [],
    "enum.Flag": [
        "<builtin>.classmethod"
    ],
    "enum.IntFlag": [
        "<builtin>.classmethod"
    ],
    "signal._wraps": [],
    "signal._wraps.decorator": [],
    "subprocess": [
        "<builtin>.getattr",
        "subprocess._use_posix_spawn",
        "<builtin>.hasattr"
    ],
    "io": [],
    "threading": [
        "_weakrefset.WeakSet.__init__",
        "<builtin>.hasattr",
        "<builtin>.set",
        "threading.RLock",
        "threading._MainThread.__init__",
        "append",
        "collections.namedtuple"
    ],
    "threading.Barrier": [
        "<builtin>.property"
    ],
    "threading.RLock": [
        "threading._RLock.__init__"
    ],
    "threading._RLock.__init__": [],
    "_weakrefset.WeakSet.__init__": [
        "<builtin>.set",
        "_weakrefset.WeakSet.update"
    ],
    "_weakrefset.WeakSet.update": [
        "_weakrefset.WeakSet.add",
        "_weakrefset.WeakSet._commit_removals"
    ],
    "_weakrefset.WeakSet._commit_removals": [],
    "_weakrefset.WeakSet.add": [
        "_weakrefset.WeakSet._commit_removals"
    ],
    "threading.Thread": [
        "<builtin>.property"
    ],
    "traceback": [],
    "linecache": [],
    "tokenize": [
        "functools.lru_cache",
        "re.compile",
        "tokenize.maybe",
        "<builtin>.sorted",
        "tokenize._all_string_prefixes",
        "<builtin>.set",
        "<builtin>.any",
        "tokenize.group",
        "collections.namedtuple",
        "<builtin>.map"
    ],
    "codecs": [
        "<builtin>.SystemError"
    ],
    "<builtin>.SystemError": [],
    "encodings": [],
    "re": [
        "<builtin>.type",
        "functools.lru_cache",
        "functools.lru_cache.decorating_function",
        "copyreg.pickle",
        "sre_compile.compile",
        "<builtin>.globals",
        "<builtin>.chr"
    ],
    "sre_compile": [
        "<builtin>.tuple"
    ],
    "sre_parse": [
        "<builtin>.frozenset"
    ],
    "sre_constants": [
        "sre_constants._makecodes"
    ],
    "sre_constants._makecodes": [
        "<str>.strip",
        "<builtin>.globals",
        "<builtin>.enumerate",
        "<str>.split"
    ],
    "<str>.strip": [],
    "<str>.split": [],
    "sre_parse.State": [
        "<builtin>.property"
    ],
    "sre_parse.Tokenizer": [
        "<builtin>.property"
    ],
    "<builtin>.chr": [],
    "sre_compile.compile": [
        "<builtin>.print",
        "<builtin>.tuple",
        "sre_parse.parse",
        "<map>.items",
        "sre_compile._code",
        "sre_compile.dis",
        "sre_compile.isstring"
    ],
    "sre_compile.isstring": [
        "<builtin>.isinstance"
    ],
    "sre_parse.parse": [
        "sre_parse.State.__init__",
        "sre_parse.Tokenizer.error",
        "sre_parse.SubPattern.dump",
        "sre_constants.error.__init__",
        "sre_parse.Tokenizer.__init__",
        "sre_parse.Tokenizer.seek",
        "sre_parse.fix_flags",
        "sre_parse._parse_sub"
    ],
    "sre_parse.Tokenizer.__init__": [
        "<builtin>.str",
        "sre_parse.Tokenizer.__next",
        "<builtin>.isinstance"
    ],
    "sre_parse.Tokenizer.__next": [
        "<builtin>.len",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.error": [
        "sre_parse.Tokenizer.tell",
        "sre_parse.Tokenizer.error"
    ],
    "sre_parse.Tokenizer.tell": [
        "<builtin>.len"
    ],
    "sre_parse.State.__init__": [],
    "sre_parse._parse_sub": [
        "",
        "extend",
        "<builtin>.len",
        "sre_parse.Tokenizer.match",
        "sre_parse.SubPattern.__init__",
        "append",
        "sre_parse.SubPattern.append",
        "sre_parse.Tokenizer.tell"
    ],
    "sre_parse.Tokenizer.match": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.SubPattern.__init__": [],
    "sre_parse.SubPattern.append": [
        "append"
    ],
    "sre_parse.Tokenizer.seek": [
        "sre_parse.Tokenizer.__next"
    ],
    "sre_parse.fix_flags": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "sre_constants.error.__init__": [
        "<str>.rfind",
        "<builtin>.super",
        "<builtin>.isinstance",
        "<str>.count"
    ],
    "<str>.count": [],
    "<str>.rfind": [],
    "<builtin>.super": [],
    "sre_parse.SubPattern.dump": [
        "<builtin>.str",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.print"
    ],
    "<builtin>.print": [],
    "sre_compile._code": [
        "sre_compile._compile_info",
        "sre_compile._compile",
        "append"
    ],
    "sre_compile._compile_info": [
        "",
        "extend",
        "<builtin>.len",
        "sre_compile._optimize_charset",
        "sre_compile._get_literal_prefix",
        "sre_compile._compile_charset",
        "sre_parse.SubPattern.getwidth",
        "sre_compile._get_charset_prefix"
    ],
    "sre_parse.SubPattern.getwidth": [
        "<builtin>.max",
        "<builtin>.min"
    ],
    "<builtin>.min": [],
    "<builtin>.max": [],
    "sre_compile._get_literal_prefix": [
        "",
        "extend",
        "<builtin>.len",
        "sre_compile._get_literal_prefix",
        "sre_compile._get_iscased",
        "sre_compile._combine_flags"
    ],
    "sre_compile._get_iscased": [],
    "sre_compile._combine_flags": [],
    "sre_compile._get_charset_prefix": [
        "",
        "<builtin>.range",
        "sre_compile._combine_flags",
        "sre_compile._get_iscased",
        "<builtin>.any",
        "<builtin>.map"
    ],
    "<builtin>.range": [],
    "<builtin>.any": [],
    "sre_compile._optimize_charset": [
        "<builtin>.range",
        "<builtin>.len",
        "sre_compile._mk_bitmap",
        "<builtin>.bytearray",
        "<builtin>.any",
        "append",
        "<builtin>.bytes",
        "sre_compile._bytes_to_codes",
        "<builtin>.map"
    ],
    "<builtin>.bytearray": [],
    "sre_compile._mk_bitmap": [
        "<builtin>.len",
        "<builtin>.range"
    ],
    "<builtin>.bytes": [],
    "sre_compile._bytes_to_codes": [
        "<builtin>.len",
        "<builtin>.memoryview"
    ],
    "<builtin>.memoryview": [],
    "sre_compile._compile_charset": [
        "",
        "sre_constants.error.__init__",
        "extend"
    ],
    "sre_compile._compile": [
        "",
        "sre_compile._optimize_charset",
        "sre_compile._compile_charset",
        "sre_compile._compile",
        "sre_compile._combine_flags",
        "sre_compile._simple",
        "sre_constants.error.__init__"
    ],
    "sre_compile._simple": [
        "<builtin>.len",
        "sre_compile._simple"
    ],
    "sre_compile.dis": [
        "<builtin>.str",
        "<builtin>.set",
        "<builtin>.len",
        "sre_compile.dis.dis_"
    ],
    "sre_compile.dis.dis_": [
        "<builtin>.range",
        "sre_compile.dis.dis_",
        "<builtin>.str",
        "sre_compile.dis.dis_.print_2",
        "sre_compile._hex_code",
        "<builtin>.list",
        "<builtin>.chr",
        "<builtin>.ValueError",
        "sre_compile.dis.dis_.print_",
        "<builtin>.bin",
        "<builtin>.map"
    ],
    "<builtin>.bin": [],
    "sre_compile.dis.dis_.print_": [
        "<builtin>.print"
    ],
    "sre_compile.dis.dis_.print_2": [
        "<builtin>.print"
    ],
    "sre_compile._hex_code": [],
    "<map>.items": [],
    "functools.lru_cache": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "functools.update_wrapper",
        "<builtin>.isinstance",
        "functools._lru_cache_wrapper"
    ],
    "<builtin>.callable": [],
    "functools._lru_cache_wrapper": [
        "<builtin>.object"
    ],
    "functools.update_wrapper": [
        "<builtin>.getattr"
    ],
    "functools.lru_cache.decorating_function": [
        "functools.update_wrapper",
        "functools._lru_cache_wrapper"
    ],
    "copyreg": [
        "<builtin>.type",
        "copyreg.pickle"
    ],
    "copyreg.pickle": [
        "<builtin>.callable",
        "<builtin>.TypeError",
        "copyreg.constructor"
    ],
    "copyreg.constructor": [
        "<builtin>.callable",
        "<builtin>.TypeError"
    ],
    "token": [
        "<builtin>.isinstance",
        "extend",
        "<builtin>.globals"
    ],
    "re.compile": [
        "re._compile"
    ],
    "re._compile": [
        "<builtin>.type",
        "<builtin>.len",
        "<builtin>.TypeError",
        "sre_compile.compile",
        "<builtin>.iter",
        "<builtin>.next",
        "sre_compile.isstring",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "<builtin>.iter": [],
    "<builtin>.next": [],
    "tokenize.TokenInfo": [
        "<builtin>.property"
    ],
    "tokenize.maybe": [
        "tokenize.group"
    ],
    "tokenize.group": [],
    "tokenize._all_string_prefixes": [],
    "<builtin>.sorted": [],
    "traceback.FrameSummary": [
        "<builtin>.property"
    ],
    "traceback.StackSummary": [
        "<builtin>.classmethod"
    ],
    "traceback.TracebackException": [
        "<builtin>.classmethod"
    ],
    "threading._MainThread.__init__": [
        "threading.Thread._set_ident",
        "threading.Thread._set_native_id",
        "threading.Thread._set_tstate_lock",
        "threading.Event.set",
        "threading.Thread.__init__"
    ],
    "threading.Thread.__init__": [
        "threading._newname",
        "<builtin>.str",
        "threading._make_invoke_excepthook",
        "_weakrefset.WeakSet.add",
        "threading.Event.__init__",
        "threading.current_thread"
    ],
    "threading._newname": [],
    "threading.current_thread": [
        "threading._DummyThread.__init__"
    ],
    "threading._DummyThread.__init__": [
        "threading.Thread._set_ident",
        "threading._newname",
        "threading.Thread._set_native_id",
        "threading.Thread.__init__"
    ],
    "threading.Thread._set_ident": [],
    "threading.Thread._set_native_id": [],
    "threading.Event.__init__": [
        "threading.Condition.__init__"
    ],
    "threading.Condition.__init__": [
        "threading.RLock"
    ],
    "threading._make_invoke_excepthook": [
        "<builtin>.RuntimeError"
    ],
    "<builtin>.RuntimeError": [],
    "threading.Thread._set_tstate_lock": [],
    "threading.Event.set": [],
    "_threading_local": [
        "contextlib.contextmanager"
    ],
    "weakref": [],
    "weakref.finalize": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "contextlib.contextmanager": [
        "functools.wraps"
    ],
    "functools.wraps": [],
    "warnings": [
        "warnings.filterwarnings",
        "warnings.simplefilter",
        "warnings._processoptions",
        "<builtin>.hasattr"
    ],
    "warnings._processoptions": [
        "<builtin>.print",
        "warnings._setoption"
    ],
    "warnings._setoption": [
        "<builtin>.len",
        "<builtin>.int",
        "warnings._getaction",
        "warnings.filterwarnings",
        "warnings._getcategory",
        "re.escape"
    ],
    "warnings._getaction": [],
    "warnings._getcategory": [
        "<builtin>.getattr",
        "<builtin>.__import__",
        "<builtin>.issubclass"
    ],
    "<builtin>.__import__": [],
    "<builtin>.issubclass": [],
    "re.escape": [
        "<builtin>.str",
        "<builtin>.isinstance"
    ],
    "<builtin>.int": [],
    "warnings.filterwarnings": [
        "warnings._add_filter",
        "re.compile",
        "<builtin>.issubclass",
        "<builtin>.isinstance"
    ],
    "warnings._add_filter": [
        "warnings._filters_mutated",
        "insert",
        "append",
        "remove"
    ],
    "remove": [],
    "insert": [],
    "warnings._filters_mutated": [],
    "warnings.simplefilter": [
        "warnings._add_filter",
        "<builtin>.isinstance"
    ],
    "selectors": [
        "collections.namedtuple",
        "selectors._can_use",
        "<builtin>.hasattr"
    ],
    "collections.abc": [],
    "selectors.BaseSelector": [
        "abc.abstractmethod"
    ],
    "selectors._can_use": [
        "<builtin>.getattr"
    ],
    "subprocess.CalledProcessError": [
        "<builtin>.property"
    ],
    "subprocess.TimeoutExpired": [
        "<builtin>.property"
    ],
    "subprocess.CompletedProcess": [
        "<builtin>.classmethod"
    ],
    "subprocess._use_posix_spawn": [
        "<builtin>.map",
        "<builtin>.len",
        "<builtin>.tuple",
        "<builtin>.hasattr"
    ],
    "subprocess.Popen": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "psutil._common": [
        "<map>.update",
        "<builtin>.bool",
        "os.getenv",
        "psutil._common._WrapNumbers.__init__",
        "<builtin>.getattr",
        "<builtin>.globals",
        "collections.namedtuple",
        "<builtin>.object",
        "<builtin>.isinstance",
        "psutil._common.memoize"
    ],
    "socket": [
        "extend",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "append",
        "<builtin>.object"
    ],
    "socket.socket": [
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "socket.SocketIO": [
        "<builtin>.property"
    ],
    "os.getenv": [],
    "<map>.update": [],
    "psutil._common.memoize": [
        "functools.wraps"
    ],
    "psutil._common._WrapNumbers.__init__": [],
    "psutil._compat": [
        "<builtin>.type",
        "<builtin>.OSError",
        "<builtin>.RuntimeError",
        "psutil._compat._instance_checking_exception",
        "platform.python_implementation",
        "<builtin>.set",
        "psutil._compat._instance_checking_exception.wrapped",
        "contextlib.contextmanager",
        "collections.namedtuple",
        "<builtin>.object"
    ],
    "platform": [
        "collections.namedtuple",
        "re.compile"
    ],
    "platform._Processor": [
        "<builtin>.classmethod"
    ],
    "platform.uname_result": [
        "<builtin>.classmethod",
        "functools.cached_property.__init__"
    ],
    "functools.cached_property.__init__": [],
    "psutil._compat._instance_checking_exception": [],
    "psutil._compat._instance_checking_exception.wrapped": [],
    "platform.python_implementation": [
        "platform._sys_version"
    ],
    "platform._sys_version": [
        "<builtin>.len",
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "<builtin>.repr",
        "<map>.get"
    ],
    "<map>.get": [],
    "<builtin>.repr": [],
    "<builtin>.OSError": [],
    "shutil": [
        "collections.namedtuple",
        "append",
        "<builtin>.hasattr"
    ],
    "fnmatch": [
        "functools.lru_cache",
        "functools.lru_cache.decorating_function"
    ],
    "bz2": [],
    "_compression": [],
    "bz2.BZ2File": [
        "<builtin>.property"
    ],
    "lzma": [],
    "lzma.LZMAFile": [
        "<builtin>.property"
    ],
    "<str>.replace": [],
    "<builtin>.NotImplementedError": [],
    "psutil._psaix": [
        "<builtin>.dict",
        "collections.namedtuple",
        "<builtin>.hasattr"
    ],
    "glob": [
        "<builtin>.getattr",
        "re.compile"
    ],
    "psutil._psposix": [
        "<builtin>.dict",
        "<builtin>.getattr",
        "psutil._common.memoize",
        "<builtin>.hasattr"
    ],
    "psutil._psaix.Process": [
        "psutil._common.memoize_when_activated",
        "psutil._psaix.wrap_exceptions"
    ],
    "psutil._common.memoize_when_activated": [
        "functools.wraps"
    ],
    "psutil._psaix.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._pssunos": [
        "<builtin>.dict",
        "collections.namedtuple"
    ],
    "psutil._pssunos.Process": [
        "collections.namedtuple",
        "psutil._common.memoize_when_activated",
        "psutil._pssunos.wrap_exceptions"
    ],
    "psutil._pssunos.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._psbsd": [
        "<builtin>.hasattr",
        "<builtin>.dict",
        "contextlib.contextmanager",
        "collections.namedtuple",
        "psutil._common.memoize"
    ],
    "xml.etree.ElementTree": [
        "<builtin>.set",
        "re.compile",
        "contextlib.contextmanager"
    ],
    "xml.etree.ElementPath": [
        "re.compile"
    ],
    "psutil._psbsd.Process": [
        "collections.namedtuple",
        "psutil._common.memoize_when_activated",
        "psutil._psbsd.wrap_exceptions"
    ],
    "psutil._psbsd.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._psosx": [
        "<builtin>.dict",
        "collections.namedtuple"
    ],
    "psutil._psosx.Process": [
        "psutil._common.memoize_when_activated",
        "psutil._psosx.wrap_exceptions"
    ],
    "psutil._psosx.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._pswindows": [
        "<builtin>.str",
        "<builtin>.RuntimeError",
        "psutil._compat.lru_cache.decorating_function",
        "<builtin>.dict",
        "<builtin>.globals",
        "psutil._compat.lru_cache",
        "collections.namedtuple",
        "psutil._common.memoize"
    ],
    "psutil._compat.lru_cache": [],
    "psutil._compat.lru_cache.decorating_function": [
        "functools.update_wrapper"
    ],
    "psutil._pswindows.WindowsService": [
        "contextlib.contextmanager"
    ],
    "psutil._pswindows.Process": [
        "psutil._pswindows.retry_error_partial_copy",
        "psutil._common.memoize_when_activated",
        "psutil._pswindows.wrap_exceptions"
    ],
    "psutil._pswindows.wrap_exceptions": [
        "functools.wraps"
    ],
    "psutil._pswindows.retry_error_partial_copy": [
        "functools.wraps"
    ],
    "psutil._pslinux": [
        "extend",
        "<builtin>.int",
        "ctypes.CDLL.__init__",
        "psutil._pslinux.NetConnections.__init__",
        "<builtin>.hasattr",
        "psutil._pslinux.set_scputimes_ntuple",
        "<builtin>.globals",
        "psutil._common.debug",
        "collections.namedtuple",
        "genericpath.exists",
        "psutil._common.memoize"
    ],
    "base64": [
        "<str>.format"
    ],
    "struct": [],
    "<str>.format": [],
    "genericpath.exists": [],
    "psutil._pslinux.set_scputimes_ntuple": [
        "collections.namedtuple",
        "psutil._common.open_binary",
        "<builtin>.len",
        "append"
    ],
    "psutil._common.open_binary": [
        "<builtin>.open"
    ],
    "<builtin>.open": [],
    "psutil._common.debug": [
        "<builtin>.print",
        "<builtin>.isinstance",
        "inspect.currentframe",
        "inspect.getframeinfo"
    ],
    "inspect": [
        "<builtin>.type",
        "<map>.items",
        "<builtin>.hasattr",
        "<builtin>.globals",
        "collections.namedtuple",
        "<builtin>.object"
    ],
    "ast": [
        "<builtin>.type",
        "<builtin>.repr",
        "<builtin>.property",
        "<builtin>.hasattr"
    ],
    "ast._Unparser": [
        "<builtin>.frozenset",
        "contextlib.contextmanager",
        "<builtin>.property"
    ],
    "dis": [
        "collections.namedtuple"
    ],
    "opcode": [
        "opcode.jabs_op",
        "opcode.def_op",
        "opcode.name_op",
        "append",
        "opcode.jrel_op",
        "<builtin>.range"
    ],
    "opcode.def_op": [],
    "opcode.name_op": [
        "opcode.def_op",
        "append"
    ],
    "opcode.jrel_op": [
        "opcode.def_op",
        "append"
    ],
    "opcode.jabs_op": [
        "opcode.def_op",
        "append"
    ],
    "dis.Bytecode": [
        "<builtin>.classmethod"
    ],
    "importlib.machinery": [],
    "inspect._ParameterKind": [
        "<builtin>.property"
    ],
    "inspect.Parameter": [
        "<builtin>.property"
    ],
    "inspect.BoundArguments": [
        "<builtin>.property"
    ],
    "inspect.Signature": [
        "<builtin>.classmethod",
        "<builtin>.property"
    ],
    "inspect.currentframe": [
        "<builtin>.hasattr"
    ],
    "inspect.getframeinfo": [
        "<str>.format",
        "inspect.isframe",
        "inspect.getfile",
        "<builtin>.TypeError",
        "inspect.getsourcefile",
        "inspect.findsource",
        "inspect.istraceback"
    ],
    "inspect.istraceback": [
        "<builtin>.isinstance"
    ],
    "inspect.isframe": [
        "<builtin>.isinstance"
    ],
    "inspect.getsourcefile": [
        "inspect.getmodule",
        "posixpath.splitext",
        "inspect.getfile",
        "ntpath.splitext",
        "<builtin>.any",
        "<builtin>.getattr",
        "genericpath.exists"
    ],
    "inspect.getfile": [
        "<builtin>.type",
        "inspect.isfunction",
        "inspect.isclass",
        "<builtin>.OSError",
        "inspect.isframe",
        "inspect.iscode",
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "inspect.ismodule",
        "inspect.ismethod",
        "inspect.istraceback"
    ],
    "inspect.ismodule": [
        "<builtin>.isinstance"
    ],
    "inspect.isclass": [
        "<builtin>.isinstance"
    ],
    "inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "ntpath.splitext": [
        "genericpath._splitext",
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "os._fspath": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "genericpath._splitext": [
        "<builtin>.max"
    ],
    "posixpath.splitext": [
        "genericpath._splitext",
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "inspect.getmodule": [
        "inspect.getabsfile",
        "ntpath.realpath",
        "posixpath.realpath",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "inspect.ismodule",
        "<map>.get"
    ],
    "inspect.getabsfile": [
        "ntpath.normcase",
        "inspect.getfile",
        "ntpath.abspath",
        "posixpath.normcase",
        "inspect.getsourcefile",
        "posixpath.abspath"
    ],
    "ntpath.abspath": [],
    "posixpath.abspath": [
        "os._fspath",
        "posixpath.normpath",
        "posixpath.join",
        "posixpath.isabs",
        "<builtin>.isinstance"
    ],
    "posixpath.isabs": [
        "os._fspath",
        "posixpath._get_sep"
    ],
    "posixpath._get_sep": [
        "<builtin>.isinstance"
    ],
    "posixpath.join": [
        "<builtin>.map",
        "os._fspath",
        "genericpath._check_arg_types",
        "posixpath._get_sep"
    ],
    "genericpath._check_arg_types": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "posixpath.normpath": [
        "os._fspath",
        "pop",
        "append",
        "<builtin>.isinstance"
    ],
    "pop": [],
    "ntpath.normcase": [
        "os._fspath",
        "<builtin>.isinstance"
    ],
    "posixpath.normcase": [
        "os._fspath"
    ],
    "ntpath.realpath": [],
    "posixpath.realpath": [
        "os._fspath",
        "posixpath.abspath",
        "posixpath._joinrealpath"
    ],
    "posixpath._joinrealpath": [
        "posixpath.split",
        "posixpath._joinrealpath",
        "posixpath.join",
        "posixpath.isabs",
        "<builtin>.isinstance"
    ],
    "posixpath.split": [
        "os._fspath",
        "<builtin>.len",
        "posixpath._get_sep"
    ],
    "inspect.findsource": [
        "inspect.getmodule",
        "inspect.isfunction",
        "linecache.getlines",
        "<builtin>.OSError",
        "inspect.isclass",
        "inspect.isframe",
        "re.compile",
        "inspect.iscode",
        "inspect.getfile",
        "linecache.checkcache",
        "inspect._ClassFinder.__init__",
        "<builtin>.hasattr",
        "ast.parse",
        "inspect.ismodule",
        "inspect.getsourcefile",
        "ast.NodeVisitor.visit",
        "inspect.ismethod",
        "inspect.istraceback"
    ],
    "linecache.checkcache": [
        "<map>.keys",
        "<builtin>.len",
        "<map>.pop",
        "<builtin>.list"
    ],
    "<map>.keys": [],
    "<map>.pop": [],
    "linecache.getlines": [
        "linecache.clearcache",
        "<builtin>.len",
        "linecache.updatecache"
    ],
    "linecache.updatecache": [
        "ntpath.join",
        "<builtin>.len",
        "ntpath.isabs",
        "tokenize.open",
        "<map>.pop",
        "posixpath.join",
        "<str>.startswith",
        "<str>.endswith",
        "posixpath.isabs",
        "linecache.lazycache"
    ],
    "linecache.lazycache": [
        "<str>.startswith",
        "<builtin>.len",
        "<builtin>.getattr",
        "<str>.endswith"
    ],
    "ntpath.isabs": [
        "os._fspath",
        "<builtin>.len",
        "ntpath._get_bothseps",
        "ntpath.splitdrive",
        "<builtin>.isinstance"
    ],
    "ntpath.splitdrive": [
        "<builtin>.isinstance",
        "os._fspath",
        "<builtin>.len"
    ],
    "ntpath._get_bothseps": [
        "<builtin>.isinstance"
    ],
    "ntpath.join": [
        "os._fspath",
        "genericpath._check_arg_types",
        "ntpath.splitdrive",
        "<builtin>.isinstance",
        "<builtin>.map"
    ],
    "tokenize.open": [
        "tokenize.detect_encoding"
    ],
    "tokenize.detect_encoding": [
        "tokenize.detect_encoding.find_cookie",
        "tokenize.detect_encoding.read_or_stop"
    ],
    "tokenize.detect_encoding.read_or_stop": [],
    "tokenize.detect_encoding.find_cookie": [
        "tokenize._get_normal_name",
        "<builtin>.SyntaxError"
    ],
    "<builtin>.SyntaxError": [],
    "tokenize._get_normal_name": [],
    "linecache.clearcache": [
        "<map>.clear"
    ],
    "<map>.clear": [],
    "ast.parse": [
        "<builtin>.compile",
        "<builtin>.isinstance"
    ],
    "<builtin>.compile": [],
    "inspect._ClassFinder.__init__": [],
    "ast.NodeVisitor.visit": [
        "<builtin>.getattr"
    ],
    "ctypes": [
        "<builtin>.int",
        "ctypes._reset_cache",
        "<builtin>.Exception",
        "ctypes.LibraryLoader.__init__",
        "ctypes.PYFUNCTYPE",
        "ctypes._check_size",
        "ctypes.CFUNCTYPE"
    ],
    "<builtin>.Exception": [],
    "ctypes._check_size": [
        "<builtin>.SystemError"
    ],
    "ctypes.LibraryLoader": [
        "<builtin>.classmethod"
    ],
    "ctypes.LibraryLoader.__init__": [],
    "ctypes.CFUNCTYPE": [
        "<builtin>.ValueError"
    ],
    "ctypes.PYFUNCTYPE": [],
    "ctypes._endian": [
        "<builtin>.type"
    ],
    "ctypes._reset_cache": [
        "<map>.clear"
    ],
    "ctypes.CDLL.__init__": [],
    "psutil._pslinux.NetConnections": [
        "<builtin>.staticmethod"
    ],
    "psutil._pslinux.NetConnections.__init__": [],
    "psutil._pslinux.Process": [
        "psutil._pslinux.wrap_exceptions",
        "psutil._common.memoize_when_activated",
        "re.compile",
        "genericpath.exists"
    ],
    "psutil._pslinux.wrap_exceptions": [
        "functools.wraps"
    ],
    "<builtin>.dir": [],
    "psutil.Process": [
        "psutil._common.memoize_when_activated",
        "psutil._common.deprecated_method.outer",
        "<builtin>.property",
        "<builtin>.hasattr",
        "psutil._common.deprecated_method",
        "contextlib.contextmanager"
    ],
    "psutil._common.deprecated_method": [],
    "psutil._common.deprecated_method.outer": [
        "functools.wraps"
    ],
    "psutil.cpu_times": [
        "psutil._psosx.per_cpu_times",
        "psutil._pslinux.cpu_times",
        "psutil._psosx.cpu_times",
        "psutil._psaix.cpu_times",
        "psutil._psbsd.per_cpu_times",
        "psutil._pswindows.cpu_times",
        "psutil._psbsd.cpu_times",
        "psutil._pssunos.cpu_times",
        "psutil._psaix.per_cpu_times",
        "psutil._pslinux.per_cpu_times",
        "psutil._pssunos.per_cpu_times",
        "psutil._pswindows.per_cpu_times"
    ],
    "psutil._pssunos.per_cpu_times": [],
    "psutil._psosx.per_cpu_times": [
        "append"
    ],
    "psutil._psaix.per_cpu_times": [],
    "psutil._pslinux.per_cpu_times": [
        "<builtin>.len",
        "psutil._common.get_procfs_path",
        "<builtin>.float",
        "psutil._common.open_binary",
        "psutil._pslinux.set_scputimes_ntuple",
        "append"
    ],
    "psutil._common.get_procfs_path": [],
    "<builtin>.float": [],
    "psutil._psbsd.per_cpu_times": [
        "psutil._psbsd.cpu_count_logical",
        "psutil._psbsd.cpu_times",
        "<builtin>.NotImplementedError"
    ],
    "psutil._psbsd.cpu_count_logical": [],
    "psutil._psbsd.cpu_times": [],
    "psutil._pswindows.per_cpu_times": [
        "append"
    ],
    "psutil._pssunos.cpu_times": [
        "<builtin>.zip",
        "<builtin>.sum"
    ],
    "<builtin>.sum": [],
    "psutil._psosx.cpu_times": [],
    "psutil._psaix.cpu_times": [
        "<builtin>.zip",
        "<builtin>.sum"
    ],
    "psutil._pslinux.cpu_times": [
        "<builtin>.len",
        "psutil._common.get_procfs_path",
        "<builtin>.float",
        "psutil._common.open_binary",
        "psutil._pslinux.set_scputimes_ntuple"
    ],
    "psutil._pswindows.cpu_times": [
        "<builtin>.zip",
        "<builtin>.sum"
    ],
    "<map>.copy": [],
    "handler.handle": [
        "psutil.cpu_times",
        "psutil.cpu_count"
    ],
    "psutil.cpu_count": [
        "psutil._pslinux.cpu_count_logical",
        "psutil._pswindows.cpu_count_cores",
        "psutil._psosx.cpu_count_cores",
        "psutil._pslinux.cpu_count_cores",
        "psutil._psaix.cpu_count_logical",
        "psutil._pswindows.cpu_count_logical",
        "psutil._psbsd.cpu_count_logical",
        "psutil._pssunos.cpu_count_cores",
        "psutil._psosx.cpu_count_logical",
        "psutil._psbsd.cpu_count_cores",
        "psutil._pssunos.cpu_count_logical",
        "psutil._psaix.cpu_count_cores"
    ],
    "psutil._pssunos.cpu_count_cores": [],
    "psutil._psosx.cpu_count_cores": [],
    "psutil._psaix.cpu_count_cores": [
        "subprocess.Popen.__init__",
        "<builtin>.RuntimeError",
        "subprocess.Popen.communicate",
        "<builtin>.len"
    ],
    "subprocess.Popen.__init__": [
        "<builtin>.type",
        "subprocess._cleanup",
        "<builtin>.filter",
        "<builtin>.bool",
        "subprocess.Popen._get_handles",
        "<builtin>.hasattr",
        "<builtin>.TypeError",
        "append",
        "<builtin>.isinstance",
        "<builtin>.ValueError",
        "subprocess.Popen._execute_child",
        "warnings.warn"
    ],
    "subprocess._cleanup": [
        "remove"
    ],
    "warnings.warn": [
        "<builtin>.type",
        "warnings._is_internal_frame",
        "<builtin>.issubclass",
        "warnings._next_external_frame",
        "<builtin>.TypeError",
        "warnings.warn_explicit",
        "<builtin>.isinstance",
        "<builtin>.range"
    ],
    "warnings._is_internal_frame": [],
    "warnings._next_external_frame": [
        "warnings._is_internal_frame"
    ],
    "warnings.warn_explicit": [
        "warnings.WarningMessage.__init__",
        "<str>.lower",
        "<builtin>.int",
        "linecache.getlines",
        "<builtin>.str",
        "<builtin>.RuntimeError",
        "<builtin>.issubclass",
        "<map>.clear",
        "warnings._showwarnmsg",
        "<map>.get",
        "<builtin>.isinstance"
    ],
    "<str>.lower": [],
    "<str>.startswith": [],
    "<str>.endswith": [],
    "warnings.WarningMessage.__init__": [],
    "warnings._showwarnmsg": [
        "warnings._showwarnmsg_impl"
    ],
    "warnings._showwarnmsg_impl": [
        "warnings._formatwarnmsg"
    ],
    "warnings._formatwarnmsg": [
        "warnings._formatwarnmsg_impl"
    ],
    "warnings._formatwarnmsg_impl": [
        "linecache.getline"
    ],
    "linecache.getline": [
        "<builtin>.len",
        "linecache.getlines"
    ],
    "tracemalloc": [],
    "pickle": [
        "extend",
        "append"
    ],
    "_compat_pickle": [
        "<builtin>.dict",
        "<map>.items",
        "<map>.update",
        "<builtin>.len"
    ],
    "pickle._Pickler": [
        "<builtin>.type"
    ],
    "tracemalloc.Frame": [
        "<builtin>.property"
    ],
    "tracemalloc.Traceback": [
        "<builtin>.property"
    ],
    "tracemalloc.Trace": [
        "<builtin>.property"
    ],
    "tracemalloc.Filter": [
        "<builtin>.property"
    ],
    "tracemalloc.DomainFilter": [
        "<builtin>.property"
    ],
    "tracemalloc.Snapshot": [
        "<builtin>.staticmethod"
    ],
    "subprocess.Popen._get_handles": [
        "subprocess.Popen._get_devnull",
        "<builtin>.isinstance",
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._get_devnull": [
        "<builtin>.hasattr"
    ],
    "subprocess.Popen._execute_child": [
        "<builtin>.tuple",
        "<builtin>.bytearray",
        "append",
        "<builtin>.list",
        "<builtin>.ValueError",
        "subprocess.Popen._close_pipe_fds",
        "posixpath.dirname",
        "subprocess.Popen._handle_exitstatus",
        "os.get_exec_path",
        "<builtin>.TypeError",
        "<builtin>.getattr",
        "<builtin>.map",
        "ntpath.dirname",
        "posixpath.join",
        "subprocess.Popen._posix_spawn",
        "<builtin>.bytes",
        "<builtin>.isinstance",
        "ntpath.join",
        "<builtin>.len",
        "<builtin>.int",
        "<builtin>.sorted",
        "<builtin>.issubclass",
        "<builtin>.hasattr",
        "<builtin>.set"
    ],
    "ntpath.dirname": [
        "ntpath.split"
    ],
    "ntpath.split": [
        "os._fspath",
        "ntpath._get_bothseps",
        "ntpath.splitdrive",
        "<builtin>.len"
    ],
    "posixpath.dirname": [
        "os._fspath",
        "<builtin>.len",
        "posixpath._get_sep"
    ],
    "subprocess.Popen._posix_spawn": [
        "<builtin>.getattr",
        "append",
        "subprocess.Popen._close_pipe_fds"
    ],
    "subprocess.Popen._close_pipe_fds": [
        "<builtin>.getattr"
    ],
    "os.get_exec_path": [
        "warnings.catch_warnings.__init__",
        "<str>.split"
    ],
    "warnings.catch_warnings.__init__": [],
    "subprocess.Popen._handle_exitstatus": [],
    "<builtin>.filter": [],
    "subprocess.Popen.communicate": [
        "<builtin>.min",
        "subprocess.Popen._stdin_write",
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen.wait",
        "<builtin>.ValueError",
        "subprocess.Popen._communicate"
    ],
    "subprocess.Popen._communicate": [
        "subprocess.Popen._save_input",
        "selectors.SelectSelector.__init__",
        "subprocess.Popen._check_timeout",
        "<builtin>.memoryview",
        "<builtin>.RuntimeError",
        "subprocess.Popen._remaining_time",
        "subprocess.Popen.wait",
        "subprocess.Popen._translate_newlines"
    ],
    "subprocess.Popen._save_input": [],
    "selectors.SelectSelector.__init__": [
        "<builtin>.set",
        "<builtin>.super"
    ],
    "subprocess.Popen._remaining_time": [],
    "subprocess.Popen._check_timeout": [
        "subprocess.TimeoutExpired.__init__"
    ],
    "subprocess.TimeoutExpired.__init__": [],
    "subprocess.Popen.wait": [
        "<builtin>.min",
        "subprocess.Popen._wait",
        "subprocess.Popen._remaining_time"
    ],
    "subprocess.Popen._wait": [
        "<builtin>.min",
        "subprocess.Popen._handle_exitstatus",
        "subprocess.Popen._remaining_time",
        "subprocess.TimeoutExpired.__init__",
        "subprocess.Popen._try_wait"
    ],
    "subprocess.Popen._try_wait": [],
    "subprocess.Popen._translate_newlines": [],
    "subprocess.Popen._stdin_write": [],
    "psutil._pslinux.cpu_count_cores": [
        "<builtin>.len",
        "<builtin>.int",
        "psutil._common.get_procfs_path",
        "<builtin>.sum",
        "<builtin>.set",
        "psutil._common.open_binary",
        "glob.glob",
        "<map>.values"
    ],
    "glob.glob": [
        "<builtin>.list",
        "glob.iglob"
    ],
    "glob.iglob": [
        "glob._iglob",
        "os._fspath",
        "<builtin>.next",
        "glob._isrecursive"
    ],
    "glob._iglob": [
        "ntpath.join",
        "ntpath.split",
        "posixpath.split",
        "posixpath.join",
        "glob._glob1",
        "glob._isrecursive",
        "glob._join",
        "glob._isdir",
        "glob._glob0",
        "glob.has_magic",
        "glob._iglob",
        "glob._lexists",
        "glob._glob2"
    ],
    "glob.has_magic": [
        "<builtin>.isinstance"
    ],
    "glob._join": [
        "ntpath.join",
        "posixpath.join"
    ],
    "glob._isdir": [
        "genericpath.isdir"
    ],
    "genericpath.isdir": [
        "stat.S_ISDIR"
    ],
    "stat.S_ISDIR": [
        "stat.S_IFMT"
    ],
    "stat.S_IFMT": [],
    "glob._lexists": [
        "posixpath.lexists",
        "ntpath.lexists"
    ],
    "ntpath.lexists": [],
    "posixpath.lexists": [],
    "glob._isrecursive": [
        "<builtin>.isinstance"
    ],
    "glob._glob1": [
        "fnmatch.filter",
        "glob._ishidden",
        "glob._listdir"
    ],
    "glob._listdir": [
        "glob._iterdir",
        "contextlib.closing.__init__",
        "<builtin>.list"
    ],
    "glob._iterdir": [
        "<builtin>.isinstance",
        "<builtin>.bytes"
    ],
    "contextlib.closing.__init__": [],
    "glob._ishidden": [],
    "fnmatch.filter": [
        "fnmatch._compile_pattern",
        "posixpath.normcase",
        "append",
        "ntpath.normcase"
    ],
    "fnmatch._compile_pattern": [
        "re.compile",
        "<builtin>.str",
        "<builtin>.bytes",
        "fnmatch.translate",
        "<builtin>.isinstance"
    ],
    "fnmatch.translate": [
        "",
        "<builtin>.len",
        "re.sub",
        "append",
        "<builtin>.object",
        "<builtin>.range"
    ],
    "re.sub": [
        "re._compile"
    ],
    "glob._glob2": [
        "glob._rlistdir",
        "glob._isrecursive"
    ],
    "glob._rlistdir": [
        "glob._ishidden",
        "glob._listdir",
        "glob._rlistdir",
        "glob._join"
    ],
    "glob._glob0": [
        "glob._isdir",
        "glob._lexists",
        "glob._join"
    ],
    "<map>.values": [],
    "psutil._psbsd.cpu_count_cores": [
        "<builtin>.len",
        "psutil._psbsd.cpu_count_logical"
    ],
    "psutil._pswindows.cpu_count_cores": [],
    "psutil._pssunos.cpu_count_logical": [],
    "psutil._psosx.cpu_count_logical": [],
    "psutil._psaix.cpu_count_logical": [],
    "psutil._pslinux.cpu_count_logical": [
        "psutil._common.open_binary",
        "re.compile",
        "psutil._common.open_text",
        "psutil._common.get_procfs_path"
    ],
    "psutil._common.open_text": [
        "<builtin>.open"
    ],
    "psutil._pswindows.cpu_count_logical": []
}