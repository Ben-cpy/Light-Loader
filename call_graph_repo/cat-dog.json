{
    "handler": [
        "torch.nn.modules.module.Module.eval",
        "PIL.Image",
        "torchvision.models",
        "torchvision.models.resnet.resnet18",
        "torch"
    ],
    "torch": [
        "torch.onnx",
        "torch.nested",
        "<builtin>.ImportError",
        "torch._lobpcg",
        "torch.QUInt4x2Storage",
        "torch._storage_docs",
        "torch.utils.data",
        "<builtin>.filter",
        "torch.SymInt",
        "torch.autograd",
        "torch._torch_docs",
        "torch.library",
        "torch.nn.quantizable",
        "torch.SymFloat",
        "<str>.startswith",
        "torch.optim",
        "torch.hub",
        "torch.ComplexDoubleStorage",
        "torch.cuda._sanitizer",
        "torch.backends.cuda",
        "torch.optim._multi_tensor",
        "torch._classes",
        "torch.cuda",
        "torch._TorchCompileInductorWrapper",
        "<builtin>.getattr",
        "torch._utils",
        "<builtin>.isinstance",
        "torch.LongStorage",
        "torch.BoolStorage",
        "torch.backends.quantized",
        "torch.CharStorage",
        "torch.multiprocessing._atfork.register_after_fork",
        "torch.func",
        "torch._tensor_docs",
        "torch.serialization",
        "<builtin>.Exception",
        "torch.amp",
        "<builtin>.list",
        "<builtin>.set",
        "torch.QInt8Storage",
        "torch.backends.mkldnn",
        "torch.BFloat16Storage",
        "torch.jit",
        "torch.backends.cudnn",
        "<builtin>.all",
        "torch.multiprocessing._atfork",
        "torch.profiler",
        "<builtin>.dir",
        "<str>.join",
        "torch._ops",
        "torch.DoubleStorage",
        "torch.manager_path",
        "append",
        "torch.torch_version",
        "<builtin>.print",
        "torch.ComplexFloatStorage",
        "torch.distributions",
        "torch._meta_registrations",
        "torch.version",
        "torch.fft",
        "torch.cpu",
        "torch.FloatStorage",
        "torch._awaits",
        "<str>.replace",
        "torch._tensor",
        "torch.utils.backcompat",
        "torch.ShortStorage",
        "torch.nn.quantized",
        "torch.quantization",
        "torch.QInt32Storage",
        "torch.signal.windows",
        "torch.quasirandom",
        "torch.multiprocessing",
        "torch.ao",
        "torch.sparse",
        "torch.QUInt2x4Storage",
        "torch.ByteStorage",
        "torch.backends.openmp",
        "torch.testing",
        "torch.utils.dlpack",
        "torch.linalg",
        "<builtin>.hasattr",
        "<builtin>.type",
        "torch.nn.intrinsic",
        "torch.IntStorage",
        "torch.HalfStorage",
        "torch.random",
        "torch.backends.mkl",
        "torch.storage",
        "torch._load_global_deps",
        "torch.nn",
        "torch.QUInt8Storage",
        "torch.functional",
        "torch.cuda._sanitizer.enable_cuda_sanitizer",
        "extend",
        "torch.special",
        "torch.futures",
        "torch.__config__",
        "torch._linalg_utils",
        "torch._utils_internal",
        "torch.SymBool",
        "torch.return_types",
        "<builtin>.globals",
        "torch.nn.qat",
        "torch.masked",
        "torch.fx.experimental.symbolic_shapes",
        "torch.__future__",
        "torch._tensor_str",
        "torch.backends.mps"
    ],
    "<builtin>.Exception": [],
    "torch._utils": [
        "torch._utils._ClassPropertyDescriptor",
        "torch._utils.ExceptionWrapper",
        "torch",
        "torch._utils.KeyErrorMessage"
    ],
    "torch._utils.KeyErrorMessage": [],
    "torch._utils.ExceptionWrapper": [],
    "torch._utils._ClassPropertyDescriptor": [],
    "torch._utils_internal": [],
    "torch.torch_version": [
        "<builtin>.setattr",
        "torch.version",
        "torch.torch_version._LazyImport.__init__",
        "torch.torch_version._LazyImport",
        "torch.torch_version.TorchVersion"
    ],
    "torch.version": [],
    "torch.torch_version._LazyImport": [],
    "torch.torch_version._LazyImport.__init__": [],
    "torch.torch_version.TorchVersion": [],
    "<builtin>.setattr": [],
    "<builtin>.filter": [],
    "<builtin>.list": [],
    "<builtin>.all": [],
    "<str>.replace": [],
    "<builtin>.hasattr": [],
    "<builtin>.print": [],
    "<str>.join": [],
    "torch._load_global_deps": [
        "torch._preload_cuda_deps"
    ],
    "torch._preload_cuda_deps": [
        "<builtin>.ValueError"
    ],
    "<builtin>.ValueError": [],
    "torch.SymInt": [],
    "torch.SymFloat": [],
    "torch.SymBool": [],
    "<builtin>.ImportError": [],
    "<builtin>.dir": [],
    "append": [],
    "<builtin>.getattr": [],
    "<builtin>.isinstance": [],
    "<builtin>.type": [],
    "extend": [],
    "torch._tensor": [
        "torch.overrides",
        "torch._tensor.Tensor",
        "torch._namedtensor_internals",
        "torch.utils.dlpack",
        "torch",
        "torch.utils.hooks"
    ],
    "torch.utils.hooks": [
        "torch.utils.hooks.BackwardHook",
        "torch",
        "torch.utils.hooks.RemovableHandle"
    ],
    "torch.utils.hooks.RemovableHandle": [],
    "torch.utils.hooks.BackwardHook": [],
    "torch._namedtensor_internals": [],
    "torch.overrides": [
        "torch.overrides.TorchFunctionMode",
        "torch._C._add_docstr",
        "torch.overrides.enable_reentrant_dispatch",
        "torch.overrides.BaseTorchFunctionMode",
        "torch"
    ],
    "torch._C._add_docstr": [],
    "torch.overrides.TorchFunctionMode": [
        "<builtin>.classmethod"
    ],
    "<builtin>.classmethod": [],
    "torch.overrides.BaseTorchFunctionMode": [],
    "torch.overrides.enable_reentrant_dispatch": [],
    "torch.utils.dlpack": [
        "torch.utils.dlpack.DLDeviceType",
        "torch"
    ],
    "torch.utils.dlpack.DLDeviceType": [],
    "torch._tensor.Tensor": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "torch._tensor._handle_torch_function_and_wrap_type_error_to_not_implemented"
    ],
    "torch._tensor._handle_torch_function_and_wrap_type_error_to_not_implemented": [],
    "<builtin>.property": [],
    "torch.storage": [
        "torch.storage._LegacyStorage",
        "torch.storage.UntypedStorage",
        "typing.TypeVar",
        "functools.lru_cache",
        "torch.storage._StorageBase",
        "torch.types",
        "torch.storage._LegacyStorageMeta",
        "torch._utils",
        "torch.storage.TypedStorage",
        "torch",
        "numpy"
    ],
    "torch.types": [
        "torch",
        "torch.types.Storage",
        "torch.types.SymInt"
    ],
    "torch.types.SymInt": [],
    "torch.types.Storage": [],
    "numpy": [
        "numpy.lib._type_check_impl",
        "numpy.lib._function_base_impl",
        "numpy._pytesttester",
        "<builtin>.ImportError",
        "numpy.matrixlib",
        "<builtin>.list",
        "<builtin>.set",
        "numpy._globals",
        "numpy.hugepage_setup",
        "numpy._pytesttester.PytestTester.__init__",
        "numpy.lib._twodim_base_impl",
        "numpy.lib._shape_base_impl",
        "numpy._mac_os_check",
        "numpy._core.printoptions",
        "_multiarray_umath._set_promotion_state",
        "numpy.lib.scimath",
        "numpy.lib._npyio_impl",
        "numpy.lib._utils_impl",
        "numpy.lib._polynomial_impl",
        "numpy.lib._arraysetops_impl",
        "numpy.lib._arraypad_impl",
        "numpy._core",
        "numpy._expired_attrs_2_0",
        "_multiarray_umath._set_madvise_hugepage",
        "numpy.version",
        "numpy.lib._ufunclike_impl",
        "numpy._sanity_check",
        "<builtin>.globals",
        "numpy.lib._nanfunctions_impl",
        "<builtin>.len",
        "numpy.__config__",
        "numpy.exceptions",
        "numpy._array_api_info",
        "<builtin>.RuntimeError",
        "numpy._distributor_init",
        "numpy.lib._index_tricks_impl",
        "numpy.lib._histograms_impl",
        "numpy.lib._stride_tricks_impl",
        "<builtin>.getattr",
        "numpy._core.getlimits._register_known_types",
        "<builtin>.str",
        "numpy._core.memmap",
        "numpy.lib"
    ],
    "numpy._globals": [
        "<builtin>.RuntimeError",
        "numpy._globals._NoValueType",
        "numpy._globals._CopyMode",
        "<builtin>.globals",
        "numpy._utils"
    ],
    "numpy._utils": [
        "numpy._utils._convertions"
    ],
    "numpy._utils._convertions": [],
    "<builtin>.globals": [],
    "<builtin>.RuntimeError": [],
    "numpy._globals._NoValueType": [],
    "numpy._globals._CopyMode": [],
    "numpy._expired_attrs_2_0": [],
    "numpy.version": [
        "<str>.split"
    ],
    "<str>.split": [],
    "numpy._distributor_init": [],
    "numpy.__config__": [
        "<builtin>.bool",
        "<str>.replace",
        "<str>.lower",
        "numpy.__config__.DisplayModes",
        "numpy.__config__._cleanup"
    ],
    "numpy.__config__.DisplayModes": [],
    "<str>.lower": [],
    "<builtin>.bool": [],
    "numpy.__config__._cleanup": [
        "numpy.__config__._cleanup",
        "<map>.items",
        "<builtin>.isinstance"
    ],
    "<map>.items": [],
    "numpy._core": [
        "numpy._core._dtype_ctypes",
        "numpy._pytesttester",
        "<builtin>.ImportError",
        "numpy._core.numeric",
        "numpy._core.records",
        "<str>.format",
        "numpy._pytesttester.PytestTester.__init__",
        "numpy._core._dtype",
        "numpy._core.function_base",
        "numpy._core._methods",
        "numpy._core.einsumfunc",
        "numpy._core._internal",
        "numpy._core.getlimits",
        "numpy._core._machar",
        "numpy.version",
        "numpy._core.fromnumeric",
        "numpy._core._add_newdocs_scalars",
        "append",
        "numpy._core.multiarray",
        "numpy._core.umath",
        "<builtin>.hasattr",
        "<builtin>.type",
        "numpy._core.numerictypes",
        "numpy._core._add_newdocs",
        "numpy._core.shape_base",
        "numpy._core.memmap"
    ],
    "numpy._core.multiarray": [
        "numpy._core.overrides"
    ],
    "numpy._core.overrides": [
        "numpy._utils._inspect",
        "numpy._utils",
        "<builtin>.set",
        "numpy._core._multiarray_umath.add_docstring"
    ],
    "numpy._utils._inspect": [],
    "<builtin>.set": [],
    "numpy._core._multiarray_umath.add_docstring": [],
    "numpy._core.umath": [
        "numpy"
    ],
    "<str>.format": [],
    "numpy._core.numerictypes": [
        "<builtin>.tuple",
        "numpy._core._string_helpers",
        "<builtin>.sorted",
        "numpy._core._dtype",
        "numpy._utils",
        "numpy._core.numerictypes._register_types",
        "numpy._core._type_aliases",
        "numpy._utils.set_module.decorator",
        "numpy._core.numerictypes._PreprocessDTypeError",
        "<builtin>.globals",
        "append",
        "<builtin>.set",
        "numpy._core.multiarray",
        "numpy._utils.set_module"
    ],
    "numpy._core._string_helpers": [
        "<builtin>.tuple",
        "<builtin>.map",
        "<builtin>.range"
    ],
    "<builtin>.range": [],
    "<builtin>.map": [],
    "<builtin>.tuple": [],
    "numpy._core._type_aliases": [
        "<map>.keys",
        "<builtin>.getattr",
        "<builtin>.list",
        "<builtin>.issubclass",
        "<builtin>.set",
        "numpy._core.multiarray",
        "<map>.items"
    ],
    "<builtin>.issubclass": [],
    "<map>.keys": [],
    "numpy._core._dtype": [
        "numpy"
    ],
    "numpy._utils.set_module": [],
    "numpy._utils.set_module.decorator": [],
    "numpy._core.numerictypes._PreprocessDTypeError": [],
    "<builtin>.sorted": [],
    "numpy._core.numerictypes._register_types": [],
    "numpy._core.numeric": [
        "builtins.bool",
        "numpy._core.overrides",
        "numpy._core._ufunc_config",
        "<builtin>.type",
        "numpy._core.numerictypes",
        "numpy._core.numeric.extend_all",
        "numpy._core.overrides.set_array_function_like_doc",
        "numpy._core.fromnumeric",
        "numpy._utils.set_module",
        "numpy._core._asarray",
        "numpy._core.arrayprint",
        "numpy._core.shape_base",
        "numpy._utils.set_module.decorator",
        "numpy.exceptions",
        "numpy._core.multiarray",
        "numpy",
        "numpy._core.umath"
    ],
    "numpy._core.shape_base": [
        "numpy._core.overrides",
        "numpy._core.fromnumeric",
        "<builtin>.getattr",
        "numpy._core.numeric",
        "numpy._core.multiarray"
    ],
    "numpy._core.fromnumeric": [
        "numpy._core.overrides",
        "numpy._utils",
        "numpy._core.numerictypes",
        "numpy._utils.set_module",
        "numpy._utils.set_module.decorator",
        "numpy._core._methods",
        "numpy._core.multiarray",
        "numpy",
        "numpy._core.umath"
    ],
    "numpy._core._methods": [
        "numpy._core._exceptions",
        "numpy._core._ufunc_config",
        "numpy._core.numerictypes",
        "<map>.update",
        "numpy._globals",
        "numpy._core.multiarray",
        "numpy",
        "numpy._core.umath"
    ],
    "numpy._core._exceptions": [
        "numpy._core._exceptions._UFuncCastingError",
        "numpy._core._exceptions._UFuncInputCastingError",
        "numpy._core._exceptions.UFuncTypeError",
        "numpy._core._exceptions._ArrayMemoryError",
        "numpy._utils",
        "numpy._core._exceptions._UFuncBinaryResolutionError",
        "numpy._core._exceptions._UFuncNoLoopError",
        "numpy._core._exceptions._UFuncOutputCastingError"
    ],
    "numpy._core._exceptions.UFuncTypeError": [],
    "numpy._core._exceptions._UFuncNoLoopError": [],
    "numpy._core._exceptions._UFuncBinaryResolutionError": [],
    "numpy._core._exceptions._UFuncCastingError": [],
    "numpy._core._exceptions._UFuncInputCastingError": [],
    "numpy._core._exceptions._UFuncOutputCastingError": [],
    "numpy._core._exceptions._ArrayMemoryError": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "<builtin>.staticmethod": [],
    "numpy._core._ufunc_config": [
        "numpy._core._ufunc_config.errstate",
        "numpy._core.umath",
        "numpy._utils.set_module.decorator",
        "numpy._utils",
        "numpy._utils.set_module",
        "numpy._core._ufunc_config._unspecified"
    ],
    "numpy._core._ufunc_config._unspecified": [],
    "numpy._core._ufunc_config.errstate": [],
    "<map>.update": [],
    "numpy.exceptions": [
        "<builtin>.RuntimeError",
        "numpy.exceptions.AxisError",
        "numpy.exceptions.TooHardError",
        "numpy.exceptions.RankWarning",
        "numpy.exceptions.ComplexWarning",
        "<builtin>.globals",
        "numpy.exceptions.VisibleDeprecationWarning",
        "numpy.exceptions.DTypePromotionError",
        "numpy.exceptions.ModuleDeprecationWarning"
    ],
    "numpy.exceptions.ComplexWarning": [],
    "numpy.exceptions.ModuleDeprecationWarning": [],
    "numpy.exceptions.VisibleDeprecationWarning": [],
    "numpy.exceptions.RankWarning": [],
    "numpy.exceptions.TooHardError": [],
    "numpy.exceptions.AxisError": [],
    "numpy.exceptions.DTypePromotionError": [],
    "numpy._core.overrides.set_array_function_like_doc": [],
    "builtins.bool": [],
    "numpy._core.arrayprint": [
        "numpy._core.arrayprint._TimelikeFormat",
        "numpy._core.arrayprint.SubArrayFormat",
        "numpy._core.arrayprint.StructuredVoidFormat",
        "numpy._core.numeric",
        "numpy._core.arrayprint.TimedeltaFormat",
        "numpy._core.printoptions",
        "numpy._core.arrayprint._recursive_guard",
        "numpy._core.arrayprint.ComplexFloatingFormat",
        "numpy._core.arrayprint._recursive_guard.decorating_function",
        "numpy._core.overrides",
        "numpy._core.fromnumeric",
        "numpy._utils.set_module.decorator",
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._core.multiarray",
        "numpy._core.arrayprint.IntegerFormat",
        "numpy._utils.set_module",
        "numpy._core.umath",
        "numpy._core.overrides.array_function_dispatch",
        "numpy._core.numerictypes",
        "numpy._core.arrayprint.FloatingFormat",
        "<builtin>.getattr",
        "numpy._core.arrayprint.DatetimeFormat",
        "numpy._core.arrayprint.BoolFormat",
        "numpy"
    ],
    "numpy._core.printoptions": [
        "contextvars.ContextVar",
        "<map>.copy"
    ],
    "<map>.copy": [],
    "contextvars.ContextVar": [],
    "numpy._core.arrayprint._recursive_guard": [],
    "numpy._core.arrayprint._recursive_guard.decorating_function": [
        "<builtin>.set"
    ],
    "numpy._core.overrides.array_function_dispatch": [],
    "numpy._core.overrides.array_function_dispatch.decorator": [
        "<builtin>.RuntimeError",
        "numpy._core._multiarray_umath._ArrayFunctionDispatcher",
        "numpy._core._multiarray_umath.add_docstring",
        "numpy._core.overrides.verify_matching_signatures"
    ],
    "numpy._core.overrides.verify_matching_signatures": [
        "<builtin>.len",
        "<builtin>.bool",
        "numpy._utils._inspect.getargspec",
        "<builtin>.RuntimeError"
    ],
    "numpy._utils._inspect.getargspec": [
        "numpy._utils._inspect.ismethod",
        "numpy._utils._inspect.isfunction",
        "numpy._utils._inspect.getargs",
        "<builtin>.TypeError"
    ],
    "numpy._utils._inspect.ismethod": [
        "<builtin>.isinstance"
    ],
    "numpy._utils._inspect.isfunction": [
        "<builtin>.isinstance"
    ],
    "<builtin>.TypeError": [],
    "numpy._utils._inspect.getargs": [
        "<builtin>.range",
        "<builtin>.list",
        "numpy._utils._inspect.iscode",
        "<builtin>.TypeError"
    ],
    "numpy._utils._inspect.iscode": [
        "<builtin>.isinstance"
    ],
    "<builtin>.len": [],
    "numpy._core._multiarray_umath._ArrayFunctionDispatcher": [],
    "numpy._core.arrayprint.FloatingFormat": [],
    "numpy._core.arrayprint.IntegerFormat": [],
    "numpy._core.arrayprint.BoolFormat": [],
    "numpy._core.arrayprint.ComplexFloatingFormat": [],
    "numpy._core.arrayprint._TimelikeFormat": [],
    "numpy._core.arrayprint.DatetimeFormat": [],
    "numpy._core.arrayprint.TimedeltaFormat": [],
    "numpy._core.arrayprint.SubArrayFormat": [],
    "numpy._core.arrayprint.StructuredVoidFormat": [
        "<builtin>.classmethod"
    ],
    "numpy._core._asarray": [
        "numpy._core.overrides",
        "numpy._core.overrides.array_function_dispatch",
        "numpy._core.overrides.set_array_function_like_doc",
        "numpy._utils.set_module.decorator",
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._core.multiarray",
        "numpy._utils.set_module"
    ],
    "numpy._core.numeric.extend_all": [
        "append",
        "<builtin>.set",
        "<builtin>.getattr"
    ],
    "numpy._core.records": [
        "numpy._core.records.recarray",
        "numpy._core.numerictypes",
        "numpy._core.arrayprint",
        "numpy._core.numeric",
        "numpy._utils.set_module.decorator",
        "numpy._core.records.format_parser",
        "numpy._core.records.record",
        "numpy._utils",
        "numpy._utils.set_module"
    ],
    "numpy._core.records.format_parser": [],
    "numpy._core.records.record": [],
    "numpy._core.records.recarray": [],
    "numpy._core.memmap": [
        "numpy._core.numeric",
        "numpy._utils",
        "numpy._core.memmap.memmap",
        "numpy"
    ],
    "numpy._core.memmap.memmap": [],
    "numpy._core.function_base": [
        "numpy._core.numeric",
        "numpy._core.multiarray",
        "numpy._core.overrides",
        "numpy"
    ],
    "numpy._core._machar": [
        "numpy._core.fromnumeric",
        "numpy._core._ufunc_config",
        "numpy._utils",
        "numpy._core._machar.MachAr"
    ],
    "numpy._core._machar.MachAr": [],
    "numpy._core.getlimits": [
        "numpy._core.getlimits.MachArLike",
        "numpy._core._machar",
        "numpy._core.numerictypes",
        "numpy._core.numeric",
        "numpy._core.getlimits.finfo",
        "<builtin>.dict",
        "numpy._utils",
        "<str>.format",
        "numpy._core.umath",
        "numpy._core.getlimits.iinfo"
    ],
    "numpy._core.getlimits.MachArLike": [
        "<builtin>.property"
    ],
    "<builtin>.dict": [],
    "numpy._core.getlimits.finfo": [
        "<builtin>.property"
    ],
    "numpy._core.getlimits.iinfo": [
        "<builtin>.property"
    ],
    "numpy._core.einsumfunc": [
        "numpy._core.overrides",
        "numpy._core.overrides.array_function_dispatch",
        "numpy._core.numeric",
        "<builtin>.set",
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._core.multiarray"
    ],
    "numpy._core._add_newdocs": [
        "numpy._core.function_base.add_newdoc",
        "numpy._core.overrides",
        "<str>.replace",
        "numpy._core._add_newdocs.refer_to_array_attribute",
        "numpy._core.function_base"
    ],
    "numpy._core.function_base.add_newdoc": [
        "<builtin>.__import__",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.globals",
        "numpy._core.function_base._add_docstring",
        "<str>.strip"
    ],
    "<builtin>.__import__": [],
    "numpy._core.function_base._add_docstring": [
        "<str>.format",
        "numpy._core.function_base._needs_add_docstring"
    ],
    "numpy._core.function_base._needs_add_docstring": [
        "<builtin>.isinstance"
    ],
    "<str>.strip": [],
    "numpy._core._add_newdocs.refer_to_array_attribute": [],
    "numpy._core._add_newdocs_scalars": [
        "numpy._core.function_base.add_newdoc",
        "numpy._core",
        "numpy._core.numerictypes",
        "numpy._core._add_newdocs_scalars._get_platform_and_machine",
        "numpy._core.function_base",
        "numpy._core._add_newdocs_scalars.numeric_type_aliases",
        "numpy._core._add_newdocs_scalars.add_newdoc_for_scalar_type"
    ],
    "numpy._core._add_newdocs_scalars.numeric_type_aliases": [
        "numpy._core._add_newdocs_scalars.numeric_type_aliases.type_aliases_gen",
        "<builtin>.list"
    ],
    "numpy._core._add_newdocs_scalars.numeric_type_aliases.type_aliases_gen": [
        "<builtin>.getattr"
    ],
    "numpy._core._add_newdocs_scalars._get_platform_and_machine": [],
    "numpy._core._add_newdocs_scalars.add_newdoc_for_scalar_type": [
        "<str>.strip",
        "numpy._core.function_base.add_newdoc",
        "<builtin>.getattr"
    ],
    "numpy._core._dtype_ctypes": [
        "numpy"
    ],
    "numpy._core._internal": [
        "numpy._core._internal._Stream",
        "<map>.keys",
        "numpy._core._internal._ctypes",
        "numpy._core._internal.dummy_ctype",
        "numpy._core._internal._missing_ctypes",
        "numpy.exceptions",
        "numpy._core.multiarray",
        "numpy"
    ],
    "numpy._core._internal.dummy_ctype": [],
    "numpy._core._internal._missing_ctypes": [
        "numpy._core._internal._missing_ctypes.c_void_p"
    ],
    "numpy._core._internal._missing_ctypes.c_void_p": [],
    "numpy._core._internal._ctypes": [
        "<builtin>.property"
    ],
    "numpy._core._internal._Stream": [
        "<builtin>.property"
    ],
    "numpy._pytesttester": [
        "numpy._pytesttester.PytestTester"
    ],
    "numpy._pytesttester.PytestTester": [],
    "numpy._pytesttester.PytestTester.__init__": [],
    "numpy.lib": [
        "numpy.lib._type_check_impl",
        "numpy.lib._function_base_impl",
        "numpy.lib._arrayterator_impl",
        "numpy._pytesttester",
        "numpy._pytesttester.PytestTester.__init__",
        "numpy.lib.stride_tricks",
        "numpy.lib._twodim_base_impl",
        "numpy.lib._shape_base_impl",
        "numpy.lib.scimath",
        "numpy.lib._npyio_impl",
        "numpy.lib._utils_impl",
        "numpy._core.function_base",
        "numpy.lib._polynomial_impl",
        "numpy.lib.introspect",
        "numpy.lib._arraysetops_impl",
        "numpy.lib._arraypad_impl",
        "numpy.lib.array_utils",
        "numpy.lib.mixins",
        "numpy.lib._ufunclike_impl",
        "numpy.lib._version",
        "numpy.lib._nanfunctions_impl",
        "numpy.lib._index_tricks_impl",
        "numpy.lib._histograms_impl",
        "numpy.lib._stride_tricks_impl",
        "numpy.lib.npyio"
    ],
    "numpy.lib.array_utils": [
        "numpy.lib._array_utils_impl"
    ],
    "numpy.lib._array_utils_impl": [
        "numpy._core",
        "numpy._core.numeric",
        "numpy._utils.set_module.decorator",
        "numpy._utils",
        "numpy._utils.set_module"
    ],
    "numpy.lib.introspect": [],
    "numpy.lib.mixins": [
        "numpy.lib.mixins.NDArrayOperatorsMixin",
        "numpy._core.umath"
    ],
    "numpy.lib.mixins.NDArrayOperatorsMixin": [
        "numpy.lib.mixins._numeric_methods",
        "numpy.lib.mixins._reflected_binary_method",
        "numpy.lib.mixins._unary_method",
        "numpy.lib.mixins._binary_method"
    ],
    "numpy.lib.mixins._binary_method": [],
    "numpy.lib.mixins._numeric_methods": [
        "numpy.lib.mixins._inplace_binary_method",
        "numpy.lib.mixins._reflected_binary_method",
        "numpy.lib.mixins._binary_method"
    ],
    "numpy.lib.mixins._reflected_binary_method": [],
    "numpy.lib.mixins._inplace_binary_method": [],
    "numpy.lib.mixins._unary_method": [],
    "numpy.lib.npyio": [
        "numpy.lib._npyio_impl"
    ],
    "numpy.lib._npyio_impl": [
        "numpy.lib._npyio_impl.NpzFile",
        "numpy._core.overrides",
        "<builtin>.sorted",
        "numpy._utils",
        "numpy._core.overrides.set_array_function_like_doc",
        "numpy.lib._iotools",
        "numpy.lib.format",
        "numpy._utils.set_module.decorator",
        "numpy.lib._npyio_impl.BagObj",
        "numpy._core.multiarray",
        "numpy",
        "numpy._utils.set_module",
        "numpy.lib._datasource"
    ],
    "numpy.lib.format": [
        "<builtin>.len",
        "numpy",
        "numpy.lib._utils_impl"
    ],
    "numpy.lib._utils_impl": [
        "numpy._core",
        "numpy.lib._utils_impl._Deprecate",
        "numpy._utils.set_module.decorator",
        "numpy._utils",
        "numpy",
        "numpy._utils.set_module"
    ],
    "numpy.lib._utils_impl._Deprecate": [],
    "numpy.lib._datasource": [
        "numpy.lib._datasource.DataSource",
        "numpy.lib._datasource.Repository",
        "numpy.lib._datasource._FileOpeners.__init__",
        "numpy.lib._datasource._FileOpeners",
        "numpy._utils"
    ],
    "numpy.lib._datasource._FileOpeners": [],
    "numpy.lib._datasource._FileOpeners.__init__": [],
    "numpy.lib._datasource.DataSource": [],
    "numpy.lib._datasource.Repository": [],
    "numpy.lib._iotools": [
        "numpy.lib._iotools.ConverterError",
        "numpy.lib._iotools.ConverterLockError",
        "numpy.lib._iotools.StringConverter",
        "numpy.lib._iotools.LineSplitter",
        "numpy._core.numeric",
        "numpy.lib._iotools.ConversionWarning",
        "numpy._utils",
        "numpy",
        "numpy.lib._iotools.NameValidator"
    ],
    "numpy.lib._iotools.LineSplitter": [],
    "numpy.lib._iotools.NameValidator": [
        "<builtin>.set"
    ],
    "numpy.lib._iotools.ConverterError": [],
    "numpy.lib._iotools.ConverterLockError": [],
    "numpy.lib._iotools.ConversionWarning": [],
    "numpy.lib._iotools.StringConverter": [
        "append",
        "<builtin>.classmethod",
        "extend"
    ],
    "numpy.lib._npyio_impl.BagObj": [],
    "numpy.lib._npyio_impl.NpzFile": [],
    "numpy.lib.scimath": [
        "numpy.lib._scimath_impl"
    ],
    "numpy.lib._scimath_impl": [
        "numpy.lib._type_check_impl",
        "numpy._core.overrides",
        "numpy._core.overrides.array_function_dispatch",
        "numpy._core.numerictypes",
        "numpy._core.numeric",
        "numpy._core.overrides.array_function_dispatch.decorator"
    ],
    "numpy.lib._type_check_impl": [
        "numpy._core.getlimits",
        "numpy._core.overrides",
        "numpy.lib._ufunclike_impl",
        "numpy._core.numeric",
        "numpy._utils.set_module.decorator",
        "numpy._utils",
        "numpy._utils.set_module"
    ],
    "numpy.lib._ufunclike_impl": [
        "numpy._core.numeric",
        "numpy._core.overrides",
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy._core.overrides.array_function_dispatch"
    ],
    "numpy.lib.stride_tricks": [
        "numpy.lib._stride_tricks_impl"
    ],
    "numpy.lib._stride_tricks_impl": [
        "numpy._core.overrides",
        "numpy._core.overrides.array_function_dispatch",
        "numpy._core.numeric",
        "numpy._utils.set_module.decorator",
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy.lib._stride_tricks_impl.DummyArray",
        "numpy",
        "numpy._utils.set_module"
    ],
    "numpy.lib._stride_tricks_impl.DummyArray": [],
    "numpy.lib._index_tricks_impl": [
        "numpy.lib._function_base_impl",
        "numpy.lib._index_tricks_impl.nd_grid",
        "numpy.lib._index_tricks_impl.IndexExpression",
        "numpy.matrixlib",
        "numpy._core.numeric",
        "numpy.lib._index_tricks_impl.CClass.__init__",
        "numpy.lib._index_tricks_impl.OGridClass.__init__",
        "numpy.lib.stride_tricks",
        "numpy.lib._index_tricks_impl.MGridClass",
        "numpy.lib._index_tricks_impl.RClass.__init__",
        "numpy.lib._index_tricks_impl.MGridClass.__init__",
        "numpy.lib._index_tricks_impl.IndexExpression.__init__",
        "numpy._core.overrides",
        "numpy._core",
        "numpy.lib._index_tricks_impl.CClass",
        "numpy._utils.set_module.decorator",
        "numpy._core.multiarray",
        "numpy.lib._index_tricks_impl.OGridClass",
        "numpy._utils.set_module",
        "numpy._core.numerictypes",
        "numpy.lib._index_tricks_impl.ndindex",
        "numpy.lib._index_tricks_impl.RClass",
        "numpy.lib._index_tricks_impl.ndenumerate",
        "numpy.lib._index_tricks_impl.AxisConcatenator",
        "numpy._utils",
        "numpy"
    ],
    "numpy.matrixlib": [
        "numpy._pytesttester",
        "numpy.matrixlib.defmatrix",
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.matrixlib.defmatrix": [
        "numpy.linalg",
        "numpy._core.numeric",
        "numpy._utils.set_module.decorator",
        "numpy.matrixlib.defmatrix.matrix",
        "numpy._utils",
        "numpy._utils.set_module"
    ],
    "numpy.linalg": [
        "copy",
        "numpy._pytesttester",
        "numpy.linalg.linalg",
        "numpy.linalg._linalg",
        "numpy._pytesttester.PytestTester.__init__"
    ],
    "numpy.linalg.linalg": [],
    "numpy.linalg._linalg": [
        "numpy.lib.array_utils",
        "numpy.lib._twodim_base_impl",
        "numpy._core.overrides",
        "numpy._core",
        "numpy.linalg._linalg.EighResult",
        "numpy.linalg._linalg.SlogdetResult",
        "numpy.linalg._linalg.SVDResult",
        "numpy.linalg._linalg.LinAlgError",
        "numpy._globals",
        "numpy._utils",
        "numpy._typing",
        "numpy.linalg._linalg.QRResult",
        "numpy.linalg._linalg.EigResult"
    ],
    "numpy.lib._twodim_base_impl": [
        "numpy._core.overrides",
        "numpy._core",
        "numpy._core.getlimits.iinfo.__init__",
        "numpy._core.overrides.set_array_function_like_doc",
        "numpy.lib._stride_tricks_impl",
        "numpy._core.numeric",
        "numpy._utils.set_module.decorator",
        "numpy._utils.set_module"
    ],
    "numpy._core.getlimits.iinfo.__init__": [
        "<builtin>.ValueError",
        "<builtin>.type"
    ],
    "numpy._typing": [
        "numpy._typing._nested_sequence",
        "numpy._typing._scalars",
        "numpy._typing._256Bit",
        "numpy._typing._64Bit",
        "numpy._typing._dtype_like",
        "numpy._typing._8Bit",
        "numpy._typing._char_codes",
        "numpy._typing._shape",
        "numpy._typing._96Bit",
        "numpy._typing._32Bit",
        "numpy._typing._nbit",
        "numpy._typing._80Bit",
        "numpy._typing._128Bit",
        "numpy._typing._array_like",
        "numpy._utils",
        "numpy",
        "numpy._typing._16Bit",
        "numpy._typing.NBitBase"
    ],
    "numpy._typing.NBitBase": [],
    "numpy._typing._256Bit": [],
    "numpy._typing._128Bit": [],
    "numpy._typing._96Bit": [],
    "numpy._typing._80Bit": [],
    "numpy._typing._64Bit": [],
    "numpy._typing._32Bit": [],
    "numpy._typing._16Bit": [],
    "numpy._typing._8Bit": [],
    "numpy._typing._nested_sequence": [
        "numpy._typing._nested_sequence._NestedSequence",
        "typing.TypeVar"
    ],
    "typing.TypeVar": [],
    "numpy._typing._nested_sequence._NestedSequence": [],
    "numpy._typing._nbit": [],
    "numpy._typing._char_codes": [],
    "numpy._typing._scalars": [
        "numpy"
    ],
    "numpy._typing._shape": [],
    "numpy._typing._dtype_like": [
        "numpy._typing._dtype_like._DTypeDict",
        "typing.TypeVar",
        "numpy._typing._dtype_like._SupportsDType",
        "numpy._typing._char_codes",
        "numpy._typing._dtype_like._DTypeDictBase",
        "numpy._typing._shape",
        "numpy"
    ],
    "numpy._typing._dtype_like._DTypeDictBase": [],
    "numpy._typing._dtype_like._DTypeDict": [],
    "numpy._typing._dtype_like._SupportsDType": [
        "<builtin>.property"
    ],
    "numpy._typing._array_like": [
        "typing.TypeVar",
        "numpy",
        "numpy._typing._nested_sequence",
        "numpy._typing._array_like._SupportsArrayFunc",
        "numpy._typing._array_like._SupportsArray"
    ],
    "numpy._typing._array_like._SupportsArray": [],
    "numpy._typing._array_like._SupportsArrayFunc": [],
    "numpy.linalg._linalg.EigResult": [],
    "numpy.linalg._linalg.EighResult": [],
    "numpy.linalg._linalg.QRResult": [],
    "numpy.linalg._linalg.SlogdetResult": [],
    "numpy.linalg._linalg.SVDResult": [],
    "numpy.linalg._linalg.LinAlgError": [],
    "copy": [],
    "numpy.matrixlib.defmatrix.matrix": [
        "<builtin>.property"
    ],
    "numpy.lib._function_base_impl": [
        "numpy.lib._twodim_base_impl",
        "numpy._core.overrides",
        "numpy._core",
        "numpy._utils",
        "numpy._core.numerictypes",
        "numpy._core.fromnumeric",
        "numpy.lib._histograms_impl",
        "numpy._utils.set_module",
        "numpy._core.numeric",
        "numpy._utils.set_module.decorator",
        "numpy.lib._function_base_impl.vectorize",
        "<builtin>.dict",
        "numpy._core.multiarray",
        "numpy",
        "numpy._core.umath"
    ],
    "numpy.lib._histograms_impl": [
        "numpy._core.overrides",
        "numpy"
    ],
    "numpy.lib._function_base_impl.vectorize": [],
    "numpy.lib._index_tricks_impl.nd_grid": [],
    "numpy.lib._index_tricks_impl.MGridClass": [],
    "numpy.lib._index_tricks_impl.MGridClass.__init__": [
        "<builtin>.super"
    ],
    "<builtin>.super": [],
    "numpy.lib._index_tricks_impl.OGridClass": [],
    "numpy.lib._index_tricks_impl.OGridClass.__init__": [
        "<builtin>.super"
    ],
    "numpy.lib._index_tricks_impl.AxisConcatenator": [
        "<builtin>.staticmethod"
    ],
    "numpy.lib._index_tricks_impl.RClass": [],
    "numpy.lib._index_tricks_impl.RClass.__init__": [
        "numpy.lib._index_tricks_impl.AxisConcatenator.__init__"
    ],
    "numpy.lib._index_tricks_impl.AxisConcatenator.__init__": [],
    "numpy.lib._index_tricks_impl.CClass": [],
    "numpy.lib._index_tricks_impl.CClass.__init__": [
        "numpy.lib._index_tricks_impl.AxisConcatenator.__init__"
    ],
    "numpy.lib._index_tricks_impl.ndenumerate": [],
    "numpy.lib._index_tricks_impl.ndindex": [],
    "numpy.lib._index_tricks_impl.IndexExpression": [],
    "numpy.lib._index_tricks_impl.IndexExpression.__init__": [],
    "numpy.lib._nanfunctions_impl": [
        "numpy._core.numeric",
        "numpy._core.overrides",
        "numpy",
        "numpy.lib._function_base_impl"
    ],
    "numpy.lib._shape_base_impl": [
        "numpy._core.overrides",
        "numpy._core",
        "numpy._core.fromnumeric",
        "numpy.lib._index_tricks_impl",
        "numpy._core.numeric",
        "numpy._core.shape_base",
        "numpy._utils.set_module.decorator",
        "numpy._core.multiarray",
        "numpy.matrixlib.defmatrix",
        "numpy._utils.set_module"
    ],
    "numpy.lib._arraysetops_impl": [
        "numpy._core.overrides",
        "numpy.lib._arraysetops_impl.UniqueCountsResult",
        "numpy.lib._arraysetops_impl.UniqueAllResult",
        "numpy.lib._arraysetops_impl.UniqueInverseResult",
        "numpy"
    ],
    "numpy.lib._arraysetops_impl.UniqueAllResult": [],
    "numpy.lib._arraysetops_impl.UniqueCountsResult": [],
    "numpy.lib._arraysetops_impl.UniqueInverseResult": [],
    "numpy.lib._polynomial_impl": [
        "numpy.lib._twodim_base_impl",
        "numpy._core.overrides",
        "numpy._core",
        "numpy.lib._function_base_impl",
        "numpy.lib._type_check_impl",
        "numpy.linalg",
        "numpy.lib._polynomial_impl.poly1d",
        "numpy._core.numeric",
        "numpy.exceptions",
        "numpy._utils"
    ],
    "numpy.lib._polynomial_impl.poly1d": [
        "<builtin>.property"
    ],
    "numpy.lib._arrayterator_impl": [
        "numpy.lib._arrayterator_impl.Arrayterator"
    ],
    "numpy.lib._arrayterator_impl.Arrayterator": [
        "<builtin>.property"
    ],
    "numpy.lib._arraypad_impl": [
        "numpy._core.overrides",
        "numpy._core.overrides.array_function_dispatch",
        "numpy.lib._index_tricks_impl",
        "numpy._core.overrides.array_function_dispatch.decorator",
        "numpy"
    ],
    "numpy.lib._version": [
        "numpy.lib._version.NumpyVersion"
    ],
    "numpy.lib._version.NumpyVersion": [],
    "numpy._array_api_info": [
        "numpy._core",
        "numpy._array_api_info.__array_namespace_info__"
    ],
    "numpy._array_api_info.__array_namespace_info__": [],
    "numpy._core.getlimits._register_known_types": [
        "numpy._core.getlimits._register_type",
        "numpy._core.arrayprint.errstate",
        "numpy._core.getlimits.MachArLike.__init__",
        "numpy._core._ufunc_config.errstate.__init__"
    ],
    "numpy._core.getlimits.MachArLike.__init__": [
        "numpy._core.getlimits.MachArLike._float_conv",
        "numpy._core.getlimits.MachArLike._float_to_str",
        "<builtin>.int",
        "numpy._core.getlimits.MachArLike._float_to_float"
    ],
    "numpy._core.getlimits.MachArLike._float_to_float": [
        "numpy._core.getlimits._fr1",
        "numpy._core.getlimits.MachArLike._float_conv"
    ],
    "numpy._core.getlimits.MachArLike._float_conv": [],
    "numpy._core.getlimits._fr1": [],
    "<builtin>.int": [],
    "numpy._core.getlimits.MachArLike._float_to_str": [
        "numpy._core.getlimits._fr0"
    ],
    "numpy._core.getlimits._fr0": [],
    "numpy._core.getlimits._register_type": [],
    "numpy._core._ufunc_config.errstate.__init__": [],
    "numpy._core.arrayprint.errstate": [],
    "numpy._sanity_check": [
        "<builtin>.RuntimeError",
        "<builtin>.abs",
        "<builtin>.AssertionError"
    ],
    "<builtin>.abs": [],
    "<builtin>.AssertionError": [],
    "numpy._mac_os_check": [],
    "<builtin>.str": [],
    "numpy.hugepage_setup": [
        "<builtin>.tuple",
        "<builtin>.int"
    ],
    "_multiarray_umath._set_madvise_hugepage": [],
    "_multiarray_umath._set_promotion_state": [],
    "torch.storage._StorageBase": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "torch.storage.UntypedStorage": [
        "<builtin>.property"
    ],
    "functools.lru_cache": [],
    "torch.storage.TypedStorage": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "torch.storage._LegacyStorageMeta": [],
    "torch.storage._LegacyStorage": [
        "<builtin>.classmethod"
    ],
    "torch.ByteStorage": [
        "torch._utils.classproperty"
    ],
    "torch._utils.classproperty": [
        "torch._utils._ClassPropertyDescriptor.__init__",
        "<builtin>.classmethod",
        "<builtin>.isinstance"
    ],
    "torch._utils._ClassPropertyDescriptor.__init__": [],
    "torch.DoubleStorage": [
        "torch._utils.classproperty"
    ],
    "torch.FloatStorage": [
        "torch._utils.classproperty"
    ],
    "torch.HalfStorage": [
        "torch._utils.classproperty"
    ],
    "torch.LongStorage": [
        "torch._utils.classproperty"
    ],
    "torch.IntStorage": [
        "torch._utils.classproperty"
    ],
    "torch.ShortStorage": [
        "torch._utils.classproperty"
    ],
    "torch.CharStorage": [
        "torch._utils.classproperty"
    ],
    "torch.BoolStorage": [
        "torch._utils.classproperty"
    ],
    "torch.BFloat16Storage": [
        "torch._utils.classproperty"
    ],
    "torch.ComplexDoubleStorage": [
        "torch._utils.classproperty"
    ],
    "torch.ComplexFloatStorage": [
        "torch._utils.classproperty"
    ],
    "torch.QUInt8Storage": [
        "torch._utils.classproperty"
    ],
    "torch.QInt8Storage": [
        "torch._utils.classproperty"
    ],
    "torch.QInt32Storage": [
        "torch._utils.classproperty"
    ],
    "torch.QUInt4x2Storage": [
        "torch._utils.classproperty"
    ],
    "torch.QUInt2x4Storage": [
        "torch._utils.classproperty"
    ],
    "torch.random": [
        "torch"
    ],
    "torch.serialization": [
        "torch.serialization._opener",
        "torch.serialization._open_buffer_reader",
        "torch.types",
        "torch.serialization._open_zipfile_writer_buffer",
        "torch._utils",
        "torch._weights_only_unpickler",
        "typing_extensions",
        "torch.serialization._open_zipfile_reader",
        "torch.serialization.SourceChangeWarning",
        "torch.serialization.StorageType",
        "torch.serialization._open_zipfile_writer_file",
        "torch.serialization.register_package",
        "torch.serialization._open_buffer_writer",
        "torch.storage",
        "torch",
        "torch.serialization._open_file",
        "contextlib.contextmanager",
        "torch._sources"
    ],
    "torch._sources": [
        "torch._sources.ParsedDef",
        "torch._sources.SourceContext"
    ],
    "torch._sources.SourceContext": [],
    "torch._sources.ParsedDef": [],
    "typing_extensions": [
        "typing_extensions._SpecialGenericAlias",
        "typing_extensions._RequiredForm",
        "typing_extensions._NamedTupleMeta",
        "typing_extensions._TypeGuardForm",
        "typing_extensions._UnpackSpecialForm",
        "typing_extensions._ConcatenateForm",
        "typing_extensions._ExtensionsSpecialForm",
        "typing_extensions.NoDefaultType",
        "typing_extensions.TypeVar",
        "typing_extensions._LiteralGenericAlias",
        "typing_extensions.TypeVarTuple",
        "typing_extensions._ensure_subclassable",
        "typing_extensions._UnpackSpecialForm.__init__",
        "typing_extensions._AnnotatedAlias",
        "typing_extensions.SupportsBytes",
        "typing_extensions.SupportsAbs",
        "typing_extensions.Buffer",
        "typing_extensions.TypeAliasType",
        "typing_extensions._ProtocolMeta",
        "typing_extensions.Annotated",
        "typing_extensions.NewType",
        "typing_extensions.SupportsInt",
        "typing_extensions._TypeVarLikeMeta",
        "typing_extensions.Protocol",
        "typing_extensions.deprecated",
        "typing_extensions._Sentinel",
        "typing_extensions._TypedDictMeta",
        "typing_extensions.ParamSpecKwargs",
        "typing_extensions._ConcatenateGenericAlias",
        "typing_extensions.SupportsFloat",
        "typing_extensions.Any",
        "typing_extensions._AnyMeta",
        "typing_extensions._LiteralForm",
        "<builtin>.classmethod",
        "typing_extensions._SpecialGenericAlias.__init__",
        "typing_extensions.Doc",
        "append",
        "typing_extensions._LiteralForm.__init__",
        "typing_extensions.SupportsComplex",
        "typing_extensions._Immutable",
        "typing_extensions._TypeIsForm",
        "typing_extensions._UnpackAlias",
        "typing_extensions.SupportsIndex",
        "typing_extensions._ensure_subclassable.inner",
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.frozenset",
        "<builtin>.getattr",
        "typing_extensions.NoDefaultTypeMeta",
        "typing_extensions._DefaultMixin",
        "typing_extensions._SpecialForm.__init__",
        "typing_extensions.ParamSpec",
        "typing_extensions._ReadOnlyForm",
        "typing_extensions._UnpackForm",
        "typing_extensions.SupportsRound",
        "typing_extensions._SpecialForm",
        "typing_extensions.ParamSpecArgs"
    ],
    "typing_extensions._Sentinel": [],
    "typing_extensions._AnyMeta": [],
    "typing_extensions.Any": [],
    "typing_extensions._ExtensionsSpecialForm": [],
    "typing_extensions._LiteralGenericAlias": [],
    "typing_extensions._LiteralForm": [],
    "typing_extensions._LiteralForm.__init__": [],
    "typing_extensions._SpecialGenericAlias": [],
    "typing_extensions._SpecialGenericAlias.__init__": [
        "<builtin>.super"
    ],
    "<builtin>.frozenset": [],
    "typing_extensions._ProtocolMeta": [],
    "typing_extensions.Protocol": [],
    "typing_extensions.SupportsInt": [],
    "typing_extensions.SupportsFloat": [],
    "typing_extensions.SupportsComplex": [],
    "typing_extensions.SupportsBytes": [],
    "typing_extensions.SupportsIndex": [],
    "typing_extensions.SupportsAbs": [],
    "typing_extensions.SupportsRound": [],
    "typing_extensions._TypedDictMeta": [],
    "typing_extensions._ensure_subclassable": [],
    "typing_extensions._ensure_subclassable.inner": [
        "<builtin>.staticmethod",
        "<builtin>.type"
    ],
    "typing_extensions._AnnotatedAlias": [],
    "typing_extensions.Annotated": [],
    "typing_extensions.NoDefaultTypeMeta": [],
    "typing_extensions.NoDefaultType": [],
    "typing_extensions._DefaultMixin": [],
    "typing_extensions._TypeVarLikeMeta": [],
    "typing_extensions.TypeVar": [],
    "typing_extensions._Immutable": [],
    "typing_extensions.ParamSpecArgs": [],
    "typing_extensions.ParamSpecKwargs": [],
    "typing_extensions.ParamSpec": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateGenericAlias": [
        "<builtin>.property"
    ],
    "typing_extensions._ConcatenateForm": [],
    "typing_extensions._TypeGuardForm": [],
    "typing_extensions._TypeIsForm": [],
    "typing_extensions._SpecialForm": [],
    "typing_extensions._SpecialForm.__init__": [],
    "typing_extensions._RequiredForm": [],
    "typing_extensions._ReadOnlyForm": [],
    "typing_extensions._UnpackAlias": [],
    "typing_extensions._UnpackForm": [],
    "typing_extensions._UnpackSpecialForm": [],
    "typing_extensions._UnpackSpecialForm.__init__": [
        "<builtin>.super"
    ],
    "typing_extensions.TypeVarTuple": [],
    "typing_extensions.deprecated": [],
    "typing_extensions._NamedTupleMeta": [],
    "typing_extensions.Buffer": [],
    "typing_extensions.NewType": [],
    "typing_extensions.TypeAliasType": [],
    "typing_extensions.Doc": [],
    "torch._weights_only_unpickler": [
        "torch",
        "torch._weights_only_unpickler.Unpickler"
    ],
    "torch._weights_only_unpickler.Unpickler": [],
    "torch.serialization.SourceChangeWarning": [],
    "contextlib.contextmanager": [],
    "torch.serialization.register_package": [
        "append",
        "sort"
    ],
    "sort": [],
    "torch.serialization._opener": [],
    "torch.serialization._open_file": [],
    "torch.serialization._open_buffer_reader": [],
    "torch.serialization._open_buffer_writer": [],
    "torch.serialization._open_zipfile_reader": [],
    "torch.serialization._open_zipfile_writer_file": [],
    "torch.serialization._open_zipfile_writer_buffer": [],
    "torch.serialization.StorageType": [],
    "torch._tensor_str": [
        "torch._tensor_str.__PrinterOptions",
        "torch",
        "torch._tensor_str._Formatter"
    ],
    "torch._tensor_str.__PrinterOptions": [],
    "torch._tensor_str._Formatter": [],
    "torch.amp": [
        "torch.amp.autocast_mode"
    ],
    "torch.amp.autocast_mode": [
        "torch.amp.autocast_mode.autocast",
        "torch",
        "torch.types"
    ],
    "torch.amp.autocast_mode.autocast": [],
    "torch.manager_path": [
        "<builtin>.RuntimeError",
        "torch._utils_internal.prepare_multiprocessing_environment",
        "torch._utils_internal.get_file_path"
    ],
    "torch._utils_internal.get_file_path": [],
    "torch._utils_internal.prepare_multiprocessing_environment": [],
    "<str>.startswith": [],
    "torch.functional": [
        "torch.overrides",
        "torch._C._add_docstr",
        "torch._lowrank",
        "torch._VF",
        "torch.nn.functional",
        "torch._jit_internal.boolean_dispatch",
        "torch._jit_internal._overload",
        "torch._jit_internal",
        "torch.backends.opt_einsum",
        "torch"
    ],
    "torch.backends.opt_einsum": [
        "torch.backends",
        "torch.backends.opt_einsum.OptEinsumModule.__init__",
        "functools.lru_cache",
        "torch.backends.opt_einsum.OptEinsumModule",
        "torch.backends.opt_einsum.is_available",
        "contextlib.contextmanager"
    ],
    "torch.backends": [
        "torch.backends.ContextProp",
        "torch.backends.PropModule",
        "contextlib.contextmanager"
    ],
    "torch.backends.ContextProp": [],
    "torch.backends.PropModule": [],
    "torch.backends.opt_einsum.OptEinsumModule": [
        "torch.backends.opt_einsum.is_available",
        "torch.backends.ContextProp.__init__"
    ],
    "torch.backends.ContextProp.__init__": [],
    "torch.backends.opt_einsum.is_available": [],
    "torch.backends.opt_einsum.OptEinsumModule.__init__": [
        "<builtin>.super"
    ],
    "torch.nn.functional": [
        "torch.nn.modules.utils",
        "torch.nn._reduction",
        "torch.overrides",
        "torch._C._add_docstr",
        "torch._VF",
        "torch.types",
        "torch.nn.grad",
        "torch._jit_internal.boolean_dispatch",
        "torch._jit_internal._overload",
        "torch._torch_docs",
        "torch._jit_internal",
        "torch"
    ],
    "torch._VF": [
        "torch._VF.VFModule.__init__",
        "torch",
        "torch._VF.VFModule"
    ],
    "torch._VF.VFModule": [],
    "torch._VF.VFModule.__init__": [
        "<builtin>.super"
    ],
    "torch._torch_docs": [
        "<builtin>.hasattr",
        "torch._torch_docs.parse_kwargs",
        "torch._C._add_docstr",
        "<builtin>.getattr",
        "torch._torch_docs.merge_dicts"
    ],
    "torch._torch_docs.parse_kwargs": [
        "<str>.split",
        "<builtin>.len"
    ],
    "torch._torch_docs.merge_dicts": [],
    "torch._jit_internal": [
        "torch._jit_internal.SourceLoader",
        "torch.distributed.rpc",
        "torch.futures",
        "torch.package._mangling",
        "torch._jit_internal.SourceLoader.__init__",
        "torch.distributed.rpc.is_available",
        "torch._jit_internal.BroadcastingListCls",
        "torch._jit_internal._TensorExtractor",
        "<builtin>.globals",
        "torch._jit_internal.FunctionModifiers",
        "<builtin>.range",
        "torch",
        "torch._awaits",
        "torch._jit_internal._IgnoreContextManager",
        "torch._sources"
    ],
    "torch.distributed.rpc": [
        "<builtin>.RuntimeError",
        "torch.distributed.rpc.options",
        "torch.distributed.rpc.functions",
        "torch.distributed",
        "torch.distributed.rpc.is_available",
        "torch.distributed.rpc.api",
        "torch.distributed.rpc.backend_registry",
        "torch.distributed.rpc.server_process_global_profiler",
        "torch.distributed.rpc.api._require_initialized",
        "torch.distributed.autograd",
        "torch"
    ],
    "torch.distributed": [
        "<builtin>.RuntimeError",
        "torch",
        "torch.distributed.remote_device",
        "torch.distributed._ProcessGroupStub",
        "torch._C._distributed_c10d.set_debug_level_from_env",
        "torch.distributed.distributed_c10d",
        "torch.distributed.is_available",
        "torch.distributed.rendezvous"
    ],
    "torch.distributed.is_available": [
        "<builtin>.hasattr"
    ],
    "torch.distributed._ProcessGroupStub": [],
    "torch.distributed.distributed_c10d": [
        "torch.distributed.distributed_c10d._export_c_types",
        "torch.distributed.distributed_c10d._World.__init__",
        "torch.distributed.distributed_c10d._World",
        "torch.distributed.constants",
        "torch.distributed.distributed_c10d.group",
        "torch.distributed.c10d_error_logger",
        "torch.distributed.distributed_c10d._reduce_op",
        "torch.distributed.distributed_c10d.BackendConfig",
        "torch.distributed.distributed_c10d.P2POp",
        "torch.distributed.distributed_c10d.GroupMember",
        "torch.distributed.distributed_c10d.Backend",
        "torch.distributed.c10d_error_logger._get_or_create_logger",
        "torch.distributed.distributed_c10d._WorldMeta",
        "torch.distributed.distributed_c10d.exception_handler",
        "torch.autograd.profiler",
        "torch",
        "torch.distributed.distributed_c10d._reduce_op.__init__",
        "torch.distributed.rendezvous"
    ],
    "torch.autograd.profiler": [
        "torch.futures",
        "torch.autograd",
        "torch.autograd.profiler.record_function",
        "torch.cuda",
        "torch.autograd.profiler.emit_itt",
        "torch.autograd.profiler._ContextDecorator",
        "torch.autograd.profiler.EnforceUnique",
        "torch.autograd.profiler.KinetoStepTracker",
        "torch.autograd.profiler_util",
        "torch.autograd.profiler.profile",
        "torch.autograd.profiler.emit_nvtx",
        "torch"
    ],
    "torch.cuda": [
        "torch.cuda._CudaBase",
        "torch.cuda.DeferredCudaCallError",
        "torch.types",
        "torch.cuda._LazySeedTracker.__init__",
        "torch.cuda.IntStorage",
        "torch.cuda._DeviceGuard",
        "<builtin>.staticmethod",
        "torch.cuda.ShortStorage",
        "torch.cuda.DoubleStorage",
        "torch.cuda.profiler",
        "torch.cuda.nvtx",
        "torch.cuda.CudaError",
        "torch.cuda.random",
        "torch.cuda.sparse",
        "torch.cuda.LongStorage",
        "torch.cuda._LazySeedTracker",
        "torch.cuda.graphs",
        "torch.cuda.FloatStorage",
        "torch.cuda.jiterator",
        "torch.cuda.memory",
        "torch.cuda.ComplexDoubleStorage",
        "torch.cuda.amp",
        "torch.cuda.ComplexFloatStorage",
        "torch.cuda._utils._dummy_type",
        "torch.cuda.HalfStorage",
        "torch.cuda._utils",
        "torch.cuda.device",
        "torch.cuda._lazy_call",
        "torch.cuda._CudaLegacyStorage",
        "<builtin>.hasattr",
        "functools.lru_cache",
        "torch.cuda.streams",
        "<builtin>.getattr",
        "torch._utils",
        "torch.cuda.StreamContext",
        "torch.cuda.BFloat16Storage",
        "torch.cuda.cudaStatus",
        "torch.cuda.device_of",
        "torch.cuda.BoolStorage",
        "torch.cuda.CharStorage",
        "torch.storage",
        "torch",
        "torch.cuda.ByteStorage"
    ],
    "torch.cuda._utils": [
        "torch",
        "torch._utils"
    ],
    "torch.cuda.graphs": [
        "<builtin>.hasattr",
        "torch.cuda.graphs.CUDAGraph",
        "torch.cuda.graphs.graph",
        "torch.cuda._utils._dummy_type",
        "torch.utils._pytree",
        "torch.cuda._utils",
        "torch"
    ],
    "torch.utils._pytree": [
        "torch.utils._pytree.LeafSpec",
        "torch.utils._pytree.NodeDef",
        "torch.utils._pytree.TreeSpec",
        "torch.utils._pytree._register_pytree_node",
        "typing.overload",
        "typing.TypeVar"
    ],
    "torch.utils._pytree.NodeDef": [],
    "torch.utils._pytree._register_pytree_node": [],
    "torch.utils._pytree.TreeSpec": [],
    "torch.utils._pytree.LeafSpec": [],
    "typing.overload": [],
    "torch.cuda._utils._dummy_type": [
        "torch.cuda._utils._dummy_type.get_err_fn",
        "<builtin>.type"
    ],
    "torch.cuda._utils._dummy_type.get_err_fn": [],
    "torch.cuda.graphs.CUDAGraph": [],
    "torch.cuda.graphs.graph": [],
    "torch.cuda.streams": [
        "<builtin>.hasattr",
        "torch.cuda.streams.Stream",
        "torch.cuda.streams.Event",
        "torch.cuda._utils._dummy_type",
        "torch.cuda._utils",
        "torch.cuda.streams.ExternalStream",
        "torch"
    ],
    "torch.cuda.streams.Stream": [
        "<builtin>.property"
    ],
    "torch.cuda.streams.ExternalStream": [],
    "torch.cuda.streams.Event": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "torch.cuda._LazySeedTracker": [],
    "torch.cuda._LazySeedTracker.__init__": [],
    "torch.cuda._lazy_call": [
        "torch.cuda._LazySeedTracker.queue_seed",
        "torch.cuda._LazySeedTracker.queue_seed_all",
        "append",
        "torch.cuda.is_initialized",
        "<builtin>.callable"
    ],
    "torch.cuda.is_initialized": [],
    "torch.cuda._LazySeedTracker.queue_seed": [],
    "torch.cuda._LazySeedTracker.queue_seed_all": [],
    "<builtin>.callable": [],
    "torch.cuda.DeferredCudaCallError": [],
    "torch.cuda.cudaStatus": [],
    "torch.cuda.CudaError": [],
    "torch.cuda._DeviceGuard": [],
    "torch.cuda.device": [],
    "torch.cuda.device_of": [],
    "torch.cuda.StreamContext": [],
    "torch.cuda.memory": [
        "<builtin>.hasattr",
        "torch.cuda._memory_viz",
        "torch.types",
        "torch.cuda.memory._CUDAAllocator",
        "torch.cuda._utils._dummy_type",
        "torch.cuda._utils",
        "torch",
        "torch.cuda.memory.CUDAPluggableAllocator"
    ],
    "torch.cuda._memory_viz": [
        "functools.lru_cache",
        "torch.cuda._memory_viz.PlotWriter",
        "torch.cuda._memory_viz.Bytes.__init__",
        "torch.cuda._memory_viz.Bytes"
    ],
    "torch.cuda._memory_viz.Bytes": [],
    "torch.cuda._memory_viz.Bytes.__init__": [],
    "torch.cuda._memory_viz.PlotWriter": [],
    "torch.cuda.memory._CUDAAllocator": [],
    "torch.cuda.memory.CUDAPluggableAllocator": [],
    "torch.cuda.random": [
        "torch"
    ],
    "torch.cuda._CudaBase": [],
    "torch.cuda._CudaLegacyStorage": [
        "<builtin>.classmethod"
    ],
    "torch.cuda.ByteStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.DoubleStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.FloatStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.HalfStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.LongStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.IntStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.ShortStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.CharStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.BoolStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.BFloat16Storage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.ComplexDoubleStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.ComplexFloatStorage": [
        "torch._utils.classproperty"
    ],
    "torch.cuda.sparse": [],
    "torch.cuda.profiler": [],
    "torch.cuda.nvtx": [
        "torch.cuda.nvtx._NVTXStub",
        "contextlib.contextmanager"
    ],
    "torch.cuda.nvtx._NVTXStub": [
        "<builtin>.staticmethod"
    ],
    "torch.cuda.amp": [
        "torch.cuda.amp.grad_scaler",
        "torch.cuda.amp.autocast_mode"
    ],
    "torch.cuda.amp.autocast_mode": [
        "torch.cuda.amp.autocast_mode.autocast",
        "torch",
        "numpy"
    ],
    "torch.cuda.amp.autocast_mode.autocast": [],
    "torch.cuda.amp.grad_scaler": [
        "torch.cuda.amp.grad_scaler.OptState",
        "torch.cuda.amp.grad_scaler.GradScaler",
        "torch",
        "torch.cuda.amp.grad_scaler._MultiDeviceReplicator",
        "torch.cuda.amp.common"
    ],
    "torch.cuda.amp.common": [
        "torch"
    ],
    "torch.cuda.amp.grad_scaler._MultiDeviceReplicator": [],
    "torch.cuda.amp.grad_scaler.OptState": [],
    "torch.cuda.amp.grad_scaler.GradScaler": [],
    "torch.cuda.jiterator": [
        "torch.cuda.jiterator._JittedFunction",
        "torch",
        "torch.cuda.jiterator._CodeParser"
    ],
    "torch.cuda.jiterator._CodeParser": [],
    "torch.cuda.jiterator._JittedFunction": [],
    "torch.autograd": [
        "torch.autograd.functional",
        "<builtin>.RuntimeError",
        "torch.autograd.profiler",
        "torch.autograd.gradcheck",
        "torch.autograd.function",
        "torch.overrides",
        "torch.types",
        "torch.autograd.forward_ad",
        "torch.autograd.anomaly_mode",
        "torch.autograd.grad_mode",
        "torch.autograd.graph",
        "torch",
        "torch.autograd.variable"
    ],
    "torch.autograd.variable": [
        "torch.autograd.variable.Variable",
        "torch",
        "torch.autograd.variable.VariableMeta"
    ],
    "torch.autograd.variable.VariableMeta": [],
    "torch.autograd.variable.Variable": [
        "torch._C._ImperativeEngine"
    ],
    "torch._C._ImperativeEngine": [],
    "torch.autograd.function": [
        "torch.autograd.function.Function",
        "torch.autograd.function.FunctionCtx",
        "torch.autograd.function.NestedIOFunction",
        "torch.autograd.function._iter_filter",
        "torch.autograd.function.FunctionMeta",
        "torch.autograd.function._HookMixin",
        "torch.autograd.function._nested_map",
        "torch._functorch.autograd_function",
        "torch.autograd.function.InplaceFunction",
        "torch.autograd.function.BackwardCFunction",
        "torch._functorch",
        "torch.autograd.function._SingleLevelFunction",
        "torch",
        "torch.utils.hooks"
    ],
    "torch._functorch": [],
    "torch._functorch.autograd_function": [
        "torch._ops.PyOperator.py_impl",
        "torch._functorch.autograd_function.CustomFunctionPyOperator.__init__",
        "torch._ops",
        "torch._functorch.vmap",
        "torch._functorch.autograd_function.VmapInfo",
        "torch._functorch.autograd_function.CtxCustomSave",
        "torch.autograd.forward_ad",
        "torch.utils._pytree",
        "torch._functorch.utils",
        "torch._functorch.autograd_function.WrappedCtx",
        "torch._functorch.autograd_function.CtxWithSavedTensors",
        "torch",
        "torch._functorch.autograd_function.CustomFunctionPyOperator",
        "torch._ops.PyOperator.py_impl.inner"
    ],
    "torch._ops": [
        "torch._ops.OpOverloadPacket",
        "torch._ops._Ops.__init__",
        "<builtin>.hasattr",
        "torch._ops.PyOperatorABC",
        "torch._utils_internal",
        "torch._ops.OpOverload",
        "torch._ops._PyOpNamespace",
        "torch._functorch.pyfunctorch",
        "torch._ops._Ops",
        "torch._ops.PyOperator",
        "torch._ops._OpNamespace"
    ],
    "torch._functorch.pyfunctorch": [
        "torch._functorch.pyfunctorch.JvpInterpreter",
        "torch._functorch.pyfunctorch.FuncTorchInterpreter",
        "torch._functorch.pyfunctorch.GradInterpreter",
        "torch._functorch.pyfunctorch.FunctionalizeInterpreter",
        "torch.autograd.forward_ad",
        "torch._functorch.pyfunctorch.VmapInterpreter",
        "torch.utils._pytree",
        "torch"
    ],
    "torch.autograd.forward_ad": [
        "torch.autograd.forward_ad.UnpackedDualTensor",
        "collections.namedtuple",
        "torch.autograd.forward_ad.dual_level",
        "torch.autograd.grad_mode",
        "torch",
        "torch.autograd.forward_ad._set_fwd_grad_enabled"
    ],
    "torch.autograd.grad_mode": [
        "torch.autograd.grad_mode.set_grad_enabled",
        "torch.utils._contextlib",
        "torch.autograd.grad_mode.set_multithreading_enabled",
        "torch.autograd.grad_mode._force_original_view_tracking",
        "torch.autograd.grad_mode.no_grad",
        "torch.autograd.grad_mode.inference_mode",
        "torch.autograd.grad_mode._unsafe_preserve_version_counter",
        "torch",
        "torch.autograd.grad_mode.enable_grad"
    ],
    "torch.utils._contextlib": [
        "typing.TypeVar",
        "torch.utils._contextlib._DecoratorContextManager"
    ],
    "torch.utils._contextlib._DecoratorContextManager": [],
    "torch.autograd.grad_mode.no_grad": [],
    "torch.autograd.grad_mode.enable_grad": [],
    "torch.autograd.grad_mode.set_grad_enabled": [],
    "torch.autograd.grad_mode.inference_mode": [],
    "torch.autograd.grad_mode.set_multithreading_enabled": [],
    "torch.autograd.grad_mode._force_original_view_tracking": [],
    "torch.autograd.grad_mode._unsafe_preserve_version_counter": [],
    "collections.namedtuple": [],
    "torch.autograd.forward_ad.UnpackedDualTensor": [],
    "torch.autograd.forward_ad.dual_level": [],
    "torch.autograd.forward_ad._set_fwd_grad_enabled": [],
    "torch._functorch.pyfunctorch.FuncTorchInterpreter": [
        "abc.abstractmethod"
    ],
    "abc.abstractmethod": [],
    "torch._functorch.pyfunctorch.VmapInterpreter": [],
    "torch._functorch.pyfunctorch.GradInterpreter": [],
    "torch._functorch.pyfunctorch.JvpInterpreter": [],
    "torch._functorch.pyfunctorch.FunctionalizeInterpreter": [],
    "torch._ops.PyOperatorABC": [],
    "torch._ops.PyOperator": [],
    "torch._ops.OpOverload": [
        "<builtin>.property"
    ],
    "torch._ops.OpOverloadPacket": [
        "<builtin>.property"
    ],
    "torch._ops._OpNamespace": [],
    "torch._ops._PyOpNamespace": [],
    "torch._ops._Ops": [],
    "torch._ops._Ops.__init__": [
        "torch._ops._PyOpNamespace.__init__",
        "<builtin>.set",
        "<builtin>.super"
    ],
    "torch._ops._PyOpNamespace.__init__": [
        "<builtin>.super"
    ],
    "torch._functorch.utils": [
        "torch"
    ],
    "torch._functorch.vmap": [
        "torch._functorch.vmap.doesnt_support_saved_tensors_hooks",
        "torch._functorch.utils.exposed_in",
        "torch._functorch.utils.exposed_in.wrapper",
        "torch.utils._pytree",
        "torch._functorch.utils",
        "torch",
        "torch._functorch.pytree_hacks"
    ],
    "torch._functorch.pytree_hacks": [
        "torch._functorch.pytree_hacks.PlaceHolder",
        "torch.utils._pytree"
    ],
    "torch._functorch.pytree_hacks.PlaceHolder": [],
    "torch._functorch.utils.exposed_in": [],
    "torch._functorch.utils.exposed_in.wrapper": [],
    "torch._functorch.vmap.doesnt_support_saved_tensors_hooks": [],
    "torch._functorch.autograd_function.CustomFunctionPyOperator": [],
    "torch._functorch.autograd_function.CustomFunctionPyOperator.__init__": [
        "<builtin>.super"
    ],
    "torch._ops.PyOperator.py_impl": [],
    "torch._ops.PyOperator.py_impl.inner": [
        "<builtin>.issubclass",
        "<builtin>.isinstance"
    ],
    "torch._functorch.autograd_function.VmapInfo": [],
    "torch._functorch.autograd_function.WrappedCtx": [],
    "torch._functorch.autograd_function.CtxWithSavedTensors": [
        "<builtin>.property"
    ],
    "torch._functorch.autograd_function.CtxCustomSave": [],
    "torch.autograd.function.FunctionCtx": [],
    "torch.autograd.function._HookMixin": [
        "<builtin>.staticmethod"
    ],
    "torch.autograd.function.BackwardCFunction": [],
    "torch.autograd.function.FunctionMeta": [],
    "torch.autograd.function._SingleLevelFunction": [
        "<builtin>.staticmethod"
    ],
    "torch.autograd.function.Function": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.autograd.function.InplaceFunction": [],
    "torch.autograd.function._iter_filter": [],
    "torch.autograd.function._nested_map": [],
    "torch.autograd.function.NestedIOFunction": [
        "<builtin>.property"
    ],
    "torch.autograd.gradcheck": [
        "torch.overrides",
        "torch.autograd.gradcheck.GradcheckError",
        "torch.types",
        "torch._vmap_internals",
        "torch.testing",
        "<str>.strip",
        "torch"
    ],
    "torch.testing": [
        "torch.testing._comparison",
        "torch.testing._creation"
    ],
    "torch.testing._comparison": [
        "torch.testing._comparison.ObjectPair",
        "torch.testing._comparison.UnsupportedInputs",
        "torch.testing._comparison.NonePair",
        "torch.testing._comparison.Pair",
        "torch.testing._comparison.NumberPair",
        "torch.testing._comparison.BooleanPair",
        "<map>.update",
        "torch.testing._comparison.ErrorMeta",
        "torch",
        "numpy",
        "torch.testing._comparison.TensorLikePair"
    ],
    "torch.testing._comparison.ErrorMeta": [],
    "torch.testing._comparison.UnsupportedInputs": [],
    "torch.testing._comparison.Pair": [
        "<builtin>.staticmethod"
    ],
    "torch.testing._comparison.ObjectPair": [],
    "torch.testing._comparison.NonePair": [],
    "torch.testing._comparison.BooleanPair": [
        "<builtin>.property"
    ],
    "torch.testing._comparison.NumberPair": [
        "<builtin>.property",
        "<builtin>.tuple",
        "<map>.keys"
    ],
    "torch.testing._comparison.TensorLikePair": [],
    "torch.testing._creation": [
        "torch",
        "<map>.items"
    ],
    "torch._vmap_internals": [
        "torch",
        "torch.utils._pytree"
    ],
    "torch.autograd.gradcheck.GradcheckError": [],
    "torch.autograd.anomaly_mode": [
        "torch.autograd.anomaly_mode.set_detect_anomaly",
        "torch",
        "torch.autograd.anomaly_mode.detect_anomaly"
    ],
    "torch.autograd.anomaly_mode.detect_anomaly": [],
    "torch.autograd.anomaly_mode.set_detect_anomaly": [],
    "torch.autograd.functional": [
        "torch",
        "torch._vmap_internals",
        "torch.autograd.forward_ad"
    ],
    "torch.autograd.graph": [
        "torch.utils._python_dispatch",
        "torch.autograd.graph.save_on_cpu",
        "torch.autograd.graph._CloneArgBeforeMutateMode",
        "torch.autograd.graph._swap_with_cloned",
        "torch.autograd.graph.Node",
        "torch.autograd.graph._Handle",
        "torch.autograd.graph.saved_tensors_hooks",
        "torch",
        "torch.autograd.graph._AllowMutationOnSavedContext",
        "torch.utils.hooks"
    ],
    "torch.utils._python_dispatch": [
        "torch.utils._python_dispatch.BaseTorchDispatchMode",
        "torch.utils._python_dispatch.TorchDispatchMode"
    ],
    "torch.utils._python_dispatch.TorchDispatchMode": [
        "<builtin>.classmethod"
    ],
    "torch.utils._python_dispatch.BaseTorchDispatchMode": [],
    "torch.autograd.graph.Node": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "torch.autograd.graph.saved_tensors_hooks": [],
    "torch.autograd.graph.save_on_cpu": [],
    "torch.autograd.graph._Handle": [],
    "torch.autograd.graph._swap_with_cloned": [],
    "torch.autograd.graph._CloneArgBeforeMutateMode": [],
    "torch.autograd.graph._AllowMutationOnSavedContext": [],
    "torch.autograd.profiler_util": [
        "torch.autograd",
        "torch.autograd.profiler_util.FunctionEventAvg",
        "torch.autograd.profiler_util.FunctionEvent",
        "torch.autograd.profiler_util.EventList",
        "collections.namedtuple",
        "torch.autograd.profiler_util.Interval",
        "torch.autograd.profiler_util.MemRecordsAcc",
        "torch.autograd.profiler_util.StringTable",
        "torch",
        "torch.autograd.profiler_util.FormattedTimesMixin"
    ],
    "torch.autograd.profiler_util.EventList": [
        "<builtin>.property"
    ],
    "torch.autograd.profiler_util.FormattedTimesMixin": [
        "torch.autograd.profiler_util._attr_formatter",
        "<builtin>.property"
    ],
    "torch.autograd.profiler_util._attr_formatter": [
        "<builtin>.property"
    ],
    "torch.autograd.profiler_util.Interval": [],
    "torch.autograd.profiler_util.FunctionEvent": [
        "<builtin>.property"
    ],
    "torch.autograd.profiler_util.FunctionEventAvg": [],
    "torch.autograd.profiler_util.StringTable": [],
    "torch.autograd.profiler_util.MemRecordsAcc": [],
    "torch.futures": [
        "<builtin>.type",
        "torch.futures._PyFutureMeta",
        "torch.futures.Future",
        "torch",
        "typing.TypeVar"
    ],
    "torch.futures._PyFutureMeta": [],
    "torch.futures.Future": [],
    "torch.autograd.profiler._ContextDecorator": [],
    "torch.autograd.profiler.profile": [
        "<builtin>.property"
    ],
    "torch.autograd.profiler.record_function": [],
    "torch.autograd.profiler.emit_itt": [],
    "torch.autograd.profiler.emit_nvtx": [],
    "torch.autograd.profiler.EnforceUnique": [],
    "torch.autograd.profiler.KinetoStepTracker": [
        "<builtin>.classmethod",
        "collections.defaultdict"
    ],
    "collections.defaultdict": [],
    "torch.distributed.constants": [],
    "torch.distributed.c10d_error_logger": [
        "torch.distributed.logging_handlers"
    ],
    "torch.distributed.logging_handlers": [],
    "torch.distributed.rendezvous": [
        "torch.distributed",
        "<builtin>.ImportError",
        "torch.distributed.constants",
        "torch.distributed.rendezvous.register_rendezvous_handler"
    ],
    "torch.distributed.rendezvous.register_rendezvous_handler": [
        "<builtin>.RuntimeError"
    ],
    "torch.distributed.distributed_c10d._export_c_types": [],
    "torch.distributed.c10d_error_logger._get_or_create_logger": [
        "torch.distributed.c10d_error_logger._get_logging_handler"
    ],
    "torch.distributed.c10d_error_logger._get_logging_handler": [
        "<builtin>.type"
    ],
    "torch.distributed.distributed_c10d.Backend": [
        "<builtin>.classmethod",
        "collections.namedtuple"
    ],
    "torch.distributed.distributed_c10d.BackendConfig": [],
    "torch.distributed.distributed_c10d._reduce_op": [],
    "torch.distributed.distributed_c10d._reduce_op.__init__": [
        "<builtin>.setattr"
    ],
    "torch.distributed.distributed_c10d._World": [
        "<builtin>.property"
    ],
    "torch.distributed.distributed_c10d._World.__init__": [],
    "torch.distributed.distributed_c10d._WorldMeta": [
        "<builtin>.property"
    ],
    "torch.distributed.distributed_c10d.group": [],
    "torch.distributed.distributed_c10d.GroupMember": [
        "<builtin>.object"
    ],
    "<builtin>.object": [],
    "torch.distributed.distributed_c10d.P2POp": [],
    "torch.distributed.distributed_c10d.exception_handler": [],
    "torch.distributed.remote_device": [
        "torch.distributed.remote_device._remote_device",
        "torch"
    ],
    "torch.distributed.remote_device._remote_device": [
        "<builtin>.staticmethod"
    ],
    "torch._C._distributed_c10d.set_debug_level_from_env": [],
    "torch.distributed.rpc.is_available": [
        "<builtin>.hasattr"
    ],
    "torch.distributed.rpc.api": [
        "torch.distributed.rpc.api.method_factory",
        "torch.futures",
        "torch.distributed.rpc.api.RRefMeta",
        "<builtin>.setattr",
        "torch.distributed.rpc.api.AllGatherStates",
        "torch.distributed.rpc.api._require_initialized",
        "<builtin>.getattr",
        "torch.distributed.rpc.internal",
        "torch.distributed.rpc.constants",
        "<builtin>.set",
        "torch.distributed.rpc.api.RRef",
        "torch",
        "typing.TypeVar",
        "torch.distributed.rpc._utils"
    ],
    "torch.distributed.rpc.internal": [
        "torch.distributed.rpc.internal._InternalRPCPickler.__init__",
        "torch.distributed",
        "torch.distributed.rpc.internal._InternalRPCPickler",
        "torch.distributed.rpc.internal.RPCExecMode",
        "torch"
    ],
    "torch.distributed.rpc.internal.RPCExecMode": [],
    "torch.distributed.rpc.internal._InternalRPCPickler": [
        "<builtin>.classmethod"
    ],
    "torch.distributed.rpc.internal._InternalRPCPickler.__init__": [],
    "torch.distributed.rpc.constants": [
        "datetime.timedelta"
    ],
    "datetime.timedelta": [],
    "torch.distributed.rpc._utils": [
        "torch.distributed.rpc.api",
        "contextlib.contextmanager"
    ],
    "torch.distributed.rpc.api.AllGatherStates": [],
    "torch.distributed.rpc.api._require_initialized": [],
    "torch.distributed.rpc.api.RRef": [],
    "torch.distributed.rpc.api.RRefMeta": [],
    "torch.distributed.rpc.api.method_factory": [],
    "torch.distributed.rpc.backend_registry": [
        "torch.distributed",
        "torch.distributed.rpc.api",
        "torch.distributed.rpc._utils",
        "torch.distributed.rpc.backend_registry.register_backend",
        "<builtin>.dict",
        "torch",
        "torch.distributed.rpc.constants"
    ],
    "torch.distributed.rpc.backend_registry.register_backend": [
        "<builtin>.RuntimeError",
        "torch.distributed.rpc.backend_registry.backend_registered",
        "<builtin>.dict"
    ],
    "torch.distributed.rpc.backend_registry.backend_registered": [],
    "torch.distributed.rpc.functions": [],
    "torch.distributed.autograd": [
        "<builtin>.RuntimeError",
        "torch",
        "torch.distributed.autograd.context",
        "torch.distributed.autograd.is_available"
    ],
    "torch.distributed.autograd.is_available": [
        "<builtin>.hasattr"
    ],
    "torch.distributed.autograd.context": [],
    "torch.distributed.rpc.options": [
        "torch.distributed.rpc.options.TensorPipeRpcBackendOptions",
        "torch",
        "torch.distributed.rpc.constants"
    ],
    "torch.distributed.rpc.options.TensorPipeRpcBackendOptions": [],
    "torch.distributed.rpc.server_process_global_profiler": [
        "torch.distributed.rpc.server_process_global_profiler._server_process_global_profile",
        "torch",
        "torch.autograd.profiler_legacy"
    ],
    "torch.autograd.profiler_legacy": [
        "torch.autograd",
        "torch.cuda",
        "torch.autograd.profiler_legacy.profile",
        "torch.autograd.profiler_util",
        "torch"
    ],
    "torch.autograd.profiler_legacy.profile": [
        "<builtin>.property"
    ],
    "torch.distributed.rpc.server_process_global_profiler._server_process_global_profile": [],
    "torch.package._mangling": [
        "torch.package._mangling.PackageMangler"
    ],
    "torch.package._mangling.PackageMangler": [],
    "torch._awaits": [
        "torch._awaits._Await",
        "torch._awaits._PyAwaitMeta",
        "<builtin>.type",
        "torch",
        "typing.TypeVar"
    ],
    "torch._awaits._PyAwaitMeta": [],
    "torch._awaits._Await": [],
    "torch._jit_internal.SourceLoader": [],
    "torch._jit_internal.SourceLoader.__init__": [],
    "torch._jit_internal.FunctionModifiers": [],
    "torch._jit_internal._IgnoreContextManager": [],
    "torch._jit_internal.BroadcastingListCls": [],
    "torch._jit_internal._TensorExtractor": [],
    "torch.nn._reduction": [],
    "torch.nn.grad": [
        "torch.nn.modules.utils",
        "torch"
    ],
    "torch.nn.modules.utils": [
        "torch.nn.modules.utils._ntuple"
    ],
    "torch.nn.modules.utils._ntuple": [],
    "torch._jit_internal.boolean_dispatch": [
        "<builtin>.RuntimeError"
    ],
    "torch._jit_internal._overload": [
        "torch._jit_internal._check_overload_body",
        "append",
        "torch._jit_internal._qualified_name"
    ],
    "torch._jit_internal._check_overload_body": [
        "<builtin>.RuntimeError",
        "torch._jit_internal._check_overload_body.is_pass",
        "torch._jit_internal._check_overload_body.is_ellipsis",
        "torch._sources.parse_def",
        "<builtin>.len"
    ],
    "torch._sources.parse_def": [
        "<builtin>.RuntimeError",
        "<str>.split",
        "<builtin>.isinstance",
        "torch._sources.make_source_context",
        "textwrap.dedent",
        "<builtin>.len",
        "torch._sources.get_source_lines_and_file",
        "torch._sources.normalize_source_lines"
    ],
    "torch._sources.get_source_lines_and_file": [
        "<builtin>.OSError"
    ],
    "<builtin>.OSError": [],
    "torch._sources.normalize_source_lines": [
        "<builtin>.enumerate",
        "torch._sources.normalize_source_lines.remove_prefix"
    ],
    "<builtin>.enumerate": [],
    "torch._sources.normalize_source_lines.remove_prefix": [
        "<builtin>.len"
    ],
    "textwrap.dedent": [],
    "torch._sources.make_source_context": [
        "torch._sources.SourceContext.__init__"
    ],
    "torch._sources.SourceContext.__init__": [
        "<builtin>.super"
    ],
    "torch._jit_internal._check_overload_body.is_pass": [
        "<builtin>.isinstance"
    ],
    "torch._jit_internal._check_overload_body.is_ellipsis": [
        "<builtin>.isinstance"
    ],
    "torch._jit_internal._qualified_name": [
        "<builtin>.RuntimeError",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "torch.package._mangling.is_mangled"
    ],
    "torch.package._mangling.is_mangled": [
        "<builtin>.bool"
    ],
    "torch._lowrank": [
        "torch",
        "torch._linalg_utils",
        "torch.overrides"
    ],
    "torch._linalg_utils": [
        "torch"
    ],
    "torch.cpu": [
        "torch.cpu.amp"
    ],
    "torch.cpu.amp": [
        "torch.cpu.amp.autocast_mode"
    ],
    "torch.cpu.amp.autocast_mode": [
        "torch.cpu.amp.autocast_mode.autocast",
        "torch"
    ],
    "torch.cpu.amp.autocast_mode.autocast": [],
    "torch.fft": [
        "torch",
        "torch._torch_docs",
        "torch._C._add_docstr"
    ],
    "torch.nested": [
        "torch",
        "torch.types",
        "torch._C._add_docstr"
    ],
    "torch.nn": [
        "torch.nn.utils",
        "torch.nn.init",
        "torch.nn.functional",
        "torch.nn.modules",
        "torch.nn.parameter",
        "torch.nn.parallel"
    ],
    "torch.nn.modules": [
        "torch.nn.modules.sparse",
        "torch.nn.modules.linear",
        "torch.nn.modules.padding",
        "torch.nn.modules.distance",
        "torch.nn.modules.container",
        "torch.nn.modules.pixelshuffle",
        "torch.nn.modules.transformer",
        "torch.nn.modules.rnn",
        "torch.nn.modules.module",
        "torch.nn.modules.loss",
        "torch.nn.modules.channelshuffle",
        "torch.nn.modules.conv",
        "torch.nn.modules.activation",
        "torch.nn.modules.adaptive",
        "torch.nn.modules.fold",
        "torch.nn.modules.pooling",
        "torch.nn.modules.flatten",
        "torch.nn.modules.dropout",
        "torch.nn.modules.instancenorm",
        "torch.nn.modules.normalization",
        "torch.nn.modules.batchnorm",
        "torch.nn.modules.upsampling"
    ],
    "torch.nn.modules.module": [
        "torch.nn.modules.module.Module",
        "collections.namedtuple",
        "collections.OrderedDict",
        "torch.nn.modules.module._IncompatibleKeys",
        "torch.nn.modules.module._WrappedHook",
        "torch.nn.parameter",
        "torch",
        "typing.TypeVar",
        "torch.utils.hooks"
    ],
    "torch.nn.parameter": [
        "torch.nn.parameter.UninitializedParameter",
        "torch.nn.parameter.UninitializedBuffer",
        "torch.nn.parameter.Parameter",
        "torch.nn.parameter._ParameterMeta",
        "torch",
        "torch.nn.parameter.UninitializedTensorMixin"
    ],
    "torch.nn.parameter._ParameterMeta": [],
    "torch.nn.parameter.Parameter": [],
    "torch.nn.parameter.UninitializedTensorMixin": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "torch.nn.parameter.UninitializedParameter": [],
    "torch.nn.parameter.UninitializedBuffer": [],
    "torch.nn.modules.module._IncompatibleKeys": [],
    "collections.OrderedDict": [],
    "torch.nn.modules.module._WrappedHook": [],
    "torch.nn.modules.module.Module": [
        "typing.overload",
        "typing.TypeVar"
    ],
    "torch.nn.modules.linear": [
        "torch.nn.modules.linear.NonDynamicallyQuantizableLinear",
        "torch.nn",
        "torch.nn.modules.lazy",
        "torch.nn.modules.linear.LazyLinear",
        "torch.functional",
        "torch.nn.modules.linear.Linear",
        "torch.nn.modules.linear.Identity",
        "torch.nn.modules.linear.Bilinear",
        "torch.nn.parameter",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.lazy": [
        "torch.nn.modules.lazy.LazyModuleMixin",
        "torch.nn.parameter",
        "torch",
        "torch.nn.modules.lazy._LazyProtocol"
    ],
    "torch.nn.modules.lazy._LazyProtocol": [
        "<builtin>.property"
    ],
    "torch.nn.modules.lazy.LazyModuleMixin": [],
    "torch.nn.modules.linear.Identity": [],
    "torch.nn.modules.linear.Linear": [],
    "torch.nn.modules.linear.NonDynamicallyQuantizableLinear": [],
    "torch.nn.modules.linear.Bilinear": [],
    "torch.nn.modules.linear.LazyLinear": [],
    "torch.nn.modules.conv": [
        "torch.nn",
        "torch.nn.modules.utils",
        "torch.nn.modules.conv.Conv3d",
        "torch.nn.modules.conv.ConvTranspose2d",
        "torch.nn.modules.conv.LazyConvTranspose2d",
        "torch.functional",
        "torch.nn.modules.conv.LazyConv2d",
        "torch.nn.modules.conv._ConvNd",
        "torch.nn.modules.conv._LazyConvXdMixin",
        "torch.nn.modules.conv.LazyConvTranspose1d",
        "torch.nn.modules.conv.ConvTranspose3d",
        "torch.nn.modules.conv.Conv2d",
        "torch.nn.modules.conv.LazyConvTranspose3d",
        "torch.nn.modules.conv._ConvTransposeNd",
        "torch._torch_docs",
        "torch.nn.common_types",
        "torch.nn.modules.conv.LazyConv3d",
        "torch.nn.modules.conv._ConvTransposeMixin",
        "torch.nn.modules.module",
        "torch.nn.modules.lazy",
        "torch.nn.modules.conv.LazyConv1d",
        "torch.nn.modules.conv.ConvTranspose1d",
        "torch.nn.parameter",
        "torch.nn.modules.conv.Conv1d",
        "torch"
    ],
    "torch.nn.common_types": [
        "torch",
        "typing.TypeVar"
    ],
    "torch.nn.modules.conv._ConvNd": [],
    "torch.nn.modules.conv.Conv1d": [],
    "torch.nn.modules.conv.Conv2d": [],
    "torch.nn.modules.conv.Conv3d": [],
    "torch.nn.modules.conv._ConvTransposeNd": [],
    "torch.nn.modules.conv.ConvTranspose1d": [],
    "torch.nn.modules.conv.ConvTranspose2d": [],
    "torch.nn.modules.conv.ConvTranspose3d": [],
    "torch.nn.modules.conv._ConvTransposeMixin": [],
    "torch.nn.modules.conv._LazyConvXdMixin": [],
    "torch.nn.modules.conv.LazyConv1d": [],
    "torch.nn.modules.conv.LazyConv2d": [],
    "torch.nn.modules.conv.LazyConv3d": [],
    "torch.nn.modules.conv.LazyConvTranspose1d": [],
    "torch.nn.modules.conv.LazyConvTranspose2d": [],
    "torch.nn.modules.conv.LazyConvTranspose3d": [],
    "torch.nn.modules.activation": [
        "torch.nn.init",
        "torch.nn.modules.linear",
        "torch.nn.modules.activation.RReLU",
        "torch.nn.modules.activation.Softsign",
        "torch.nn.modules.activation.LeakyReLU",
        "torch.nn.modules.activation.Softmin",
        "torch.nn.modules.activation.ELU",
        "torch.functional",
        "torch.nn.modules.activation.Softmax2d",
        "torch.nn.modules.activation.Tanhshrink",
        "torch.nn.modules.activation.CELU",
        "torch.nn.modules.activation.Softmax",
        "torch.nn.modules.activation.LogSoftmax",
        "torch.nn.modules.activation.ReLU6",
        "torch.nn.modules.activation.GELU",
        "torch.nn.modules.activation.Tanh",
        "torch.nn.modules.activation.LogSigmoid",
        "torch.nn.modules.activation.GLU",
        "torch.nn.modules.activation.Softplus",
        "torch.nn.modules.activation.Hardswish",
        "torch.nn.modules.activation.MultiheadAttention",
        "torch.nn.modules.module",
        "torch.nn.modules.activation.Softshrink",
        "torch.nn.modules.activation.PReLU",
        "torch.nn.modules.activation.SELU",
        "torch.nn.modules.activation.Hardsigmoid",
        "torch.nn.modules.activation.Mish",
        "torch.nn.modules.activation.SiLU",
        "torch.nn.modules.activation.Hardshrink",
        "torch.nn.parameter",
        "torch.nn.modules.activation.ReLU",
        "torch.nn.modules.activation.Sigmoid",
        "torch.nn.modules.activation.Threshold",
        "torch",
        "torch.nn.modules.activation.Hardtanh"
    ],
    "torch.nn.init": [
        "torch.nn.init._make_deprecate",
        "torch"
    ],
    "torch.nn.init._make_deprecate": [],
    "torch.nn.modules.activation.Threshold": [],
    "torch.nn.modules.activation.ReLU": [],
    "torch.nn.modules.activation.RReLU": [],
    "torch.nn.modules.activation.Hardtanh": [],
    "torch.nn.modules.activation.ReLU6": [],
    "torch.nn.modules.activation.Sigmoid": [],
    "torch.nn.modules.activation.Hardsigmoid": [],
    "torch.nn.modules.activation.Tanh": [],
    "torch.nn.modules.activation.SiLU": [],
    "torch.nn.modules.activation.Mish": [],
    "torch.nn.modules.activation.Hardswish": [],
    "torch.nn.modules.activation.ELU": [],
    "torch.nn.modules.activation.CELU": [],
    "torch.nn.modules.activation.SELU": [],
    "torch.nn.modules.activation.GLU": [],
    "torch.nn.modules.activation.GELU": [],
    "torch.nn.modules.activation.Hardshrink": [],
    "torch.nn.modules.activation.LeakyReLU": [],
    "torch.nn.modules.activation.LogSigmoid": [],
    "torch.nn.modules.activation.Softplus": [],
    "torch.nn.modules.activation.Softshrink": [],
    "torch.nn.modules.activation.MultiheadAttention": [],
    "torch.nn.modules.activation.PReLU": [],
    "torch.nn.modules.activation.Softsign": [],
    "torch.nn.modules.activation.Tanhshrink": [],
    "torch.nn.modules.activation.Softmin": [],
    "torch.nn.modules.activation.Softmax": [],
    "torch.nn.modules.activation.Softmax2d": [],
    "torch.nn.modules.activation.LogSoftmax": [],
    "torch.nn.modules.loss": [
        "torch.nn",
        "torch.nn.modules.loss.BCEWithLogitsLoss",
        "torch.nn.modules.loss.GaussianNLLLoss",
        "torch.nn.modules.loss._WeightedLoss",
        "torch.functional",
        "torch.nn.modules.loss.L1Loss",
        "torch.nn.modules.loss.MultiLabelMarginLoss",
        "torch.nn.modules.loss.PoissonNLLLoss",
        "torch.nn.modules.distance",
        "torch.nn.modules.loss.TripletMarginLoss",
        "torch.nn.modules.loss.MSELoss",
        "torch.nn.modules.loss.SmoothL1Loss",
        "torch.nn.modules.loss.HingeEmbeddingLoss",
        "torch.nn.modules.loss.SoftMarginLoss",
        "torch.nn.modules.loss.MarginRankingLoss",
        "torch.nn.modules.loss.HuberLoss",
        "torch.nn.modules.module",
        "torch.nn.modules.loss.TripletMarginWithDistanceLoss",
        "torch.nn.modules.loss.CrossEntropyLoss",
        "torch.nn.modules.loss._Loss",
        "torch.nn.modules.loss.BCELoss",
        "torch.nn.modules.loss.MultiLabelSoftMarginLoss",
        "torch.nn.modules.loss.KLDivLoss",
        "torch.nn.modules.loss.CTCLoss",
        "torch.nn.modules.loss.MultiMarginLoss",
        "torch.nn.modules.loss.CosineEmbeddingLoss",
        "torch.nn.modules.loss.NLLLoss2d",
        "torch",
        "torch.nn.modules.loss.NLLLoss"
    ],
    "torch.nn.modules.distance": [
        "torch.nn.modules.distance.CosineSimilarity",
        "torch.functional",
        "torch",
        "torch.nn.modules.distance.PairwiseDistance",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.distance.PairwiseDistance": [],
    "torch.nn.modules.distance.CosineSimilarity": [],
    "torch.nn.modules.loss._Loss": [],
    "torch.nn.modules.loss._WeightedLoss": [],
    "torch.nn.modules.loss.L1Loss": [],
    "torch.nn.modules.loss.NLLLoss": [],
    "torch.nn.modules.loss.NLLLoss2d": [],
    "torch.nn.modules.loss.PoissonNLLLoss": [],
    "torch.nn.modules.loss.GaussianNLLLoss": [],
    "torch.nn.modules.loss.KLDivLoss": [],
    "torch.nn.modules.loss.MSELoss": [],
    "torch.nn.modules.loss.BCELoss": [],
    "torch.nn.modules.loss.BCEWithLogitsLoss": [],
    "torch.nn.modules.loss.HingeEmbeddingLoss": [],
    "torch.nn.modules.loss.MultiLabelMarginLoss": [],
    "torch.nn.modules.loss.SmoothL1Loss": [],
    "torch.nn.modules.loss.HuberLoss": [],
    "torch.nn.modules.loss.SoftMarginLoss": [],
    "torch.nn.modules.loss.CrossEntropyLoss": [],
    "torch.nn.modules.loss.MultiLabelSoftMarginLoss": [],
    "torch.nn.modules.loss.CosineEmbeddingLoss": [],
    "torch.nn.modules.loss.MarginRankingLoss": [],
    "torch.nn.modules.loss.MultiMarginLoss": [],
    "torch.nn.modules.loss.TripletMarginLoss": [],
    "torch.nn.modules.loss.TripletMarginWithDistanceLoss": [],
    "torch.nn.modules.loss.CTCLoss": [],
    "torch.nn.modules.container": [
        "torch.nn.modules.container.ModuleList",
        "torch.nn.modules.container.ParameterList",
        "torch.nn.modules.container.ModuleDict",
        "torch.nn.modules.container.Container",
        "torch.nn.modules.container.ParameterDict",
        "torch.nn.modules.container.Sequential",
        "torch._jit_internal",
        "torch.nn.parameter",
        "torch",
        "typing.TypeVar",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.container.Container": [],
    "torch.nn.modules.container.Sequential": [
        "typing.overload",
        "torch._jit_internal._copy_to_script_wrapper"
    ],
    "torch._jit_internal._copy_to_script_wrapper": [],
    "torch.nn.modules.container.ModuleList": [
        "torch._jit_internal._copy_to_script_wrapper"
    ],
    "torch.nn.modules.container.ModuleDict": [
        "torch._jit_internal._copy_to_script_wrapper"
    ],
    "torch.nn.modules.container.ParameterList": [
        "typing.overload"
    ],
    "torch.nn.modules.container.ParameterDict": [],
    "torch.nn.modules.pooling": [
        "torch.nn.modules.utils",
        "torch.nn.modules.pooling._AvgPoolNd",
        "torch.nn.modules.pooling.MaxUnpool3d",
        "torch.nn.modules.pooling.MaxUnpool2d",
        "torch.nn.modules.pooling.AdaptiveAvgPool3d",
        "torch.nn.modules.pooling.AvgPool1d",
        "torch.nn.modules.pooling.MaxUnpool1d",
        "torch.nn.modules.pooling.LPPool1d",
        "torch.functional",
        "torch.nn.modules.pooling.LPPool2d",
        "torch.nn.modules.pooling._MaxPoolNd",
        "torch.nn.modules.pooling.MaxPool3d",
        "torch.nn.modules.pooling.AvgPool2d",
        "torch.nn.common_types",
        "torch.nn.modules.pooling._AdaptiveAvgPoolNd",
        "torch.nn.modules.pooling.AdaptiveAvgPool2d",
        "torch.nn.modules.pooling.FractionalMaxPool3d",
        "torch.nn.modules.pooling.AvgPool3d",
        "torch.nn.modules.module",
        "torch.nn.modules.pooling._AdaptiveMaxPoolNd",
        "torch.nn.modules.pooling.FractionalMaxPool2d",
        "torch.nn.modules.pooling.MaxPool1d",
        "torch.nn.modules.pooling.AdaptiveAvgPool1d",
        "torch.nn.modules.pooling.MaxPool2d",
        "torch.nn.modules.pooling.AdaptiveMaxPool1d",
        "torch.nn.modules.pooling._MaxUnpoolNd",
        "torch.nn.modules.pooling.AdaptiveMaxPool3d",
        "torch.nn.modules.pooling.AdaptiveMaxPool2d",
        "torch.nn.modules.pooling._LPPoolNd",
        "torch"
    ],
    "torch.nn.modules.pooling._MaxPoolNd": [],
    "torch.nn.modules.pooling.MaxPool1d": [],
    "torch.nn.modules.pooling.MaxPool2d": [],
    "torch.nn.modules.pooling.MaxPool3d": [],
    "torch.nn.modules.pooling._MaxUnpoolNd": [],
    "torch.nn.modules.pooling.MaxUnpool1d": [],
    "torch.nn.modules.pooling.MaxUnpool2d": [],
    "torch.nn.modules.pooling.MaxUnpool3d": [],
    "torch.nn.modules.pooling._AvgPoolNd": [],
    "torch.nn.modules.pooling.AvgPool1d": [],
    "torch.nn.modules.pooling.AvgPool2d": [],
    "torch.nn.modules.pooling.AvgPool3d": [],
    "torch.nn.modules.pooling.FractionalMaxPool2d": [],
    "torch.nn.modules.pooling.FractionalMaxPool3d": [],
    "torch.nn.modules.pooling._LPPoolNd": [],
    "torch.nn.modules.pooling.LPPool1d": [],
    "torch.nn.modules.pooling.LPPool2d": [],
    "torch.nn.modules.pooling._AdaptiveMaxPoolNd": [],
    "torch.nn.modules.pooling.AdaptiveMaxPool1d": [],
    "torch.nn.modules.pooling.AdaptiveMaxPool2d": [],
    "torch.nn.modules.pooling.AdaptiveMaxPool3d": [],
    "torch.nn.modules.pooling._AdaptiveAvgPoolNd": [],
    "torch.nn.modules.pooling.AdaptiveAvgPool1d": [],
    "torch.nn.modules.pooling.AdaptiveAvgPool2d": [],
    "torch.nn.modules.pooling.AdaptiveAvgPool3d": [],
    "torch.nn.modules.batchnorm": [
        "torch.nn",
        "torch.nn.modules.lazy",
        "torch.nn.modules.batchnorm.SyncBatchNorm",
        "torch.nn.modules.batchnorm.LazyBatchNorm3d",
        "torch.nn.modules.batchnorm._NormBase",
        "torch.functional",
        "torch.nn.modules.batchnorm.LazyBatchNorm1d",
        "torch.nn.modules.batchnorm.BatchNorm2d",
        "torch.nn.modules._functions",
        "torch.nn.modules.batchnorm.BatchNorm1d",
        "torch.nn.modules.batchnorm.LazyBatchNorm2d",
        "torch.nn.modules.batchnorm.BatchNorm3d",
        "torch.nn.modules.batchnorm._LazyNormBase",
        "torch.nn.parameter",
        "torch",
        "torch.nn.modules.module",
        "torch.nn.modules.batchnorm._BatchNorm"
    ],
    "torch.nn.modules._functions": [
        "torch.autograd.function",
        "torch.distributed",
        "torch.nn.modules._functions.SyncBatchNorm",
        "torch",
        "torch.nn.modules._functions.BackwardHookFunction",
        "torch.nn.modules._functions.CrossMapLRN2d"
    ],
    "torch.nn.modules._functions.SyncBatchNorm": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.modules._functions.CrossMapLRN2d": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.modules._functions.BackwardHookFunction": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.modules.batchnorm._NormBase": [],
    "torch.nn.modules.batchnorm._BatchNorm": [],
    "torch.nn.modules.batchnorm._LazyNormBase": [],
    "torch.nn.modules.batchnorm.BatchNorm1d": [],
    "torch.nn.modules.batchnorm.LazyBatchNorm1d": [],
    "torch.nn.modules.batchnorm.BatchNorm2d": [],
    "torch.nn.modules.batchnorm.LazyBatchNorm2d": [],
    "torch.nn.modules.batchnorm.BatchNorm3d": [],
    "torch.nn.modules.batchnorm.LazyBatchNorm3d": [],
    "torch.nn.modules.batchnorm.SyncBatchNorm": [
        "<builtin>.classmethod"
    ],
    "torch.nn.modules.instancenorm": [
        "torch.nn.modules.instancenorm.LazyInstanceNorm2d",
        "torch.nn.modules.instancenorm.InstanceNorm2d",
        "torch.nn.modules.instancenorm.InstanceNorm3d",
        "torch.functional",
        "torch.nn.modules.instancenorm._InstanceNorm",
        "torch.nn.modules.instancenorm.LazyInstanceNorm1d",
        "torch.nn.modules.instancenorm.InstanceNorm1d",
        "torch.nn.modules.instancenorm.LazyInstanceNorm3d",
        "torch",
        "torch.nn.modules.batchnorm"
    ],
    "torch.nn.modules.instancenorm._InstanceNorm": [],
    "torch.nn.modules.instancenorm.InstanceNorm1d": [],
    "torch.nn.modules.instancenorm.LazyInstanceNorm1d": [],
    "torch.nn.modules.instancenorm.InstanceNorm2d": [],
    "torch.nn.modules.instancenorm.LazyInstanceNorm2d": [],
    "torch.nn.modules.instancenorm.InstanceNorm3d": [],
    "torch.nn.modules.instancenorm.LazyInstanceNorm3d": [],
    "torch.nn.modules.normalization": [
        "torch.nn",
        "torch.nn.modules.normalization.GroupNorm",
        "torch.nn.modules.normalization.LayerNorm",
        "torch.functional",
        "torch.nn.modules.normalization.LocalResponseNorm",
        "torch.nn.modules._functions",
        "torch.nn.parameter",
        "torch",
        "torch.nn.modules.normalization.CrossMapLRN2d",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.normalization.LocalResponseNorm": [],
    "torch.nn.modules.normalization.CrossMapLRN2d": [],
    "torch.nn.modules.normalization.LayerNorm": [],
    "torch.nn.modules.normalization.GroupNorm": [],
    "torch.nn.modules.dropout": [
        "torch.nn.modules.dropout.AlphaDropout",
        "torch.nn.modules.dropout.Dropout2d",
        "torch.nn.modules.dropout.FeatureAlphaDropout",
        "torch.functional",
        "torch.nn.modules.dropout.Dropout3d",
        "torch.nn.modules.dropout.Dropout1d",
        "torch",
        "torch.nn.modules.dropout.Dropout",
        "torch.nn.modules.module",
        "torch.nn.modules.dropout._DropoutNd"
    ],
    "torch.nn.modules.dropout._DropoutNd": [],
    "torch.nn.modules.dropout.Dropout": [],
    "torch.nn.modules.dropout.Dropout1d": [],
    "torch.nn.modules.dropout.Dropout2d": [],
    "torch.nn.modules.dropout.Dropout3d": [],
    "torch.nn.modules.dropout.AlphaDropout": [],
    "torch.nn.modules.dropout.FeatureAlphaDropout": [],
    "torch.nn.modules.padding": [
        "torch.nn.modules.utils",
        "torch.nn.modules.padding.ReplicationPad3d",
        "torch.nn.modules.padding.ReflectionPad2d",
        "torch.nn.modules.padding.ConstantPad3d",
        "torch.nn.modules.padding.ReflectionPad3d",
        "torch.nn.modules.padding._ReplicationPadNd",
        "torch.nn.modules.padding._ReflectionPadNd",
        "torch.nn.modules.padding.ZeroPad2d",
        "torch.nn.modules.padding._ConstantPadNd",
        "torch.functional",
        "torch.nn.modules.padding.ReflectionPad1d",
        "torch.nn.modules.padding.ReplicationPad2d",
        "torch.nn.modules.padding.ConstantPad2d",
        "torch.nn.modules.padding.ReplicationPad1d",
        "torch.nn.common_types",
        "torch.nn.modules.padding.ConstantPad1d",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.padding._ConstantPadNd": [],
    "torch.nn.modules.padding.ConstantPad1d": [],
    "torch.nn.modules.padding.ConstantPad2d": [],
    "torch.nn.modules.padding.ConstantPad3d": [],
    "torch.nn.modules.padding._ReflectionPadNd": [],
    "torch.nn.modules.padding.ReflectionPad1d": [],
    "torch.nn.modules.padding.ReflectionPad2d": [],
    "torch.nn.modules.padding.ReflectionPad3d": [],
    "torch.nn.modules.padding._ReplicationPadNd": [],
    "torch.nn.modules.padding.ReplicationPad1d": [],
    "torch.nn.modules.padding.ReplicationPad2d": [],
    "torch.nn.modules.padding.ReplicationPad3d": [],
    "torch.nn.modules.padding.ZeroPad2d": [],
    "torch.nn.modules.sparse": [
        "torch.nn",
        "torch.nn.modules.sparse.Embedding",
        "torch.nn.modules.sparse.EmbeddingBag",
        "torch.functional",
        "torch.nn.parameter",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.sparse.Embedding": [
        "<builtin>.classmethod"
    ],
    "torch.nn.modules.sparse.EmbeddingBag": [
        "<builtin>.classmethod"
    ],
    "torch.nn.modules.rnn": [
        "torch.nn",
        "torch.nn.modules.rnn.RNN",
        "torch.nn.modules.rnn.GRUCell",
        "torch.nn.modules.rnn.LSTM",
        "torch.nn.modules.rnn.RNNBase",
        "torch.nn.modules.rnn.RNNCell",
        "torch._VF",
        "torch.nn.modules.rnn.RNNCellBase",
        "torch.nn.modules.rnn.LSTMCell",
        "torch.nn.utils.rnn",
        "torch.nn.modules.rnn.GRU",
        "torch.nn.parameter",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.nn.utils.rnn": [
        "torch._VF",
        "torch.nn.utils.rnn.PackedSequence",
        "collections.namedtuple",
        "torch._jit_internal",
        "torch"
    ],
    "torch.nn.utils.rnn.PackedSequence": [
        "<builtin>.property"
    ],
    "torch.nn.modules.rnn.RNNBase": [
        "<builtin>.property"
    ],
    "torch.nn.modules.rnn.RNN": [
        "typing.overload",
        "torch._jit_internal._overload_method"
    ],
    "torch._jit_internal._overload_method": [
        "<builtin>.RuntimeError",
        "torch._jit_internal._check_overload_body",
        "append",
        "torch._jit_internal._qualified_name",
        "torch._jit_internal.get_class_name_lineno",
        "<map>.get"
    ],
    "torch._jit_internal.get_class_name_lineno": [
        "<builtin>.range"
    ],
    "<map>.get": [],
    "torch.nn.modules.rnn.LSTM": [
        "typing.overload",
        "torch._jit_internal._overload_method"
    ],
    "torch.nn.modules.rnn.GRU": [
        "typing.overload",
        "torch._jit_internal._overload_method"
    ],
    "torch.nn.modules.rnn.RNNCellBase": [],
    "torch.nn.modules.rnn.RNNCell": [],
    "torch.nn.modules.rnn.LSTMCell": [],
    "torch.nn.modules.rnn.GRUCell": [],
    "torch.nn.modules.pixelshuffle": [
        "torch.nn.modules.pixelshuffle.PixelShuffle",
        "torch.nn.modules.pixelshuffle.PixelUnshuffle",
        "torch.functional",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.pixelshuffle.PixelShuffle": [],
    "torch.nn.modules.pixelshuffle.PixelUnshuffle": [],
    "torch.nn.modules.upsampling": [
        "torch.nn.modules.upsampling.Upsample",
        "torch.functional",
        "torch.nn.modules.upsampling.UpsamplingNearest2d",
        "torch.nn.common_types",
        "torch.nn.modules.upsampling.UpsamplingBilinear2d",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.upsampling.Upsample": [],
    "torch.nn.modules.upsampling.UpsamplingNearest2d": [],
    "torch.nn.modules.upsampling.UpsamplingBilinear2d": [],
    "torch.nn.modules.fold": [
        "torch.nn.modules.fold.Unfold",
        "torch.functional",
        "torch.nn.modules.fold.Fold",
        "torch.nn.common_types",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.fold.Fold": [],
    "torch.nn.modules.fold.Unfold": [],
    "torch.nn.modules.adaptive": [
        "collections.namedtuple",
        "torch.functional",
        "torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.adaptive.AdaptiveLogSoftmaxWithLoss": [],
    "torch.nn.modules.transformer": [
        "torch.nn.init",
        "torch.nn.modules.linear",
        "torch.nn.modules.activation",
        "torch.nn.modules.dropout",
        "torch.nn.modules.transformer.Transformer",
        "torch.nn.modules.transformer.TransformerDecoderLayer",
        "torch.functional",
        "torch.nn.modules.transformer.TransformerDecoder",
        "torch.nn.modules.transformer.TransformerEncoderLayer",
        "torch.nn.modules.normalization",
        "torch.nn.modules.transformer.TransformerEncoder",
        "torch",
        "torch.nn.modules.container",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.transformer.Transformer": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.modules.transformer.TransformerEncoder": [],
    "torch.nn.modules.transformer.TransformerDecoder": [],
    "torch.nn.modules.transformer.TransformerEncoderLayer": [],
    "torch.nn.modules.transformer.TransformerDecoderLayer": [],
    "torch.nn.modules.flatten": [
        "torch.nn.modules.flatten.Unflatten",
        "torch.types",
        "torch.nn.modules.flatten.Flatten",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.nn.modules.flatten.Flatten": [],
    "torch.nn.modules.flatten.Unflatten": [],
    "torch.nn.modules.channelshuffle": [
        "torch.nn.modules.channelshuffle.ChannelShuffle",
        "torch",
        "torch.nn.modules.module",
        "torch.functional"
    ],
    "torch.nn.modules.channelshuffle.ChannelShuffle": [],
    "torch.nn.parallel": [
        "torch.nn.parallel.parallel_apply",
        "torch.nn.parallel.data_parallel",
        "torch.nn.parallel.scatter_gather",
        "torch.nn.parallel.replicate",
        "torch.nn.parallel.distributed"
    ],
    "torch.nn.parallel.parallel_apply": [
        "torch.cuda.amp",
        "torch",
        "torch.cuda._utils",
        "torch._utils"
    ],
    "torch.nn.parallel.replicate": [
        "torch.nn.parallel.comm",
        "torch._utils"
    ],
    "torch.nn.parallel.comm": [
        "torch.cuda.nccl",
        "torch",
        "torch._utils"
    ],
    "torch.cuda.nccl": [
        "torch.cuda"
    ],
    "torch.nn.parallel.data_parallel": [
        "torch.nn.parallel.data_parallel.DataParallel",
        "torch.nn.parallel.parallel_apply",
        "torch.nn.modules",
        "torch._utils",
        "torch.nn.parallel.scatter_gather",
        "torch.nn.parallel.replicate",
        "torch"
    ],
    "torch.nn.parallel.scatter_gather": [
        "torch.nn.parallel._functions",
        "torch"
    ],
    "torch.nn.parallel._functions": [
        "torch.nn.parallel._functions.Scatter",
        "torch.autograd",
        "torch.nn.parallel._functions.ReduceAddCoalesced",
        "torch.nn.parallel._functions.Broadcast",
        "torch._utils",
        "torch.nn.parallel.comm",
        "torch",
        "torch.nn.parallel._functions.Gather"
    ],
    "torch.nn.parallel._functions.Broadcast": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel._functions.ReduceAddCoalesced": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel._functions.Gather": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel._functions.Scatter": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel.data_parallel.DataParallel": [],
    "torch.nn.parallel.distributed": [
        "torch.distributed.utils",
        "torch.distributed.rpc.is_available",
        "torch.distributed.algorithms.join",
        "torch.nn.parallel.distributed._DDPSink",
        "torch.nn.parallel.distributed.DistributedDataParallel",
        "torch.utils._pytree",
        "torch.nn.parallel.distributed._DDPJoinHook",
        "torch.autograd",
        "torch.distributed",
        "torch.nn.modules",
        "torch.nn.parallel.distributed._BufferCommHook",
        "torch.distributed.is_available",
        "torch.distributed.rpc",
        "torch.nn.parallel.distributed._BufferCommHookLocation",
        "torch.distributed.distributed_c10d",
        "torch._utils",
        "torch.nn.parallel.scatter_gather",
        "torch.nn.parallel._replicated_tensor_ddp_utils",
        "torch"
    ],
    "torch.distributed.algorithms.join": [
        "torch.distributed.algorithms.join.JoinHook",
        "torch.distributed",
        "torch.distributed.algorithms.join.Join",
        "torch.distributed.algorithms.join.Joinable",
        "torch.distributed.algorithms.join._JoinConfig",
        "torch"
    ],
    "torch.distributed.algorithms.join.JoinHook": [],
    "torch.distributed.algorithms.join.Joinable": [
        "<builtin>.property",
        "abc.abstractmethod"
    ],
    "torch.distributed.algorithms.join._JoinConfig": [
        "<builtin>.staticmethod"
    ],
    "torch.distributed.algorithms.join.Join": [
        "<builtin>.staticmethod"
    ],
    "torch.distributed.utils": [
        "torch.nn.parallel._functions",
        "torch.distributed",
        "torch.nn.parallel.scatter_gather",
        "torch.nn.utils.rnn",
        "torch"
    ],
    "torch.nn.parallel._replicated_tensor_ddp_utils": [
        "contextlib.contextmanager"
    ],
    "torch.nn.parallel.distributed._BufferCommHookLocation": [
        "enum.auto"
    ],
    "enum.auto": [],
    "torch.nn.parallel.distributed._BufferCommHook": [],
    "torch.nn.parallel.distributed._DDPSink": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.parallel.distributed._DDPJoinHook": [],
    "torch.nn.parallel.distributed.DistributedDataParallel": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "contextlib.contextmanager"
    ],
    "torch.nn.utils": [
        "torch.nn.utils.spectral_norm",
        "torch.nn.utils.fusion",
        "torch.nn.utils.memory_format",
        "torch.nn.utils.convert_parameters",
        "torch.nn.utils.weight_norm",
        "torch.nn.utils.rnn",
        "torch.nn.utils.stateless",
        "torch.nn.utils.init",
        "torch.nn.utils.clip_grad",
        "torch.nn.utils.parametrizations"
    ],
    "torch.nn.utils.clip_grad": [
        "torch.utils._foreach_utils",
        "torch"
    ],
    "torch.utils._foreach_utils": [
        "torch.autograd.grad_mode.no_grad.__init__",
        "torch",
        "torch.autograd.grad_mode"
    ],
    "torch.autograd.grad_mode.no_grad.__init__": [
        "torch._jit_internal.is_scripting",
        "<builtin>.super"
    ],
    "torch._jit_internal.is_scripting": [],
    "torch.nn.utils.weight_norm": [
        "torch.nn.modules",
        "torch.nn.utils.weight_norm.WeightNorm",
        "torch.nn.parameter",
        "torch",
        "typing.TypeVar"
    ],
    "torch.nn.utils.weight_norm.WeightNorm": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.utils.convert_parameters": [
        "torch"
    ],
    "torch.nn.utils.spectral_norm": [
        "torch.nn.functional",
        "torch.nn.modules",
        "torch.nn.utils.spectral_norm.SpectralNormLoadStateDictPreHook",
        "torch.nn.utils.spectral_norm.SpectralNorm",
        "torch.nn.utils.spectral_norm.SpectralNormStateDictHook",
        "torch",
        "typing.TypeVar"
    ],
    "torch.nn.utils.spectral_norm.SpectralNorm": [
        "<builtin>.staticmethod"
    ],
    "torch.nn.utils.spectral_norm.SpectralNormLoadStateDictPreHook": [],
    "torch.nn.utils.spectral_norm.SpectralNormStateDictHook": [],
    "torch.nn.utils.fusion": [
        "torch"
    ],
    "torch.nn.utils.memory_format": [
        "torch"
    ],
    "torch.nn.utils.parametrizations": [
        "torch.nn.utils.parametrizations._SpectralNorm",
        "torch.nn.modules",
        "torch.nn.utils.parametrizations._OrthMaps",
        "torch.utils",
        "torch.functional",
        "torch.nn.utils.parametrizations._Orthogonal",
        "torch"
    ],
    "torch.utils": [
        "torch.utils.cpp_backtrace",
        "torch.utils._crash_handler",
        "torch.utils.backend_registration",
        "torch.utils.throughput_benchmark"
    ],
    "torch.utils.throughput_benchmark": [
        "torch.utils.throughput_benchmark.ThroughputBenchmark",
        "torch.utils.throughput_benchmark.ExecutionStats"
    ],
    "torch.utils.throughput_benchmark.ExecutionStats": [
        "<builtin>.property"
    ],
    "torch.utils.throughput_benchmark.ThroughputBenchmark": [],
    "torch.utils._crash_handler": [
        "<builtin>.str",
        "torch"
    ],
    "torch.utils.cpp_backtrace": [],
    "torch.utils.backend_registration": [],
    "torch.nn.utils.parametrizations._OrthMaps": [
        "enum.auto"
    ],
    "torch.nn.utils.parametrizations._Orthogonal": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.nn.utils.parametrizations._SpectralNorm": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.nn.utils.init": [
        "torch"
    ],
    "torch.nn.utils.stateless": [
        "torch",
        "torch.nn.utils._named_member_accessor"
    ],
    "torch.nn.utils._named_member_accessor": [
        "<builtin>.object",
        "torch.nn.utils._named_member_accessor.NamedMemberAccessor",
        "torch"
    ],
    "torch.nn.utils._named_member_accessor.NamedMemberAccessor": [],
    "torch.signal.windows": [
        "torch.signal.windows.windows"
    ],
    "torch.signal.windows.windows": [
        "torch.signal.windows.windows._add_docstr.decorator",
        "torch._torch_docs.parse_kwargs",
        "torch._torch_docs",
        "torch._torch_docs.merge_dicts",
        "torch",
        "torch.signal.windows.windows._add_docstr"
    ],
    "torch.signal.windows.windows._add_docstr": [],
    "torch.signal.windows.windows._add_docstr.decorator": [],
    "torch.optim": [
        "torch.optim.optimizer",
        "torch.optim.lr_scheduler",
        "torch.optim.asgd",
        "torch.optim.adadelta",
        "torch.optim.swa_utils",
        "torch.optim.radam",
        "torch.optim.adagrad",
        "torch.optim.rprop",
        "torch.optim.sparse_adam",
        "torch.optim.adamax",
        "torch.optim.rmsprop",
        "torch.optim.lbfgs",
        "torch.optim.adam",
        "torch.optim.nadam",
        "torch.optim.adamw",
        "torch.optim.sgd"
    ],
    "torch.optim.adadelta": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch",
        "torch.optim.adadelta.Adadelta"
    ],
    "torch.optim.optimizer": [
        "torch.utils.hooks",
        "collections.OrderedDict",
        "torch.optim.optimizer.Optimizer",
        "torch._utils",
        "torch",
        "torch.optim.optimizer._RequiredParameter"
    ],
    "torch.optim.optimizer._RequiredParameter": [],
    "torch.optim.optimizer.Optimizer": [
        "<builtin>.staticmethod"
    ],
    "torch.optim.adadelta.Adadelta": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.optimizer._use_grad_for_differentiable": [],
    "torch.optim.adagrad": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch.optim.adagrad.Adagrad",
        "torch"
    ],
    "torch.optim.adagrad.Adagrad": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.adam": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch",
        "torch.optim.adam.Adam"
    ],
    "torch.optim.adam.Adam": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.adamw": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch.optim.adamw.AdamW",
        "torch"
    ],
    "torch.optim.adamw.AdamW": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.sparse_adam": [
        "torch.optim.optimizer",
        "torch.optim.sparse_adam.SparseAdam",
        "torch",
        "torch.optim._functional"
    ],
    "torch.optim._functional": [
        "torch.optim.asgd",
        "torch.optim.adadelta",
        "torch.optim.radam",
        "torch.optim.adagrad",
        "torch.optim.rprop",
        "torch.optim.adamax",
        "torch.optim.rmsprop",
        "torch.optim.adam",
        "torch",
        "torch.optim.nadam",
        "torch.optim.adamw",
        "torch.optim.sgd"
    ],
    "torch.optim.adamax": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch",
        "torch.optim.adamax.Adamax"
    ],
    "torch.optim.adamax.Adamax": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.asgd": [
        "torch.optim.optimizer",
        "torch._utils",
        "torch.utils._foreach_utils",
        "torch.optim.asgd.ASGD",
        "torch"
    ],
    "torch.optim.asgd.ASGD": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.nadam": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch.optim.nadam.NAdam",
        "torch"
    ],
    "torch.optim.nadam.NAdam": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.radam": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch",
        "torch.optim.radam.RAdam"
    ],
    "torch.optim.radam.RAdam": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.rmsprop": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch",
        "torch.optim.rmsprop.RMSprop"
    ],
    "torch.optim.rmsprop.RMSprop": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.rprop": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch",
        "torch.optim.rprop.Rprop"
    ],
    "torch.optim.rprop.Rprop": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.sgd": [
        "torch.optim.optimizer",
        "torch.utils._foreach_utils",
        "torch",
        "torch.optim.sgd.SGD"
    ],
    "torch.optim.sgd.SGD": [
        "torch.optim.optimizer._use_grad_for_differentiable"
    ],
    "torch.optim.sparse_adam.SparseAdam": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.lbfgs": [
        "torch.optim.optimizer",
        "torch",
        "torch.optim.lbfgs.LBFGS"
    ],
    "torch.optim.lbfgs.LBFGS": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.optim.lr_scheduler": [
        "torch.optim.optimizer",
        "torch.optim.lr_scheduler.SequentialLR",
        "torch.optim.lr_scheduler._LRScheduler",
        "torch.optim.lr_scheduler.CosineAnnealingLR",
        "torch.optim.lr_scheduler.ConstantLR",
        "torch.optim.lr_scheduler.ReduceLROnPlateau",
        "torch.optim.lr_scheduler.LinearLR",
        "torch.optim.lr_scheduler.StepLR",
        "torch.optim.lr_scheduler.PolynomialLR",
        "torch.optim.lr_scheduler.CyclicLR",
        "torch.optim.lr_scheduler.ExponentialLR",
        "torch.optim.lr_scheduler.CosineAnnealingWarmRestarts",
        "torch.optim.lr_scheduler.MultiplicativeLR",
        "torch.optim.lr_scheduler.MultiStepLR",
        "torch.optim.lr_scheduler._enable_get_lr_call",
        "torch.optim.lr_scheduler.LRScheduler",
        "torch.optim.lr_scheduler.OneCycleLR",
        "torch.optim.lr_scheduler.ChainedScheduler",
        "torch.optim.lr_scheduler.LambdaLR",
        "torch"
    ],
    "torch.optim.lr_scheduler.LRScheduler": [],
    "torch.optim.lr_scheduler._LRScheduler": [],
    "torch.optim.lr_scheduler._enable_get_lr_call": [],
    "torch.optim.lr_scheduler.LambdaLR": [],
    "torch.optim.lr_scheduler.MultiplicativeLR": [],
    "torch.optim.lr_scheduler.StepLR": [],
    "torch.optim.lr_scheduler.MultiStepLR": [],
    "torch.optim.lr_scheduler.ConstantLR": [],
    "torch.optim.lr_scheduler.LinearLR": [],
    "torch.optim.lr_scheduler.ExponentialLR": [],
    "torch.optim.lr_scheduler.SequentialLR": [],
    "torch.optim.lr_scheduler.PolynomialLR": [],
    "torch.optim.lr_scheduler.CosineAnnealingLR": [],
    "torch.optim.lr_scheduler.ChainedScheduler": [],
    "torch.optim.lr_scheduler.ReduceLROnPlateau": [
        "<builtin>.property"
    ],
    "torch.optim.lr_scheduler.CyclicLR": [],
    "torch.optim.lr_scheduler.CosineAnnealingWarmRestarts": [],
    "torch.optim.lr_scheduler.OneCycleLR": [],
    "torch.optim.swa_utils": [
        "torch.nn",
        "torch.autograd.grad_mode.no_grad.__init__",
        "torch.optim.lr_scheduler",
        "torch.optim.swa_utils.SWALR",
        "torch",
        "torch.optim.swa_utils.AveragedModel"
    ],
    "torch.optim.swa_utils.AveragedModel": [],
    "torch.optim.swa_utils.SWALR": [
        "<builtin>.staticmethod"
    ],
    "torch.optim._multi_tensor": [
        "torch.optim._multi_tensor.partialclass",
        "torch.optim"
    ],
    "torch.optim._multi_tensor.partialclass": [
        "torch.optim._multi_tensor.partialclass.NewCls"
    ],
    "torch.optim._multi_tensor.partialclass.NewCls": [
        "functools.partialmethod"
    ],
    "functools.partialmethod": [],
    "torch.multiprocessing": [
        "torch.multiprocessing.spawn",
        "torch.multiprocessing.reductions.init_reductions",
        "torch",
        "torch.multiprocessing.reductions"
    ],
    "torch.multiprocessing.reductions": [
        "torch.multiprocessing.reductions.SharedCache.__init__",
        "torch.multiprocessing.reductions.SharedCache",
        "torch.multiprocessing.reductions.StorageWeakRef",
        "torch._namedtensor_internals",
        "torch",
        "torch.utils.hooks"
    ],
    "torch.multiprocessing.reductions.StorageWeakRef": [],
    "torch.multiprocessing.reductions.SharedCache": [],
    "torch.multiprocessing.reductions.SharedCache.__init__": [
        "torch.multiprocessing.reductions.SharedCache._after_fork",
        "multiprocessing.util.register_after_fork"
    ],
    "torch.multiprocessing.reductions.SharedCache._after_fork": [],
    "multiprocessing.util.register_after_fork": [],
    "torch.multiprocessing.spawn": [
        "torch.multiprocessing.spawn.ProcessException",
        "torch.multiprocessing.spawn.ProcessExitedException",
        "torch.multiprocessing.spawn.SpawnContext",
        "torch.multiprocessing.spawn.ProcessRaisedException",
        "torch.multiprocessing.spawn.ProcessContext"
    ],
    "torch.multiprocessing.spawn.ProcessException": [],
    "torch.multiprocessing.spawn.ProcessRaisedException": [],
    "torch.multiprocessing.spawn.ProcessExitedException": [],
    "torch.multiprocessing.spawn.ProcessContext": [],
    "torch.multiprocessing.spawn.SpawnContext": [],
    "torch.multiprocessing.reductions.init_reductions": [],
    "torch.sparse": [
        "torch.sparse.check_sparse_tensor_invariants",
        "torch",
        "torch.types",
        "torch._C._add_docstr"
    ],
    "torch.sparse.check_sparse_tensor_invariants": [
        "<builtin>.staticmethod"
    ],
    "torch.special": [
        "torch",
        "torch._torch_docs",
        "torch._C._add_docstr"
    ],
    "torch.utils.backcompat": [
        "torch.utils.backcompat.Warning",
        "<builtin>.Warning"
    ],
    "torch.utils.backcompat.Warning": [
        "<builtin>.property"
    ],
    "<builtin>.Warning": [],
    "torch.onnx": [
        "torch.onnx.symbolic_opset18",
        "torch.onnx.symbolic_opset17",
        "torch.onnx.symbolic_opset14",
        "torch.onnx._deprecation.deprecated",
        "torch.onnx.symbolic_caffe2",
        "torch.onnx.symbolic_opset16",
        "torch.onnx.errors",
        "torch.onnx.symbolic_opset8",
        "torch.onnx.symbolic_opset15",
        "torch.onnx._deprecation.deprecated.decorator",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_opset7",
        "torch.onnx._deprecation",
        "torch.onnx.symbolic_opset10",
        "torch.onnx.utils",
        "torch.onnx.symbolic_opset9",
        "torch.onnx.symbolic_opset11",
        "torch.onnx.symbolic_opset13",
        "torch.onnx._exporter_states",
        "torch.onnx.symbolic_opset12",
        "torch.onnx._type_utils"
    ],
    "torch.onnx._deprecation": [],
    "torch.onnx.errors": [
        "torch.onnx._internal.diagnostics",
        "torch.onnx.errors.CheckerError",
        "torch.onnx.errors.UnsupportedOperatorError",
        "torch.onnx.errors.SymbolicValueError",
        "torch.onnx.errors.OnnxExporterWarning",
        "torch.onnx.errors.CallHintViolationWarning",
        "torch.onnx._constants",
        "torch.onnx.errors.OnnxExporterError"
    ],
    "torch.onnx._constants": [],
    "torch.onnx._internal.diagnostics": [
        "torch.onnx._internal.diagnostics._diagnostic",
        "torch.onnx._internal.diagnostics.infra",
        "torch.onnx._internal.diagnostics._rules"
    ],
    "torch.onnx._internal.diagnostics._diagnostic": [
        "torch.onnx._internal.diagnostics._diagnostic.ExportDiagnostic",
        "torch.utils.cpp_backtrace",
        "torch.onnx._internal.diagnostics._diagnostic.ExportDiagnosticEngine.__init__",
        "torch.onnx._internal.diagnostics.infra",
        "torch",
        "torch.onnx._internal.diagnostics._diagnostic.ExportDiagnosticEngine"
    ],
    "torch.onnx._internal.diagnostics.infra": [
        "torch.onnx._internal.diagnostics.infra.engine",
        "torch.onnx._internal.diagnostics.infra._infra"
    ],
    "torch.onnx._internal.diagnostics.infra._infra": [
        "torch.onnx._internal.diagnostics.infra.formatter",
        "torch.onnx._internal.diagnostics.infra._infra.Rule",
        "torch.onnx._internal.diagnostics.infra._infra.DiagnosticOptions",
        "torch.onnx._internal.diagnostics.infra._infra.Stack",
        "torch.onnx._internal.diagnostics.infra._infra.RuleCollection",
        "torch.onnx._internal.diagnostics.infra._infra.Level",
        "torch.onnx._internal.diagnostics.infra.sarif",
        "torch.onnx._internal.diagnostics.infra._infra.Location",
        "torch.onnx._internal.diagnostics.infra._infra.ThreadFlowLocation",
        "torch.onnx._internal.diagnostics.infra._infra.PatchedPropertyBag",
        "torch.onnx._internal.diagnostics.infra._infra.Graph",
        "torch.onnx._internal.diagnostics.infra._infra.Tag",
        "torch.onnx._internal.diagnostics.infra._infra.StackFrame",
        "torch.onnx._internal.diagnostics.infra._infra.Invocation"
    ],
    "torch.onnx._internal.diagnostics.infra.formatter": [
        "torch.onnx._internal.diagnostics.infra.sarif",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._internal._beartype"
    ],
    "torch.onnx._internal._beartype": [
        "torch.onnx._internal._beartype._create_beartype_decorator",
        "torch.onnx.errors",
        "torch.onnx._globals",
        "torch.onnx._exporter_states"
    ],
    "torch.onnx._exporter_states": [
        "torch.onnx._exporter_states.RuntimeTypeCheckState",
        "torch.onnx._exporter_states.SymbolicContext",
        "torch.onnx._exporter_states.ExportTypes"
    ],
    "torch.onnx._exporter_states.ExportTypes": [],
    "torch.onnx._exporter_states.SymbolicContext": [],
    "torch.onnx._exporter_states.RuntimeTypeCheckState": [],
    "torch.onnx._globals": [
        "torch.onnx._globals._InternalGlobals",
        "torch.onnx._constants",
        "torch.onnx._globals._InternalGlobals.__init__",
        "torch.onnx._exporter_states"
    ],
    "torch.onnx._globals._InternalGlobals": [
        "<builtin>.property"
    ],
    "torch.onnx._globals._InternalGlobals.__init__": [],
    "torch.onnx._internal._beartype._create_beartype_decorator": [
        "<builtin>.isinstance"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif": [
        "torch.onnx._internal.diagnostics.infra.sarif._address",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration",
        "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string",
        "torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_content",
        "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references",
        "torch.onnx._internal.diagnostics.infra.sarif._translation_metadata",
        "torch.onnx._internal.diagnostics.infra.sarif._tool_component",
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._external_properties",
        "torch.onnx._internal.diagnostics.infra.sarif._exception",
        "torch.onnx._internal.diagnostics.infra.sarif._edge_traversal",
        "torch.onnx._internal.diagnostics.infra.sarif._invocation",
        "torch.onnx._internal.diagnostics.infra.sarif._result_provenance",
        "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference",
        "torch.onnx._internal.diagnostics.infra.sarif._location",
        "torch.onnx._internal.diagnostics.infra.sarif._code_flow",
        "torch.onnx._internal.diagnostics.infra.sarif._notification",
        "torch.onnx._internal.diagnostics.infra.sarif._physical_location",
        "torch.onnx._internal.diagnostics.infra.sarif._graph",
        "torch.onnx._internal.diagnostics.infra.sarif._rectangle",
        "torch.onnx._internal.diagnostics.infra.sarif._region",
        "torch.onnx._internal.diagnostics.infra.sarif._run",
        "torch.onnx._internal.diagnostics.infra.sarif._run_automation_details",
        "torch.onnx._internal.diagnostics.infra.sarif._graph_traversal",
        "torch.onnx._internal.diagnostics.infra.sarif._special_locations",
        "torch.onnx._internal.diagnostics.infra.sarif._node",
        "torch.onnx._internal.diagnostics.infra.sarif._result",
        "torch.onnx._internal.diagnostics.infra.sarif._configuration_override",
        "torch.onnx._internal.diagnostics.infra.sarif._thread_flow",
        "torch.onnx._internal.diagnostics.infra.sarif._version_control_details",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact",
        "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location",
        "torch.onnx._internal.diagnostics.infra.sarif._web_response",
        "torch.onnx._internal.diagnostics.infra.sarif._stack",
        "torch.onnx._internal.diagnostics.infra.sarif._tool",
        "torch.onnx._internal.diagnostics.infra.sarif._sarif_log",
        "torch.onnx._internal.diagnostics.infra.sarif._web_request",
        "torch.onnx._internal.diagnostics.infra.sarif._edge",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference",
        "torch.onnx._internal.diagnostics.infra.sarif._suppression",
        "torch.onnx._internal.diagnostics.infra.sarif._location_relationship",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_change",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._replacement",
        "torch.onnx._internal.diagnostics.infra.sarif._logical_location",
        "torch.onnx._internal.diagnostics.infra.sarif._conversion",
        "torch.onnx._internal.diagnostics.infra.sarif._attachment",
        "torch.onnx._internal.diagnostics.infra.sarif._stack_frame",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship",
        "torch.onnx._internal.diagnostics.infra.sarif._fix"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._address": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._address.Address"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._property_bag": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag.PropertyBag"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._property_bag.PropertyBag": [],
    "torch.onnx._internal.diagnostics.infra.sarif._address.Address": [],
    "torch.onnx._internal.diagnostics.infra.sarif._artifact": [
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_content",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact.Artifact",
        "torch.onnx._internal.diagnostics.infra.sarif._message"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._artifact_content": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_content.ArtifactContent"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string.MultiformatMessageString"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string.MultiformatMessageString": [],
    "torch.onnx._internal.diagnostics.infra.sarif._artifact_content.ArtifactContent": [],
    "torch.onnx._internal.diagnostics.infra.sarif._artifact_location": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location.ArtifactLocation",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._message": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._message.Message"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._message.Message": [],
    "torch.onnx._internal.diagnostics.infra.sarif._artifact_location.ArtifactLocation": [],
    "torch.onnx._internal.diagnostics.infra.sarif._artifact.Artifact": [],
    "torch.onnx._internal.diagnostics.infra.sarif._artifact_change": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_change.ArtifactChange",
        "torch.onnx._internal.diagnostics.infra.sarif._replacement",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._replacement": [
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_content",
        "torch.onnx._internal.diagnostics.infra.sarif._region",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._replacement.Replacement"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._region": [
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_content",
        "torch.onnx._internal.diagnostics.infra.sarif._region.Region",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._message"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._region.Region": [],
    "torch.onnx._internal.diagnostics.infra.sarif._replacement.Replacement": [],
    "torch.onnx._internal.diagnostics.infra.sarif._artifact_change.ArtifactChange": [],
    "torch.onnx._internal.diagnostics.infra.sarif._attachment": [
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._attachment.Attachment",
        "torch.onnx._internal.diagnostics.infra.sarif._rectangle",
        "torch.onnx._internal.diagnostics.infra.sarif._region",
        "torch.onnx._internal.diagnostics.infra.sarif._message"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._rectangle": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._rectangle.Rectangle"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._rectangle.Rectangle": [],
    "torch.onnx._internal.diagnostics.infra.sarif._attachment.Attachment": [],
    "torch.onnx._internal.diagnostics.infra.sarif._code_flow": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._thread_flow",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._code_flow.CodeFlow"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._thread_flow": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._thread_flow.ThreadFlow",
        "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location": [
        "torch.onnx._internal.diagnostics.infra.sarif._location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._web_response",
        "torch.onnx._internal.diagnostics.infra.sarif._stack",
        "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location.ThreadFlowLocation",
        "torch.onnx._internal.diagnostics.infra.sarif._web_request",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._location": [
        "torch.onnx._internal.diagnostics.infra.sarif._location_relationship",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._logical_location",
        "torch.onnx._internal.diagnostics.infra.sarif._physical_location",
        "torch.onnx._internal.diagnostics.infra.sarif._region",
        "torch.onnx._internal.diagnostics.infra.sarif._location.Location",
        "torch.onnx._internal.diagnostics.infra.sarif._message"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._location_relationship": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._location_relationship.LocationRelationship"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._location_relationship.LocationRelationship": [],
    "torch.onnx._internal.diagnostics.infra.sarif._logical_location": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._logical_location.LogicalLocation"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._logical_location.LogicalLocation": [],
    "torch.onnx._internal.diagnostics.infra.sarif._physical_location": [
        "torch.onnx._internal.diagnostics.infra.sarif._address",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._region",
        "torch.onnx._internal.diagnostics.infra.sarif._physical_location.PhysicalLocation"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._physical_location.PhysicalLocation": [],
    "torch.onnx._internal.diagnostics.infra.sarif._location.Location": [],
    "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference.ReportingDescriptorReference",
        "torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference.ToolComponentReference"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference.ToolComponentReference": [],
    "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference.ReportingDescriptorReference": [],
    "torch.onnx._internal.diagnostics.infra.sarif._stack": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._stack.Stack",
        "torch.onnx._internal.diagnostics.infra.sarif._stack_frame",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._stack_frame": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._stack_frame.StackFrame",
        "torch.onnx._internal.diagnostics.infra.sarif._location"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._stack_frame.StackFrame": [],
    "torch.onnx._internal.diagnostics.infra.sarif._stack.Stack": [],
    "torch.onnx._internal.diagnostics.infra.sarif._web_request": [
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_content",
        "torch.onnx._internal.diagnostics.infra.sarif._web_request.WebRequest",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._web_request.WebRequest": [],
    "torch.onnx._internal.diagnostics.infra.sarif._web_response": [
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_content",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._web_response.WebResponse"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._web_response.WebResponse": [],
    "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location.ThreadFlowLocation": [],
    "torch.onnx._internal.diagnostics.infra.sarif._thread_flow.ThreadFlow": [],
    "torch.onnx._internal.diagnostics.infra.sarif._code_flow.CodeFlow": [],
    "torch.onnx._internal.diagnostics.infra.sarif._configuration_override": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._configuration_override.ConfigurationOverride",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration.ReportingConfiguration"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration.ReportingConfiguration": [],
    "torch.onnx._internal.diagnostics.infra.sarif._configuration_override.ConfigurationOverride": [],
    "torch.onnx._internal.diagnostics.infra.sarif._conversion": [
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._conversion.Conversion",
        "torch.onnx._internal.diagnostics.infra.sarif._tool",
        "torch.onnx._internal.diagnostics.infra.sarif._invocation"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._invocation": [
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._invocation.Invocation",
        "torch.onnx._internal.diagnostics.infra.sarif._notification",
        "torch.onnx._internal.diagnostics.infra.sarif._configuration_override"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._notification": [
        "torch.onnx._internal.diagnostics.infra.sarif._notification.Notification",
        "torch.onnx._internal.diagnostics.infra.sarif._location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._exception",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._exception": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._exception",
        "torch.onnx._internal.diagnostics.infra.sarif._exception.Exception",
        "torch.onnx._internal.diagnostics.infra.sarif._stack"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._exception.Exception": [],
    "torch.onnx._internal.diagnostics.infra.sarif._notification.Notification": [],
    "torch.onnx._internal.diagnostics.infra.sarif._invocation.Invocation": [],
    "torch.onnx._internal.diagnostics.infra.sarif._tool": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._tool.Tool",
        "torch.onnx._internal.diagnostics.infra.sarif._tool_component"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._tool_component": [
        "torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor",
        "torch.onnx._internal.diagnostics.infra.sarif._translation_metadata",
        "torch.onnx._internal.diagnostics.infra.sarif._tool_component.ToolComponent"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor": [
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor.ReportingDescriptor",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship.ReportingDescriptorRelationship",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship.ReportingDescriptorRelationship": [],
    "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor.ReportingDescriptor": [],
    "torch.onnx._internal.diagnostics.infra.sarif._translation_metadata": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string",
        "torch.onnx._internal.diagnostics.infra.sarif._translation_metadata.TranslationMetadata"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._translation_metadata.TranslationMetadata": [],
    "torch.onnx._internal.diagnostics.infra.sarif._tool_component.ToolComponent": [],
    "torch.onnx._internal.diagnostics.infra.sarif._tool.Tool": [],
    "torch.onnx._internal.diagnostics.infra.sarif._conversion.Conversion": [],
    "torch.onnx._internal.diagnostics.infra.sarif._edge": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._edge.Edge"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._edge.Edge": [],
    "torch.onnx._internal.diagnostics.infra.sarif._edge_traversal": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._edge_traversal.EdgeTraversal"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._edge_traversal.EdgeTraversal": [],
    "torch.onnx._internal.diagnostics.infra.sarif._external_properties": [
        "torch.onnx._internal.diagnostics.infra.sarif._artifact",
        "torch.onnx._internal.diagnostics.infra.sarif._address",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._external_properties.ExternalProperties",
        "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location",
        "torch.onnx._internal.diagnostics.infra.sarif._logical_location",
        "torch.onnx._internal.diagnostics.infra.sarif._conversion",
        "torch.onnx._internal.diagnostics.infra.sarif._graph",
        "torch.onnx._internal.diagnostics.infra.sarif._web_response",
        "torch.onnx._internal.diagnostics.infra.sarif._tool_component",
        "torch.onnx._internal.diagnostics.infra.sarif._web_request",
        "torch.onnx._internal.diagnostics.infra.sarif._invocation",
        "torch.onnx._internal.diagnostics.infra.sarif._result"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._graph": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._node",
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._graph.Graph",
        "torch.onnx._internal.diagnostics.infra.sarif._edge"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._node": [
        "torch.onnx._internal.diagnostics.infra.sarif._location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._node.Node",
        "torch.onnx._internal.diagnostics.infra.sarif._node",
        "torch.onnx._internal.diagnostics.infra.sarif._message"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._node.Node": [],
    "torch.onnx._internal.diagnostics.infra.sarif._graph.Graph": [],
    "torch.onnx._internal.diagnostics.infra.sarif._result": [
        "torch.onnx._internal.diagnostics.infra.sarif._suppression",
        "torch.onnx._internal.diagnostics.infra.sarif._location",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._code_flow",
        "torch.onnx._internal.diagnostics.infra.sarif._attachment",
        "torch.onnx._internal.diagnostics.infra.sarif._graph",
        "torch.onnx._internal.diagnostics.infra.sarif._web_response",
        "torch.onnx._internal.diagnostics.infra.sarif._result.Result",
        "torch.onnx._internal.diagnostics.infra.sarif._stack",
        "torch.onnx._internal.diagnostics.infra.sarif._graph_traversal",
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._web_request",
        "torch.onnx._internal.diagnostics.infra.sarif._result_provenance",
        "torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference",
        "torch.onnx._internal.diagnostics.infra.sarif._fix"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._fix": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._fix.Fix",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_change"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._fix.Fix": [],
    "torch.onnx._internal.diagnostics.infra.sarif._graph_traversal": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._edge_traversal",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._graph_traversal.GraphTraversal"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._graph_traversal.GraphTraversal": [],
    "torch.onnx._internal.diagnostics.infra.sarif._result_provenance": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._result_provenance.ResultProvenance",
        "torch.onnx._internal.diagnostics.infra.sarif._physical_location"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._result_provenance.ResultProvenance": [],
    "torch.onnx._internal.diagnostics.infra.sarif._suppression": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._suppression.Suppression",
        "torch.onnx._internal.diagnostics.infra.sarif._location"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._suppression.Suppression": [],
    "torch.onnx._internal.diagnostics.infra.sarif._result.Result": [],
    "torch.onnx._internal.diagnostics.infra.sarif._external_properties.ExternalProperties": [],
    "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference.ExternalPropertyFileReference",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference.ExternalPropertyFileReference": [],
    "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference",
        "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references.ExternalPropertyFileReferences"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references.ExternalPropertyFileReferences": [],
    "torch.onnx._internal.diagnostics.infra.sarif._run": [
        "torch.onnx._internal.diagnostics.infra.sarif._version_control_details",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact",
        "torch.onnx._internal.diagnostics.infra.sarif._address",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location",
        "torch.onnx._internal.diagnostics.infra.sarif._logical_location",
        "torch.onnx._internal.diagnostics.infra.sarif._conversion",
        "torch.onnx._internal.diagnostics.infra.sarif._graph",
        "torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references",
        "torch.onnx._internal.diagnostics.infra.sarif._run_automation_details",
        "torch.onnx._internal.diagnostics.infra.sarif._special_locations",
        "torch.onnx._internal.diagnostics.infra.sarif._web_response",
        "torch.onnx._internal.diagnostics.infra.sarif._run.Run",
        "torch.onnx._internal.diagnostics.infra.sarif._tool",
        "torch.onnx._internal.diagnostics.infra.sarif._tool_component",
        "torch.onnx._internal.diagnostics.infra.sarif._web_request",
        "torch.onnx._internal.diagnostics.infra.sarif._invocation",
        "torch.onnx._internal.diagnostics.infra.sarif._result"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._run_automation_details": [
        "torch.onnx._internal.diagnostics.infra.sarif._message",
        "torch.onnx._internal.diagnostics.infra.sarif._run_automation_details.RunAutomationDetails",
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._run_automation_details.RunAutomationDetails": [],
    "torch.onnx._internal.diagnostics.infra.sarif._special_locations": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._special_locations.SpecialLocations",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._special_locations.SpecialLocations": [],
    "torch.onnx._internal.diagnostics.infra.sarif._version_control_details": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._version_control_details.VersionControlDetails",
        "torch.onnx._internal.diagnostics.infra.sarif._artifact_location"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._version_control_details.VersionControlDetails": [],
    "torch.onnx._internal.diagnostics.infra.sarif._run.Run": [],
    "torch.onnx._internal.diagnostics.infra.sarif._sarif_log": [
        "torch.onnx._internal.diagnostics.infra.sarif._property_bag",
        "torch.onnx._internal.diagnostics.infra.sarif._external_properties",
        "torch.onnx._internal.diagnostics.infra.sarif._run",
        "torch.onnx._internal.diagnostics.infra.sarif._sarif_log.SarifLog"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif._sarif_log.SarifLog": [],
    "torch.onnx._internal._beartype.beartype": [],
    "torch.onnx._internal.diagnostics.infra._infra.Level": [],
    "torch.onnx._internal.diagnostics.infra._infra.Tag": [],
    "torch.onnx._internal.diagnostics.infra._infra.PatchedPropertyBag": [],
    "torch.onnx._internal.diagnostics.infra._infra.Rule": [
        "<builtin>.classmethod"
    ],
    "torch.onnx._internal.diagnostics.infra._infra.Location": [],
    "torch.onnx._internal.diagnostics.infra._infra.StackFrame": [],
    "torch.onnx._internal.diagnostics.infra._infra.Stack": [],
    "torch.onnx._internal.diagnostics.infra._infra.ThreadFlowLocation": [],
    "torch.onnx._internal.diagnostics.infra._infra.Graph": [],
    "torch.onnx._internal.diagnostics.infra._infra.RuleCollection": [
        "<builtin>.classmethod"
    ],
    "torch.onnx._internal.diagnostics.infra._infra.Invocation": [],
    "torch.onnx._internal.diagnostics.infra._infra.DiagnosticOptions": [],
    "torch.onnx._internal.diagnostics.infra.engine": [
        "torch.onnx._internal.diagnostics.infra.formatter",
        "torch.onnx._internal.diagnostics.infra.engine.Diagnostic",
        "torch.onnx._internal.diagnostics.infra.engine.DiagnosticContext",
        "torch.onnx._internal.diagnostics.infra.utils",
        "torch.onnx._internal.diagnostics.infra.sarif.version",
        "torch.onnx._internal.diagnostics.infra.sarif",
        "typing_extensions",
        "torch.onnx._internal.diagnostics.infra.engine.DiagnosticEngine",
        "torch.onnx._internal.diagnostics.infra",
        "typing.TypeVar",
        "torch.onnx._internal.diagnostics.infra.engine.DiagnosticError"
    ],
    "torch.onnx._internal.diagnostics.infra.utils": [
        "torch.onnx._internal.diagnostics.infra.formatter",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._internal.diagnostics.infra._infra",
        "torch.onnx._internal._beartype"
    ],
    "torch.onnx._internal.diagnostics.infra.sarif.version": [],
    "torch.onnx._internal.diagnostics.infra.engine.DiagnosticError": [],
    "torch.onnx._internal.diagnostics.infra.engine.Diagnostic": [],
    "torch.onnx._internal.diagnostics.infra.engine.DiagnosticContext": [],
    "torch.onnx._internal.diagnostics.infra.engine.DiagnosticEngine": [],
    "torch.onnx._internal.diagnostics._diagnostic.ExportDiagnostic": [],
    "torch.onnx._internal.diagnostics._diagnostic.ExportDiagnosticEngine": [
        "<builtin>.property"
    ],
    "torch.onnx._internal.diagnostics._diagnostic.ExportDiagnosticEngine.__init__": [
        "<builtin>.super"
    ],
    "torch.onnx._internal.diagnostics._rules": [
        "torch.onnx._internal.diagnostics._rules._FxTracerFailure",
        "torch.onnx._internal.diagnostics._rules._FxFrontendAotautograd",
        "torch.onnx._internal.diagnostics._rules._ArgFormatTooVerbose",
        "torch.onnx._internal.diagnostics._rules._POERules",
        "torch.onnx._internal.diagnostics._rules._AtenlibFxToOnnx",
        "torch.onnx._internal.diagnostics._rules._FxNodeToOnnx",
        "torch.onnx._internal.diagnostics._rules._OperatorSupportedInNewerOpsetVersion",
        "torch.onnx._internal.diagnostics._rules._MissingCustomSymbolicFunction",
        "torch.onnx._internal.diagnostics._rules._FxTracerSuccess",
        "torch.onnx._internal.diagnostics._rules._FxIrAddNode",
        "torch.onnx._internal.diagnostics._rules._FxFrontendDynamoMakeFx",
        "torch.onnx._internal.diagnostics._rules._MissingStandardSymbolicFunction",
        "torch.onnx._internal.diagnostics._rules._FxPassConvertNegToSigmoid",
        "torch.onnx._internal.diagnostics._rules._AtenlibSymbolicFunction",
        "torch.onnx._internal.diagnostics.infra",
        "torch.onnx._internal.diagnostics._rules._NodeMissingOnnxShapeInference"
    ],
    "torch.onnx._internal.diagnostics._rules._NodeMissingOnnxShapeInference": [],
    "torch.onnx._internal.diagnostics._rules._MissingCustomSymbolicFunction": [],
    "torch.onnx._internal.diagnostics._rules._MissingStandardSymbolicFunction": [],
    "torch.onnx._internal.diagnostics._rules._OperatorSupportedInNewerOpsetVersion": [],
    "torch.onnx._internal.diagnostics._rules._FxTracerSuccess": [],
    "torch.onnx._internal.diagnostics._rules._FxTracerFailure": [],
    "torch.onnx._internal.diagnostics._rules._FxFrontendAotautograd": [],
    "torch.onnx._internal.diagnostics._rules._FxPassConvertNegToSigmoid": [],
    "torch.onnx._internal.diagnostics._rules._FxIrAddNode": [],
    "torch.onnx._internal.diagnostics._rules._AtenlibSymbolicFunction": [],
    "torch.onnx._internal.diagnostics._rules._AtenlibFxToOnnx": [],
    "torch.onnx._internal.diagnostics._rules._FxNodeToOnnx": [],
    "torch.onnx._internal.diagnostics._rules._FxFrontendDynamoMakeFx": [],
    "torch.onnx._internal.diagnostics._rules._ArgFormatTooVerbose": [],
    "torch.onnx._internal.diagnostics._rules._POERules": [
        "torch.onnx._internal.diagnostics.infra._infra.Rule.from_sarif"
    ],
    "torch.onnx._internal.diagnostics.infra._infra.Rule.from_sarif": [],
    "torch.onnx.errors.OnnxExporterWarning": [],
    "torch.onnx.errors.CallHintViolationWarning": [],
    "torch.onnx.errors.OnnxExporterError": [],
    "torch.onnx.errors.CheckerError": [],
    "torch.onnx.errors.UnsupportedOperatorError": [],
    "torch.onnx.errors.SymbolicValueError": [],
    "torch.onnx.symbolic_caffe2": [
        "torch.onnx._internal.registration",
        "torch.onnx.symbolic_opset9",
        "torch.onnx._internal.jit_utils",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator"
    ],
    "torch.onnx.symbolic_helper": [
        "torch.onnx.errors",
        "torch.onnx._internal._beartype",
        "torch.onnx._deprecation.deprecated",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._type_utils",
        "torch.onnx._globals",
        "torch.types",
        "torch.onnx._deprecation.deprecated.decorator",
        "torch.onnx._deprecation",
        "<builtin>.set",
        "torch.onnx._constants",
        "torch"
    ],
    "torch.onnx._type_utils": [
        "torch.onnx.errors",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal._beartype.beartype",
        "<map>.items",
        "torch.onnx._type_utils.JitScalarType",
        "torch"
    ],
    "torch.onnx._type_utils.JitScalarType": [
        "<builtin>.classmethod",
        "torch.onnx._internal._beartype.beartype"
    ],
    "torch.onnx._internal.jit_utils": [
        "torch.onnx._internal.registration",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal.jit_utils.GraphContext",
        "torch.onnx._globals",
        "torch.onnx._internal._beartype.beartype",
        "torch"
    ],
    "torch.onnx._internal.registration": [
        "torch.onnx._internal._beartype",
        "torch.onnx._internal.registration.SymbolicRegistry.__init__",
        "torch.onnx._internal.registration.SymbolicRegistry",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._internal.registration._SymbolicFunctionGroup",
        "torch.onnx._internal.registration.OverrideDict",
        "torch.onnx._constants",
        "torch.onnx.errors",
        "typing.TypeVar"
    ],
    "torch.onnx._internal.registration.OverrideDict": [],
    "torch.onnx._internal.registration._SymbolicFunctionGroup": [],
    "torch.onnx._internal.registration.SymbolicRegistry": [],
    "torch.onnx._internal.registration.SymbolicRegistry.__init__": [],
    "torch.onnx._internal.jit_utils.GraphContext": [
        "torch.onnx._internal._beartype.beartype"
    ],
    "torch.onnx._deprecation.deprecated": [],
    "torch.onnx._deprecation.deprecated.decorator": [
        "<builtin>.len"
    ],
    "torch.onnx.symbolic_opset9": [
        "torch.onnx",
        "torch.nn.modules.utils",
        "torch.onnx._internal.jit_utils",
        "torch.types",
        "torch.onnx.symbolic_opset9.wrap_logical_op_with_cast_to.decorator",
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.quantized_args.decorator",
        "torch.onnx._deprecation.deprecated",
        "torch.onnx.symbolic_opset9._export",
        "torch.onnx.symbolic_opset9.wrap_logical_op_with_cast_to",
        "torch.onnx.symbolic_opset9._max_pool",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx._constants",
        "torch.onnx.errors",
        "torch.onnx._internal.registration",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._globals",
        "torch.onnx._deprecation.deprecated.decorator",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_opset9.wrap_logical_op_with_negation",
        "torch.onnx._deprecation",
        "torch.onnx.symbolic_opset9._apply_params",
        "torch.onnx._type_utils",
        "torch"
    ],
    "torch.onnx.symbolic_helper.quantized_args": [],
    "torch.onnx.symbolic_helper.quantized_args.decorator": [],
    "torch.onnx.symbolic_helper.parse_args": [],
    "torch.onnx.symbolic_helper.parse_args.decorator": [],
    "torch.onnx.symbolic_opset9._apply_params": [],
    "torch.onnx.symbolic_opset9._export": [],
    "torch.onnx.symbolic_opset9._max_pool": [
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.quantized_args.decorator"
    ],
    "torch.onnx.symbolic_opset9.wrap_logical_op_with_negation": [],
    "torch.onnx.symbolic_opset9.wrap_logical_op_with_cast_to": [],
    "torch.onnx.symbolic_opset9.wrap_logical_op_with_cast_to.decorator": [],
    "torch.onnx.symbolic_opset7": [
        "torch.onnx.symbolic_helper._block_list_in_opset",
        "torch.onnx._internal.registration",
        "torch.onnx.symbolic_opset9",
        "torch.onnx._internal.jit_utils",
        "torch.onnx.symbolic_helper"
    ],
    "torch.onnx.symbolic_helper._block_list_in_opset": [],
    "torch.onnx.symbolic_opset8": [
        "torch.onnx.symbolic_helper._block_list_in_opset",
        "torch.onnx._internal.registration",
        "torch.onnx.symbolic_opset9",
        "torch.onnx.errors",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._type_utils",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch",
        "torch.onnx.symbolic_opset8._apply_params"
    ],
    "torch.onnx.symbolic_opset8._apply_params": [],
    "torch.onnx.symbolic_opset10": [
        "torch.onnx",
        "torch.onnx._internal.registration",
        "torch.onnx.errors",
        "torch.onnx.symbolic_opset9",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._type_utils",
        "torch.onnx._globals",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx._constants",
        "torch",
        "torch.onnx.symbolic_opset10._apply_params"
    ],
    "torch.onnx.symbolic_opset10._apply_params": [],
    "torch.onnx.symbolic_opset11": [
        "torch.onnx.utils",
        "torch.onnx._internal.registration",
        "torch.onnx.errors",
        "torch.onnx.symbolic_opset9",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._type_utils",
        "torch.onnx._globals",
        "torch.onnx.symbolic_opset11._apply_params",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch.onnx.symbolic_helper.quantized_args",
        "torch.onnx.symbolic_helper.quantized_args.decorator",
        "torch",
        "torch.onnx.symbolic_opset10"
    ],
    "torch.onnx.utils": [
        "torch.onnx.symbolic_caffe2",
        "torch.onnx._internal.diagnostics",
        "torch.serialization",
        "torch.onnx.errors",
        "torch.onnx._internal._beartype",
        "torch.onnx._exporter_states",
        "torch.onnx._internal.registration",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._internal.onnx_proto_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._globals",
        "torch.onnx.symbolic_helper",
        "torch.onnx._constants",
        "torch",
        "torch.jit._trace"
    ],
    "torch.jit._trace": [
        "torch.jit._script",
        "torch.nn",
        "torch.jit._trace.TracingCheckError",
        "torch.testing._comparison",
        "torch.autograd.function",
        "torch.autograd.grad_mode.no_grad.__init__",
        "torch.jit._trace.TopLevelTracedModule",
        "torch.jit._state",
        "torch._jit_internal",
        "torch.jit._trace.TracedModule",
        "torch.jit._trace.ONNXTracedModule",
        "torch.jit._trace.TracerWarning.ignore_lib_warnings",
        "torch",
        "torch.jit._trace.TracerWarning"
    ],
    "torch.jit._state": [
        "torch",
        "torch.jit._state.EnabledProxy",
        "torch.jit._state.EnabledProxy.__init__"
    ],
    "torch.jit._state.EnabledProxy": [],
    "torch.jit._state.EnabledProxy.__init__": [
        "torch.jit._state.EnabledProxy.parse_env"
    ],
    "torch.jit._state.EnabledProxy.parse_env": [
        "<builtin>.print",
        "<builtin>.ValueError"
    ],
    "torch.jit._script": [
        "torch.nn",
        "torch.jit._script.ScriptModule",
        "torch.jit._script._CachedForward",
        "torch.jit._monkeytype_config.JitTypeTraceStore.__init__",
        "torch.jit._script._ScriptProfileColumn",
        "torch.jit._script._make_fail",
        "torch.jit._script.RecursiveScriptClass",
        "torch.jit._state",
        "torch.jit._recursive",
        "torch.utils",
        "torch.jit._script._ScriptProfileTable",
        "<builtin>.callable",
        "torch.jit._builtins._register_builtin",
        "torch._jit_internal",
        "torch.jit._script.OrderedDictWrapper",
        "torch.jit._script.ScriptMeta",
        "torch.jit._script._get_methods",
        "torch.package",
        "torch.jit._serialization",
        "torch.overrides",
        "<builtin>.setattr",
        "torch.jit._script.OrderedModuleDict",
        "torch.jit._script.ScriptWarning",
        "torch.jit._script.RecursiveScriptModule",
        "torch.jit._monkeytype_config",
        "torch.jit._script._ScriptProfile",
        "<builtin>.hasattr",
        "torch._classes",
        "torch.jit.frontend",
        "torch.utils.set_module",
        "<builtin>.isinstance",
        "torch.jit._builtins",
        "torch.jit._fuser",
        "torch.jit._script.ConstMap",
        "torch"
    ],
    "torch.jit._recursive": [
        "torch.nn",
        "<builtin>.type",
        "torch.jit.frontend",
        "torch.jit._state",
        "torch.jit._recursive.SourceContext",
        "torch.jit._check",
        "torch.jit._recursive.ConcreteTypeStore.__init__",
        "torch.jit._builtins",
        "torch.jit._recursive.ConcreteTypeStore",
        "torch._jit_internal",
        "torch",
        "torch._sources"
    ],
    "torch.jit.frontend": [
        "torch.jit.annotations",
        "torch.jit.frontend.NotSupportedError",
        "torch.jit.frontend.StmtBuilder",
        "torch.jit.frontend.Builder",
        "torch.jit._dataclass_impls",
        "torch.jit.frontend.WithItemBuilder",
        "torch.jit.frontend.FrontendError",
        "torch.jit.frontend.FrontendTypeError",
        "torch.jit.frontend.ExprBuilder",
        "<map>.update",
        "torch._jit_internal",
        "<builtin>.set",
        "torch.jit.frontend.UnsupportedNodeError",
        "torch.jit._monkeytype_config",
        "torch",
        "torch._sources"
    ],
    "torch.jit._dataclass_impls": [
        "functools.partial",
        "torch._jit_internal",
        "torch._sources"
    ],
    "functools.partial": [],
    "torch.jit._monkeytype_config": [
        "torch.jit._monkeytype_config.JitTypeTraceConfig",
        "torch.jit._monkeytype_config.JitTypeTraceStore",
        "torch",
        "torch.jit._monkeytype_config.JitTypeTraceStoreLogger"
    ],
    "torch.jit._monkeytype_config.JitTypeTraceStoreLogger": [],
    "torch.jit._monkeytype_config.JitTypeTraceStore": [],
    "torch.jit._monkeytype_config.JitTypeTraceConfig": [],
    "torch.jit.annotations": [
        "torch._ops",
        "torch.distributed.rpc.is_available",
        "torch.jit.annotations.Module",
        "torch.jit._state",
        "torch.jit.annotations.EvalEnv",
        "torch._jit_internal",
        "torch",
        "torch._sources"
    ],
    "torch.jit.annotations.Module": [],
    "torch.jit.annotations.EvalEnv": [
        "torch.jit.annotations.Module.__init__"
    ],
    "torch.jit.annotations.Module.__init__": [],
    "torch.jit.frontend.FrontendError": [],
    "torch.jit.frontend.NotSupportedError": [],
    "torch.jit.frontend.UnsupportedNodeError": [],
    "torch.jit.frontend.FrontendTypeError": [],
    "torch.jit.frontend.Builder": [],
    "torch.jit.frontend.WithItemBuilder": [
        "<builtin>.staticmethod"
    ],
    "torch.jit.frontend.StmtBuilder": [
        "<builtin>.staticmethod"
    ],
    "torch.jit.frontend.ExprBuilder": [
        "<builtin>.staticmethod"
    ],
    "torch.jit._builtins": [
        "torch.backends.cudnn",
        "torch",
        "torch.jit._builtins._gen_torch_functional_registered_ops",
        "torch.nn.modules.utils"
    ],
    "torch.backends.cudnn": [
        "torch.backends",
        "torch.backends.cudnn.CudnnModule",
        "torch.backends.cudnn.CudnnModule.__init__",
        "torch",
        "contextlib.contextmanager"
    ],
    "torch.backends.cudnn.CudnnModule": [
        "torch.backends.ContextProp.__init__",
        "torch.backends.cudnn.is_available"
    ],
    "torch.backends.cudnn.is_available": [],
    "torch.backends.cudnn.CudnnModule.__init__": [
        "<builtin>.super"
    ],
    "torch.jit._builtins._gen_torch_functional_registered_ops": [
        "<builtin>.getattr"
    ],
    "torch.jit._check": [
        "torch",
        "torch.jit._check.AttributeTypeIsSupportedChecker"
    ],
    "torch.jit._check.AttributeTypeIsSupportedChecker": [],
    "torch.jit._recursive.SourceContext": [],
    "torch.jit._recursive.ConcreteTypeStore": [],
    "torch.jit._recursive.ConcreteTypeStore.__init__": [
        "<builtin>.set"
    ],
    "torch.jit._fuser": [
        "torch"
    ],
    "torch.package": [
        "torch.package.package_importer",
        "torch.package.analyze.is_from_package",
        "torch.package.file_structure_representation",
        "torch.package.package_exporter",
        "torch.package.glob_group",
        "torch.package.importer"
    ],
    "torch.package.analyze.is_from_package": [
        "torch.package._mangling"
    ],
    "torch.package.file_structure_representation": [
        "torch.package.file_structure_representation.Directory",
        "torch.package.glob_group"
    ],
    "torch.package.glob_group": [
        "torch.package.glob_group.GlobGroup"
    ],
    "torch.package.glob_group.GlobGroup": [
        "<builtin>.staticmethod"
    ],
    "torch.package.file_structure_representation.Directory": [],
    "torch.package.importer": [
        "torch.package._mangling",
        "torch.package.importer.Importer",
        "torch.package.importer._SysImporter",
        "torch.package.importer.ObjNotFoundError",
        "torch.package.importer.OrderedImporter",
        "torch.package.importer.ObjMismatchError"
    ],
    "torch.package.importer.ObjNotFoundError": [],
    "torch.package.importer.ObjMismatchError": [],
    "torch.package.importer.Importer": [
        "abc.abstractmethod"
    ],
    "torch.package.importer._SysImporter": [],
    "torch.package.importer.OrderedImporter": [],
    "torch.package.package_exporter": [
        "torch.package.package_exporter.PackagingError",
        "torch.package.find_file_dependencies",
        "torch.serialization",
        "torch.package._mangling",
        "torch.package.package_exporter.PackagingErrorReason",
        "torch.package._digraph",
        "torch.package.package_exporter._ModuleProviderAction",
        "torch.package.package_exporter._PatternInfo",
        "torch.package._importlib",
        "torch.types",
        "torch.package.package_exporter.PackageExporter",
        "torch.package._stdlib",
        "torch.package.glob_group",
        "torch.package._package_pickler",
        "torch",
        "torch.package.importer",
        "torch.utils.hooks",
        "torch.package.package_exporter.EmptyMatchError"
    ],
    "torch.package._digraph": [
        "torch.package._digraph.DiGraph"
    ],
    "torch.package._digraph.DiGraph": [
        "<builtin>.property"
    ],
    "torch.package._importlib": [],
    "torch.package._package_pickler": [
        "torch.package._package_pickler.PackagePickler",
        "torch.package.importer"
    ],
    "torch.package._package_pickler.PackagePickler": [],
    "torch.package._stdlib": [],
    "torch.package.find_file_dependencies": [
        "torch.package._importlib",
        "torch.package.find_file_dependencies._ExtractModuleReferences"
    ],
    "torch.package.find_file_dependencies._ExtractModuleReferences": [
        "<builtin>.classmethod"
    ],
    "torch.package.package_exporter._ModuleProviderAction": [],
    "torch.package.package_exporter.PackagingErrorReason": [],
    "torch.package.package_exporter._PatternInfo": [],
    "torch.package.package_exporter.EmptyMatchError": [],
    "torch.package.package_exporter.PackagingError": [],
    "torch.package.package_exporter.PackageExporter": [],
    "torch.package.package_importer": [
        "<builtin>.object",
        "torch.package._directory_reader",
        "torch.package.package_importer._ExternNode",
        "torch.serialization",
        "torch.package._mangling",
        "torch.package.package_importer._PackageResourceReader",
        "weakref.WeakValueDictionary",
        "torch.package._importlib",
        "torch.package._package_unpickler",
        "torch.package.package_importer._ModuleNode",
        "torch.package.file_structure_representation",
        "torch.package.package_importer.PackageImporter",
        "torch.package.package_importer._PathNode",
        "torch.package.glob_group",
        "torch",
        "torch.package.package_importer._PackageNode",
        "torch.package.importer"
    ],
    "torch.package._directory_reader": [
        "torch.package._directory_reader._HasStorage",
        "torch",
        "torch.types",
        "torch.package._directory_reader.DirectoryReader"
    ],
    "torch.package._directory_reader._HasStorage": [],
    "torch.package._directory_reader.DirectoryReader": [],
    "torch.package._package_unpickler": [
        "torch.package.importer",
        "torch.package._package_unpickler.PackageUnpickler"
    ],
    "torch.package._package_unpickler.PackageUnpickler": [],
    "torch.package.package_importer.PackageImporter": [],
    "torch.package.package_importer._PathNode": [],
    "torch.package.package_importer._PackageNode": [],
    "torch.package.package_importer._ModuleNode": [],
    "torch.package.package_importer._ExternNode": [],
    "weakref.WeakValueDictionary": [],
    "torch.package.package_importer._PackageResourceReader": [],
    "torch.jit._serialization": [
        "torch",
        "torch.serialization",
        "torch.jit._recursive"
    ],
    "torch._classes": [
        "torch._classes._Classes",
        "torch._classes._Classes.__init__",
        "torch._classes._ClassNamespace"
    ],
    "torch._classes._ClassNamespace": [],
    "torch._classes._Classes": [
        "<builtin>.property"
    ],
    "torch._classes._Classes.__init__": [
        "<builtin>.super"
    ],
    "torch.jit._monkeytype_config.JitTypeTraceStore.__init__": [],
    "torch.utils.set_module": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "torch.jit._script.OrderedDictWrapper": [],
    "torch.jit._script.OrderedModuleDict": [],
    "torch.jit._script.ScriptMeta": [],
    "torch.jit._script._CachedForward": [],
    "torch.jit._script.ScriptWarning": [],
    "torch.jit._script.ConstMap": [],
    "torch.jit._script.RecursiveScriptClass": [],
    "torch.jit._script.ScriptModule": [],
    "torch.jit._script.RecursiveScriptModule": [],
    "torch.jit._script._get_methods": [],
    "torch.jit._script._make_fail": [],
    "torch.jit._script._ScriptProfileColumn": [],
    "torch.jit._script._ScriptProfileTable": [],
    "torch.jit._script._ScriptProfile": [],
    "torch.jit._builtins._register_builtin": [
        "<builtin>.id",
        "torch.jit._builtins._get_builtin_table"
    ],
    "torch.jit._builtins._get_builtin_table": [
        "torch.jit._builtins._get_builtin_table.register_all",
        "torch.distributed.autograd.is_available",
        "append",
        "<builtin>.id",
        "torch.distributed.autograd"
    ],
    "torch.jit._builtins._get_builtin_table.register_all": [
        "<builtin>.dir",
        "<builtin>.getattr",
        "append",
        "<builtin>.callable",
        "torch.jit._builtins._is_special_functional_bound_op"
    ],
    "torch.jit._builtins._is_special_functional_bound_op": [],
    "<builtin>.id": [],
    "torch.jit._trace.ONNXTracedModule": [],
    "torch.jit._trace.TracingCheckError": [],
    "torch.jit._trace.TracerWarning": [
        "<builtin>.staticmethod"
    ],
    "torch.jit._trace.TracerWarning.ignore_lib_warnings": [],
    "torch.jit._trace.TracedModule": [],
    "torch.jit._trace.TopLevelTracedModule": [],
    "torch.onnx._internal.onnx_proto_utils": [
        "torch.onnx._internal.registration",
        "torch.serialization",
        "torch.onnx.errors",
        "torch.onnx._internal._beartype",
        "torch.onnx._exporter_states",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._constants",
        "torch",
        "torch.jit._trace"
    ],
    "torch.onnx.symbolic_opset11._apply_params": [],
    "torch.onnx.symbolic_opset12": [
        "torch.onnx.utils",
        "torch.onnx._internal.registration",
        "torch.onnx.symbolic_opset9",
        "torch.onnx.errors",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._type_utils",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch"
    ],
    "torch.onnx.symbolic_opset13": [
        "torch.onnx.utils",
        "torch.onnx._internal.registration",
        "torch.onnx.symbolic_opset11",
        "torch.onnx.errors",
        "torch.onnx.symbolic_opset9",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._type_utils",
        "torch.onnx.symbolic_opset13._apply_params",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch"
    ],
    "torch.onnx.symbolic_opset13._apply_params": [],
    "torch.onnx.symbolic_opset14": [
        "torch.onnx._internal.registration",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx._globals",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch"
    ],
    "torch.onnx.symbolic_opset15": [
        "torch.onnx._internal.registration",
        "torch.onnx.symbolic_opset9",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal.jit_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_opset9.wrap_logical_op_with_negation",
        "torch"
    ],
    "torch.onnx.symbolic_opset16": [
        "torch.onnx._internal.registration",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal.jit_utils",
        "torch.nn.functional",
        "torch.onnx._type_utils",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch"
    ],
    "torch.onnx.symbolic_opset17": [
        "torch.onnx._internal.registration",
        "torch.onnx._internal.jit_utils",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator"
    ],
    "torch.onnx.symbolic_opset18": [
        "torch.onnx._internal.registration",
        "torch.onnx._internal._beartype",
        "torch.onnx._internal._beartype.beartype",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator"
    ],
    "torch.jit": [
        "<builtin>.RuntimeError",
        "torch.jit._script",
        "torch.jit._serialization",
        "torch.jit._freeze",
        "torch.utils.set_module",
        "torch.jit._async",
        "torch.utils",
        "torch.jit._decomposition_utils",
        "torch.jit.strict_fusion",
        "torch.jit._ir_utils",
        "torch.jit._fuser",
        "torch._jit_internal",
        "torch.jit._await",
        "contextlib.contextmanager",
        "torch.jit._trace"
    ],
    "torch.jit._async": [
        "torch.utils.set_module",
        "torch.utils",
        "torch.jit._builtins._register_builtin",
        "torch.jit._builtins",
        "torch._jit_internal",
        "torch"
    ],
    "torch.jit._await": [
        "torch.utils.set_module",
        "torch.utils",
        "torch.jit._builtins._register_builtin",
        "torch.jit._builtins",
        "torch._jit_internal",
        "torch"
    ],
    "torch.jit._decomposition_utils": [
        "torch",
        "torch._ops"
    ],
    "torch.jit._freeze": [
        "torch.jit._script",
        "torch"
    ],
    "torch.jit._ir_utils": [
        "torch",
        "torch.jit._ir_utils._InsertPoint"
    ],
    "torch.jit._ir_utils._InsertPoint": [],
    "torch.jit.strict_fusion": [],
    "torch.linalg": [
        "torch",
        "torch._C._add_docstr"
    ],
    "torch.hub": [
        "torch.hub._Faketqdm",
        "torch",
        "torch.serialization"
    ],
    "torch.hub._Faketqdm": [],
    "torch.distributions": [
        "torch.distributions.continuous_bernoulli",
        "torch.distributions.exponential",
        "torch.distributions.normal",
        "torch.distributions.categorical",
        "torch.distributions.weibull",
        "torch.distributions.beta",
        "torch.distributions.kumaraswamy",
        "torch.distributions.gamma",
        "torch.distributions.transformed_distribution",
        "torch.distributions.independent",
        "torch.distributions.multinomial",
        "torch.distributions.lowrank_multivariate_normal",
        "torch.distributions.studentT",
        "torch.distributions.constraint_registry",
        "torch.distributions.pareto",
        "torch.distributions.poisson",
        "torch.distributions.kl",
        "torch.distributions.uniform",
        "torch.distributions.lkj_cholesky",
        "torch.distributions.logistic_normal",
        "extend",
        "torch.distributions.half_cauchy",
        "torch.distributions.gumbel",
        "torch.distributions.one_hot_categorical",
        "torch.distributions.chi2",
        "torch.distributions.log_normal",
        "torch.distributions.exp_family",
        "torch.distributions.bernoulli",
        "torch.distributions.laplace",
        "torch.distributions.cauchy",
        "torch.distributions.multivariate_normal",
        "torch.distributions.transforms",
        "torch.distributions.mixture_same_family",
        "torch.distributions.negative_binomial",
        "torch.distributions.wishart",
        "torch.distributions.dirichlet",
        "torch.distributions.relaxed_categorical",
        "torch.distributions.distribution",
        "torch.distributions.fishersnedecor",
        "torch.distributions.half_normal",
        "torch.distributions.geometric",
        "torch.distributions.kl._add_kl_info",
        "torch.distributions.von_mises",
        "torch.distributions.binomial",
        "torch.distributions.relaxed_bernoulli"
    ],
    "torch.distributions.bernoulli": [
        "torch.distributions.exp_family",
        "torch.nn.functional",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch",
        "torch.distributions.bernoulli.Bernoulli"
    ],
    "torch.distributions.constraints": [
        "torch.distributions.constraints._LowerTriangular",
        "torch.distributions.constraints._OneHot",
        "torch.distributions.constraints._Interval.__init__",
        "torch.distributions.constraints._CorrCholesky",
        "torch.distributions.constraints._Symmetric",
        "torch.distributions.constraints._IntegerLessThan",
        "torch.distributions.constraints._Square",
        "torch.distributions.constraints._IndependentConstraint",
        "torch.distributions.constraints._Boolean",
        "torch.distributions.constraints._DependentProperty",
        "torch.distributions.constraints._Stack",
        "torch.distributions.constraints._IndependentConstraint.__init__",
        "torch.distributions.constraints._PositiveDefinite",
        "torch.distributions.constraints._GreaterThanEq",
        "torch.distributions.constraints._PositiveSemidefinite",
        "torch.distributions.constraints._IntegerGreaterThan",
        "torch.distributions.constraints._Multinomial",
        "torch.distributions.constraints._Dependent",
        "torch.distributions.constraints._Simplex",
        "torch.distributions.constraints._Dependent.__init__",
        "torch.distributions.constraints._GreaterThan",
        "torch.distributions.constraints._IntegerGreaterThan.__init__",
        "torch.distributions.constraints._Real",
        "torch.distributions.constraints._LessThan",
        "torch.distributions.constraints._Cat",
        "torch.distributions.constraints._IntegerInterval",
        "torch.distributions.constraints._GreaterThan.__init__",
        "torch.distributions.constraints._GreaterThanEq.__init__",
        "torch.distributions.constraints._Interval",
        "torch.distributions.constraints._HalfOpenInterval",
        "torch.distributions.constraints._LowerCholesky",
        "torch.distributions.constraints.Constraint",
        "torch"
    ],
    "torch.distributions.constraints.Constraint": [],
    "torch.distributions.constraints._Dependent": [
        "<builtin>.property"
    ],
    "torch.distributions.constraints._DependentProperty": [],
    "torch.distributions.constraints._IndependentConstraint": [
        "<builtin>.property"
    ],
    "torch.distributions.constraints._Boolean": [],
    "torch.distributions.constraints._OneHot": [],
    "torch.distributions.constraints._IntegerInterval": [],
    "torch.distributions.constraints._IntegerLessThan": [],
    "torch.distributions.constraints._IntegerGreaterThan": [],
    "torch.distributions.constraints._Real": [],
    "torch.distributions.constraints._GreaterThan": [],
    "torch.distributions.constraints._GreaterThanEq": [],
    "torch.distributions.constraints._LessThan": [],
    "torch.distributions.constraints._Interval": [],
    "torch.distributions.constraints._HalfOpenInterval": [],
    "torch.distributions.constraints._Simplex": [],
    "torch.distributions.constraints._Multinomial": [],
    "torch.distributions.constraints._LowerTriangular": [],
    "torch.distributions.constraints._LowerCholesky": [],
    "torch.distributions.constraints._CorrCholesky": [],
    "torch.distributions.constraints._Square": [],
    "torch.distributions.constraints._Symmetric": [],
    "torch.distributions.constraints._PositiveSemidefinite": [],
    "torch.distributions.constraints._PositiveDefinite": [],
    "torch.distributions.constraints._Cat": [
        "<builtin>.property"
    ],
    "torch.distributions.constraints._Stack": [
        "<builtin>.property"
    ],
    "torch.distributions.constraints._Dependent.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraints._IntegerGreaterThan.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraints._IndependentConstraint.__init__": [
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "torch.distributions.constraints._GreaterThan.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraints._GreaterThanEq.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraints._Interval.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.exp_family": [
        "torch",
        "torch.distributions.distribution",
        "torch.distributions.exp_family.ExponentialFamily"
    ],
    "torch.distributions.distribution": [
        "torch.types",
        "torch.distributions.distribution.Distribution",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.utils": [
        "torch.overrides",
        "torch.nn.functional",
        "torch.distributions.utils.lazy_property",
        "torch",
        "torch.distributions.utils._lazy_property_and_property"
    ],
    "torch.distributions.utils.lazy_property": [],
    "torch.distributions.utils._lazy_property_and_property": [],
    "torch.distributions.distribution.Distribution": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "torch.distributions.exp_family.ExponentialFamily": [
        "<builtin>.property"
    ],
    "torch.distributions.bernoulli.Bernoulli": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.utils.lazy_property.__init__": [
        "functools.update_wrapper"
    ],
    "functools.update_wrapper": [],
    "torch.distributions.beta": [
        "torch.distributions.exp_family",
        "torch.distributions.dirichlet",
        "torch.distributions.beta.Beta",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.dirichlet": [
        "torch.distributions.exp_family",
        "torch.autograd",
        "torch.autograd.function",
        "torch.distributions.dirichlet._Dirichlet",
        "torch.distributions.constraints",
        "torch",
        "torch.distributions.dirichlet.Dirichlet"
    ],
    "torch.distributions.dirichlet._Dirichlet": [
        "<builtin>.staticmethod",
        "torch.autograd.function.once_differentiable"
    ],
    "torch.autograd.function.once_differentiable": [],
    "torch.distributions.dirichlet.Dirichlet": [
        "torch.distributions.constraints._IndependentConstraint.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.beta.Beta": [
        "<builtin>.property"
    ],
    "torch.distributions.binomial": [
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.binomial.Binomial",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.binomial.Binomial": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.constraints._DependentProperty.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.categorical": [
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch",
        "torch.distributions.categorical.Categorical"
    ],
    "torch.distributions.categorical.Categorical": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.cauchy": [
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.cauchy.Cauchy",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.cauchy.Cauchy": [
        "<builtin>.property"
    ],
    "torch.distributions.chi2": [
        "torch.distributions.constraints",
        "torch.distributions.gamma",
        "torch.distributions.chi2.Chi2"
    ],
    "torch.distributions.gamma": [
        "torch.distributions.exp_family",
        "torch.distributions.gamma.Gamma",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.gamma.Gamma": [
        "<builtin>.property"
    ],
    "torch.distributions.chi2.Chi2": [
        "<builtin>.property"
    ],
    "torch.distributions.constraint_registry": [
        "torch.distributions.constraint_registry.ConstraintRegistry",
        "torch.distributions.constraint_registry.ConstraintRegistry.register.<lambda1>",
        "torch.distributions.transforms",
        "torch.distributions.constraint_registry.ConstraintRegistry.register",
        "torch.distributions.constraint_registry.ConstraintRegistry.__init__",
        "torch.distributions.constraints"
    ],
    "torch.distributions.transforms": [
        "torch.nn.functional",
        "torch.distributions.transforms.SoftplusTransform",
        "torch.distributions.transforms.StickBreakingTransform",
        "torch.distributions.transforms.IndependentTransform",
        "torch.distributions.constraints",
        "torch.distributions.transforms.ReshapeTransform",
        "torch.distributions.transforms.SigmoidTransform",
        "torch.distributions.transforms.AbsTransform",
        "torch.distributions.transforms.TanhTransform",
        "torch.distributions.transforms.PositiveDefiniteTransform",
        "torch.distributions.transforms.Transform",
        "torch.distributions.transforms._InverseTransform",
        "torch.distributions.transforms.CorrCholeskyTransform",
        "torch.distributions.transforms.CatTransform",
        "torch.distributions.transforms.LowerCholeskyTransform",
        "torch.distributions.transforms.StackTransform",
        "torch.distributions.transforms.AffineTransform",
        "torch.distributions.utils",
        "torch.distributions.transforms.ComposeTransform",
        "torch.distributions.transforms.CumulativeDistributionTransform",
        "torch.distributions.transforms.ComposeTransform.__init__",
        "torch.distributions.transforms.ExpTransform",
        "torch.distributions.transforms.SoftmaxTransform",
        "torch",
        "torch.distributions.transforms.PowerTransform"
    ],
    "torch.distributions.transforms.Transform": [
        "<builtin>.property"
    ],
    "torch.distributions.transforms._InverseTransform": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.ComposeTransform": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.ComposeTransform.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.transforms.IndependentTransform": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.ReshapeTransform": [
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.ExpTransform": [],
    "torch.distributions.transforms.PowerTransform": [],
    "torch.distributions.transforms.SigmoidTransform": [],
    "torch.distributions.transforms.SoftplusTransform": [],
    "torch.distributions.transforms.TanhTransform": [
        "torch.distributions.constraints._Interval.__init__"
    ],
    "torch.distributions.transforms.AbsTransform": [],
    "torch.distributions.transforms.AffineTransform": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.CorrCholeskyTransform": [],
    "torch.distributions.transforms.SoftmaxTransform": [],
    "torch.distributions.transforms.StickBreakingTransform": [],
    "torch.distributions.transforms.LowerCholeskyTransform": [
        "torch.distributions.constraints._IndependentConstraint.__init__"
    ],
    "torch.distributions.transforms.PositiveDefiniteTransform": [
        "torch.distributions.constraints._IndependentConstraint.__init__"
    ],
    "torch.distributions.transforms.CatTransform": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.StackTransform": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transforms.CumulativeDistributionTransform": [
        "<builtin>.property"
    ],
    "torch.distributions.constraint_registry.ConstraintRegistry": [],
    "torch.distributions.constraint_registry.ConstraintRegistry.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.constraint_registry.ConstraintRegistry.register": [
        "<builtin>.issubclass",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "torch.distributions.constraint_registry.ConstraintRegistry.register.<lambda1>": [],
    "torch.distributions.continuous_bernoulli": [
        "torch.distributions.exp_family",
        "torch.nn.functional",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch",
        "torch.distributions.continuous_bernoulli.ContinuousBernoulli"
    ],
    "torch.distributions.continuous_bernoulli.ContinuousBernoulli": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.exponential": [
        "torch.distributions.exp_family",
        "torch.distributions.exponential.Exponential",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.exponential.Exponential": [
        "<builtin>.property"
    ],
    "torch.distributions.fishersnedecor": [
        "torch.distributions.distribution",
        "torch.distributions.gamma",
        "torch.distributions.utils",
        "torch.distributions.fishersnedecor.FisherSnedecor",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.fishersnedecor.FisherSnedecor": [
        "<builtin>.property"
    ],
    "torch.distributions.geometric": [
        "torch.nn.functional",
        "torch.distributions.geometric.Geometric",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.geometric.Geometric": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.gumbel": [
        "torch.distributions.uniform",
        "torch.distributions.gumbel.Gumbel",
        "torch.distributions.transformed_distribution",
        "torch.distributions.utils",
        "torch.distributions.transforms",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.uniform": [
        "torch.distributions.uniform.Uniform",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.uniform.Uniform": [
        "torch.distributions.constraints._Dependent.__init__",
        "torch.distributions.constraints._DependentProperty.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.transformed_distribution": [
        "torch.distributions.transformed_distribution.TransformedDistribution",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.transforms",
        "torch.distributions.independent",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.independent": [
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch",
        "torch.distributions.independent.Independent"
    ],
    "torch.distributions.independent.Independent": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.transformed_distribution.TransformedDistribution": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.gumbel.Gumbel": [
        "<builtin>.property"
    ],
    "torch.distributions.half_cauchy": [
        "torch.distributions.cauchy",
        "torch.distributions.half_cauchy.HalfCauchy",
        "torch.distributions.transformed_distribution",
        "torch.distributions.transforms",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.half_cauchy.HalfCauchy": [
        "<builtin>.property"
    ],
    "torch.distributions.half_normal": [
        "torch.distributions.normal",
        "torch.distributions.half_normal.HalfNormal",
        "torch.distributions.transformed_distribution",
        "torch.distributions.transforms",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.normal": [
        "torch.distributions.exp_family",
        "torch.distributions.normal.Normal",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.normal.Normal": [
        "<builtin>.property"
    ],
    "torch.distributions.half_normal.HalfNormal": [
        "<builtin>.property"
    ],
    "torch.distributions.kl": [
        "torch.distributions.continuous_bernoulli",
        "torch.distributions.exponential",
        "torch.distributions.normal",
        "torch.distributions.categorical",
        "torch.distributions.beta",
        "torch.distributions.gamma",
        "torch.distributions.kl.register_kl.decorator",
        "torch.distributions.transformed_distribution",
        "torch.distributions.independent",
        "torch.distributions.lowrank_multivariate_normal",
        "torch.distributions.pareto",
        "torch.distributions.poisson",
        "torch.distributions.kl.register_kl",
        "torch.distributions.uniform",
        "torch.distributions.gumbel",
        "torch.distributions.one_hot_categorical",
        "torch.distributions.exp_family",
        "torch.distributions.bernoulli",
        "torch.distributions.laplace",
        "torch.distributions.cauchy",
        "torch.distributions.multivariate_normal",
        "torch.distributions.dirichlet",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.half_normal",
        "torch.distributions.kl._Match",
        "torch.distributions.geometric",
        "torch",
        "torch.distributions.binomial"
    ],
    "torch.distributions.laplace": [
        "torch.distributions.laplace.Laplace",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.laplace.Laplace": [
        "<builtin>.property"
    ],
    "torch.distributions.lowrank_multivariate_normal": [
        "torch.distributions.distribution",
        "torch.distributions.lowrank_multivariate_normal.LowRankMultivariateNormal",
        "torch.distributions.utils",
        "torch.distributions.multivariate_normal",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.multivariate_normal": [
        "torch.distributions.multivariate_normal.MultivariateNormal",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.multivariate_normal.MultivariateNormal": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.lowrank_multivariate_normal.LowRankMultivariateNormal": [
        "torch.distributions.constraints._IndependentConstraint.__init__",
        "<builtin>.property",
        "torch.distributions.utils.lazy_property.__init__"
    ],
    "torch.distributions.one_hot_categorical": [
        "torch.distributions.one_hot_categorical.OneHotCategoricalStraightThrough",
        "torch.distributions.categorical",
        "torch.distributions.distribution",
        "torch.distributions.one_hot_categorical.OneHotCategorical",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.one_hot_categorical.OneHotCategorical": [
        "<builtin>.property"
    ],
    "torch.distributions.one_hot_categorical.OneHotCategoricalStraightThrough": [],
    "torch.distributions.pareto": [
        "torch.distributions.pareto.Pareto",
        "torch.distributions.exponential",
        "torch.distributions.transformed_distribution",
        "torch.distributions.utils",
        "torch.distributions.transforms",
        "torch.distributions.constraints"
    ],
    "torch.distributions.pareto.Pareto": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.poisson": [
        "torch.distributions.exp_family",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch",
        "torch.distributions.poisson.Poisson"
    ],
    "torch.distributions.poisson.Poisson": [
        "<builtin>.property"
    ],
    "torch.distributions.kl._Match": [],
    "torch.distributions.kl.register_kl": [
        "<builtin>.issubclass",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "torch.distributions.kl.register_kl.decorator": [],
    "torch.distributions.kumaraswamy": [
        "torch.distributions.uniform",
        "torch.distributions.kumaraswamy.Kumaraswamy",
        "torch.distributions.transformed_distribution",
        "torch.distributions.utils",
        "torch.distributions.transforms",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.kumaraswamy.Kumaraswamy": [
        "<builtin>.property"
    ],
    "torch.distributions.lkj_cholesky": [
        "torch.distributions",
        "torch.distributions.lkj_cholesky.LKJCholesky",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.lkj_cholesky.LKJCholesky": [],
    "torch.distributions.log_normal": [
        "torch.distributions.normal",
        "torch.distributions.log_normal.LogNormal",
        "torch.distributions.transformed_distribution",
        "torch.distributions.transforms",
        "torch.distributions.constraints"
    ],
    "torch.distributions.log_normal.LogNormal": [
        "<builtin>.property"
    ],
    "torch.distributions.logistic_normal": [
        "torch.distributions.normal",
        "torch.distributions.logistic_normal.LogisticNormal",
        "torch.distributions.transformed_distribution",
        "torch.distributions.transforms",
        "torch.distributions.constraints"
    ],
    "torch.distributions.logistic_normal.LogisticNormal": [
        "<builtin>.property"
    ],
    "torch.distributions.mixture_same_family": [
        "torch.distributions",
        "torch.distributions.mixture_same_family.MixtureSameFamily",
        "torch.distributions.distribution",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.mixture_same_family.MixtureSameFamily": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.multinomial": [
        "torch.distributions",
        "torch.distributions.multinomial.Multinomial",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.constraints",
        "torch",
        "torch.distributions.binomial"
    ],
    "torch.distributions.multinomial.Multinomial": [
        "<builtin>.property",
        "torch.distributions.constraints._DependentProperty.__init__"
    ],
    "torch.distributions.negative_binomial": [
        "torch.nn.functional",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.negative_binomial.NegativeBinomial",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.negative_binomial.NegativeBinomial": [
        "torch.distributions.constraints._GreaterThanEq.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._HalfOpenInterval.__init__",
        "torch.distributions.utils.lazy_property.__init__"
    ],
    "torch.distributions.constraints._HalfOpenInterval.__init__": [
        "<builtin>.super"
    ],
    "torch.distributions.relaxed_bernoulli": [
        "torch.distributions.relaxed_bernoulli.RelaxedBernoulli",
        "torch.distributions.distribution",
        "torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli",
        "torch.distributions.transformed_distribution",
        "torch.distributions.utils",
        "torch.distributions.transforms",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.relaxed_bernoulli.LogitRelaxedBernoulli": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property"
    ],
    "torch.distributions.relaxed_bernoulli.RelaxedBernoulli": [
        "<builtin>.property"
    ],
    "torch.distributions.relaxed_categorical": [
        "torch.distributions.categorical",
        "torch.distributions.relaxed_categorical.ExpRelaxedCategorical",
        "torch.distributions.distribution",
        "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical",
        "torch.distributions.utils",
        "torch.distributions.transformed_distribution",
        "torch.distributions.transforms",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.relaxed_categorical.ExpRelaxedCategorical": [
        "<builtin>.property"
    ],
    "torch.distributions.relaxed_categorical.RelaxedOneHotCategorical": [
        "<builtin>.property"
    ],
    "torch.distributions.studentT": [
        "torch.distributions",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.distributions.studentT.StudentT",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.studentT.StudentT": [
        "<builtin>.property"
    ],
    "torch.distributions.von_mises": [
        "torch.distributions.von_mises.VonMises",
        "torch.distributions.distribution",
        "torch.distributions.utils",
        "torch.jit.script_if_tracing",
        "torch.distributions.constraints",
        "torch",
        "torch.jit"
    ],
    "torch.jit.script_if_tracing": [
        "torch.jit._trace._script_if_tracing"
    ],
    "torch.jit._trace._script_if_tracing": [],
    "torch.distributions.von_mises.VonMises": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.distributions.weibull": [
        "torch.distributions.exponential",
        "torch.distributions.transformed_distribution",
        "torch.distributions.utils",
        "torch.distributions.transforms",
        "torch.distributions.gumbel",
        "torch.distributions.weibull.Weibull",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.weibull.Weibull": [
        "<builtin>.property"
    ],
    "torch.distributions.wishart": [
        "torch.distributions.exp_family",
        "torch.distributions.wishart.Wishart",
        "torch.distributions.utils",
        "torch.distributions.multivariate_normal",
        "torch.distributions.constraints",
        "torch"
    ],
    "torch.distributions.wishart.Wishart": [
        "torch.distributions.utils.lazy_property.__init__",
        "<builtin>.property",
        "torch.distributions.constraints._GreaterThan.__init__"
    ],
    "torch.distributions.kl._add_kl_info": [
        "append",
        "<builtin>.sorted"
    ],
    "torch.backends.cuda": [
        "torch.backends.cuda.cuFFTPlanCache",
        "<map>.keys",
        "torch.backends.cuda.SDPBackend",
        "torch.backends.cuda.cuFFTPlanCacheManager.__init__",
        "torch.backends.cuda.cuFFTPlanCacheManager",
        "torch",
        "torch.backends.cuda.cuFFTPlanCacheAttrContextProp",
        "torch.backends.cuda.cuBLASModule"
    ],
    "torch.backends.cuda.cuFFTPlanCacheAttrContextProp": [],
    "torch.backends.cuda.cuFFTPlanCache": [
        "torch.backends.cuda.cuFFTPlanCacheAttrContextProp.__init__"
    ],
    "torch.backends.cuda.cuFFTPlanCacheAttrContextProp.__init__": [],
    "torch.backends.cuda.cuFFTPlanCacheManager": [],
    "torch.backends.cuda.cuBLASModule": [],
    "torch.backends.cuda.SDPBackend": [],
    "torch.backends.cuda.cuFFTPlanCacheManager.__init__": [],
    "torch.backends.mps": [
        "torch.library.Library.__init__",
        "torch.library.Library.impl",
        "functools.lru_cache",
        "torch.backends.mps.is_built",
        "torch._refs",
        "torch.library",
        "torch",
        "torch._decomp.decompositions"
    ],
    "torch.backends.mps.is_built": [],
    "torch.library": [
        "torch.library.Library",
        "torch",
        "torch._ops",
        "<builtin>.set"
    ],
    "torch.library.Library": [],
    "torch._refs": [
        "<builtin>.tuple",
        "torch._refs.nn.functional",
        "torch._prims_common.wrappers.elementwise_type_promotion_wrapper.__init__",
        "torch._decomp",
        "torch._refs._make_copy_from_view",
        "torch._refs._make_elementwise_binary_reference",
        "torch._prims_common",
        "torch._prims",
        "functools.singledispatch",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "torch._refs._make_alias",
        "torch._refs._make_elementwise_unary_reference.inner",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper",
        "<builtin>.object",
        "torch._refs._conversions",
        "torch._refs._make_inplace",
        "torch._prims_common.wrappers",
        "torch._refs._make_r_binary_op",
        "typing.overload",
        "torch._refs.linalg",
        "torch._refs.fft",
        "torch._decomp.register_decomposition",
        "torch._refs.special",
        "torch._prims_common.wrappers.out_wrapper",
        "torch._refs._make_elementwise_binary_reference.inner",
        "torch._refs._make_elementwise_unary_reference",
        "torch"
    ],
    "torch._prims": [
        "torch._prims_common",
        "torch._prims._make_elementwise_unary_prim",
        "torch._prims.nvfuser_prims",
        "torch.overrides",
        "functools.partial",
        "torch._subclasses.fake_tensor",
        "torch._prims_common.wrappers",
        "torch._prims.nvfuser_prims.register_nvprims",
        "torch._prims._make_reduction_prim",
        "torch._prims._make_var_reduction_prim",
        "torch.utils._pytree",
        "torch._prims.ELEMENTWISE_PRIM_TYPE_PROMOTION_KIND",
        "torch.library",
        "torch._prims._make_elementwise_binary_prim",
        "torch",
        "torch.library.Library.__init__",
        "torch._prims._make_prim"
    ],
    "torch._prims_common": [
        "torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND",
        "torch._prims_common.REDUCTION_OUTPUT_TYPE_KIND",
        "torch._prims_common.RETURN_TYPE",
        "typing.overload",
        "torch"
    ],
    "torch._prims_common.ELEMENTWISE_TYPE_PROMOTION_KIND": [],
    "torch._prims_common.REDUCTION_OUTPUT_TYPE_KIND": [],
    "torch._prims_common.RETURN_TYPE": [],
    "torch._prims.nvfuser_prims": [
        "torch._prims_common",
        "torch._prims_common.wrappers",
        "<builtin>.exec",
        "torch",
        "torch.library.Library.__init__"
    ],
    "torch._prims_common.wrappers": [
        "torch._prims_common",
        "torch.utils._pytree",
        "typing.overload",
        "torch._prims_common.wrappers.elementwise_type_promotion_wrapper",
        "torch"
    ],
    "torch._prims_common.wrappers.elementwise_type_promotion_wrapper": [],
    "torch.library.Library.__init__": [
        "<builtin>.ValueError",
        "<builtin>.set"
    ],
    "<builtin>.exec": [],
    "torch._subclasses.fake_tensor": [
        "torch._subclasses.fake_tensor.UnsupportedFakeTensorException",
        "torch._subclasses.fake_tensor.register_op_impl",
        "torch._guards",
        "torch._subclasses.fake_tensor.FakeTensorConfig",
        "torch._subclasses.fake_tensor.FakeTensor",
        "torch.utils._pytree",
        "torch._prims_common",
        "torch._subclasses.fake_tensor.FakeTensorMode",
        "torch",
        "torch.fx.operator_schemas",
        "torch.utils.weak",
        "torch.utils._stats",
        "torch._subclasses.fake_tensor.FakeTensorConverter",
        "typing.TypeVar",
        "torch._subclasses.fake_tensor.DataDependentOutputException",
        "torch.utils._python_dispatch",
        "torch._ops",
        "torch.overrides",
        "torch._subclasses.fake_tensor.FakeCopyMode",
        "torch._subclasses.fake_tensor.register_op_impl.impl_decorator",
        "torch.utils._mode_utils",
        "torch.multiprocessing.reductions",
        "torch._subclasses.meta_utils",
        "torch._subclasses.fake_tensor.IncrementRecursionCount",
        "torch._subclasses.fake_tensor.DynamicOutputShapeException"
    ],
    "torch._guards": [
        "torch._guards.GuardSource",
        "sympy",
        "torch._guards.TracingContext",
        "torch._guards.GuardBuilderBase",
        "torch._guards.GuardEnvExpr",
        "torch._guards.GuardsContext",
        "torch._guards.Checkpointable",
        "torch._guards.GuardsCheckpointState",
        "torch._guards.Source",
        "torch._guards.DuplicateInputs",
        "torch._guards.ShapeGuard",
        "typing.TypeVar",
        "torch._guards.Guard",
        "contextlib.contextmanager"
    ],
    "sympy": [
        "sympy.tensor",
        "sympy.printing.pycode",
        "sympy.plotting.plot_implicit",
        "sympy.enable_warnings",
        "sympy.solvers.decompogen",
        "sympy.interactive",
        "<builtin>.ImportError",
        "sympy.ntheory.egyptian_fraction",
        "sympy.printing.preview",
        "sympy.simplify",
        "sympy.concrete",
        "sympy.printing.latex",
        "sympy.solvers.diophantine",
        "sympy.integrals",
        "sympy.ntheory",
        "sympy.printing.pretty",
        "sympy.core.cache",
        "sympy.simplify.ratsimp",
        "sympy.assumptions",
        "sympy.simplify.radsimp",
        "sympy.simplify.trigsimp",
        "sympy.assumptions.ask",
        "sympy.printing.mathml",
        "extend",
        "sympy.assumptions.refine",
        "sympy.plotting.textplot",
        "sympy.utilities.lambdify",
        "sympy.simplify.gammasimp",
        "sympy.simplify.sqrtdenest",
        "sympy.series.series",
        "sympy.logic",
        "sympy.parsing",
        "sympy.discrete",
        "sympy.calculus",
        "sympy.plotting",
        "sympy.simplify.fu",
        "sympy.core.evalf",
        "sympy.printing",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.solvers",
        "sympy.plotting.plot",
        "sympy.printing.jscode",
        "sympy.__sympy_debug",
        "sympy.simplify.powsimp",
        "sympy.algebras",
        "sympy.utilities",
        "sympy.simplify.combsimp",
        "sympy.series.approximants",
        "sympy.solvers.solveset",
        "sympy.printing.python",
        "sympy.geometry",
        "sympy.series.gruntz",
        "sympy.series",
        "sympy.printing.rcode",
        "sympy.polys",
        "sympy.sets",
        "sympy.matrices",
        "sympy.core",
        "sympy.simplify.hyperexpand",
        "sympy.calculus.singularities",
        "sympy.ntheory.continued_fraction",
        "sympy.release",
        "sympy.simplify.simplify",
        "sympy.core.cache.lazy_function",
        "mpmath"
    ],
    "mpmath": [
        "mpmath.usertools",
        "mpmath.ctx_mp.MPContext.__init__",
        "mpmath.ctx_mp",
        "mpmath.ctx_iv.MPIntervalContext.__init__",
        "mpmath.ctx_fp.FPContext.__init__",
        "mpmath.ctx_fp",
        "mpmath.ctx_iv"
    ],
    "mpmath.usertools": [],
    "mpmath.ctx_fp": [
        "mpmath.ctx_base",
        "mpmath.libmp",
        "mpmath.ctx_fp.FPContext",
        "mpmath.function_docs",
        "mpmath.math2"
    ],
    "mpmath.ctx_base": [
        "mpmath.matrices.matrices",
        "mpmath.functions.rszeta",
        "mpmath.identification",
        "mpmath.visualization",
        "mpmath.matrices.linalg",
        "mpmath.libmp",
        "mpmath.ctx_base.Context",
        "mpmath.ctx_base.StandardBaseContext",
        "mpmath.libmp.backend",
        "mpmath.matrices.calculus",
        "mpmath.calculus.quadrature",
        "mpmath.calculus.inverselaplace",
        "mpmath.calculus.odes",
        "mpmath.matrices.eigen",
        "mpmath.calculus.calculus",
        "mpmath.functions.functions",
        "mpmath.calculus.optimization"
    ],
    "mpmath.libmp.backend": [
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "mpmath.functions.functions": [
        "mpmath.functions.functions.defun_wrapped",
        "mpmath.functions.functions.defun",
        "mpmath.libmp.backend",
        "mpmath.functions.functions.SpecialFunctions"
    ],
    "mpmath.functions.functions.SpecialFunctions": [
        "<builtin>.classmethod"
    ],
    "mpmath.functions.functions.defun_wrapped": [],
    "mpmath.functions.functions.defun": [],
    "mpmath.functions.rszeta": [
        "mpmath.functions.rszeta.RSCache",
        "mpmath.functions.functions",
        "mpmath.functions.functions.defun"
    ],
    "mpmath.functions.rszeta.RSCache": [],
    "mpmath.calculus.quadrature": [
        "mpmath.calculus.quadrature.TanhSinh",
        "mpmath.calculus.quadrature.QuadratureMethods",
        "mpmath.libmp.backend",
        "mpmath.calculus.quadrature.GaussLegendre",
        "mpmath.calculus.quadrature.QuadratureRule"
    ],
    "mpmath.calculus.quadrature.QuadratureRule": [],
    "mpmath.calculus.quadrature.TanhSinh": [],
    "mpmath.calculus.quadrature.GaussLegendre": [],
    "mpmath.calculus.quadrature.QuadratureMethods": [],
    "mpmath.calculus.inverselaplace": [
        "mpmath.calculus.inverselaplace.InverseLaplaceTransform",
        "mpmath.calculus.inverselaplace.LaplaceTransformInversionMethods",
        "mpmath.calculus.inverselaplace.Cohen",
        "mpmath.calculus.inverselaplace.FixedTalbot",
        "mpmath.calculus.inverselaplace.Stehfest",
        "mpmath.calculus.inverselaplace.deHoog"
    ],
    "mpmath.calculus.inverselaplace.InverseLaplaceTransform": [],
    "mpmath.calculus.inverselaplace.FixedTalbot": [],
    "mpmath.calculus.inverselaplace.Stehfest": [],
    "mpmath.calculus.inverselaplace.deHoog": [],
    "mpmath.calculus.inverselaplace.Cohen": [],
    "mpmath.calculus.inverselaplace.LaplaceTransformInversionMethods": [],
    "mpmath.calculus.calculus": [
        "mpmath.calculus.calculus.CalculusMethods"
    ],
    "mpmath.calculus.calculus.CalculusMethods": [],
    "mpmath.calculus.optimization": [
        "mpmath.calculus.optimization.Muller",
        "mpmath.calculus.optimization.OptimizationMethods",
        "mpmath.calculus.optimization.Newton",
        "mpmath.calculus.optimization.Bisection",
        "mpmath.libmp.backend",
        "mpmath.calculus.optimization.Halley",
        "mpmath.calculus.optimization.MNewton",
        "mpmath.calculus.optimization.Ridder",
        "mpmath.calculus.optimization.MDNewton",
        "mpmath.calculus.optimization.Illinois",
        "mpmath.calculus.optimization.ANewton",
        "mpmath.calculus.optimization.Secant"
    ],
    "mpmath.calculus.optimization.OptimizationMethods": [],
    "mpmath.calculus.optimization.Newton": [],
    "mpmath.calculus.optimization.Secant": [],
    "mpmath.calculus.optimization.MNewton": [],
    "mpmath.calculus.optimization.Halley": [],
    "mpmath.calculus.optimization.Muller": [],
    "mpmath.calculus.optimization.Bisection": [],
    "mpmath.calculus.optimization.Illinois": [],
    "mpmath.calculus.optimization.Ridder": [],
    "mpmath.calculus.optimization.ANewton": [],
    "mpmath.calculus.optimization.MDNewton": [],
    "mpmath.calculus.odes": [
        "mpmath.calculus.odes.ODEMethods",
        "mpmath.libmp.backend"
    ],
    "mpmath.calculus.odes.ODEMethods": [],
    "mpmath.matrices.matrices": [
        "mpmath.matrices.matrices.MatrixMethods",
        "mpmath.libmp.backend",
        "mpmath.matrices.matrices._matrix"
    ],
    "mpmath.matrices.matrices._matrix": [
        "<builtin>.property"
    ],
    "mpmath.matrices.matrices.MatrixMethods": [],
    "mpmath.matrices.calculus": [
        "mpmath.matrices.calculus.MatrixCalculusMethods",
        "mpmath.libmp.backend"
    ],
    "mpmath.matrices.calculus.MatrixCalculusMethods": [],
    "mpmath.matrices.linalg": [
        "mpmath.libmp.backend",
        "mpmath.matrices.linalg.LinearAlgebraMethods"
    ],
    "mpmath.matrices.linalg.LinearAlgebraMethods": [],
    "mpmath.matrices.eigen": [
        "mpmath.matrices.eigen.Eigen",
        "mpmath.libmp.backend",
        "mpmath.matrices.eigen.defun"
    ],
    "mpmath.matrices.eigen.Eigen": [],
    "mpmath.matrices.eigen.defun": [
        "<builtin>.setattr"
    ],
    "mpmath.identification": [
        "mpmath.libmp",
        "mpmath.libmp.backend",
        "mpmath.identification.IdentificationMethods"
    ],
    "mpmath.libmp": [
        "mpmath.libmp.libelefun",
        "mpmath.libmp.libhyper",
        "mpmath.libmp.libmpi",
        "mpmath.libmp.gammazeta",
        "mpmath.libmp.backend",
        "mpmath.libmp.libmpf",
        "mpmath.libmp.libmpc",
        "mpmath.libmp.libintmath"
    ],
    "mpmath.libmp.libmpf": [
        "<builtin>.dir",
        "mpmath.libmp.libmpf.<lambda1>",
        "mpmath.libmp.backend",
        "mpmath.libmp.libmpf.from_man_exp",
        "mpmath.libmp.libmpf.h_mask_big",
        "<builtin>.dict",
        "mpmath.libmp.libintmath",
        "<builtin>.range",
        "mpmath.libmp.libmpf.ComplexResult"
    ],
    "mpmath.libmp.libintmath": [
        "mpmath.libmp.libintmath.python_trailing",
        "<builtin>.dir",
        "mpmath.libmp.backend",
        "mpmath.libmp.libintmath.gmpy_trailing",
        "<builtin>.getattr",
        "mpmath.libmp.libintmath.python_bitcount",
        "<builtin>.set",
        "mpmath.libmp.libintmath.gmpy_bitcount",
        "mpmath.libmp.libintmath.sage_trailing",
        "<builtin>.range"
    ],
    "mpmath.libmp.libintmath.sage_trailing": [],
    "mpmath.libmp.libintmath.python_trailing": [],
    "mpmath.libmp.libintmath.gmpy_trailing": [],
    "mpmath.libmp.libintmath.gmpy_bitcount": [],
    "mpmath.libmp.libintmath.python_bitcount": [
        "bisect.bisect",
        "<builtin>.int"
    ],
    "bisect.bisect": [],
    "mpmath.libmp.libmpf.ComplexResult": [],
    "mpmath.libmp.libmpf.<lambda1>": [],
    "mpmath.libmp.libmpf.h_mask_big": [],
    "mpmath.libmp.libmpf.from_man_exp": [
        "mpmath.libmp.libmpf._normalize",
        "mpmath.libmp.libintmath.python_bitcount",
        "mpmath.libmp.libmpf.strict_normalize",
        "mpmath.libmp.libintmath.gmpy_bitcount",
        "<builtin>.int"
    ],
    "mpmath.libmp.libmpf._normalize": [
        "<builtin>.int"
    ],
    "mpmath.libmp.libmpf.strict_normalize": [
        "mpmath.libmp.libintmath.gmpy_bitcount",
        "mpmath.libmp.libintmath.python_bitcount",
        "mpmath.libmp.libmpf._normalize",
        "<builtin>.type"
    ],
    "mpmath.libmp.libmpc": [
        "mpmath.libmp.libelefun",
        "mpmath.libmp.libmpf.from_float",
        "mpmath.libmp.backend",
        "mpmath.libmp.libmpf",
        "<builtin>.print"
    ],
    "mpmath.libmp.libelefun": [
        "mpmath.libmp.backend",
        "mpmath.libmp.libmpf",
        "mpmath.libmp.libintmath.python_bitcount",
        "mpmath.libmp.libelefun.constant_memo",
        "mpmath.libmp.libelefun.def_mpf_constant",
        "<builtin>.print",
        "mpmath.libmp.libintmath.gmpy_bitcount",
        "<builtin>.min",
        "mpmath.libmp.libintmath"
    ],
    "<builtin>.min": [],
    "mpmath.libmp.libelefun.constant_memo": [],
    "mpmath.libmp.libelefun.def_mpf_constant": [],
    "mpmath.libmp.libmpf.from_float": [
        "<builtin>.int",
        "mpmath.libmp.libmpf.from_man_exp"
    ],
    "mpmath.libmp.libhyper": [
        "mpmath.libmp.libelefun",
        "mpmath.libmp.gammazeta",
        "mpmath.libmp.backend",
        "mpmath.libmp.libmpf",
        "mpmath.libmp.libhyper.NoConvergence",
        "mpmath.libmp.libmpc",
        "mpmath.libmp.libintmath"
    ],
    "mpmath.libmp.gammazeta": [
        "mpmath.libmp.libelefun.def_mpf_constant",
        "mpmath.libmp.libelefun",
        "mpmath.libmp.libmpf.from_int",
        "mpmath.libmp.libintmath.ifac",
        "mpmath.libmp.backend",
        "mpmath.libmp.libmpf",
        "mpmath.libmp.gammazeta.bernoulli_size",
        "mpmath.libmp.libelefun.constant_memo",
        "mpmath.libmp.libmpc",
        "<builtin>.range",
        "mpmath.libmp.libintmath"
    ],
    "mpmath.libmp.libmpf.from_int": [
        "mpmath.libmp.libmpf.from_man_exp"
    ],
    "mpmath.libmp.gammazeta.bernoulli_size": [
        "<builtin>.int"
    ],
    "mpmath.libmp.libintmath.ifac": [
        "<map>.get",
        "<builtin>.len"
    ],
    "mpmath.libmp.libhyper.NoConvergence": [],
    "mpmath.libmp.libmpi": [
        "mpmath.libmp.libelefun",
        "mpmath.libmp.libmpf.from_float",
        "mpmath.libmp.gammazeta",
        "mpmath.libmp.backend",
        "mpmath.libmp.libmpf"
    ],
    "mpmath.identification.IdentificationMethods": [],
    "mpmath.visualization": [
        "mpmath.libmp",
        "mpmath.visualization.VisualizationMethods",
        "mpmath.libmp.backend"
    ],
    "mpmath.visualization.VisualizationMethods": [],
    "mpmath.ctx_base.Context": [],
    "mpmath.ctx_base.StandardBaseContext": [
        "<builtin>.staticmethod"
    ],
    "mpmath.math2": [
        "<builtin>.len",
        "mpmath.math2._mathfun",
        "mpmath.math2._mathfun_real",
        "mpmath.math2._mathfun_n"
    ],
    "mpmath.math2._mathfun_n": [],
    "mpmath.math2._mathfun": [],
    "mpmath.math2._mathfun_real": [],
    "mpmath.function_docs": [],
    "mpmath.ctx_fp.FPContext": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "mpmath.ctx_mp": [
        "mpmath.ctx_base",
        "mpmath.libmp",
        "mpmath.function_docs",
        "mpmath.ctx_mp.MPContext",
        "mpmath.libmp.backend",
        "mpmath.ctx_mp_python",
        "mpmath.rational",
        "mpmath.ctx_mp.PrecisionManager"
    ],
    "mpmath.rational": [
        "mpmath.libmp",
        "mpmath.rational.mpq"
    ],
    "mpmath.rational.mpq": [],
    "mpmath.ctx_mp_python": [
        "mpmath.ctx_mp_python._mpc",
        "mpmath.libmp",
        "mpmath.ctx_mp_python._mpf",
        "mpmath.ctx_mp_python.PythonMPContext",
        "mpmath.ctx_mp_python.binary_op",
        "mpmath.function_docs",
        "mpmath.ctx_mp_python._constant",
        "mpmath.libmp.backend",
        "mpmath.ctx_mp_python.mpnumeric",
        "mpmath.rational"
    ],
    "mpmath.ctx_mp_python.mpnumeric": [],
    "mpmath.ctx_mp_python._mpf": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "mpmath.ctx_mp_python.binary_op": [
        "<builtin>.globals",
        "mpmath.libmp.backend.exec_"
    ],
    "mpmath.libmp.backend.exec_": [
        "<builtin>.exec"
    ],
    "mpmath.ctx_mp_python._constant": [
        "<builtin>.property"
    ],
    "mpmath.ctx_mp_python._mpc": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "mpmath.ctx_mp_python.PythonMPContext": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "mpmath.ctx_mp.MPContext": [
        "<builtin>.property"
    ],
    "mpmath.ctx_mp.PrecisionManager": [],
    "mpmath.ctx_iv": [
        "mpmath.ctx_base",
        "mpmath.matrices.matrices",
        "mpmath.libmp",
        "mpmath.ctx_iv.ivmpf",
        "mpmath.libmp.backend",
        "mpmath.ctx_iv.MPIntervalContext",
        "mpmath.ctx_iv._binary_op",
        "mpmath.ctx_iv.ivmpf_constant",
        "mpmath.ctx_iv.ivmpc"
    ],
    "mpmath.ctx_iv.ivmpf": [
        "<builtin>.property"
    ],
    "mpmath.ctx_iv.ivmpc": [
        "<builtin>.property"
    ],
    "mpmath.ctx_iv._binary_op": [],
    "mpmath.ctx_iv.ivmpf_constant": [
        "<builtin>.property"
    ],
    "mpmath.ctx_iv.MPIntervalContext": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "mpmath.ctx_fp.FPContext.__init__": [
        "mpmath.ctx_base.StandardBaseContext.__init__",
        "mpmath.ctx_base.StandardBaseContext._init_aliases"
    ],
    "mpmath.ctx_base.StandardBaseContext.__init__": [
        "mpmath.matrices.matrices.MatrixMethods.__init__",
        "mpmath.functions.functions.SpecialFunctions.__init__",
        "mpmath.calculus.inverselaplace.LaplaceTransformInversionMethods.__init__",
        "mpmath.calculus.quadrature.QuadratureMethods.__init__",
        "mpmath.functions.rszeta.RSCache.__init__"
    ],
    "mpmath.functions.functions.SpecialFunctions.__init__": [],
    "mpmath.functions.rszeta.RSCache.__init__": [],
    "mpmath.calculus.quadrature.QuadratureMethods.__init__": [],
    "mpmath.calculus.inverselaplace.LaplaceTransformInversionMethods.__init__": [],
    "mpmath.matrices.matrices.MatrixMethods.__init__": [
        "<builtin>.type"
    ],
    "mpmath.ctx_base.StandardBaseContext._init_aliases": [
        "<map>.items",
        "<builtin>.setattr",
        "<builtin>.getattr"
    ],
    "mpmath.ctx_mp.MPContext.__init__": [
        "mpmath.ctx_mp.MPContext.init_builtins",
        "mpmath.ctx_base.StandardBaseContext.__init__",
        "mpmath.ctx_mp_python.PythonMPContext.__init__",
        "mpmath.ctx_mp_python.PythonMPContext.default",
        "mpmath.ctx_base.StandardBaseContext._init_aliases"
    ],
    "mpmath.ctx_mp_python.PythonMPContext.__init__": [
        "<builtin>.type"
    ],
    "mpmath.ctx_mp_python.PythonMPContext.default": [],
    "mpmath.ctx_mp.MPContext.init_builtins": [
        "mpmath.ctx_mp_python.PythonMPContext.make_mpc",
        "mpmath.ctx_mp_python.PythonMPContext.make_mpf",
        "mpmath.ctx_mp_python.PythonMPContext._wrap_libmp_function",
        "<builtin>.getattr"
    ],
    "mpmath.ctx_mp_python.PythonMPContext.make_mpf": [],
    "mpmath.ctx_mp_python.PythonMPContext.make_mpc": [],
    "mpmath.ctx_mp_python.PythonMPContext._wrap_libmp_function": [],
    "mpmath.ctx_iv.MPIntervalContext.__init__": [
        "mpmath.ctx_iv.MPIntervalContext._set_prec",
        "mpmath.ctx_iv.MPIntervalContext._init_builtins",
        "mpmath.ctx_base.StandardBaseContext.__init__",
        "<builtin>.type"
    ],
    "mpmath.ctx_iv.MPIntervalContext._set_prec": [
        "<builtin>.max",
        "mpmath.libmp.libmpf.prec_to_dps",
        "<builtin>.int"
    ],
    "<builtin>.max": [],
    "mpmath.libmp.libmpf.prec_to_dps": [
        "<builtin>.max",
        "<builtin>.int",
        "<builtin>.round"
    ],
    "<builtin>.round": [],
    "mpmath.ctx_iv.MPIntervalContext._init_builtins": [
        "mpmath.ctx_iv.MPIntervalContext._wrap_mpi_function"
    ],
    "mpmath.ctx_iv.MPIntervalContext._wrap_mpi_function": [],
    "sympy.release": [],
    "sympy.core.cache": [
        "<builtin>.RuntimeError",
        "sympy.core.cache._cache",
        "sympy.core.cache.__cacheit",
        "sympy.core.cache._getenv",
        "sympy.core.cache.__cacheit_debug",
        "<builtin>.int"
    ],
    "sympy.core.cache._cache": [],
    "sympy.core.cache._getenv": [
        "os.getenv"
    ],
    "os.getenv": [],
    "sympy.core.cache.__cacheit_debug": [],
    "sympy.core.cache.__cacheit": [],
    "sympy.enable_warnings": [],
    "sympy.__sympy_debug": [
        "<builtin>.RuntimeError",
        "<builtin>.eval"
    ],
    "<builtin>.eval": [],
    "sympy.core.sympify": [
        "mpmath.libmp",
        "sympy.core.random",
        "sympy.core.sympify.SympifyError",
        "sympy.core.sympify.CantSympify",
        "sympy.utilities.iterables",
        "sympy.core.basic",
        "sympy.core.parameters"
    ],
    "sympy.core.random": [
        "sympy.utilities.misc",
        "sympy.utilities.iterables"
    ],
    "sympy.utilities.iterables": [
        "sympy.utilities.iterables.NotIterable",
        "sympy.utilities.decorator",
        "sympy.utilities.misc",
        "sympy.utilities.decorator.deprecated",
        "sympy.utilities.decorator.deprecated.deprecated_decorator",
        "sympy.utilities.enumerative"
    ],
    "sympy.utilities.enumerative": [
        "sympy.utilities.enumerative.PartComponent",
        "sympy.utilities.enumerative.MultisetPartitionTraverser"
    ],
    "sympy.utilities.enumerative.PartComponent": [],
    "sympy.utilities.enumerative.MultisetPartitionTraverser": [],
    "sympy.utilities.misc": [
        "<builtin>.str",
        "<builtin>.getattr",
        "sympy.utilities.misc.Undecidable"
    ],
    "sympy.utilities.misc.Undecidable": [],
    "sympy.utilities.decorator": [
        "sympy.utilities.decorator.no_attrs_in_subclass",
        "sympy.utilities.exceptions"
    ],
    "sympy.utilities.exceptions": [
        "sympy.utilities.exceptions.SymPyDeprecationWarning"
    ],
    "sympy.utilities.exceptions.SymPyDeprecationWarning": [
        "<builtin>.classmethod"
    ],
    "sympy.utilities.decorator.no_attrs_in_subclass": [],
    "sympy.utilities.iterables.NotIterable": [],
    "sympy.utilities.decorator.deprecated": [],
    "sympy.utilities.decorator.deprecated.deprecated_decorator": [
        "functools.wraps",
        "<builtin>.hasattr",
        "sympy.utilities.decorator.deprecated.deprecated_decorator.wrapper"
    ],
    "functools.wraps": [],
    "sympy.utilities.decorator.deprecated.deprecated_decorator.wrapper": [
        "sympy.ntheory.factor_.primeomega",
        "sympy.ntheory.factor_.totient",
        "sympy.ntheory.residue_ntheory.mobius",
        "sympy.ntheory.factor_.divisor_sigma",
        "sympy.ntheory.generate.primepi",
        "sympy.ntheory.factor_.primenu",
        "sympy.ntheory.factor_.reduced_totient",
        "sympy.ntheory.factor_.udivisor_sigma",
        "sympy.core.traversal.preorder_traversal.__init__",
        "sympy.utilities.exceptions.sympy_deprecation_warning",
        "sympy.ntheory.residue_ntheory.jacobi_symbol",
        "sympy.core.traversal.bottom_up",
        "sympy.ntheory.partitions_.npartitions",
        "sympy.utilities.iterables.interactive_traversal",
        "sympy.ntheory.residue_ntheory.legendre_symbol",
        "sympy.sets.sets.EmptySet.is_EmptySet",
        "sympy.sets.sets.Set.is_EmptySet",
        "sympy.utilities.iterables.postorder_traversal",
        "sympy.utilities.iterables.ordered",
        "sympy.core.traversal.walk",
        "sympy.utilities.iterables.default_sort_key"
    ],
    "sympy.utilities.exceptions.sympy_deprecation_warning": [
        "sympy.utilities.exceptions.SymPyDeprecationWarning.__init__"
    ],
    "sympy.utilities.exceptions.SymPyDeprecationWarning.__init__": [
        "<builtin>.any",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "textwrap.dedent",
        "<builtin>.super"
    ],
    "<builtin>.any": [],
    "sympy.utilities.iterables.postorder_traversal": [
        "sympy.core.traversal.postorder_traversal",
        "sympy.core.traversal"
    ],
    "sympy.core.traversal": [
        "sympy.core.traversal.preorder_traversal",
        "sympy.core.sympify",
        "sympy.core.sorting",
        "sympy.utilities.iterables",
        "sympy.core.basic"
    ],
    "sympy.core.basic": [
        "sympy.core.cache",
        "sympy.core.assumptions",
        "sympy.core.singleton",
        "sympy.core.kind",
        "sympy.core.sympify",
        "sympy.utilities.decorator",
        "sympy.core.sorting",
        "sympy.utilities.misc",
        "sympy.core.basic.Atom",
        "sympy.utilities.exceptions",
        "sympy.core.basic.Basic",
        "sympy.core.assumptions._prepare_class_assumptions",
        "sympy.utilities.decorator.deprecated",
        "sympy.utilities.decorator.deprecated.deprecated_decorator",
        "sympy.utilities.iterables",
        "functools.cmp_to_key",
        "sympy.core._print_helpers",
        "sympy.core.traversal"
    ],
    "sympy.core.assumptions": [
        "sympy.core.assumptions_generated",
        "sympy.core.assumptions.ManagedProperties",
        "sympy.core.sympify",
        "<builtin>.frozenset",
        "sympy.core.random",
        "sympy.utilities.exceptions",
        "sympy.core.assumptions._load_pre_generated_assumption_rules",
        "sympy.core.assumptions.StdFactKB",
        "sympy.core.facts"
    ],
    "sympy.core.facts": [
        "sympy.core.facts.TautologyDetected",
        "sympy.core.logic",
        "sympy.core.facts.FactKB",
        "sympy.core.facts.FactRules",
        "sympy.core.facts.Prover",
        "sympy.core.facts.InconsistentAssumptions"
    ],
    "sympy.core.logic": [
        "sympy.core.logic.Logic",
        "sympy.core.logic.AndOr_Base",
        "sympy.core.logic.Not",
        "sympy.core.logic.Or",
        "sympy.core.logic.And"
    ],
    "sympy.core.logic.Logic": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.logic.AndOr_Base": [
        "<builtin>.classmethod"
    ],
    "sympy.core.logic.And": [],
    "sympy.core.logic.Or": [],
    "sympy.core.logic.Not": [
        "<builtin>.property"
    ],
    "sympy.core.facts.TautologyDetected": [],
    "sympy.core.facts.Prover": [
        "<builtin>.property"
    ],
    "sympy.core.facts.FactRules": [
        "<builtin>.classmethod"
    ],
    "sympy.core.facts.InconsistentAssumptions": [],
    "sympy.core.facts.FactKB": [],
    "sympy.core.assumptions_generated": [
        "<builtin>.dict",
        "<builtin>.set"
    ],
    "sympy.core.assumptions._load_pre_generated_assumption_rules": [
        "sympy.core.facts.FactRules._from_python"
    ],
    "sympy.core.facts.FactRules._from_python": [
        "sympy.core.facts.FactRules.__init__",
        "<builtin>.set",
        "<builtin>.setattr",
        "collections.defaultdict"
    ],
    "sympy.core.facts.FactRules.__init__": [
        "<builtin>.ValueError",
        "<map>.keys",
        "sympy.core.facts.apply_beta_to_alpha_route",
        "sympy.core.logic.Logic.fromstring",
        "<builtin>.isinstance",
        "<map>.items",
        "append",
        "sympy.core.facts.rules_2prereq",
        "sympy.core.facts._as_pair",
        "collections.defaultdict",
        "sympy.core.facts._base_fact",
        "sympy.core.facts.Prover.__init__",
        "<str>.splitlines",
        "sympy.core.facts.deduce_alpha_implications",
        "sympy.core.facts.Prover.process_rule"
    ],
    "<str>.splitlines": [],
    "sympy.core.facts.Prover.__init__": [
        "<builtin>.set"
    ],
    "sympy.core.logic.Logic.fromstring": [
        "<builtin>.ValueError",
        "<builtin>.len"
    ],
    "sympy.core.facts.Prover.process_rule": [
        "sympy.core.facts.Prover._process_rule",
        "<builtin>.isinstance"
    ],
    "sympy.core.facts.Prover._process_rule": [
        "<builtin>.sorted",
        "<builtin>.isinstance",
        "append",
        "<builtin>.len",
        "<builtin>.range",
        "sympy.core.facts.Prover.process_rule"
    ],
    "sympy.core.facts.deduce_alpha_implications": [
        "sympy.core.facts.transitive_closure",
        "<builtin>.ValueError",
        "collections.defaultdict"
    ],
    "sympy.core.facts.transitive_closure": [
        "<builtin>.map",
        "<builtin>.set"
    ],
    "sympy.core.facts.apply_beta_to_alpha_route": [
        "<builtin>.any",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.set",
        "<map>.get",
        "<map>.items"
    ],
    "sympy.core.facts._base_fact": [
        "<builtin>.isinstance"
    ],
    "sympy.core.facts._as_pair": [
        "<builtin>.isinstance"
    ],
    "sympy.core.facts.rules_2prereq": [
        "collections.defaultdict",
        "<builtin>.isinstance"
    ],
    "sympy.core.assumptions.StdFactKB": [
        "<builtin>.property"
    ],
    "sympy.core.assumptions.ManagedProperties": [],
    "sympy.core.sorting": [
        "sympy.core.sympify",
        "sympy.utilities.iterables"
    ],
    "sympy.core.kind": [
        "sympy.core.cache",
        "sympy.core.kind.KindMeta",
        "sympy.core.kind.Kind",
        "sympy.core.kind.KindDispatcher",
        "sympy.multipledispatch.dispatcher",
        "sympy.core.kind._NumberKind",
        "sympy.core.kind._UndefinedKind",
        "sympy.core.kind._BooleanKind"
    ],
    "sympy.multipledispatch.dispatcher": [
        "sympy.multipledispatch.dispatcher.RaiseNotImplementedError",
        "sympy.multipledispatch.conflict",
        "sympy.multipledispatch.dispatcher.MethodDispatcher",
        "sympy.multipledispatch.utils",
        "sympy.multipledispatch.dispatcher.MDNotImplementedError",
        "<builtin>.set",
        "sympy.multipledispatch.dispatcher.Dispatcher"
    ],
    "sympy.multipledispatch.conflict": [
        "sympy.multipledispatch.conflict.AmbiguityWarning",
        "sympy.multipledispatch.utils"
    ],
    "sympy.multipledispatch.utils": [],
    "sympy.multipledispatch.conflict.AmbiguityWarning": [],
    "sympy.multipledispatch.dispatcher.MDNotImplementedError": [],
    "sympy.multipledispatch.dispatcher.RaiseNotImplementedError": [],
    "sympy.multipledispatch.dispatcher.Dispatcher": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.multipledispatch.dispatcher.MethodDispatcher": [
        "<builtin>.classmethod"
    ],
    "sympy.core.kind.KindMeta": [],
    "sympy.core.kind.Kind": [],
    "sympy.core.kind._UndefinedKind": [],
    "sympy.core.kind._NumberKind": [],
    "sympy.core.kind._BooleanKind": [],
    "sympy.core.kind.KindDispatcher": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.cache.__cacheit.func_wrapper": [
        "functools.lru_cache",
        "functools.wraps"
    ],
    "sympy.core.cache.__cacheit_nocache": [],
    "sympy.core.cache.__cacheit_debug.func_wrapper": [
        "functools.wraps",
        "sympy.core.cache.__cacheit",
        "sympy.core.cache.__cacheit.func_wrapper"
    ],
    "sympy.core._print_helpers": [
        "sympy.core._print_helpers.Printable"
    ],
    "sympy.core._print_helpers.Printable": [],
    "sympy.core.basic.Basic": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "functools.cmp_to_key": [],
    "sympy.core.assumptions._prepare_class_assumptions": [
        "<builtin>.bool",
        "sympy.core.assumptions.StdFactKB.__init__",
        "<builtin>.reversed",
        "<builtin>.type",
        "<builtin>.setattr",
        "<builtin>.hasattr",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<map>.update",
        "<builtin>.set",
        "sympy.core.assumptions.make_property",
        "sympy.core.assumptions.as_property"
    ],
    "sympy.core.assumptions.as_property": [],
    "<builtin>.reversed": [],
    "sympy.core.assumptions.StdFactKB.__init__": [
        "<map>.copy",
        "sympy.core.facts.FactKB.deduce_all_facts",
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "sympy.core.facts.FactKB.deduce_all_facts": [
        "<builtin>.isinstance",
        "<builtin>.all",
        "<builtin>.set",
        "<map>.items",
        "sympy.core.facts.FactKB._tell"
    ],
    "sympy.core.facts.FactKB._tell": [],
    "sympy.core.assumptions.make_property": [
        "sympy.core.assumptions.as_property",
        "<builtin>.property"
    ],
    "sympy.core.basic.Atom": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.singleton": [
        "sympy.core.sympify",
        "sympy.core.core",
        "sympy.core.singleton.Singleton",
        "sympy.core.singleton.SingletonRegistry.__init__",
        "sympy.core.basic",
        "sympy.core.singleton.SingletonRegistry"
    ],
    "sympy.core.core": [
        "sympy.core.core.Registry"
    ],
    "sympy.core.core.Registry": [],
    "sympy.core.singleton.SingletonRegistry": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.singleton.SingletonRegistry.__init__": [],
    "sympy.core.singleton.Singleton": [],
    "sympy.core.traversal.preorder_traversal": [],
    "sympy.core.traversal.postorder_traversal": [
        "sympy.core.traversal.postorder_traversal",
        "sympy.utilities.iterables.iterable",
        "sympy.core.sorting.ordered",
        "<builtin>.isinstance"
    ],
    "sympy.utilities.iterables.iterable": [
        "<builtin>.hasattr",
        "<builtin>.iter",
        "<builtin>.isinstance"
    ],
    "<builtin>.iter": [],
    "sympy.core.sorting.ordered": [
        "pop",
        "",
        "<builtin>.sorted",
        "<builtin>.ValueError",
        "sympy.utilities.iterables.uniq",
        "<builtin>.isinstance",
        "<builtin>.list",
        "<builtin>.len",
        "collections.defaultdict",
        "sympy.core.sorting._nodes",
        "sympy.core.sorting.ordered"
    ],
    "sympy.utilities.iterables.uniq": [
        "<builtin>.hasattr",
        "sympy.utilities.iterables.uniq.check",
        "sympy.utilities.iterables.uniq",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.set"
    ],
    "sympy.utilities.iterables.uniq.check": [
        "<builtin>.RuntimeError",
        "<builtin>.len"
    ],
    "pop": [],
    "sympy.core.sorting._nodes": [
        "sympy.core.sorting._node_count",
        "sympy.core.basic",
        "<builtin>.sum",
        "<builtin>.isinstance",
        "sympy.core.sorting._nodes",
        "sympy.core.function",
        "sympy.utilities.iterables.iterable"
    ],
    "sympy.core.function": [
        "sympy.core.singleton",
        "sympy.core.sorting",
        "sympy.core.function.Function",
        "sympy.core.function.UndefSageHelper",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.parameters",
        "sympy.core.operations",
        "sympy.core.cache",
        "sympy.core.mul",
        "sympy.core.function.UndefinedFunction",
        "sympy.core.function.Lambda",
        "sympy.core.logic",
        "sympy.core.expr",
        "mpmath.libmp.libmpf",
        "sympy.core.function.Application",
        "sympy.utilities.lambdify",
        "sympy.core.function.Derivative",
        "sympy.core.rules",
        "sympy.core.basic",
        "sympy.core.add",
        "sympy.core.function.BadArgumentsError",
        "sympy.core.function.AppliedUndef",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.core.function.Subs",
        "sympy.core.function.ArgumentIndexError",
        "sympy.utilities.iterables",
        "sympy.core.symbol",
        "sympy.core.function.BadSignatureError",
        "sympy.core.function.WildFunction",
        "sympy.core.function.FunctionClass",
        "sympy.utilities.misc",
        "sympy.utilities.exceptions",
        "sympy.core.decorators",
        "sympy.core.function.PoleError",
        "mpmath"
    ],
    "sympy.core.add": [
        "sympy.core.cache",
        "sympy.core.singleton",
        "sympy.core.kind",
        "sympy.core.mul",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.utilities.iterables",
        "sympy.core.add.Add",
        "sympy.core.operations.AssocOpDispatcher.__init__",
        "sympy.core.intfunc",
        "sympy.core.numbers",
        "sympy.core.operations",
        "sympy.core.basic",
        "sympy.core.parameters"
    ],
    "sympy.core.parameters": [
        "sympy.core.cache",
        "sympy.core.parameters._global_parameters",
        "sympy.core.parameters._global_parameters.__init__",
        "sympy.core.parameters.evaluate",
        "contextlib.contextmanager"
    ],
    "sympy.core.parameters._global_parameters": [],
    "sympy.core.parameters._global_parameters.__init__": [],
    "sympy.core.parameters.evaluate": [],
    "sympy.core.operations": [
        "sympy.core.cache",
        "sympy.core.operations.AssocOpDispatcher",
        "sympy.core.sympify",
        "sympy.core.logic",
        "sympy.core.sorting",
        "sympy.core.operations.ShortCircuit",
        "sympy.core.operations.LatticeOp",
        "sympy.utilities.exceptions",
        "sympy.multipledispatch.dispatcher",
        "sympy.utilities.iterables",
        "sympy.core.basic",
        "sympy.core.parameters",
        "sympy.core.operations.AssocOp"
    ],
    "sympy.core.operations.AssocOp": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.operations.ShortCircuit": [],
    "sympy.core.operations.LatticeOp": [
        "<builtin>.classmethod"
    ],
    "sympy.core.operations.AssocOpDispatcher": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.numbers": [
        "sympy.core.singleton",
        "sympy.core.numbers.Catalan",
        "sympy.core.numbers.Pi",
        "sympy.multipledispatch.core.dispatch",
        "sympy.core.numbers.AlgebraicNumber",
        "sympy.core.numbers._register_classes",
        "sympy.core.numbers.Half",
        "sympy.core.numbers.RationalConstant",
        "sympy.core.containers",
        "sympy.core.numbers.Number",
        "sympy.core.parameters",
        "sympy.core.numbers.NaN",
        "sympy.core.cache",
        "sympy.multipledispatch.core.dispatch._",
        "sympy.core.kind",
        "sympy.core.mul",
        "sympy.core.numbers.NegativeInfinity",
        "sympy.multipledispatch",
        "sympy.core.logic",
        "sympy.core.numbers.One",
        "sympy.core.expr",
        "mpmath.libmp.libmpf",
        "sympy.core.numbers.Rational",
        "sympy.core.numbers.Infinity",
        "sympy.core.basic",
        "sympy.core.add",
        "sympy.core.numbers.NumberSymbol",
        "sympy.core.numbers.Exp1",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.core.numbers.TribonacciConstant",
        "sympy.core.numbers.Float",
        "sympy.core.numbers.GoldenRatio",
        "sympy.core.numbers.EulerGamma",
        "sympy.core.numbers.NegativeOne",
        "mpmath.libmp",
        "<builtin>.type",
        "sympy.core.numbers.Zero",
        "sympy.external.gmpy",
        "sympy.core.numbers.ComplexInfinity",
        "mpmath.libmp.backend",
        "sympy.utilities.misc",
        "sympy.core.power",
        "mpmath.ctx_mp_python",
        "sympy.core.numbers.IntegerConstant",
        "sympy.core.decorators",
        "sympy.core.intfunc",
        "sympy.core.numbers.ImaginaryUnit",
        "sympy.core.numbers.Integer",
        "mpmath"
    ],
    "sympy.core.containers": [
        "sympy.core.kind",
        "sympy.core.containers.TupleKind",
        "sympy.core.sympify",
        "sympy.core.sorting",
        "sympy.utilities.misc",
        "sympy.utilities.iterables",
        "sympy.core.basic",
        "sympy.core.containers.OrderedSet",
        "sympy.core.containers.Dict",
        "sympy.core.containers.Tuple"
    ],
    "sympy.core.containers.Tuple": [
        "<builtin>.property"
    ],
    "sympy.core.containers.Dict": [
        "<builtin>.property"
    ],
    "sympy.core.containers.OrderedSet": [],
    "sympy.core.containers.TupleKind": [],
    "sympy.core.expr": [
        "sympy.core.singleton",
        "sympy.core.sorting",
        "sympy.core.expr.ExprBuilder",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.cache",
        "sympy.core.kind",
        "sympy.core.mul",
        "sympy.core.expr.UnevaluatedExpr",
        "sympy.core.mod",
        "sympy.core.basic",
        "sympy.core.add",
        "mpmath.libmp.libintmath",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.core.expr.AtomicExpr",
        "sympy.utilities.iterables",
        "sympy.core.exprtools",
        "mpmath.libmp",
        "sympy.core.expr.Expr",
        "sympy.utilities.misc",
        "sympy.utilities.exceptions",
        "sympy.core.power",
        "sympy.core.decorators",
        "sympy.core.intfunc"
    ],
    "sympy.core.evalf": [
        "sympy.core.evalf.PrecisionExhausted",
        "sympy.core.singleton",
        "sympy.functions.elementary.integers",
        "<builtin>.float",
        "sympy.concrete.summations",
        "sympy.core.numbers",
        "sympy.integrals.integrals",
        "sympy.core.mul",
        "sympy.functions.elementary.exponential",
        "sympy.core.expr",
        "mpmath.libmp.libmpf",
        "sympy.utilities.lambdify",
        "sympy.core.add",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.sympify",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "mpmath.libmp.libmpc",
        "typing.overload",
        "sympy.concrete.products",
        "mpmath.libmp",
        "sympy.functions.elementary.complexes",
        "sympy.core.evalf.EvalfMixin",
        "sympy.external.gmpy",
        "mpmath.libmp.backend",
        "sympy.utilities.misc",
        "sympy.core.power",
        "mpmath"
    ],
    "sympy.external.gmpy": [
        "warnings.warn",
        "<builtin>.type",
        "sympy.external.gmpy._get_gmpy2",
        "sympy.external.pythonmpq",
        "sympy.external.ntheory",
        "sympy.external",
        "ctypes.sizeof",
        "sympy.external.gmpy._get_flint"
    ],
    "sympy.external": [
        "sympy.external.importtools"
    ],
    "sympy.external.importtools": [
        "sympy.external.importtools.__sympy_debug"
    ],
    "sympy.external.importtools.__sympy_debug": [
        "<builtin>.RuntimeError",
        "<builtin>.eval"
    ],
    "sympy.external.pythonmpq": [
        "sympy.external.pythonmpq.PythonMPQ"
    ],
    "sympy.external.pythonmpq.PythonMPQ": [
        "<builtin>.classmethod"
    ],
    "sympy.external.ntheory": [
        "<builtin>.range",
        "mpmath.libmp"
    ],
    "sympy.external.gmpy._get_flint": [
        "warnings.warn",
        "sympy.external.gmpy._flint_version_okay"
    ],
    "warnings.warn": [],
    "sympy.external.gmpy._flint_version_okay": [],
    "sympy.external.gmpy._get_gmpy2": [
        "warnings.warn",
        "sympy.external.importtools.import_module"
    ],
    "sympy.external.importtools.import_module": [
        "<builtin>.repr",
        "<builtin>.map",
        "<builtin>.__import__",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.str",
        "sympy.external.importtools.version_tuple",
        "<map>.get"
    ],
    "<builtin>.repr": [],
    "sympy.external.importtools.version_tuple": [
        "append",
        "<builtin>.tuple",
        "<builtin>.int"
    ],
    "ctypes.sizeof": [],
    "sympy.utilities.lambdify": [
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.utilities.decorator",
        "sympy.utilities.misc",
        "sympy.utilities.decorator.doctest_depends_on",
        "sympy.utilities.exceptions",
        "sympy.utilities.lambdify._EvaluatorPrinter",
        "sympy.utilities.lambdify._TensorflowEvaluatorPrinter",
        "sympy.external",
        "sympy.utilities.iterables"
    ],
    "sympy.utilities.decorator.doctest_depends_on": [],
    "sympy.utilities.decorator.doctest_depends_on.depends_on_deco": [
        "sympy.utilities.decorator.no_attrs_in_subclass.__init__"
    ],
    "sympy.utilities.decorator.no_attrs_in_subclass.__init__": [],
    "sympy.utilities.lambdify._EvaluatorPrinter": [
        "<builtin>.classmethod"
    ],
    "sympy.utilities.lambdify._TensorflowEvaluatorPrinter": [],
    "sympy.core.mul": [
        "sympy.core.cache",
        "sympy.core.singleton",
        "sympy.core.parameters",
        "sympy.core.kind",
        "sympy.core.sympify",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.core.power",
        "sympy.core.mul.Mul",
        "sympy.core.mul.NC_Marker",
        "sympy.utilities.iterables",
        "sympy.core.operations.AssocOpDispatcher.__init__",
        "sympy.core.intfunc",
        "sympy.core.numbers",
        "sympy.core.add",
        "sympy.core.basic",
        "sympy.core.operations",
        "sympy.core.traversal"
    ],
    "sympy.core.intfunc": [
        "sympy.core.singleton",
        "sympy.core.sympify",
        "sympy.external.gmpy",
        "functools.lru_cache",
        "sympy.utilities.misc"
    ],
    "sympy.core.mul.NC_Marker": [],
    "sympy.core.mul.Mul": [
        "sympy.core.cache.__cacheit_debug.func_wrapper",
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.kind.KindDispatcher.__init__"
    ],
    "sympy.core.kind.KindDispatcher.__init__": [
        "sympy.multipledispatch.dispatcher.Dispatcher.__init__"
    ],
    "sympy.multipledispatch.dispatcher.Dispatcher.__init__": [],
    "sympy.core.operations.AssocOpDispatcher.__init__": [
        "operator.attrgetter",
        "sympy.multipledispatch.dispatcher.Dispatcher.__init__"
    ],
    "operator.attrgetter": [],
    "sympy.core.power": [
        "sympy.core.singleton",
        "sympy.multipledispatch.dispatcher.Dispatcher.add",
        "sympy.core.power.Pow",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.parameters",
        "sympy.core.cache",
        "sympy.core.kind",
        "sympy.core.mul",
        "sympy.multipledispatch",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.core.add",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.core.relational",
        "sympy.multipledispatch.dispatcher.Dispatcher.__init__",
        "sympy.utilities.iterables",
        "sympy.core.symbol",
        "sympy.utilities.misc",
        "sympy.utilities.exceptions"
    ],
    "sympy.core.relational": [
        "sympy.core.singleton",
        "sympy.core.relational.Relational",
        "sympy.multipledispatch.core.dispatch",
        "sympy.core.sorting",
        "sympy.core.relational.StrictLessThan",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.parameters",
        "sympy.multipledispatch.core.dispatch._",
        "sympy.multipledispatch",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.core.relational.GreaterThan",
        "sympy.core.relational._Inequality",
        "sympy.core.relational.LessThan",
        "sympy.core.relational.Unequality",
        "sympy.core.basic",
        "sympy.core.relational._Less",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.utilities.iterables",
        "sympy.core.relational.StrictGreaterThan",
        "sympy.core.relational._Greater",
        "sympy.core.relational.Equality",
        "sympy.utilities.misc",
        "sympy.utilities.exceptions"
    ],
    "sympy.logic.boolalg": [
        "sympy.core.singleton",
        "sympy.logic.boolalg.Implies",
        "sympy.logic.boolalg.And",
        "sympy.core.sorting",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.operations",
        "sympy.logic.boolalg.Xor",
        "sympy.core.cache",
        "sympy.logic.boolalg.BooleanTrue",
        "sympy.core.kind",
        "sympy.logic.boolalg.BooleanFalse",
        "sympy.logic.boolalg.Nor",
        "sympy.logic.boolalg.Xnor",
        "sympy.logic.boolalg.Boolean",
        "sympy.logic.boolalg.BooleanAtom",
        "sympy.core.basic",
        "sympy.core.add",
        "sympy.logic.boolalg.ITE",
        "sympy.core.sympify",
        "sympy.logic.boolalg.Exclusive",
        "sympy.logic.boolalg.Nand",
        "sympy.logic.boolalg.BooleanFunction",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.utilities.iterables",
        "sympy.logic.boolalg.Not",
        "sympy.logic.boolalg.Or",
        "sympy.logic.boolalg.Equivalent",
        "sympy.utilities.misc",
        "sympy.core.decorators",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.decorators": [
        "sympy.core.decorators._SympifyWrapper",
        "sympy.core.sympify"
    ],
    "sympy.core.decorators._SympifyWrapper": [],
    "sympy.logic.boolalg.Boolean": [
        "sympy.core.decorators.sympify_return.wrapper",
        "<builtin>.property",
        "sympy.core.decorators.sympify_return"
    ],
    "sympy.core.decorators.sympify_return": [],
    "sympy.core.decorators.sympify_return.wrapper": [
        "sympy.core.decorators._SympifyWrapper.__init__"
    ],
    "sympy.core.decorators._SympifyWrapper.__init__": [],
    "sympy.logic.boolalg.BooleanAtom": [
        "<builtin>.property"
    ],
    "sympy.logic.boolalg.BooleanTrue": [
        "<builtin>.property"
    ],
    "sympy.logic.boolalg.BooleanFalse": [
        "<builtin>.property"
    ],
    "sympy.logic.boolalg.BooleanFunction": [
        "<builtin>.classmethod"
    ],
    "sympy.logic.boolalg.And": [
        "<builtin>.classmethod"
    ],
    "sympy.logic.boolalg.Or": [
        "<builtin>.classmethod"
    ],
    "sympy.logic.boolalg.Not": [
        "<builtin>.classmethod"
    ],
    "sympy.logic.boolalg.Xor": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.logic.boolalg.Nand": [
        "<builtin>.classmethod"
    ],
    "sympy.logic.boolalg.Nor": [
        "<builtin>.classmethod"
    ],
    "sympy.logic.boolalg.Xnor": [
        "<builtin>.classmethod"
    ],
    "sympy.logic.boolalg.Implies": [
        "<builtin>.classmethod"
    ],
    "sympy.logic.boolalg.Equivalent": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.logic.boolalg.ITE": [
        "<builtin>.classmethod"
    ],
    "sympy.logic.boolalg.Exclusive": [
        "<builtin>.classmethod"
    ],
    "sympy.multipledispatch": [
        "sympy.multipledispatch.dispatcher",
        "sympy.multipledispatch.core"
    ],
    "sympy.multipledispatch.core": [
        "sympy.multipledispatch.dispatcher"
    ],
    "sympy.core.symbol": [
        "sympy.core.cache",
        "sympy.core.assumptions",
        "sympy.core.singleton",
        "sympy.core.kind",
        "sympy.core.sympify",
        "sympy.core.symbol.Dummy",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.core.sorting",
        "sympy.utilities.misc",
        "sympy.core.symbol.Str",
        "sympy.logic.boolalg",
        "sympy.core.symbol.Wild",
        "sympy.utilities.iterables",
        "sympy.core.function",
        "sympy.core.containers",
        "sympy.core.basic",
        "sympy.core.symbol.Symbol"
    ],
    "sympy.core.symbol.Str": [],
    "sympy.core.symbol.Symbol": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.symbol.Dummy": [
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.symbol.Wild": [
        "sympy.core.cache.__cacheit_nocache",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.relational.Relational": [
        "<builtin>.property"
    ],
    "sympy.core.relational.Equality": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.core.relational.Unequality": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.core.relational._Inequality": [
        "<builtin>.classmethod"
    ],
    "sympy.core.relational._Greater": [
        "<builtin>.property"
    ],
    "sympy.core.relational._Less": [
        "<builtin>.property"
    ],
    "sympy.core.relational.GreaterThan": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.core.relational.LessThan": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.core.relational.StrictGreaterThan": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.core.relational.StrictLessThan": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.multipledispatch.core.dispatch": [
        "<builtin>.tuple"
    ],
    "sympy.multipledispatch.core.dispatch._": [
        "sympy.matrices.matrixbase.MatrixBase.add",
        "sympy.multipledispatch.dispatcher.Dispatcher.__init__",
        "sympy.multipledispatch.core.ismethod"
    ],
    "sympy.multipledispatch.core.ismethod": [],
    "sympy.core.power.Pow": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.multipledispatch.dispatcher.Dispatcher.add": [
        "sympy.multipledispatch.dispatcher.Dispatcher.reorder",
        "sympy.multipledispatch.dispatcher.Dispatcher.add",
        "<builtin>.any",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<map>.clear",
        "sympy.multipledispatch.dispatcher.Dispatcher.get_func_annotations",
        "sympy.multipledispatch.utils.expand_tuples"
    ],
    "sympy.multipledispatch.dispatcher.Dispatcher.get_func_annotations": [
        "sympy.multipledispatch.dispatcher.Dispatcher.get_func_params",
        "<builtin>.tuple",
        "<builtin>.any"
    ],
    "sympy.multipledispatch.dispatcher.Dispatcher.get_func_params": [
        "<builtin>.hasattr"
    ],
    "sympy.multipledispatch.utils.expand_tuples": [
        "sympy.multipledispatch.utils.expand_tuples",
        "<builtin>.isinstance"
    ],
    "sympy.multipledispatch.dispatcher.Dispatcher.reorder": [
        "",
        "sympy.multipledispatch.conflict.ambiguities",
        "sympy.multipledispatch.dispatcher.Dispatcher.__init__",
        "sympy.multipledispatch.dispatcher.ambiguity_register_error_ignore_dup",
        "sympy.multipledispatch.dispatcher.ambiguity_warn"
    ],
    "sympy.multipledispatch.conflict.ambiguities": [
        "<builtin>.any",
        "<builtin>.map",
        "sympy.multipledispatch.conflict.supercedes",
        "<builtin>.hash",
        "<builtin>.list",
        "sympy.multipledispatch.conflict.ambiguous"
    ],
    "<builtin>.hash": [],
    "sympy.multipledispatch.conflict.ambiguous": [
        "sympy.multipledispatch.conflict.consistent",
        "sympy.multipledispatch.conflict.supercedes"
    ],
    "sympy.multipledispatch.conflict.consistent": [
        "<builtin>.zip",
        "<builtin>.issubclass",
        "<builtin>.len",
        "<builtin>.all"
    ],
    "<builtin>.zip": [],
    "sympy.multipledispatch.conflict.supercedes": [
        "<builtin>.all",
        "<builtin>.map",
        "<builtin>.len"
    ],
    "sympy.multipledispatch.dispatcher.ambiguity_warn": [
        "warnings.warn",
        "sympy.multipledispatch.dispatcher.warning_text"
    ],
    "sympy.multipledispatch.dispatcher.warning_text": [
        "sympy.multipledispatch.dispatcher.str_signature",
        "sympy.multipledispatch.conflict.super_signature"
    ],
    "sympy.multipledispatch.dispatcher.str_signature": [],
    "sympy.multipledispatch.conflict.super_signature": [
        "<builtin>.max",
        "<builtin>.all",
        "<builtin>.range",
        "<builtin>.len"
    ],
    "<map>.clear": [],
    "sympy.integrals.integrals": [
        "sympy.core.singleton",
        "sympy.series.formal",
        "sympy.functions.elementary.integers",
        "sympy.concrete.expr_with_limits",
        "sympy.series.limits",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.tensor.functions",
        "sympy.core.mul",
        "sympy.functions.elementary.exponential",
        "sympy.core.logic",
        "sympy.integrals.integrals.Integral",
        "sympy.core.expr",
        "sympy.integrals.deltafunctions",
        "sympy.core.basic",
        "sympy.core.add",
        "sympy.functions.special.singularity_functions",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "sympy.integrals.trigonometry",
        "sympy.core.exprtools",
        "sympy.functions.elementary.complexes",
        "sympy.polys",
        "sympy.matrices",
        "sympy.utilities.misc",
        "sympy.series.order",
        "sympy.utilities.exceptions",
        "sympy.integrals.meijerint",
        "sympy.integrals.rationaltools"
    ],
    "sympy.concrete.expr_with_limits": [
        "sympy.core.singleton",
        "sympy.concrete.expr_with_limits.AddWithLimits",
        "sympy.tensor.indexed",
        "sympy.core.function",
        "sympy.core.containers",
        "sympy.sets.fancysets",
        "sympy.core.mul",
        "sympy.concrete.expr_with_limits.ExprWithLimits",
        "sympy.core.expr",
        "sympy.core.add",
        "sympy.core.sympify",
        "sympy.matrices.matrixbase",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.utilities.iterables",
        "sympy.functions.elementary.piecewise",
        "sympy.utilities.exceptions",
        "sympy.sets.sets"
    ],
    "sympy.functions.elementary.piecewise": [
        "sympy.core.sorting",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.relational",
        "sympy.functions.elementary.miscellaneous",
        "sympy.utilities.iterables",
        "sympy.functions.elementary.piecewise.Piecewise",
        "sympy.logic.boolalg",
        "sympy.core.numbers",
        "sympy.functions.elementary.piecewise.ExprCondPair",
        "sympy.core.basic",
        "sympy.core.parameters"
    ],
    "sympy.core": [
        "sympy.core.singleton",
        "sympy.core.sorting",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.parameters",
        "sympy.core.cache",
        "sympy.core.mul",
        "sympy.core.kind",
        "sympy.core.expr",
        "sympy.core.multidimensional",
        "sympy.core.mod",
        "sympy.core.basic",
        "sympy.core.add",
        "sympy.core.traversal",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.core.assumptions",
        "sympy.core.exprtools",
        "sympy.core.power",
        "sympy.core.intfunc"
    ],
    "sympy.core.mod": [
        "sympy.core.singleton",
        "sympy.core.exprtools",
        "sympy.core.kind",
        "sympy.core.mul",
        "sympy.core.logic",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.add",
        "sympy.core.mod.Mod"
    ],
    "sympy.core.exprtools": [
        "sympy.core.singleton",
        "sympy.core.exprtools.Term",
        "sympy.core.mul",
        "sympy.core.sympify",
        "sympy.external.gmpy",
        "sympy.core.expr",
        "sympy.core.sorting",
        "sympy.core.symbol",
        "sympy.core.power",
        "sympy.core.coreerrors",
        "sympy.utilities.iterables",
        "sympy.core.exprtools.Factors",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.basic",
        "sympy.core.add",
        "sympy.core.traversal"
    ],
    "sympy.core.coreerrors": [
        "sympy.core.coreerrors.NonCommutativeExpression",
        "sympy.core.coreerrors.BaseCoreError"
    ],
    "sympy.core.coreerrors.BaseCoreError": [],
    "sympy.core.coreerrors.NonCommutativeExpression": [],
    "sympy.core.exprtools.Factors": [
        "<builtin>.property"
    ],
    "sympy.core.exprtools.Term": [],
    "sympy.core.mod.Mod": [
        "<builtin>.classmethod"
    ],
    "sympy.core.multidimensional": [
        "sympy.core.multidimensional.vectorize"
    ],
    "sympy.core.multidimensional.vectorize": [],
    "sympy.functions.elementary.miscellaneous": [
        "sympy.core.singleton",
        "sympy.core.sorting",
        "sympy.functions.elementary.miscellaneous.Rem",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.functions.elementary.miscellaneous.Min",
        "sympy.core.operations",
        "sympy.core.mul",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.core.mod",
        "sympy.core.rules",
        "sympy.core.add",
        "sympy.core.traversal",
        "sympy.core.sympify",
        "sympy.functions.elementary.miscellaneous.Max",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "sympy.logic.boolalg",
        "sympy.core.exprtools",
        "sympy.core",
        "sympy.functions.elementary.miscellaneous.MinMaxBase",
        "sympy.core.power",
        "sympy.functions.elementary.miscellaneous.IdentityFunction"
    ],
    "sympy.core.rules": [
        "sympy.core.rules.Transform"
    ],
    "sympy.core.rules.Transform": [],
    "sympy.functions.elementary.miscellaneous.IdentityFunction": [
        "<builtin>.property"
    ],
    "sympy.functions.elementary.miscellaneous.MinMaxBase": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.miscellaneous.Max": [],
    "sympy.functions.elementary.miscellaneous.Min": [],
    "sympy.functions.elementary.miscellaneous.Rem": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.piecewise.ExprCondPair": [
        "<builtin>.property"
    ],
    "sympy.functions.elementary.piecewise.Piecewise": [
        "<builtin>.classmethod"
    ],
    "sympy.matrices.matrixbase": [
        "sympy.core.singleton",
        "sympy.functions.elementary.miscellaneous",
        "sympy.matrices.decompositions",
        "sympy.matrices.kind",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.matrices.determinant",
        "sympy.tensor.array",
        "sympy.functions.combinatorial.factorials",
        "sympy.matrices.reductions",
        "sympy.matrices.graph",
        "sympy.functions.special.tensor_functions",
        "sympy.core.kind",
        "sympy.polys.polytools",
        "sympy.functions.elementary.exponential",
        "sympy.matrices.matrixbase.DeferredVector",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.matrices.eigen",
        "sympy.assumptions.refine",
        "sympy.matrices.matrixbase.MatrixBase",
        "sympy.core.mod",
        "sympy.core.basic",
        "sympy.matrices.solvers",
        "sympy.printing",
        "sympy.core.sympify",
        "sympy.printing.str",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "sympy.matrices.exceptions",
        "sympy.functions.elementary.complexes",
        "sympy.polys",
        "sympy.matrices.subspaces",
        "sympy.matrices.utilities",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.power",
        "sympy.matrices.inverse",
        "sympy.core.decorators",
        "sympy.printing.defaults",
        "mpmath"
    ],
    "sympy.assumptions.refine": [
        "sympy.core.logic",
        "sympy.assumptions",
        "sympy.core",
        "sympy.assumptions.ask",
        "sympy.logic.boolalg"
    ],
    "sympy.assumptions.ask": [
        "sympy.core.kind",
        "sympy.core.sympify",
        "sympy.assumptions.cnf",
        "sympy.utilities.decorator",
        "sympy.utilities.exceptions",
        "sympy.assumptions.ask_generated",
        "sympy.assumptions.ask.AssumptionKeys",
        "sympy.core.relational",
        "sympy.assumptions.assume",
        "sympy.logic.inference"
    ],
    "sympy.assumptions.assume": [
        "sympy.core.sympify",
        "sympy.utilities.source",
        "sympy.assumptions.assume.AssumptionsContext",
        "sympy.assumptions.assume.AppliedPredicate",
        "sympy.core.symbol",
        "sympy.utilities.exceptions",
        "sympy.assumptions.assume.Predicate",
        "sympy.multipledispatch.dispatcher",
        "sympy.assumptions.assume.PredicateMeta",
        "sympy.utilities.iterables",
        "sympy.assumptions.assume.UndefinedPredicate",
        "sympy.logic.boolalg",
        "contextlib.contextmanager"
    ],
    "sympy.utilities.source": [],
    "sympy.assumptions.assume.AssumptionsContext": [],
    "sympy.assumptions.assume.AppliedPredicate": [
        "<builtin>.property"
    ],
    "sympy.assumptions.assume.PredicateMeta": [
        "<builtin>.property"
    ],
    "sympy.assumptions.assume.Predicate": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.assumptions.assume.UndefinedPredicate": [
        "<builtin>.property"
    ],
    "sympy.assumptions.cnf": [
        "sympy.assumptions.cnf.OR",
        "sympy.core.singleton",
        "sympy.assumptions.cnf.EncodedCNF",
        "sympy.assumptions.cnf.CNF",
        "sympy.core.relational",
        "sympy.assumptions.cnf.Literal",
        "sympy.assumptions.assume",
        "sympy.assumptions.cnf.AND",
        "sympy.logic.boolalg"
    ],
    "sympy.assumptions.cnf.Literal": [
        "<builtin>.property"
    ],
    "sympy.assumptions.cnf.OR": [
        "<builtin>.property"
    ],
    "sympy.assumptions.cnf.AND": [
        "<builtin>.property"
    ],
    "sympy.assumptions.cnf.CNF": [
        "<builtin>.classmethod"
    ],
    "sympy.assumptions.cnf.EncodedCNF": [
        "<builtin>.property"
    ],
    "sympy.logic.inference": [
        "sympy.external.importtools",
        "sympy.core.sympify",
        "sympy.core.sorting",
        "sympy.logic.inference.PropKB",
        "sympy.logic.boolalg",
        "sympy.logic.inference.KB"
    ],
    "sympy.logic.inference.KB": [
        "<builtin>.property"
    ],
    "sympy.logic.inference.PropKB": [],
    "sympy.assumptions.ask.AssumptionKeys": [
        "sympy.utilities.decorator.memoize_property"
    ],
    "sympy.utilities.decorator.memoize_property": [
        "functools.wraps",
        "<builtin>.object",
        "<builtin>.property"
    ],
    "sympy.assumptions.ask_generated": [
        "sympy.core.cache",
        "sympy.assumptions.cnf",
        "sympy.assumptions.ask",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.assumptions": [
        "sympy.assumptions.refine",
        "sympy.assumptions.relation",
        "sympy.assumptions.assume",
        "sympy.assumptions.ask"
    ],
    "sympy.assumptions.relation": [
        "sympy.assumptions.relation.binrel"
    ],
    "sympy.assumptions.relation.binrel": [
        "sympy.core.singleton",
        "sympy.core.kind",
        "sympy.assumptions.relation.binrel.AppliedBinaryRelation",
        "sympy.assumptions",
        "sympy.assumptions.ask",
        "sympy.core.relational",
        "sympy.assumptions.relation.binrel.BinaryRelation",
        "sympy.logic.boolalg"
    ],
    "sympy.assumptions.relation.binrel.BinaryRelation": [
        "<builtin>.property"
    ],
    "sympy.assumptions.relation.binrel.AppliedBinaryRelation": [
        "<builtin>.property"
    ],
    "sympy.polys": [
        "sympy.polys.polyroots",
        "sympy.polys.numberfields.minpoly",
        "sympy.polys.polyfuncs",
        "sympy.polys.rings",
        "sympy.polys.specialpolys",
        "sympy.polys.numberfields",
        "sympy.polys.polyoptions",
        "sympy.polys.polytools",
        "sympy.polys.orderings",
        "sympy.polys.rootoftools",
        "sympy.polys.constructor",
        "sympy.polys.domains",
        "sympy.polys.polyerrors",
        "sympy.polys.orthopolys",
        "sympy.polys.rationaltools",
        "sympy.polys.appellseqs",
        "sympy.polys.monomials",
        "sympy.polys.partfrac",
        "sympy.polys.fields"
    ],
    "sympy.polys.polytools": [
        "sympy.polys.groebnertools",
        "sympy.core.sorting",
        "sympy.polys.polytools.PurePoly",
        "sympy.polys.domains.domainelement",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.polys.polyoptions",
        "sympy.polys.polytools.GroebnerBasis",
        "sympy.core.mul",
        "sympy.polys.polyutils",
        "sympy.polys.fglmtools",
        "sympy.polys.orderings",
        "sympy.polys.polyclasses",
        "sympy.polys.constructor",
        "sympy.polys.domains",
        "sympy.core.basic",
        "sympy.core.traversal",
        "sympy.utilities.decorator.public",
        "sympy.polys.polyerrors",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.polys.polytools.Poly",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.polys.rationaltools",
        "sympy.utilities.iterables",
        "mpmath.libmp.libhyper",
        "sympy.core.exprtools",
        "sympy.polys",
        "sympy.polys.monomials",
        "sympy.core",
        "sympy.utilities.exceptions",
        "sympy.core.decorators",
        "sympy.core.intfunc",
        "sympy.polys.rootisolation",
        "mpmath"
    ],
    "sympy.polys.polyoptions": [
        "sympy.polys.polyoptions.OptionType",
        "sympy.polys.polyoptions.Symmetric",
        "sympy.polys.polyoptions.Field",
        "sympy.polys.polyoptions.BooleanOption",
        "sympy.polys.polyoptions.Extension",
        "sympy.polys.polyoptions.Formal",
        "sympy.polys.polyoptions.Greedy",
        "sympy.polys.polyoptions.Gens",
        "sympy.polys.polyoptions.Include",
        "sympy.polys.polyoptions.Option",
        "sympy.polys.polyoptions.Gen",
        "sympy.polys.polyoptions.Strict",
        "sympy.polys.polyoptions.All",
        "sympy.polys.polyoptions.Order",
        "sympy.polys.polyoptions.Sort",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.polys.polyoptions.Series",
        "sympy.polys.polyoptions.Symbols",
        "sympy.polys.polyoptions.Modulus",
        "sympy.polys.polyoptions.Frac",
        "sympy.utilities",
        "sympy.polys.polyoptions.Options._init_dependencies_order",
        "sympy.polys.polyoptions.Split",
        "sympy.utilities.iterables",
        "sympy.polys.polyoptions.Gaussian",
        "sympy.polys.polyoptions.Method",
        "sympy.polys.polyoptions.Wrt",
        "sympy.polys",
        "sympy.polys.polyoptions.Composite",
        "sympy.polys.polyoptions.Auto",
        "sympy.core",
        "sympy.polys.polyoptions.Expand",
        "sympy.polys.polyoptions.Domain",
        "sympy.polys.polyoptions.Flag",
        "sympy.polys.polyoptions.Polys",
        "sympy.polys.polyoptions.Options"
    ],
    "sympy.polys.polyerrors": [
        "sympy.polys.polyerrors.OperationNotSupported",
        "sympy.polys.polyerrors.CoercionFailed",
        "sympy.polys.polyerrors.NotAlgebraic",
        "sympy.polys.polyerrors.OptionError",
        "sympy.polys.polyerrors.DomainError",
        "sympy.polys.polyerrors.HomomorphismFailed",
        "sympy.polys.polyerrors.NotReversible",
        "sympy.polys.polyerrors.ComputationFailed",
        "sympy.polys.polyerrors.UnsolvableFactorError",
        "sympy.polys.polyerrors.NotInvertible",
        "sympy.polys.polyerrors.ExactQuotientFailed",
        "sympy.polys.polyerrors.PolificationFailed",
        "sympy.polys.polyerrors.UnivariatePolynomialError",
        "sympy.polys.polyerrors.PolynomialDivisionFailed",
        "sympy.polys.polyerrors.IsomorphismFailed",
        "sympy.utilities",
        "sympy.polys.polyerrors.UnificationFailed",
        "sympy.polys.polyerrors.BasePolynomialError",
        "sympy.polys.polyerrors.HeuristicGCDFailed",
        "sympy.polys.polyerrors.ModularGCDFailed",
        "sympy.polys.polyerrors.MultivariatePolynomialError",
        "sympy.polys.polyerrors.ExtraneousFactors",
        "sympy.polys.polyerrors.EvaluationFailed",
        "sympy.polys.polyerrors.RefinementFailed",
        "sympy.polys.polyerrors.GeneratorsNeeded",
        "sympy.polys.polyerrors.FlagError",
        "sympy.polys.polyerrors.PolynomialError",
        "sympy.polys.polyerrors.GeneratorsError"
    ],
    "sympy.utilities": [
        "sympy.utilities.decorator",
        "sympy.utilities.misc",
        "sympy.utilities.timeutils",
        "sympy.utilities.lambdify",
        "sympy.utilities.iterables"
    ],
    "sympy.utilities.timeutils": [],
    "sympy.polys.polyerrors.BasePolynomialError": [],
    "sympy.polys.polyerrors.ExactQuotientFailed": [],
    "sympy.polys.polyerrors.PolynomialDivisionFailed": [],
    "sympy.polys.polyerrors.OperationNotSupported": [],
    "sympy.polys.polyerrors.HeuristicGCDFailed": [],
    "sympy.polys.polyerrors.ModularGCDFailed": [],
    "sympy.polys.polyerrors.HomomorphismFailed": [],
    "sympy.polys.polyerrors.IsomorphismFailed": [],
    "sympy.polys.polyerrors.ExtraneousFactors": [],
    "sympy.polys.polyerrors.EvaluationFailed": [],
    "sympy.polys.polyerrors.RefinementFailed": [],
    "sympy.polys.polyerrors.CoercionFailed": [],
    "sympy.polys.polyerrors.NotInvertible": [],
    "sympy.polys.polyerrors.NotReversible": [],
    "sympy.polys.polyerrors.NotAlgebraic": [],
    "sympy.polys.polyerrors.DomainError": [],
    "sympy.polys.polyerrors.PolynomialError": [],
    "sympy.polys.polyerrors.UnificationFailed": [],
    "sympy.polys.polyerrors.UnsolvableFactorError": [],
    "sympy.polys.polyerrors.GeneratorsError": [],
    "sympy.polys.polyerrors.GeneratorsNeeded": [],
    "sympy.polys.polyerrors.ComputationFailed": [],
    "sympy.polys.polyerrors.UnivariatePolynomialError": [],
    "sympy.polys.polyerrors.MultivariatePolynomialError": [],
    "sympy.polys.polyerrors.PolificationFailed": [],
    "sympy.polys.polyerrors.OptionError": [],
    "sympy.polys.polyerrors.FlagError": [],
    "sympy.polys.polyoptions.Option": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Flag": [],
    "sympy.polys.polyoptions.BooleanOption": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.OptionType": [],
    "sympy.polys.polyoptions.Options": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Expand": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Gens": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Wrt": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Sort": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Order": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Field": [],
    "sympy.polys.polyoptions.Greedy": [],
    "sympy.polys.polyoptions.Composite": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Domain": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Split": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Gaussian": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Extension": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Modulus": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Symmetric": [],
    "sympy.polys.polyoptions.Strict": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Auto": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Frac": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Formal": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Polys": [],
    "sympy.polys.polyoptions.Include": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.All": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Gen": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Series": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Symbols": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Method": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyoptions.Options._init_dependencies_order": [
        "<builtin>.RuntimeError",
        "sympy.utilities.iterables.topological_sort",
        "append",
        "<builtin>.list",
        "<builtin>.set"
    ],
    "sympy.utilities.iterables.topological_sort": [
        "<builtin>.sorted",
        "<builtin>.ValueError",
        "append",
        "<builtin>.list",
        "<builtin>.set"
    ],
    "sympy.polys.constructor": [
        "sympy.polys.polyutils",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.core.sorting",
        "sympy.polys.domains.realfield",
        "sympy.polys.polyoptions",
        "sympy.utilities",
        "sympy.polys.domains.complexfield",
        "sympy.polys.domains",
        "sympy.utilities.decorator.public"
    ],
    "sympy.polys.domains": [
        "sympy.polys.domains.fractionfield",
        "sympy.polys.domains.rationalfield",
        "sympy.polys.domains.gmpyintegerring",
        "sympy.polys.domains.gmpyrationalfield",
        "sympy.polys.domains.pythonrational",
        "sympy.polys.domains.gmpyfinitefield",
        "sympy.polys.domains.integerring",
        "sympy.polys.domains.algebraicfield",
        "extend",
        "sympy.polys.domains.pythonfinitefield",
        "sympy.polys.domains.pythonrationalfield",
        "sympy.polys.domains.pythonintegerring",
        "sympy.polys.domains.complexfield",
        "sympy.polys.domains.expressionrawdomain",
        "sympy.polys.domains.domain",
        "sympy.polys.domains.polynomialring",
        "sympy.external.gmpy",
        "sympy.polys.domains.finitefield",
        "sympy.polys.domains.realfield",
        "sympy.polys.domains.gaussiandomains",
        "sympy.polys.domains.expressiondomain"
    ],
    "sympy.polys.domains.domain": [
        "sympy.polys.polyerrors",
        "sympy.polys.polyutils",
        "sympy.core.sympify",
        "sympy.external.gmpy",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.polys.orderings",
        "sympy.polys.domains.domainelement",
        "sympy.utilities",
        "sympy.utilities.iterables",
        "sympy.core.numbers",
        "sympy.polys.domains.domain.Domain"
    ],
    "sympy.polys.domains.domainelement": [
        "sympy.utilities",
        "sympy.polys.domains.domainelement.DomainElement"
    ],
    "sympy.polys.domains.domainelement.DomainElement": [],
    "sympy.polys.orderings": [
        "sympy.polys.orderings._ItemGetter",
        "sympy.polys.orderings.MonomialOrder",
        "sympy.polys.orderings.InverseOrder.__init__",
        "sympy.core",
        "sympy.polys.orderings.InverseOrder",
        "sympy.polys.orderings.LexOrder",
        "sympy.polys.orderings.ReversedGradedLexOrder",
        "sympy.polys.orderings.ProductOrder",
        "sympy.utilities.iterables",
        "sympy.polys.orderings.GradedLexOrder"
    ],
    "sympy.polys.orderings.MonomialOrder": [],
    "sympy.polys.orderings.LexOrder": [],
    "sympy.polys.orderings.GradedLexOrder": [],
    "sympy.polys.orderings.ReversedGradedLexOrder": [],
    "sympy.polys.orderings.ProductOrder": [
        "<builtin>.property"
    ],
    "sympy.polys.orderings.InverseOrder": [
        "<builtin>.property"
    ],
    "sympy.polys.orderings.InverseOrder.__init__": [],
    "sympy.polys.orderings._ItemGetter": [],
    "sympy.polys.polyutils": [
        "sympy.core.exprtools",
        "sympy.polys.polyerrors",
        "<builtin>.type",
        "sympy.external.gmpy",
        "<builtin>.float",
        "sympy.core",
        "sympy.polys.polyutils.PicklableWithSlots",
        "sympy.polys.domains.modularinteger",
        "sympy.polys.polyutils.IntegerPowerable",
        "sympy.core.numbers",
        "sympy.polys.polyoptions"
    ],
    "<builtin>.float": [],
    "sympy.polys.polyutils.PicklableWithSlots": [],
    "sympy.polys.polyutils.IntegerPowerable": [],
    "sympy.polys.domains.modularinteger": [
        "sympy.polys.polyerrors",
        "sympy.polys.polyutils",
        "sympy.polys.domains.modularinteger.ModularInteger",
        "sympy.utilities.exceptions",
        "sympy.utilities",
        "sympy.polys.domains.domainelement"
    ],
    "sympy.polys.domains.modularinteger.ModularInteger": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.domains.domain.Domain": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.finitefield": [
        "sympy.polys.domains.field",
        "sympy.polys.polyerrors",
        "sympy.polys.galoistools",
        "sympy.polys.domains.groundtypes",
        "sympy.external.gmpy",
        "sympy.utilities.decorator",
        "sympy.polys.domains.simpledomain",
        "sympy.polys.domains.modularinteger",
        "sympy.utilities",
        "sympy.polys.domains.finitefield.FiniteField",
        "sympy.core.numbers",
        "<builtin>.int"
    ],
    "sympy.polys.domains.field": [
        "sympy.utilities",
        "sympy.polys.polyerrors",
        "sympy.polys.domains.field.Field",
        "sympy.polys.domains.ring"
    ],
    "sympy.polys.domains.ring": [
        "sympy.utilities",
        "sympy.polys.domains.domain",
        "sympy.polys.domains.ring.Ring",
        "sympy.polys.polyerrors"
    ],
    "sympy.polys.domains.ring.Ring": [],
    "sympy.polys.domains.field.Field": [],
    "sympy.polys.domains.simpledomain": [
        "sympy.utilities",
        "sympy.polys.domains.domain",
        "sympy.polys.domains.simpledomain.SimpleDomain"
    ],
    "sympy.polys.domains.simpledomain.SimpleDomain": [],
    "sympy.polys.galoistools": [
        "sympy.polys.polyerrors",
        "sympy.polys.polyutils",
        "sympy.core.random",
        "sympy.external.gmpy",
        "sympy.polys.polyconfig"
    ],
    "sympy.polys.polyconfig": [
        "sympy.polys.polyconfig.configure",
        "contextlib.contextmanager"
    ],
    "sympy.polys.polyconfig.configure": [
        "<builtin>.eval",
        "<map>.items",
        "os.getenv"
    ],
    "sympy.polys.domains.groundtypes": [
        "sympy.polys.domains.groundtypes._GMPYRational",
        "sympy.external.gmpy",
        "sympy.core.intfunc",
        "sympy.core.numbers",
        "sympy.polys.domains.groundtypes._GMPYInteger",
        "sympy.polys.domains.pythonrational"
    ],
    "sympy.polys.domains.pythonrational": [
        "sympy.core.sympify",
        "sympy.external.pythonmpq",
        "sympy.utilities",
        "sympy.core.numbers",
        "sympy.utilities.decorator.public"
    ],
    "sympy.utilities.decorator.public": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "sympy.polys.domains.groundtypes._GMPYInteger": [],
    "sympy.polys.domains.groundtypes._GMPYRational": [],
    "sympy.polys.domains.finitefield.FiniteField": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.integerring": [
        "sympy.polys.domains.integerring.IntegerRing.__init__",
        "sympy.polys.domains.groundtypes",
        "sympy.polys.polyerrors",
        "sympy.polys.domains.integerring.IntegerRing",
        "sympy.external.gmpy",
        "sympy.polys.domains.ring",
        "sympy.polys.domains.characteristiczero",
        "sympy.polys.domains.simpledomain",
        "sympy.utilities",
        "sympy.core.numbers"
    ],
    "sympy.polys.domains.characteristiczero": [
        "sympy.utilities",
        "sympy.polys.domains.domain",
        "sympy.polys.domains.characteristiczero.CharacteristicZero"
    ],
    "sympy.polys.domains.characteristiczero.CharacteristicZero": [],
    "sympy.polys.domains.integerring.IntegerRing": [
        "<builtin>.type"
    ],
    "sympy.polys.domains.integerring.IntegerRing.__init__": [],
    "sympy.polys.domains.rationalfield": [
        "sympy.polys.domains.field",
        "sympy.polys.domains.groundtypes",
        "sympy.polys.polyerrors",
        "sympy.external.gmpy",
        "sympy.polys.domains.characteristiczero",
        "sympy.polys.domains.simpledomain",
        "sympy.utilities",
        "sympy.polys.domains.rationalfield.RationalField.__init__",
        "sympy.polys.domains.rationalfield.RationalField"
    ],
    "sympy.polys.domains.rationalfield.RationalField": [
        "<builtin>.type"
    ],
    "sympy.polys.domains.rationalfield.RationalField.__init__": [],
    "sympy.polys.domains.algebraicfield": [
        "sympy.core.singleton",
        "sympy.polys.domains.field",
        "sympy.core.mul",
        "sympy.polys.polyerrors",
        "sympy.polys.polyclasses",
        "sympy.polys.domains.algebraicfield.AlgebraicField",
        "sympy.polys.domains.characteristiczero",
        "sympy.polys.domains.simpledomain",
        "sympy.utilities",
        "sympy.core.add"
    ],
    "sympy.polys.polyclasses": [
        "sympy.polys.densebasic",
        "sympy.polys.densearith",
        "sympy.polys.sqfreetools",
        "sympy.polys.polyclasses.DMF",
        "sympy.polys.polyclasses.DUP_Flint",
        "sympy.core.numbers",
        "sympy.polys.polyutils",
        "sympy.polys.domains",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.polys.euclidtools",
        "sympy.polys.polyclasses.DMP",
        "sympy.polys.polyclasses.DMP_Python",
        "sympy.polys.densetools",
        "sympy.polys.factortools",
        "sympy.external.gmpy",
        "sympy.utilities.exceptions",
        "sympy.polys.polyclasses.ANP",
        "sympy.polys.rootisolation"
    ],
    "sympy.polys.densebasic": [
        "sympy.polys.orderings",
        "<builtin>.float",
        "sympy.core",
        "sympy.polys.monomials"
    ],
    "sympy.polys.monomials": [
        "sympy.polys.monomials.MonomialOps",
        "sympy.polys.polyerrors",
        "sympy.polys.polyutils",
        "sympy.core.sympify",
        "sympy.core",
        "sympy.utilities",
        "sympy.polys.monomials.Monomial",
        "sympy.utilities.iterables",
        "sympy.utilities.decorator.public"
    ],
    "sympy.polys.monomials.MonomialOps": [],
    "sympy.polys.monomials.Monomial": [],
    "sympy.polys.densearith": [
        "sympy.polys.polyerrors",
        "sympy.polys.densebasic"
    ],
    "sympy.polys.densetools": [
        "sympy.polys.densearith",
        "sympy.utilities",
        "sympy.polys.polyerrors",
        "sympy.polys.densebasic"
    ],
    "sympy.polys.euclidtools": [
        "sympy.polys.polyerrors",
        "sympy.polys.galoistools",
        "sympy.polys.densebasic",
        "sympy.polys.densearith",
        "sympy.polys.densetools",
        "sympy.polys.polyconfig"
    ],
    "sympy.polys.sqfreetools": [
        "sympy.polys.polyerrors",
        "sympy.polys.galoistools",
        "sympy.polys.densebasic",
        "sympy.polys.densearith",
        "sympy.polys.euclidtools",
        "sympy.polys.densetools"
    ],
    "sympy.polys.factortools": [
        "sympy.polys.polyerrors",
        "sympy.polys.galoistools",
        "sympy.polys.densebasic",
        "sympy.polys.polyutils",
        "sympy.external.gmpy",
        "sympy.core.random",
        "sympy.polys.densearith",
        "sympy.polys.euclidtools",
        "sympy.polys.sqfreetools",
        "sympy.utilities",
        "sympy.polys.densetools",
        "sympy.polys.polyconfig"
    ],
    "sympy.polys.rootisolation": [
        "sympy.polys.polyerrors",
        "sympy.polys.densebasic",
        "sympy.polys.factortools",
        "sympy.polys.densearith",
        "sympy.polys.euclidtools",
        "sympy.polys.sqfreetools",
        "sympy.polys.rootisolation.RealInterval",
        "sympy.polys.densetools",
        "sympy.polys.rootisolation.ComplexInterval"
    ],
    "sympy.polys.rootisolation.RealInterval": [
        "<builtin>.property"
    ],
    "sympy.polys.rootisolation.ComplexInterval": [
        "<builtin>.property"
    ],
    "sympy.polys.polyclasses.DMP": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyclasses.DMP_Python": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyclasses.DUP_Flint": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyclasses.DMF": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyclasses.ANP": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.domains.algebraicfield.AlgebraicField": [],
    "sympy.polys.domains.gaussiandomains": [
        "sympy.polys.domains.field",
        "sympy.polys.polyerrors",
        "sympy.polys.domains.gaussiandomains.GaussianElement",
        "sympy.polys.domains.gaussiandomains.GaussianIntegerRing",
        "sympy.polys.domains.algebraicfield",
        "sympy.polys.domains.domain",
        "sympy.polys.domains.rationalfield",
        "sympy.polys.domains.ring",
        "sympy.polys.domains.domainelement",
        "sympy.polys.domains.gaussiandomains.GaussianRationalField",
        "sympy.polys.domains.gaussiandomains.GaussianDomain",
        "sympy.polys.domains.gaussiandomains.GaussianRational",
        "sympy.polys.domains.gaussiandomains.GaussianRationalField.__init__",
        "sympy.core.numbers",
        "sympy.polys.domains.integerring",
        "sympy.polys.domains.gaussiandomains.GaussianInteger",
        "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.__init__"
    ],
    "sympy.polys.domains.gaussiandomains.GaussianElement": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.domains.gaussiandomains.GaussianInteger": [],
    "sympy.polys.domains.gaussiandomains.GaussianRational": [],
    "sympy.polys.domains.gaussiandomains.GaussianDomain": [],
    "sympy.polys.domains.gaussiandomains.GaussianIntegerRing": [
        "sympy.polys.domains.integerring.IntegerRing.__init__",
        "<builtin>.property"
    ],
    "sympy.polys.domains.gaussiandomains.GaussianIntegerRing.__init__": [],
    "sympy.polys.domains.gaussiandomains.GaussianRationalField": [
        "sympy.polys.domains.rationalfield.RationalField.__init__",
        "<builtin>.property"
    ],
    "sympy.polys.domains.gaussiandomains.GaussianRationalField.__init__": [],
    "sympy.polys.domains.realfield": [
        "sympy.polys.domains.field",
        "sympy.polys.polyerrors",
        "sympy.external.gmpy",
        "sympy.polys.domains.characteristiczero",
        "sympy.polys.domains.simpledomain",
        "sympy.utilities",
        "sympy.polys.domains.realfield.RealField",
        "sympy.core.numbers",
        "sympy.polys.domains.realfield.RealField.__init__",
        "sympy.polys.domains.mpelements"
    ],
    "sympy.polys.domains.mpelements": [
        "mpmath.libmp",
        "sympy.external.gmpy",
        "sympy.polys.domains.mpelements.ComplexElement",
        "mpmath.ctx_mp_python",
        "sympy.polys.domains.domainelement",
        "sympy.utilities",
        "sympy.polys.domains.mpelements.RealElement",
        "sympy.polys.domains.mpelements.MPContext"
    ],
    "sympy.polys.domains.mpelements.RealElement": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.mpelements.ComplexElement": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.mpelements.MPContext": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.realfield.RealField": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.realfield.RealField.__init__": [
        "sympy.polys.domains.realfield.RealField.dtype",
        "sympy.polys.domains.mpelements.MPContext.__init__"
    ],
    "sympy.polys.domains.mpelements.MPContext.__init__": [
        "mpmath.ctx_mp_python.PythonMPContext._set_dps",
        "sympy.polys.domains.mpelements.MPContext._make_tol",
        "mpmath.ctx_mp_python.PythonMPContext._set_prec",
        "sympy.polys.domains.mpelements.MPContext._convert_tol",
        "mpmath.ctx_mp_python.PythonMPContext.make_mpc",
        "mpmath.ctx_mp_python.PythonMPContext.make_mpf",
        "<builtin>.int"
    ],
    "mpmath.ctx_mp_python.PythonMPContext._set_dps": [
        "<builtin>.max",
        "<builtin>.int",
        "mpmath.libmp.libmpf.dps_to_prec"
    ],
    "mpmath.libmp.libmpf.dps_to_prec": [
        "<builtin>.max",
        "<builtin>.int",
        "<builtin>.round"
    ],
    "mpmath.ctx_mp_python.PythonMPContext._set_prec": [
        "<builtin>.max",
        "mpmath.libmp.libmpf.prec_to_dps",
        "<builtin>.int"
    ],
    "sympy.polys.domains.mpelements.MPContext._convert_tol": [
        "mpmath.libmp.libmpf.from_str",
        "<builtin>.hasattr",
        "mpmath.libmp.libmpf.from_int",
        "mpmath.libmp.libmpf.from_float",
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "mpmath.libmp.libmpf.from_str": [
        "<builtin>.abs",
        "mpmath.libmp.libmpf.from_int",
        "mpmath.libmp.libmpf.gmpy_mpf_mul",
        "mpmath.libmp.libmpf.mpf_pow_int",
        "mpmath.libmp.libmpf.python_mpf_mul",
        "mpmath.libmp.libmpf.str_to_man_exp",
        "mpmath.libmp.libmpf.from_rational",
        "<builtin>.int"
    ],
    "mpmath.libmp.libmpf.from_rational": [
        "mpmath.libmp.libmpf.mpf_div",
        "mpmath.libmp.libmpf.from_int"
    ],
    "mpmath.libmp.libmpf.mpf_div": [
        "mpmath.libmp.libmpf.mpf_sign",
        "mpmath.libmp.libmpf._normalize",
        "mpmath.libmp.libmpf._normalize1",
        "mpmath.libmp.libmpf.strict_normalize1",
        "mpmath.libmp.libintmath.python_bitcount",
        "<builtin>.divmod",
        "mpmath.libmp.libmpf.strict_normalize",
        "mpmath.libmp.libintmath.gmpy_bitcount"
    ],
    "mpmath.libmp.libmpf.mpf_sign": [],
    "mpmath.libmp.libmpf.strict_normalize1": [
        "mpmath.libmp.libintmath.gmpy_bitcount",
        "mpmath.libmp.libintmath.python_bitcount",
        "<builtin>.type",
        "mpmath.libmp.libmpf._normalize1"
    ],
    "mpmath.libmp.libmpf._normalize1": [
        "<builtin>.int"
    ],
    "<builtin>.divmod": [],
    "mpmath.libmp.libmpf.str_to_man_exp": [
        "<builtin>.int",
        "<builtin>.float",
        "<builtin>.len"
    ],
    "mpmath.libmp.libmpf.mpf_pow_int": [
        "mpmath.libmp.libmpf._normalize",
        "mpmath.libmp.libmpf._normalize1",
        "mpmath.libmp.libmpf.mpf_div",
        "mpmath.libmp.libmpf.mpf_pow_int",
        "mpmath.libmp.libmpf.mpf_pos",
        "mpmath.libmp.libmpf.strict_normalize1",
        "mpmath.libmp.libintmath.python_bitcount",
        "mpmath.libmp.libmpf.strict_normalize",
        "mpmath.libmp.libintmath.gmpy_bitcount",
        "<builtin>.int"
    ],
    "mpmath.libmp.libmpf.mpf_pos": [
        "mpmath.libmp.libmpf.strict_normalize1",
        "mpmath.libmp.libmpf._normalize1"
    ],
    "mpmath.libmp.libmpf.python_mpf_mul": [
        "mpmath.libmp.libmpf.mpf_sign",
        "mpmath.libmp.libmpf.strict_normalize1",
        "<builtin>.int",
        "mpmath.libmp.libmpf._normalize1"
    ],
    "mpmath.libmp.libmpf.gmpy_mpf_mul": [
        "mpmath.libmp.libmpf.mpf_sign",
        "mpmath.libmp.libmpf._normalize1",
        "mpmath.libmp.libmpf.strict_normalize1",
        "mpmath.libmp.libintmath.python_bitcount",
        "mpmath.libmp.libintmath.gmpy_bitcount"
    ],
    "sympy.polys.domains.mpelements.MPContext._make_tol": [
        "mpmath.libmp.libmpf.python_mpf_mul",
        "mpmath.libmp.libmpf.gmpy_mpf_mul"
    ],
    "sympy.polys.domains.realfield.RealField.dtype": [
        "<builtin>.int",
        "<builtin>.isinstance"
    ],
    "sympy.polys.domains.complexfield": [
        "sympy.polys.domains.field",
        "sympy.polys.polyerrors",
        "sympy.polys.domains.complexfield.ComplexField.__init__",
        "sympy.external.gmpy",
        "sympy.polys.domains.characteristiczero",
        "sympy.polys.domains.simpledomain",
        "sympy.utilities",
        "sympy.polys.domains.gaussiandomains",
        "sympy.core.numbers",
        "sympy.polys.domains.mpelements",
        "sympy.polys.domains.complexfield.ComplexField"
    ],
    "sympy.polys.domains.complexfield.ComplexField": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.complexfield.ComplexField.__init__": [
        "sympy.polys.domains.mpelements.MPContext.__init__",
        "sympy.polys.domains.complexfield.ComplexField.dtype"
    ],
    "sympy.polys.domains.complexfield.ComplexField.dtype": [
        "<builtin>.int",
        "<builtin>.isinstance"
    ],
    "sympy.polys.domains.polynomialring": [
        "sympy.polys.polyerrors",
        "sympy.polys.domains.ring",
        "sympy.utilities",
        "sympy.polys.domains.compositedomain",
        "sympy.polys.domains.polynomialring.PolynomialRing"
    ],
    "sympy.polys.domains.compositedomain": [
        "sympy.utilities",
        "sympy.polys.domains.domain",
        "sympy.polys.polyerrors",
        "sympy.polys.domains.compositedomain.CompositeDomain"
    ],
    "sympy.polys.domains.compositedomain.CompositeDomain": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.polynomialring.PolynomialRing": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.fractionfield": [
        "sympy.polys.domains.field",
        "sympy.polys.polyerrors",
        "sympy.utilities",
        "sympy.polys.domains.compositedomain",
        "sympy.polys.domains.fractionfield.FractionField"
    ],
    "sympy.polys.domains.fractionfield.FractionField": [
        "<builtin>.property"
    ],
    "sympy.polys.domains.expressiondomain": [
        "sympy.polys.domains.field",
        "sympy.polys.domains.expressiondomain.ExpressionDomain",
        "sympy.polys.polyutils",
        "sympy.core.sympify",
        "sympy.core",
        "sympy.polys.domains.characteristiczero",
        "sympy.polys.domains.simpledomain",
        "sympy.polys.domains.domainelement",
        "sympy.utilities",
        "sympy.polys.domains.expressiondomain.ExpressionDomain.__init__"
    ],
    "sympy.polys.domains.expressiondomain.ExpressionDomain": [
        "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression",
        "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__init__"
    ],
    "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression": [],
    "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__init__": [
        "sympy.core.sympify.sympify",
        "<builtin>.isinstance"
    ],
    "sympy.core.sympify.sympify": [],
    "sympy.polys.domains.expressiondomain.ExpressionDomain.__init__": [],
    "sympy.polys.domains.expressionrawdomain": [
        "sympy.polys.domains.expressionrawdomain.ExpressionRawDomain",
        "sympy.polys.domains.field",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.core",
        "sympy.polys.domains.characteristiczero",
        "sympy.polys.domains.simpledomain",
        "sympy.utilities",
        "sympy.polys.domains.expressionrawdomain.ExpressionRawDomain.__init__"
    ],
    "sympy.polys.domains.expressionrawdomain.ExpressionRawDomain": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.domains.expressionrawdomain.ExpressionRawDomain.__init__": [],
    "sympy.polys.domains.pythonfinitefield": [
        "sympy.utilities",
        "sympy.polys.domains.pythonintegerring",
        "sympy.polys.domains.finitefield",
        "sympy.polys.domains.pythonfinitefield.PythonFiniteField"
    ],
    "sympy.polys.domains.pythonintegerring": [
        "sympy.polys.domains.groundtypes",
        "sympy.polys.polyerrors",
        "sympy.utilities",
        "sympy.core.numbers",
        "sympy.polys.domains.pythonintegerring.PythonIntegerRing",
        "sympy.polys.domains.integerring"
    ],
    "sympy.polys.domains.pythonintegerring.PythonIntegerRing": [
        "builtins.int"
    ],
    "builtins.int": [],
    "sympy.polys.domains.pythonfinitefield.PythonFiniteField": [],
    "sympy.polys.domains.gmpyfinitefield": [
        "sympy.utilities",
        "sympy.polys.domains.finitefield",
        "sympy.polys.domains.gmpyfinitefield.GMPYFiniteField",
        "sympy.polys.domains.gmpyintegerring"
    ],
    "sympy.polys.domains.gmpyintegerring": [
        "sympy.polys.domains.groundtypes",
        "sympy.polys.polyerrors",
        "sympy.utilities",
        "sympy.polys.domains.gmpyintegerring.GMPYIntegerRing",
        "sympy.core.numbers",
        "sympy.polys.domains.integerring"
    ],
    "sympy.polys.domains.gmpyintegerring.GMPYIntegerRing": [
        "sympy.polys.domains.groundtypes._GMPYInteger.__init__",
        "gmpy2.mpz",
        "<builtin>.type"
    ],
    "sympy.polys.domains.groundtypes._GMPYInteger.__init__": [],
    "gmpy2.mpz": [],
    "sympy.polys.domains.gmpyfinitefield.GMPYFiniteField": [],
    "sympy.polys.domains.pythonrationalfield": [
        "sympy.polys.domains.groundtypes",
        "sympy.polys.polyerrors",
        "sympy.polys.domains.rationalfield",
        "sympy.utilities",
        "sympy.polys.domains.pythonrationalfield.PythonRationalField"
    ],
    "sympy.polys.domains.pythonrationalfield.PythonRationalField": [],
    "sympy.polys.domains.gmpyrationalfield": [
        "sympy.polys.domains.groundtypes",
        "sympy.polys.polyerrors",
        "sympy.polys.domains.rationalfield",
        "sympy.utilities",
        "sympy.polys.domains.gmpyrationalfield.GMPYRationalField"
    ],
    "sympy.polys.domains.gmpyrationalfield.GMPYRationalField": [
        "gmpy2.mpq",
        "sympy.polys.domains.groundtypes._GMPYRational.__init__",
        "<builtin>.type"
    ],
    "gmpy2.mpq": [],
    "sympy.polys.domains.groundtypes._GMPYRational.__init__": [],
    "sympy.polys.fglmtools": [
        "sympy.polys.monomials"
    ],
    "sympy.polys.groebnertools": [
        "sympy.polys.polyerrors",
        "sympy.polys.monomials",
        "sympy.polys.orderings",
        "sympy.core.symbol",
        "sympy.polys.polyconfig"
    ],
    "sympy.polys.rationaltools": [
        "sympy.core.exprtools",
        "sympy.core.sympify",
        "sympy.core",
        "sympy.utilities",
        "sympy.utilities.iterables",
        "sympy.utilities.decorator.public"
    ],
    "sympy.polys.polytools.Poly": [
        "sympy.polys.polytools._polifyit",
        "sympy.core.decorators._sympifyit.deco",
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.decorators._sympifyit"
    ],
    "sympy.polys.polytools._polifyit": [
        "functools.wraps"
    ],
    "sympy.core.decorators._sympifyit": [],
    "sympy.core.decorators._sympifyit.deco": [
        "sympy.core.decorators.__sympifyit"
    ],
    "sympy.core.decorators.__sympifyit": [
        "functools.wraps",
        "<builtin>.LookupError"
    ],
    "<builtin>.LookupError": [],
    "sympy.polys.polytools.PurePoly": [
        "<builtin>.property",
        "sympy.core.decorators._sympifyit",
        "sympy.core.decorators._sympifyit.deco"
    ],
    "sympy.polys.polytools.GroebnerBasis": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.polyfuncs": [
        "sympy.core.symbol.symbols",
        "sympy.polys.polyerrors",
        "sympy.polys.polytools",
        "sympy.core",
        "sympy.polys.rings",
        "sympy.utilities",
        "sympy.polys.specialpolys",
        "sympy.polys.polyoptions",
        "sympy.utilities.decorator.public"
    ],
    "sympy.polys.specialpolys": [
        "sympy.core.singleton",
        "sympy.polys.polytools",
        "sympy.polys.densebasic",
        "sympy.polys.polyutils",
        "sympy.core.sympify",
        "sympy.polys.factortools",
        "sympy.polys.densearith",
        "sympy.core",
        "sympy.polys.domains",
        "sympy.polys.polyclasses",
        "sympy.utilities",
        "sympy.polys.rings",
        "sympy.core.containers",
        "sympy.ntheory",
        "sympy.utilities.decorator.public"
    ],
    "sympy.ntheory": [
        "sympy.ntheory.generate",
        "sympy.ntheory.partitions_",
        "sympy.ntheory.digits",
        "sympy.ntheory.multinomial",
        "sympy.ntheory.primetest",
        "sympy.ntheory.egyptian_fraction",
        "sympy.ntheory.factor_",
        "sympy.ntheory.ecm",
        "sympy.ntheory.continued_fraction",
        "sympy.ntheory.qs",
        "sympy.ntheory.residue_ntheory"
    ],
    "sympy.ntheory.generate": [
        "sympy.core.random",
        "sympy.external.gmpy",
        "sympy.utilities.decorator",
        "sympy.utilities.misc",
        "sympy.ntheory.primetest",
        "sympy.ntheory.generate.Sieve.__init__",
        "sympy.utilities.decorator.deprecated",
        "sympy.ntheory.generate.Sieve",
        "sympy.utilities.decorator.deprecated.deprecated_decorator"
    ],
    "sympy.ntheory.primetest": [
        "sympy.external.gmpy",
        "sympy.utilities.misc",
        "sympy.core.sympify",
        "sympy.external.ntheory"
    ],
    "sympy.ntheory.generate.Sieve": [],
    "sympy.ntheory.generate.Sieve.__init__": [
        "array.array",
        "<builtin>.ValueError",
        "<builtin>.all",
        "<builtin>.len"
    ],
    "array.array": [],
    "sympy.ntheory.factor_": [
        "sympy.ntheory.generate",
        "sympy.core.singleton",
        "sympy.core.mul",
        "sympy.ntheory.digits",
        "sympy.core.random",
        "sympy.external.gmpy",
        "sympy.utilities.decorator",
        "sympy.utilities.misc",
        "sympy.ntheory.primetest",
        "sympy.core.power",
        "sympy.utilities.decorator.deprecated",
        "sympy.utilities.decorator.deprecated.deprecated_decorator",
        "sympy.utilities.iterables",
        "sympy.ntheory.ecm",
        "sympy.core.intfunc",
        "sympy.core.numbers",
        "sympy.core.containers"
    ],
    "sympy.ntheory.digits": [
        "sympy.utilities.misc",
        "sympy.utilities.iterables"
    ],
    "sympy.ntheory.ecm": [
        "sympy.ntheory.generate",
        "sympy.core.random",
        "sympy.external.gmpy",
        "sympy.utilities.misc",
        "sympy.ntheory.primetest",
        "sympy.ntheory.ecm.Point"
    ],
    "sympy.ntheory.ecm.Point": [],
    "sympy.ntheory.partitions_": [
        "mpmath.libmp",
        "sympy.utilities.memoization.recurrence_memo.decorator",
        "sympy.external.gmpy",
        "sympy.utilities.decorator",
        "sympy.utilities.memoization",
        "sympy.utilities.decorator.deprecated",
        "sympy.utilities.decorator.deprecated.deprecated_decorator",
        "sympy.utilities.memoization.recurrence_memo",
        "sympy.ntheory.residue_ntheory"
    ],
    "sympy.ntheory.residue_ntheory": [
        "sympy.ntheory.generate",
        "sympy.polys.galoistools",
        "sympy.polys",
        "sympy.external.gmpy",
        "sympy.core.random",
        "sympy.utilities.decorator",
        "sympy.utilities.misc",
        "sympy.ntheory.primetest",
        "sympy.ntheory.factor_",
        "sympy.utilities.memoization",
        "sympy.utilities.decorator.deprecated",
        "sympy.utilities.decorator.deprecated.deprecated_decorator",
        "sympy.ntheory.modular",
        "sympy.utilities.iterables",
        "sympy.polys.domains"
    ],
    "sympy.ntheory.modular": [
        "sympy.polys.galoistools",
        "sympy.external.gmpy",
        "sympy.utilities.misc",
        "sympy.ntheory.primetest",
        "sympy.polys.domains"
    ],
    "sympy.utilities.memoization": [],
    "sympy.utilities.memoization.recurrence_memo": [],
    "sympy.utilities.memoization.recurrence_memo.decorator": [
        "functools.wraps"
    ],
    "sympy.ntheory.multinomial": [
        "sympy.utilities.misc"
    ],
    "sympy.ntheory.continued_fraction": [
        "sympy.core.singleton",
        "sympy.core.exprtools",
        "sympy.core.sympify",
        "sympy.utilities.misc",
        "sympy.core.symbol",
        "sympy.core.numbers"
    ],
    "sympy.ntheory.egyptian_fraction": [
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.singleton",
        "sympy.polys"
    ],
    "sympy.ntheory.qs": [
        "sympy.ntheory.qs.SievePolynomial",
        "sympy.ntheory.qs.FactorBaseElem",
        "sympy.core.random",
        "sympy.external.gmpy",
        "sympy.ntheory.residue_ntheory",
        "sympy.ntheory"
    ],
    "sympy.ntheory.qs.SievePolynomial": [],
    "sympy.ntheory.qs.FactorBaseElem": [],
    "sympy.polys.rings": [
        "sympy.polys.densebasic",
        "sympy.polys.rings.PolyElement",
        "sympy.polys.domains.domainelement",
        "sympy.polys.polyoptions",
        "sympy.polys.rings.PolyRing",
        "sympy.polys.polyutils",
        "sympy.core.expr",
        "sympy.polys.orderings",
        "sympy.polys.constructor",
        "sympy.utilities.decorator.public",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.ntheory.multinomial",
        "sympy.polys.heuristicgcd",
        "sympy.utilities",
        "sympy.utilities.iterables",
        "sympy.core.symbol",
        "sympy.polys.compatibility",
        "sympy.polys.domains.polynomialring",
        "sympy.polys.monomials",
        "sympy.utilities.magic",
        "sympy.core.intfunc",
        "sympy.printing.defaults"
    ],
    "sympy.polys.compatibility": [
        "sympy.polys.galoistools",
        "sympy.polys.densebasic",
        "sympy.polys.factortools",
        "sympy.polys.densearith",
        "sympy.polys.euclidtools",
        "sympy.polys.sqfreetools",
        "sympy.polys.compatibility.IPolys",
        "sympy.utilities",
        "sympy.polys.rootisolation",
        "sympy.polys.densetools"
    ],
    "sympy.polys.compatibility.IPolys": [],
    "sympy.polys.heuristicgcd": [
        "sympy.polys.polyerrors"
    ],
    "sympy.printing.defaults": [
        "sympy.core._print_helpers"
    ],
    "sympy.utilities.magic": [],
    "sympy.polys.rings.PolyRing": [
        "<builtin>.property"
    ],
    "sympy.polys.rings.PolyElement": [
        "<builtin>.property"
    ],
    "sympy.core.symbol.symbols": [
        "<str>.rstrip",
        "<builtin>.tuple",
        "<builtin>.type",
        "<str>.endswith",
        "<builtin>.ValueError",
        "<str>.split",
        "sympy.core.symbol.symbols.literal",
        "<builtin>.isinstance",
        "append",
        "<builtin>.all",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.chr",
        "<builtin>.range",
        "<builtin>.int"
    ],
    "<builtin>.chr": [],
    "<str>.endswith": [],
    "<str>.rstrip": [],
    "sympy.core.symbol.symbols.literal": [],
    "sympy.polys.numberfields.minpoly": [
        "sympy.core.singleton",
        "sympy.polys.rings",
        "sympy.functions.elementary.miscellaneous",
        "sympy.polys.specialpolys",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.mul",
        "sympy.polys.polytools",
        "sympy.functions.elementary.exponential",
        "sympy.polys.polyutils",
        "sympy.polys.rootoftools",
        "sympy.polys.domains",
        "sympy.core.add",
        "sympy.core.traversal",
        "sympy.utilities.decorator.public",
        "sympy.functions.elementary.trigonometric",
        "sympy.polys.polyerrors",
        "sympy.polys.ring_series",
        "sympy.core.sympify",
        "sympy.utilities",
        "sympy.polys.orthopolys",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "sympy.core.exprtools",
        "sympy.ntheory.factor_"
    ],
    "sympy.functions.elementary.exponential": [
        "sympy.core.singleton",
        "sympy.functions.elementary.exponential.ExpBase",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.ntheory",
        "sympy.core.parameters",
        "sympy.functions.combinatorial.factorials",
        "sympy.core.cache",
        "sympy.core.mul",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.core.add",
        "sympy.core.sympify",
        "sympy.functions.elementary.exponential.LambertW",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.symbol",
        "sympy.functions.elementary.exponential.log",
        "sympy.functions.elementary.complexes",
        "sympy.functions.elementary.exponential.exp_polar",
        "sympy.functions.elementary.exponential.exp",
        "sympy.functions.elementary.exponential.ExpMeta",
        "sympy.core.power",
        "sympy.ntheory.factor_",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.combinatorial.factorials": [
        "sympy.functions.combinatorial.factorials.subfactorial",
        "sympy.functions.combinatorial.factorials.MultiFactorial",
        "sympy.functions.combinatorial.factorials.binomial",
        "sympy.functions.combinatorial.factorials.FallingFactorial",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.ntheory",
        "sympy.functions.combinatorial.factorials.factorial2",
        "sympy.core.cache",
        "sympy.polys.polytools",
        "sympy.core.logic",
        "sympy.ntheory.residue_ntheory",
        "sympy.functions.combinatorial.factorials.CombinatorialFunction",
        "sympy.core.sympify",
        "sympy.functions.combinatorial.factorials.factorial",
        "sympy.core.relational",
        "sympy.functions.combinatorial.factorials.RisingFactorial",
        "sympy.external.gmpy",
        "sympy.core"
    ],
    "sympy.functions.combinatorial.factorials.CombinatorialFunction": [],
    "sympy.functions.combinatorial.factorials.factorial": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.factorials.MultiFactorial": [],
    "sympy.functions.combinatorial.factorials.subfactorial": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.combinatorial.factorials.factorial2": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.factorials.RisingFactorial": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.factorials.FallingFactorial": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.factorials.binomial": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.complexes": [],
    "sympy.functions.elementary.exponential.ExpBase": [
        "<builtin>.property"
    ],
    "sympy.functions.elementary.exponential.exp_polar": [],
    "sympy.functions.elementary.exponential.ExpMeta": [],
    "sympy.functions.elementary.exponential.exp": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.exponential.log": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.exponential.LambertW": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.trigonometric": [
        "sympy.core.singleton",
        "sympy.functions.elementary.trigonometric.InverseTrigonometricFunction",
        "sympy.functions.elementary.integers",
        "sympy.functions.elementary.trigonometric.cos",
        "sympy.functions.elementary.trigonometric.sinc",
        "sympy.functions.elementary.trigonometric.acsc",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.elementary._trigonometric_special",
        "sympy.polys.specialpolys",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.functions.elementary.trigonometric.TrigonometricFunction",
        "sympy.functions.combinatorial.factorials",
        "sympy.ntheory",
        "sympy.core.cache",
        "sympy.functions.elementary.exponential",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.functions.elementary.trigonometric.cot",
        "sympy.functions.elementary.trigonometric.tan",
        "sympy.functions.elementary.trigonometric.asin",
        "sympy.core.mod",
        "sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction",
        "sympy.functions.elementary.trigonometric.csc",
        "sympy.core.add",
        "sympy.functions.elementary.trigonometric.atan2",
        "sympy.functions.elementary.trigonometric.atan",
        "sympy.core.sympify",
        "sympy.core.relational",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.logic.boolalg",
        "sympy.utilities.iterables",
        "sympy.functions.combinatorial.numbers",
        "sympy.functions.elementary.trigonometric.acot",
        "sympy.functions.elementary.trigonometric.sec",
        "sympy.functions.elementary.trigonometric.acos",
        "sympy.functions.elementary.complexes",
        "sympy.functions.elementary.trigonometric.sin",
        "sympy.functions.elementary.trigonometric.asec",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.combinatorial.numbers": [
        "sympy.functions.combinatorial.numbers.harmonic",
        "sympy.functions.combinatorial.numbers.kronecker_symbol",
        "sympy.functions.combinatorial.numbers.partition",
        "sympy.functions.combinatorial.numbers.andre",
        "sympy.core.cache.__cacheit_debug.func_wrapper",
        "sympy.ntheory.primetest",
        "sympy.functions.combinatorial.numbers._MultisetHistogram",
        "sympy.utilities.memoization",
        "sympy.functions.combinatorial.numbers.tribonacci",
        "sympy.functions.combinatorial.numbers.catalan",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.functions.combinatorial.factorials",
        "sympy.functions.combinatorial.numbers.fibonacci",
        "sympy.functions.combinatorial.numbers.divisor_sigma",
        "sympy.core.cache",
        "sympy.functions.combinatorial.numbers.reduced_totient",
        "<builtin>.slice",
        "sympy.core.mul",
        "sympy.polys.polytools",
        "sympy.functions.elementary.exponential",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.functions.combinatorial.numbers.udivisor_sigma",
        "sympy.functions.combinatorial.numbers.primepi",
        "sympy.functions.combinatorial.numbers.primenu",
        "sympy.functions.combinatorial.numbers.lucas",
        "sympy.functions.combinatorial.numbers.euler",
        "sympy.functions.combinatorial.numbers.legendre_symbol",
        "sympy.functions.combinatorial.numbers.primeomega",
        "sympy.functions.combinatorial.numbers.jacobi_symbol",
        "sympy.functions.combinatorial.numbers.motzkin",
        "sympy.functions.combinatorial.numbers.carmichael",
        "sympy.ntheory.partitions_",
        "sympy.core.relational",
        "sympy.functions.combinatorial.numbers.mobius",
        "sympy.functions.combinatorial.numbers.bernoulli",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.utilities.iterables",
        "sympy.functions.elementary.piecewise",
        "sympy.polys.appellseqs",
        "sympy.ntheory.generate",
        "sympy.functions.combinatorial.numbers.totient",
        "mpmath.libmp",
        "sympy.external.gmpy",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.utilities.exceptions",
        "sympy.ntheory.factor_",
        "sympy.functions.combinatorial.numbers.genocchi",
        "sympy.utilities.enumerative",
        "mpmath",
        "sympy.functions.combinatorial.numbers.bell"
    ],
    "sympy.polys.appellseqs": [
        "sympy.polys.polytools",
        "sympy.polys.densearith",
        "sympy.utilities.decorator.public",
        "sympy.utilities",
        "sympy.polys.domains",
        "sympy.polys.densetools"
    ],
    "sympy.functions.combinatorial.numbers.carmichael": [
        "<builtin>.staticmethod"
    ],
    "sympy.functions.combinatorial.numbers.fibonacci": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "sympy.utilities.memoization.recurrence_memo.decorator",
        "sympy.utilities.memoization.recurrence_memo"
    ],
    "sympy.functions.combinatorial.numbers.lucas": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.tribonacci": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "sympy.utilities.memoization.recurrence_memo.decorator",
        "sympy.utilities.memoization.recurrence_memo"
    ],
    "sympy.functions.combinatorial.numbers.bernoulli": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.functions.combinatorial.numbers.bell": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "sympy.utilities.memoization.recurrence_memo.decorator",
        "sympy.utilities.memoization.recurrence_memo"
    ],
    "sympy.functions.combinatorial.numbers.harmonic": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.euler": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.catalan": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.genocchi": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.andre": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.partition": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.divisor_sigma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.udivisor_sigma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.legendre_symbol": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.jacobi_symbol": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.kronecker_symbol": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.mobius": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.primenu": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.primeomega": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.totient": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.reduced_totient": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers.primepi": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.combinatorial.numbers._MultisetHistogram": [],
    "<builtin>.slice": [],
    "sympy.functions.combinatorial.numbers.motzkin": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod",
        "sympy.utilities.memoization.recurrence_memo.decorator",
        "sympy.utilities.memoization.recurrence_memo"
    ],
    "sympy.functions.elementary.integers": [
        "sympy.multipledispatch.core.dispatch._",
        "sympy.functions.elementary.complexes",
        "sympy.core.evalf",
        "sympy.functions.elementary.integers.frac",
        "sympy.core.sympify",
        "sympy.multipledispatch",
        "sympy.core.logic",
        "sympy.multipledispatch.core.dispatch",
        "sympy.core.expr",
        "sympy.core",
        "sympy.core.relational",
        "sympy.functions.elementary.integers.floor",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.basic",
        "sympy.functions.elementary.integers.RoundFunction",
        "sympy.functions.elementary.integers.ceiling"
    ],
    "sympy.functions.elementary.integers.RoundFunction": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.integers.floor": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.integers.ceiling": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.integers.frac": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary._trigonometric_special": [
        "sympy.core.cache",
        "sympy.core.singleton",
        "sympy.core.expr",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.intfunc",
        "sympy.core.numbers",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.TrigonometricFunction": [],
    "sympy.functions.elementary.trigonometric.sin": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.cos": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.tan": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.cot": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.trigonometric.sec": [
        "sympy.core.cache.__cacheit_nocache",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.csc": [
        "sympy.core.cache.__cacheit_nocache",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.sinc": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.trigonometric.InverseTrigonometricFunction": [
        "sympy.core.cache.__cacheit_nocache",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.asin": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.acos": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.atan": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.acot": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.asec": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.acsc": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.trigonometric.atan2": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.orthopolys": [
        "sympy.polys.polytools",
        "sympy.polys.densearith",
        "sympy.utilities",
        "sympy.core.symbol",
        "sympy.polys.domains",
        "sympy.utilities.decorator.public"
    ],
    "sympy.polys.ring_series": [
        "sympy.polys.polyerrors",
        "sympy.polys.monomials",
        "sympy.functions",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.polys.rings",
        "sympy.core.intfunc",
        "sympy.core.numbers",
        "sympy.polys.domains",
        "mpmath.libmp.libintmath"
    ],
    "sympy.functions": [
        "sympy.functions.special.gamma_functions",
        "sympy.functions.elementary.integers",
        "sympy.functions.special.polynomials",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.elementary.hyperbolic",
        "sympy.functions.special.spherical_harmonics",
        "sympy.functions.combinatorial.factorials",
        "sympy.functions.special.tensor_functions",
        "sympy.functions.special.bessel",
        "sympy.functions.special.elliptic_integrals",
        "sympy.functions.special.mathieu_functions",
        "sympy.functions.elementary.exponential",
        "sympy.functions.special.hyper",
        "sympy.functions.special.beta_functions",
        "sympy.functions.elementary.trigonometric",
        "sympy.functions.special.singularity_functions",
        "sympy.functions.special.delta_functions",
        "sympy.functions.special.error_functions",
        "sympy.functions.special.bsplines",
        "sympy.functions.elementary.piecewise",
        "sympy.functions.combinatorial.numbers",
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.zeta_functions"
    ],
    "sympy.functions.elementary.hyperbolic": [
        "sympy.functions.elementary.hyperbolic.csch",
        "sympy.functions.elementary.hyperbolic.tanh",
        "sympy.functions.elementary.hyperbolic.asinh",
        "sympy.functions.elementary.integers",
        "sympy.functions.elementary.miscellaneous",
        "sympy.polys.specialpolys",
        "sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.functions.combinatorial.factorials",
        "sympy.functions.elementary.hyperbolic.acoth",
        "sympy.functions.elementary.exponential",
        "sympy.core.logic",
        "sympy.functions.elementary.hyperbolic.sinh",
        "sympy.functions.elementary.hyperbolic.InverseHyperbolicFunction",
        "sympy.functions.elementary.hyperbolic.atanh",
        "sympy.functions.elementary.hyperbolic.asech",
        "sympy.core.add",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.sympify",
        "sympy.functions.elementary.hyperbolic.acosh",
        "sympy.functions.elementary.hyperbolic.HyperbolicFunction",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.symbol",
        "sympy.functions.combinatorial.numbers",
        "sympy.functions.elementary.complexes",
        "sympy.core",
        "sympy.functions.elementary.hyperbolic.coth",
        "sympy.functions.elementary.hyperbolic.acsch",
        "sympy.functions.elementary.hyperbolic.cosh",
        "sympy.functions.elementary.hyperbolic.sech",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.HyperbolicFunction": [],
    "sympy.functions.elementary.hyperbolic.sinh": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.cosh": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.tanh": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.coth": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.ReciprocalHyperbolicFunction": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.elementary.hyperbolic.csch": [
        "sympy.core.cache.__cacheit_nocache",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.sech": [
        "sympy.core.cache.__cacheit_nocache",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.InverseHyperbolicFunction": [],
    "sympy.functions.elementary.hyperbolic.asinh": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.acosh": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.atanh": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.acoth": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.asech": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.elementary.hyperbolic.acsch": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.special.error_functions": [
        "sympy.core.singleton",
        "sympy.functions.special.error_functions.Ei",
        "sympy.functions.special.error_functions.erf",
        "sympy.functions.elementary.integers",
        "sympy.functions.special.error_functions.erfcinv",
        "sympy.functions.special.error_functions.FresnelIntegral",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.elementary.hyperbolic",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.functions.combinatorial.factorials",
        "sympy.functions.special.error_functions.TrigonometricIntegral",
        "sympy.functions.special.error_functions.Shi",
        "sympy.core.cache",
        "sympy.functions.elementary.exponential",
        "sympy.functions.special.hyper",
        "sympy.functions.special.error_functions._erfs",
        "sympy.core.add",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.sympify",
        "sympy.functions.special.error_functions.erfinv",
        "sympy.functions.special.error_functions.Chi",
        "sympy.functions.special.error_functions.Ci",
        "sympy.functions.special.error_functions.Si",
        "sympy.functions.special.error_functions.li",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.functions.special.error_functions.fresnelc",
        "sympy.functions.special.error_functions.expint",
        "sympy.functions.special.error_functions.erf2",
        "sympy.functions.special.error_functions.erfi",
        "sympy.functions.special.error_functions.Li",
        "sympy.functions.special.error_functions._eis",
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.error_functions.erfc",
        "sympy.core",
        "sympy.core.power",
        "sympy.functions.special.error_functions.fresnels",
        "sympy.functions.special.error_functions.erf2inv"
    ],
    "sympy.functions.special.hyper": [
        "sympy.functions.special.hyper.HyperRep_power2",
        "sympy.functions.elementary.integers",
        "sympy.core.sorting",
        "sympy.functions.special.hyper.HyperRep_sqrts1",
        "sympy.functions.special.hyper.HyperRep_sqrts2",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.parameters",
        "sympy.core.mul",
        "sympy.functions.elementary.exponential",
        "sympy.core.expr",
        "sympy.functions.special.hyper.HyperRep",
        "sympy.functions.special.hyper.HyperRep_log1",
        "sympy.functions.special.hyper.appellf1",
        "sympy.functions.special.hyper.TupleParametersBase",
        "sympy.core.add",
        "sympy.functions.special.hyper.HyperRep_asin1",
        "sympy.functions.special.hyper.hyper",
        "sympy.functions",
        "sympy",
        "sympy.functions.special.hyper.HyperRep_sinasin",
        "sympy.core.relational",
        "sympy.functions.special.hyper.HyperRep_cosasin",
        "sympy.functions.special.hyper.HyperRep_asin2",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.logic.boolalg",
        "sympy.functions.special.hyper.HyperRep_atanh",
        "sympy.functions.special.hyper.TupleArg",
        "sympy.functions.special.hyper.HyperRep_power1",
        "sympy.functions.elementary.complexes",
        "sympy.external.gmpy",
        "sympy.core",
        "sympy.functions.special.hyper.meijerg",
        "sympy.functions.special.hyper.HyperRep_log2"
    ],
    "sympy.functions.special.hyper.TupleArg": [],
    "sympy.functions.special.hyper.TupleParametersBase": [],
    "sympy.functions.special.hyper.hyper": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.meijerg": [
        "<builtin>.property"
    ],
    "sympy.functions.special.hyper.HyperRep": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_power1": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_power2": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_log1": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_atanh": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_asin1": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_asin2": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_sqrts1": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_sqrts2": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_log2": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_cosasin": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.HyperRep_sinasin": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.hyper.appellf1": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.erf": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.special.error_functions.erfc": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.special.error_functions.erfi": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.special.error_functions.erf2": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.erfinv": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.erfcinv": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.erf2inv": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.Ei": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.expint": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.li": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.Li": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.TrigonometricIntegral": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.Si": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.Ci": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.Shi": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.Chi": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.FresnelIntegral": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions.fresnels": [
        "sympy.core.cache.__cacheit_nocache",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.special.error_functions.fresnelc": [
        "sympy.core.cache.__cacheit_nocache",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.special.error_functions._erfs": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.error_functions._eis": [],
    "sympy.functions.special.gamma_functions": [
        "sympy.functions.elementary.integers",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.functions.combinatorial.factorials",
        "sympy.functions.elementary.exponential",
        "sympy.core.logic",
        "sympy.core.expr",
        "mpmath.libmp.libmpf",
        "sympy.functions.special.gamma_functions.polygamma",
        "sympy.functions.elementary.trigonometric",
        "sympy.functions.special.gamma_functions.trigamma",
        "sympy.functions.special.error_functions",
        "sympy.functions.special.gamma_functions.gamma",
        "sympy.functions.special.gamma_functions.lowergamma",
        "sympy.functions.special.gamma_functions.digamma",
        "sympy.functions.combinatorial.numbers",
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.gamma_functions.multigamma",
        "sympy.functions.special.gamma_functions.uppergamma",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.power",
        "sympy.functions.special.gamma_functions.loggamma",
        "sympy.functions.special.zeta_functions",
        "mpmath"
    ],
    "sympy.functions.special.zeta_functions": [
        "sympy.core.singleton",
        "sympy.functions.special.zeta_functions.lerchphi",
        "sympy.functions.elementary.integers",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.cache",
        "sympy.polys.polytools",
        "sympy.functions.elementary.exponential",
        "sympy.functions.special.zeta_functions.polylog",
        "sympy.functions.special.zeta_functions.zeta",
        "sympy.core.add",
        "sympy.core.sympify",
        "sympy.functions.special.zeta_functions.stieltjes",
        "sympy.core.relational",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.functions.combinatorial.numbers",
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.zeta_functions.dirichlet_eta",
        "sympy.functions.special.zeta_functions.riemann_xi",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.special.zeta_functions.lerchphi": [],
    "sympy.functions.special.zeta_functions.polylog": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.zeta_functions.zeta": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.zeta_functions.dirichlet_eta": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.zeta_functions.riemann_xi": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.zeta_functions.stieltjes": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.gamma_functions.gamma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.gamma_functions.lowergamma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.gamma_functions.uppergamma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.gamma_functions.polygamma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.gamma_functions.loggamma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.gamma_functions.digamma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.gamma_functions.trigamma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.gamma_functions.multigamma": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.tensor_functions": [
        "sympy.core.logic",
        "sympy.external.gmpy",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.core.relational",
        "sympy.utilities.iterables",
        "sympy.functions.special.tensor_functions.LeviCivita",
        "sympy.core.function",
        "sympy.functions.elementary.piecewise",
        "sympy.functions.combinatorial.factorials",
        "sympy.functions.special.tensor_functions.KroneckerDelta"
    ],
    "sympy.functions.special.tensor_functions.LeviCivita": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.tensor_functions.KroneckerDelta": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.singularity_functions": [
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.delta_functions",
        "sympy.core.logic",
        "sympy.functions.special.singularity_functions.SingularityFunction",
        "sympy.core",
        "sympy.core.relational",
        "sympy.core.function",
        "sympy.functions.elementary.piecewise"
    ],
    "sympy.functions.special.delta_functions": [
        "sympy.polys.polyroots",
        "sympy.polys.polyerrors",
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.delta_functions.DiracDelta",
        "sympy.core.logic",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.functions.special.delta_functions.Heaviside",
        "sympy.core.relational",
        "sympy.core.function",
        "sympy.functions.elementary.piecewise"
    ],
    "sympy.polys.polyroots": [
        "sympy.core.sorting",
        "sympy.functions.elementary.miscellaneous",
        "sympy.polys.specialpolys",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.ntheory",
        "sympy.core.mul",
        "sympy.polys.polytools",
        "sympy.core.logic",
        "sympy.polys.polyquinticconst",
        "sympy.polys.domains",
        "sympy.utilities.decorator.public",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.polys.rationaltools",
        "sympy.core.exprtools",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.power",
        "sympy.core.intfunc"
    ],
    "sympy.polys.polyquinticconst": [
        "sympy.polys.polytools",
        "sympy.core.evalf",
        "sympy.functions",
        "sympy.core",
        "sympy.utilities",
        "sympy.polys.polyquinticconst.PolyQuintic",
        "sympy.core.numbers"
    ],
    "sympy.polys.polyquinticconst.PolyQuintic": [
        "<builtin>.property"
    ],
    "sympy.functions.special.delta_functions.DiracDelta": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.delta_functions.Heaviside": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.singularity_functions.SingularityFunction": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.bsplines": [
        "sympy.core.sympify",
        "sympy.functions",
        "functools.lru_cache",
        "sympy.core.symbol",
        "sympy.core",
        "sympy.logic.boolalg",
        "sympy.sets.sets"
    ],
    "sympy.sets.sets": [
        "sympy.core.singleton",
        "sympy.sets.sets.Intersection",
        "sympy.core.sorting",
        "sympy.functions.elementary.miscellaneous",
        "sympy.sets.sets.SetKind",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.parameters",
        "sympy.core.operations",
        "sympy.sets.sets.FiniteSet",
        "sympy.sets.sets.EmptySet",
        "sympy.core.kind",
        "sympy.functions.elementary.exponential",
        "sympy.core.logic",
        "sympy.core.expr",
        "mpmath.libmp.libmpf",
        "sympy.sets.sets.Set",
        "sympy.core.basic",
        "sympy.sets.sets.ProductSet",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.sets.sets.SymmetricDifference",
        "sympy.utilities.decorator",
        "sympy.sets.sets.DisjointUnion",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.utilities.iterables",
        "sympy.sets.sets.Complement",
        "sympy.sets.sets.Union",
        "sympy.utilities.misc",
        "sympy.utilities.exceptions",
        "sympy.core.decorators",
        "collections.defaultdict",
        "sympy.sets.sets.Interval",
        "sympy.sets.sets.UniversalSet",
        "mpmath"
    ],
    "sympy.sets.sets.Set": [
        "sympy.core.decorators.sympify_return.wrapper",
        "sympy.utilities.decorator.deprecated",
        "sympy.utilities.decorator.deprecated.deprecated_decorator",
        "<builtin>.property",
        "sympy.core.decorators.sympify_return",
        "<builtin>.staticmethod"
    ],
    "sympy.sets.sets.ProductSet": [
        "<builtin>.property"
    ],
    "sympy.sets.sets.Interval": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.sets.sets.Union": [
        "<builtin>.property"
    ],
    "sympy.sets.sets.Intersection": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.sets.sets.Complement": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.sets.sets.EmptySet": [
        "sympy.utilities.decorator.deprecated",
        "sympy.utilities.decorator.deprecated.deprecated_decorator",
        "<builtin>.property"
    ],
    "sympy.sets.sets.UniversalSet": [
        "<builtin>.property"
    ],
    "sympy.sets.sets.FiniteSet": [
        "<builtin>.property"
    ],
    "sympy.sets.sets.SymmetricDifference": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.sets.sets.DisjointUnion": [
        "<builtin>.property"
    ],
    "sympy.sets.sets.SetKind": [],
    "sympy.functions.special.bessel": [
        "sympy.functions.special.bessel.hankel1",
        "sympy.functions.special.gamma_functions",
        "sympy.functions.elementary.integers",
        "sympy.functions.special.bessel.SphericalBesselBase",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.special.bessel.besselk",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.functions.special.bessel.airybi",
        "sympy.functions.combinatorial.factorials",
        "sympy.core.cache",
        "sympy.functions.elementary.exponential",
        "sympy.core.logic",
        "sympy.functions.special.bessel.marcumq",
        "sympy.core.expr",
        "sympy.functions.special.hyper",
        "sympy.functions.special.bessel.jn",
        "sympy.core.add",
        "sympy.functions.special.bessel.hankel2",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.sympify",
        "sympy.functions.special.bessel.besselj",
        "sympy.functions.special.bessel.bessely",
        "sympy.functions.special.bessel.airybiprime",
        "sympy.functions.special.bessel.AiryBase",
        "sympy.functions.special.bessel.SphericalHankelBase",
        "sympy.polys.orthopolys",
        "sympy.functions.special.bessel.BesselBase",
        "sympy.functions.special.bessel.hn1",
        "sympy.core.symbol",
        "sympy.functions.special.bessel.yn",
        "sympy.functions.elementary.complexes",
        "sympy.core",
        "sympy.core.power",
        "sympy.functions.special.bessel.airyai",
        "sympy.functions.special.bessel.besseli",
        "sympy.functions.special.bessel.airyaiprime",
        "sympy.functions.special.bessel.hn2",
        "mpmath"
    ],
    "sympy.functions.special.bessel.BesselBase": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.bessel.besselj": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.bessel.bessely": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.bessel.besseli": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.bessel.besselk": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.bessel.hankel1": [],
    "sympy.functions.special.bessel.hankel2": [],
    "sympy.functions.special.bessel.SphericalBesselBase": [],
    "sympy.functions.special.bessel.jn": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.bessel.yn": [
        "sympy.functions.special.bessel.assume_integer_order"
    ],
    "sympy.functions.special.bessel.assume_integer_order": [
        "functools.wraps"
    ],
    "sympy.functions.special.bessel.SphericalHankelBase": [
        "sympy.functions.special.bessel.assume_integer_order"
    ],
    "sympy.functions.special.bessel.hn1": [
        "sympy.functions.special.bessel.assume_integer_order"
    ],
    "sympy.functions.special.bessel.hn2": [
        "sympy.functions.special.bessel.assume_integer_order"
    ],
    "sympy.functions.special.bessel.AiryBase": [],
    "sympy.functions.special.bessel.airyai": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.special.bessel.airybi": [
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.functions.special.bessel.airyaiprime": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.bessel.airybiprime": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.bessel.marcumq": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.polynomials": [
        "sympy.functions.special.polynomials.hermite_prob",
        "sympy.core.singleton",
        "sympy.functions.special.gamma_functions",
        "sympy.functions.elementary.integers",
        "sympy.functions.special.polynomials.assoc_laguerre",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.special.polynomials.chebyshevu",
        "sympy.core.function",
        "sympy.functions.special.polynomials.gegenbauer",
        "sympy.functions.combinatorial.factorials",
        "sympy.functions.special.polynomials.chebyshevt_root",
        "sympy.functions.elementary.exponential",
        "sympy.functions.special.hyper",
        "sympy.functions.special.polynomials.assoc_legendre",
        "sympy.functions.special.polynomials.laguerre",
        "sympy.functions.special.polynomials.OrthogonalPolynomial",
        "sympy.functions.special.polynomials.chebyshevu_root",
        "sympy.functions.elementary.trigonometric",
        "sympy.polys.orthopolys",
        "sympy.functions.special.polynomials.hermite",
        "sympy.core.symbol",
        "sympy.functions.special.polynomials.chebyshevt",
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.polynomials.legendre",
        "sympy.core",
        "sympy.functions.special.polynomials.jacobi"
    ],
    "sympy.functions.special.polynomials.OrthogonalPolynomial": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.polynomials.jacobi": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.polynomials.gegenbauer": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.polynomials.chebyshevt": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.functions.special.polynomials.chebyshevu": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.functions.special.polynomials.chebyshevt_root": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.polynomials.chebyshevu_root": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.polynomials.legendre": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.functions.special.polynomials.assoc_legendre": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.polynomials.hermite": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.functions.special.polynomials.hermite_prob": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.functions.special.polynomials.laguerre": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.functions.special.polynomials.assoc_laguerre": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.spherical_harmonics": [
        "sympy.functions.elementary.trigonometric",
        "sympy.core.singleton",
        "sympy.functions.elementary.complexes",
        "sympy.core.function",
        "sympy.functions.elementary.exponential",
        "sympy.functions.special.spherical_harmonics.Ynm",
        "sympy.functions",
        "sympy.core.expr",
        "sympy.functions.special.spherical_harmonics.Znm",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.functions.combinatorial.factorials"
    ],
    "sympy.functions.special.spherical_harmonics.Ynm": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.spherical_harmonics.Znm": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.elliptic_integrals": [
        "sympy.functions.elementary.trigonometric",
        "sympy.functions.special.elliptic_integrals.elliptic_pi",
        "sympy.functions.elementary.complexes",
        "sympy.core.function",
        "sympy.functions.special.gamma_functions",
        "sympy.core",
        "sympy.functions.special.hyper",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.elementary.hyperbolic",
        "sympy.core.symbol",
        "sympy.functions.special.elliptic_integrals.elliptic_e",
        "sympy.functions.special.elliptic_integrals.elliptic_k",
        "sympy.functions.special.elliptic_integrals.elliptic_f"
    ],
    "sympy.functions.special.elliptic_integrals.elliptic_k": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.elliptic_integrals.elliptic_f": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.elliptic_integrals.elliptic_e": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.elliptic_integrals.elliptic_pi": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.beta_functions": [
        "sympy.functions.special.beta_functions.betainc_regularized",
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.gamma_functions",
        "sympy.core.function",
        "sympy.functions.special.beta_functions.betainc",
        "sympy.functions.special.beta_functions.beta",
        "sympy.core",
        "sympy.core.symbol",
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.functions.special.beta_functions.beta": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.beta_functions.betainc": [],
    "sympy.functions.special.beta_functions.betainc_regularized": [],
    "sympy.functions.special.mathieu_functions": [
        "sympy.functions.elementary.trigonometric",
        "sympy.functions.special.mathieu_functions.mathieuc",
        "sympy.functions.special.mathieu_functions.MathieuBase",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.special.mathieu_functions.mathieucprime",
        "sympy.core.function",
        "sympy.functions.special.mathieu_functions.mathieus",
        "sympy.functions.special.mathieu_functions.mathieusprime"
    ],
    "sympy.functions.special.mathieu_functions.MathieuBase": [],
    "sympy.functions.special.mathieu_functions.mathieus": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.mathieu_functions.mathieuc": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.mathieu_functions.mathieusprime": [
        "<builtin>.classmethod"
    ],
    "sympy.functions.special.mathieu_functions.mathieucprime": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.rootoftools": [
        "sympy.polys.polyroots",
        "sympy.multipledispatch.core.dispatch",
        "sympy.polys.polyfuncs",
        "sympy.core.sorting",
        "sympy.polys.rootoftools.RootSum",
        "sympy.core.cache",
        "sympy.multipledispatch.core.dispatch._",
        "sympy.polys.polytools",
        "sympy.polys.rootoftools.ComplexRootOf",
        "sympy.multipledispatch",
        "mpmath.libmp.libmpf",
        "sympy.utilities.lambdify",
        "sympy.polys.rootoftools._pure_key_dict",
        "sympy.polys.domains",
        "sympy.core.basic",
        "sympy.utilities.decorator.public",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.polys.rootoftools._pure_key_dict.__init__",
        "sympy.polys.rationaltools",
        "sympy.polys.rootoftools.RootOf",
        "sympy.core",
        "sympy.polys.rootisolation",
        "mpmath"
    ],
    "sympy.polys.rootoftools._pure_key_dict": [],
    "sympy.polys.rootoftools._pure_key_dict.__init__": [],
    "sympy.polys.rootoftools.RootOf": [],
    "sympy.polys.rootoftools.ComplexRootOf": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.polys.rootoftools.RootSum": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.numberfields": [
        "sympy.polys.numberfields.galoisgroups",
        "sympy.polys.numberfields.basis",
        "sympy.polys.numberfields.subfield",
        "sympy.polys.numberfields.minpoly",
        "sympy.polys.numberfields.utilities",
        "sympy.polys.numberfields.primes"
    ],
    "sympy.polys.numberfields.subfield": [
        "sympy.core.singleton",
        "sympy.polys.polyerrors",
        "sympy.polys.densetools",
        "sympy.polys.polytools",
        "sympy.core.sympify",
        "sympy.polys.numberfields.minpoly",
        "sympy.utilities.decorator.public",
        "sympy.polys.domains",
        "sympy.utilities",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.ntheory",
        "sympy.core.add",
        "mpmath"
    ],
    "sympy.polys.numberfields.utilities": [
        "sympy.core.sympify",
        "sympy.polys.numberfields.minpoly",
        "sympy.utilities.decorator",
        "sympy.polys.numberfields.utilities.AlgIntPowers",
        "sympy.printing.lambdarepr",
        "sympy.polys.domains.rationalfield",
        "sympy.ntheory.factor_",
        "sympy.polys.matrices.exceptions",
        "sympy.utilities.lambdify",
        "sympy.polys.domains.integerring",
        "sympy.utilities.decorator.public",
        "mpmath"
    ],
    "sympy.polys.matrices.exceptions": [
        "sympy.polys.matrices.exceptions.DMValueError",
        "sympy.polys.matrices.exceptions.DMError",
        "sympy.polys.matrices.exceptions.DMBadInputError",
        "sympy.polys.matrices.exceptions.DMNonInvertibleMatrixError",
        "sympy.polys.matrices.exceptions.DMRankError",
        "sympy.polys.matrices.exceptions.DMNotAField",
        "sympy.polys.matrices.exceptions.DMDomainError",
        "sympy.polys.matrices.exceptions.DMNonSquareMatrixError",
        "sympy.polys.matrices.exceptions.DMShapeError",
        "sympy.polys.matrices.exceptions.DMFormatError"
    ],
    "sympy.polys.matrices.exceptions.DMError": [],
    "sympy.polys.matrices.exceptions.DMBadInputError": [],
    "sympy.polys.matrices.exceptions.DMDomainError": [],
    "sympy.polys.matrices.exceptions.DMNotAField": [],
    "sympy.polys.matrices.exceptions.DMFormatError": [],
    "sympy.polys.matrices.exceptions.DMNonInvertibleMatrixError": [],
    "sympy.polys.matrices.exceptions.DMRankError": [],
    "sympy.polys.matrices.exceptions.DMShapeError": [],
    "sympy.polys.matrices.exceptions.DMNonSquareMatrixError": [],
    "sympy.polys.matrices.exceptions.DMValueError": [],
    "sympy.printing.lambdarepr": [
        "sympy.printing.pycode",
        "<builtin>.setattr",
        "sympy.printing.lambdarepr.LambdaPrinter",
        "sympy.core.sorting",
        "sympy.printing.lambdarepr.IntervalPrinter",
        "sympy.printing.numpy",
        "sympy.printing.lambdarepr.NumExprPrinter"
    ],
    "sympy.printing.pycode": [
        "<builtin>.dict",
        "sympy.printing.pycode.AbstractPythonCodePrinter",
        "<builtin>.setattr",
        "sympy.printing.pycode.MpmathPrinter",
        "sympy.printing.pycode.ArrayPrinter",
        "sympy.printing.codeprinter",
        "sympy.core",
        "sympy.printing.pycode.PythonCodePrinter",
        "sympy.printing.pycode.SymPyPrinter",
        "sympy.core.mod",
        "sympy.printing.precedence",
        "<map>.items"
    ],
    "sympy.printing.precedence": [
        "<map>.copy"
    ],
    "sympy.printing.codeprinter": [
        "sympy.core.mul",
        "sympy.functions.elementary.complexes",
        "sympy.core.sympify",
        "sympy.printing.codeprinter.requires",
        "sympy.core.expr",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.core.symbol",
        "sympy.printing.str",
        "sympy.printing.codeprinter.AssignmentError",
        "sympy.printing.codeprinter.CodePrinter",
        "sympy.core.function",
        "sympy.printing.precedence",
        "sympy.core.basic",
        "sympy.printing.codeprinter.PrintMethodNotImplementedError"
    ],
    "sympy.printing.str": [
        "sympy.printing.printer",
        "sympy.core.mul",
        "mpmath.libmp",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.printing.printer.print_function",
        "sympy.printing.str.StrPrinter",
        "sympy.core.relational",
        "sympy.printing.str.StrReprPrinter",
        "sympy.utilities.iterables",
        "sympy.core.numbers",
        "sympy.printing.printer.print_function.decorator",
        "sympy.printing.precedence"
    ],
    "sympy.printing.printer": [
        "sympy.printing.printer._PrintFunction",
        "sympy.core.function",
        "sympy.core.add",
        "sympy.core.basic",
        "sympy.printing.printer.Printer",
        "contextlib.contextmanager"
    ],
    "sympy.printing.printer.Printer": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.printing.printer._PrintFunction": [
        "<builtin>.property"
    ],
    "sympy.printing.str.StrPrinter": [],
    "sympy.printing.printer.print_function": [],
    "sympy.printing.printer.print_function.decorator": [
        "sympy.printing.printer._PrintFunction.__init__",
        "<builtin>.type"
    ],
    "sympy.printing.printer._PrintFunction.__init__": [
        "<builtin>.list",
        "functools.update_wrapper"
    ],
    "sympy.printing.str.StrReprPrinter": [],
    "sympy.printing.codeprinter.requires": [],
    "sympy.printing.codeprinter.AssignmentError": [],
    "sympy.printing.codeprinter.PrintMethodNotImplementedError": [],
    "sympy.printing.codeprinter.CodePrinter": [],
    "sympy.printing.pycode.AbstractPythonCodePrinter": [
        "<builtin>.dict",
        "<map>.items",
        "itertools.chain"
    ],
    "itertools.chain": [],
    "sympy.printing.pycode.ArrayPrinter": [],
    "sympy.printing.pycode.PythonCodePrinter": [],
    "sympy.printing.pycode.MpmathPrinter": [
        "<builtin>.dict",
        "<map>.items",
        "itertools.chain"
    ],
    "sympy.printing.pycode.SymPyPrinter": [
        "<builtin>.dict"
    ],
    "sympy.printing.numpy": [
        "sympy.printing.pycode",
        "<builtin>.setattr",
        "sympy.printing.numpy.JaxPrinter",
        "sympy.printing.codeprinter",
        "sympy.core",
        "sympy.core.power",
        "sympy.printing.numpy.CuPyPrinter",
        "sympy.printing.numpy.NumPyPrinter",
        "sympy.core.function",
        "<builtin>.dict",
        "sympy.printing.numpy.SciPyPrinter",
        "<map>.items"
    ],
    "sympy.printing.numpy.NumPyPrinter": [],
    "sympy.printing.numpy.SciPyPrinter": [],
    "sympy.printing.numpy.CuPyPrinter": [],
    "sympy.printing.numpy.JaxPrinter": [],
    "sympy.printing.lambdarepr.LambdaPrinter": [],
    "sympy.printing.lambdarepr.NumExprPrinter": [],
    "sympy.printing.lambdarepr.IntervalPrinter": [],
    "sympy.polys.numberfields.utilities.AlgIntPowers": [],
    "sympy.polys.numberfields.basis": [
        "sympy.polys.polytools",
        "sympy.utilities.decorator",
        "sympy.polys.domains.algebraicfield",
        "sympy.polys.numberfields.modules",
        "sympy.polys.domains.rationalfield",
        "sympy.polys.numberfields.utilities",
        "sympy.polys.domains.integerring",
        "sympy.utilities.decorator.public"
    ],
    "sympy.polys.numberfields.modules": [
        "sympy.polys.domains.rationalfield",
        "sympy.polys.domains.integerring",
        "sympy.polys.polytools",
        "sympy.polys.polyutils",
        "sympy.polys.matrices.domainmatrix",
        "sympy.polys.polyclasses",
        "sympy.polys.domains.algebraicfield",
        "sympy.polys.numberfields.modules.PowerBasis",
        "sympy.polys.numberfields.utilities",
        "sympy.polys.numberfields.modules.ModuleHomomorphism",
        "sympy.polys.matrices.normalforms",
        "sympy.polys.numberfields.modules.InnerEndomorphism",
        "sympy.polys.polyerrors",
        "sympy.polys.numberfields.modules.ModuleElement",
        "sympy.polys.numberfields.exceptions",
        "sympy.core.symbol",
        "sympy.polys.numberfields.modules.ModuleEndomorphism",
        "sympy.polys.densetools",
        "sympy.polys.numberfields.modules.PowerBasisElement",
        "sympy.polys.domains.finitefield",
        "sympy.polys.numberfields.modules.Submodule",
        "sympy.polys.matrices.exceptions",
        "sympy.polys.numberfields.modules.EndomorphismRing",
        "sympy.polys.numberfields.modules.Module",
        "sympy.core.intfunc"
    ],
    "sympy.polys.matrices.domainmatrix": [
        "sympy.polys.polyutils",
        "sympy.polys.densebasic",
        "sympy.core.sympify",
        "sympy.polys.factortools",
        "sympy.external.gmpy",
        "sympy.polys.densearith",
        "sympy.utilities.decorator",
        "sympy.polys.matrices.dfm",
        "sympy.polys.matrices.exceptions",
        "sympy.polys.matrices.sdm",
        "sympy.polys.matrices.ddm",
        "sympy.polys.matrices.domainscalar",
        "sympy.polys.matrices.rref",
        "sympy.polys.constructor",
        "sympy.polys.matrices.domainmatrix.DomainMatrix",
        "sympy.polys.domains",
        "sympy.polys.densetools"
    ],
    "sympy.polys.matrices.domainscalar": [
        "sympy.polys.domains",
        "sympy.polys.matrices.domainscalar.DomainScalar",
        "sympy.polys.constructor"
    ],
    "sympy.polys.matrices.domainscalar.DomainScalar": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.matrices.ddm": [
        "sympy.polys.matrices.lll",
        "sympy.polys.matrices.dfm",
        "sympy.external.gmpy",
        "sympy.polys.matrices.dense",
        "sympy.utilities.decorator",
        "sympy.polys.matrices.ddm.DDM",
        "sympy.polys.matrices.exceptions",
        "sympy.polys.matrices.sdm",
        "sympy.polys.domains"
    ],
    "sympy.polys.matrices.dense": [
        "sympy.polys.matrices.exceptions",
        "sympy.polys.matrices._typing",
        "typing.TypeVar"
    ],
    "sympy.polys.matrices._typing": [
        "typing.TypeVar",
        "sympy.polys.matrices._typing.RingElement"
    ],
    "sympy.polys.matrices._typing.RingElement": [],
    "sympy.polys.matrices.lll": [
        "sympy.polys.domains.rationalfield.RationalField.__init__",
        "sympy.polys.matrices.exceptions",
        "sympy.polys.domains"
    ],
    "sympy.polys.matrices.ddm.DDM": [
        "sympy.polys.domains.rationalfield.RationalField.__init__",
        "<builtin>.classmethod",
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.utilities.decorator.doctest_depends_on"
    ],
    "sympy.polys.matrices.sdm": [
        "sympy.external.gmpy",
        "sympy.utilities.decorator",
        "sympy.polys.matrices.sdm.SDM",
        "sympy.polys.matrices.exceptions",
        "sympy.polys.matrices.ddm",
        "sympy.utilities.iterables",
        "sympy.polys.domains"
    ],
    "sympy.polys.matrices.sdm.SDM": [
        "sympy.polys.domains.rationalfield.RationalField.__init__",
        "<builtin>.classmethod",
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.utilities.decorator.doctest_depends_on"
    ],
    "sympy.polys.matrices.dfm": [
        "sympy.external.gmpy",
        "sympy.polys.matrices.dfm.DFM_dummy",
        "sympy.polys.matrices._dfm"
    ],
    "sympy.polys.matrices.dfm.DFM_dummy": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.matrices._dfm": [
        "sympy.external.importtools",
        "sympy.external.gmpy",
        "sympy.utilities.decorator",
        "sympy.polys.matrices.exceptions",
        "sympy.polys.matrices._dfm.DFM",
        "sympy.polys.matrices.ddm",
        "sympy.external.importtools.import_module",
        "sympy.polys.domains"
    ],
    "sympy.polys.matrices._dfm.DFM": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.utilities.decorator.doctest_depends_on"
    ],
    "sympy.polys.matrices.rref": [
        "sympy.polys.matrices.sdm",
        "sympy.polys.matrices.dense",
        "sympy.polys.domains",
        "sympy.polys.matrices.ddm"
    ],
    "sympy.polys.matrices.domainmatrix.DomainMatrix": [
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.utilities.decorator.doctest_depends_on",
        "sympy.polys.domains.rationalfield.RationalField.__init__",
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.matrices.normalforms": [
        "sympy.polys.matrices.exceptions",
        "sympy.ntheory.modular",
        "sympy.polys.domains",
        "sympy.polys.matrices.domainmatrix"
    ],
    "sympy.polys.numberfields.exceptions": [
        "sympy.polys.numberfields.exceptions.MissingUnityError",
        "sympy.polys.numberfields.exceptions.ClosureFailure",
        "sympy.polys.numberfields.exceptions.StructureError"
    ],
    "sympy.polys.numberfields.exceptions.ClosureFailure": [],
    "sympy.polys.numberfields.exceptions.StructureError": [],
    "sympy.polys.numberfields.exceptions.MissingUnityError": [],
    "sympy.polys.numberfields.modules.Module": [
        "<builtin>.property"
    ],
    "sympy.polys.numberfields.modules.PowerBasis": [
        "<builtin>.property"
    ],
    "sympy.polys.numberfields.modules.Submodule": [
        "<builtin>.property"
    ],
    "sympy.polys.numberfields.modules.ModuleElement": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.polys.numberfields.modules.PowerBasisElement": [
        "<builtin>.property"
    ],
    "sympy.polys.numberfields.modules.ModuleHomomorphism": [],
    "sympy.polys.numberfields.modules.ModuleEndomorphism": [],
    "sympy.polys.numberfields.modules.InnerEndomorphism": [],
    "sympy.polys.numberfields.modules.EndomorphismRing": [],
    "sympy.polys.numberfields.primes": [
        "sympy.polys.polyerrors",
        "sympy.polys.polytools",
        "sympy.polys.polyutils",
        "sympy.polys.matrices.domainmatrix",
        "sympy.polys.numberfields.basis",
        "sympy.polys.numberfields.primes.PrimeIdeal",
        "sympy.utilities.decorator",
        "sympy.polys.domains.finitefield",
        "sympy.polys.numberfields.modules",
        "sympy.polys.domains.rationalfield",
        "sympy.polys.numberfields.utilities",
        "sympy.polys.numberfields.exceptions",
        "sympy.polys.domains.integerring",
        "sympy.utilities.decorator.public"
    ],
    "sympy.polys.numberfields.primes.PrimeIdeal": [
        "<builtin>.property"
    ],
    "sympy.polys.numberfields.galoisgroups": [
        "sympy.polys.polytools",
        "sympy.polys.densebasic",
        "sympy.polys.factortools",
        "sympy.polys.euclidtools",
        "sympy.polys.sqfreetools",
        "sympy.polys.numberfields.galois_resolvents",
        "sympy.polys.numberfields.galoisgroups.MaxTriesException",
        "sympy.utilities.decorator.public",
        "sympy.ntheory.primetest",
        "sympy.utilities",
        "sympy.polys.numberfields.utilities",
        "sympy.core.symbol",
        "sympy.polys.domains",
        "sympy.polys.densetools"
    ],
    "sympy.polys.numberfields.galois_resolvents": [
        "sympy.polys.polyroots",
        "sympy.polys.numberfields.galois_resolvents.GaloisGroupException",
        "sympy.polys.polytools",
        "sympy.core.evalf",
        "sympy.polys.orderings",
        "mpmath.libmp.libmpf",
        "sympy.polys.rings",
        "sympy.polys.numberfields.galois_resolvents.ResolventException",
        "sympy.polys.specialpolys",
        "sympy.polys.numberfields.galois_resolvents.Resolvent",
        "sympy.utilities.lambdify",
        "sympy.core.symbol",
        "sympy.polys.domains",
        "sympy.polys.densetools",
        "mpmath"
    ],
    "sympy.polys.numberfields.galois_resolvents.GaloisGroupException": [],
    "sympy.polys.numberfields.galois_resolvents.ResolventException": [],
    "sympy.polys.numberfields.galois_resolvents.Resolvent": [
        "<builtin>.staticmethod"
    ],
    "sympy.polys.numberfields.galoisgroups.MaxTriesException": [],
    "sympy.polys.partfrac": [
        "sympy.polys.polyerrors",
        "sympy.polys.polytools",
        "sympy.polys",
        "sympy.core.sympify",
        "sympy.utilities.decorator.public",
        "sympy.core",
        "sympy.utilities.decorator.xthreaded",
        "sympy.utilities",
        "sympy.polys.polyoptions",
        "sympy.core.traversal"
    ],
    "sympy.utilities.decorator.xthreaded": [
        "sympy.utilities.decorator.threaded_factory"
    ],
    "sympy.utilities.decorator.threaded_factory": [
        "sympy.matrices",
        "functools.wraps",
        "sympy.core.sympify",
        "sympy.utilities.iterables"
    ],
    "sympy.matrices": [
        "sympy.matrices.sparse",
        "sympy.matrices.matrixbase",
        "sympy.matrices.utilities",
        "sympy.matrices.immutable",
        "sympy.matrices.dense",
        "sympy.matrices.expressions",
        "sympy.matrices.kind",
        "sympy.matrices.exceptions",
        "sympy.matrices.sparsetools",
        "sympy.matrices.expressions.trace"
    ],
    "sympy.matrices.exceptions": [
        "sympy.matrices.exceptions.NonSquareMatrixError",
        "sympy.matrices.exceptions.NonPositiveDefiniteMatrixError",
        "sympy.matrices.exceptions.ShapeError",
        "sympy.matrices.exceptions.NonInvertibleMatrixError",
        "sympy.matrices.exceptions.MatrixError"
    ],
    "sympy.matrices.exceptions.MatrixError": [],
    "sympy.matrices.exceptions.ShapeError": [],
    "sympy.matrices.exceptions.NonSquareMatrixError": [],
    "sympy.matrices.exceptions.NonInvertibleMatrixError": [],
    "sympy.matrices.exceptions.NonPositiveDefiniteMatrixError": [],
    "sympy.matrices.kind": [
        "sympy.core.kind.KindDispatcher.register",
        "sympy.core.mul",
        "sympy.core.kind",
        "sympy.core.kind.KindDispatcher.register._",
        "sympy.matrices.kind.MatrixKind"
    ],
    "sympy.matrices.kind.MatrixKind": [],
    "sympy.core.kind.KindDispatcher.register": [
        "sympy.multipledispatch.dispatcher.str_signature",
        "<builtin>.len",
        "<builtin>.RuntimeError"
    ],
    "sympy.core.kind.KindDispatcher.register._": [
        "<builtin>.tuple",
        "sympy.multipledispatch.dispatcher.Dispatcher.add",
        "<builtin>.reversed"
    ],
    "sympy.matrices.dense": [
        "sympy.functions.elementary.trigonometric",
        "sympy.core.singleton",
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.matrices.dense.DenseMatrix",
        "sympy.core.sympify",
        "sympy.matrices.matrixbase",
        "sympy.utilities.decorator",
        "sympy.utilities.decorator.doctest_depends_on",
        "sympy.utilities.exceptions",
        "sympy.utilities.iterables",
        "sympy.matrices.decompositions",
        "sympy.matrices.dense.MutableDenseMatrix",
        "sympy.core.symbol",
        "sympy.matrices.exceptions",
        "sympy.matrices.repmatrix",
        "sympy.core.basic",
        "sympy.matrices.solvers"
    ],
    "sympy.matrices.decompositions": [
        "sympy.functions.elementary.complexes",
        "sympy.matrices.utilities",
        "sympy.core",
        "sympy.functions.elementary.miscellaneous",
        "sympy.matrices.determinant",
        "sympy.core.function",
        "sympy.matrices.exceptions"
    ],
    "sympy.matrices.utilities": [
        "sympy.matrices.utilities.DotProdSimpState.__init__",
        "sympy.matrices.utilities.DotProdSimpState",
        "contextlib.contextmanager",
        "sympy.core.function"
    ],
    "sympy.matrices.utilities.DotProdSimpState": [],
    "sympy.matrices.utilities.DotProdSimpState.__init__": [],
    "sympy.matrices.determinant": [
        "sympy.core.cache",
        "sympy.core.singleton",
        "sympy.core.mul",
        "sympy.polys",
        "sympy.polys.matrices.domainmatrix",
        "sympy.matrices.utilities",
        "sympy.polys.matrices.ddm",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.matrices.exceptions",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.functions.combinatorial.numbers",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.matrices.repmatrix": [
        "sympy.core.singleton",
        "sympy.polys.polyerrors",
        "sympy.core.kind",
        "sympy.core.sympify",
        "sympy.matrices.matrixbase",
        "sympy.core.expr",
        "sympy.utilities.misc",
        "sympy.utilities.exceptions",
        "sympy.matrices.repmatrix.RepMatrix",
        "sympy.matrices.repmatrix.MutableRepMatrix",
        "sympy.polys.matrices.exceptions",
        "sympy.matrices.exceptions",
        "sympy.matrices.kind",
        "sympy.utilities.iterables",
        "sympy.core.numbers",
        "sympy.polys.matrices",
        "sympy.polys.domains"
    ],
    "sympy.polys.matrices": [
        "sympy.polys.matrices.domainmatrix"
    ],
    "sympy.matrices.repmatrix.RepMatrix": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.matrices.repmatrix.MutableRepMatrix": [
        "<builtin>.classmethod"
    ],
    "sympy.matrices.solvers": [
        "sympy.core.function",
        "sympy.matrices.utilities",
        "sympy.core.symbol",
        "sympy.matrices.eigen",
        "sympy.utilities.iterables",
        "sympy.matrices.exceptions"
    ],
    "sympy.matrices.eigen": [
        "sympy.polys.polytools",
        "sympy.core.evalf",
        "sympy.polys",
        "sympy.core.sympify",
        "sympy.core.logic",
        "sympy.matrices.utilities",
        "sympy.core.sorting",
        "sympy.polys.matrices.eigen",
        "mpmath.libmp.libmpf",
        "sympy.functions.elementary.miscellaneous",
        "sympy.matrices.exceptions",
        "sympy.matrices.determinant",
        "sympy.core.numbers",
        "sympy.polys.matrices",
        "mpmath"
    ],
    "sympy.polys.matrices.eigen": [
        "sympy.polys.polyroots",
        "sympy.polys.polytools",
        "sympy.polys.matrices.domainmatrix",
        "sympy.polys.factortools",
        "sympy.polys.rootoftools",
        "sympy.core.symbol",
        "sympy.polys.agca.extensions"
    ],
    "sympy.polys.agca.extensions": [
        "sympy.polys.polyerrors",
        "sympy.polys.polytools",
        "sympy.polys.agca.extensions.MonogenicFiniteExtension",
        "sympy.polys.domains.domainelement",
        "sympy.polys.domains.domain",
        "sympy.printing.defaults",
        "sympy.polys.agca.extensions.ExtensionElement"
    ],
    "sympy.polys.agca.extensions.ExtensionElement": [
        "<builtin>.property"
    ],
    "sympy.polys.agca.extensions.MonogenicFiniteExtension": [
        "<builtin>.property"
    ],
    "sympy.matrices.dense.DenseMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.dense.MutableDenseMatrix": [],
    "sympy.matrices.sparse": [
        "sympy.matrices.matrixbase",
        "sympy.matrices.utilities",
        "sympy.utilities.misc",
        "sympy.utilities.exceptions",
        "sympy.matrices.decompositions",
        "sympy.matrices.sparse.MutableSparseMatrix",
        "sympy.utilities.iterables",
        "sympy.matrices.sparse.SparseRepMatrix",
        "sympy.core.containers",
        "sympy.matrices.repmatrix",
        "sympy.matrices.solvers"
    ],
    "sympy.matrices.sparse.SparseRepMatrix": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.matrices.sparse.MutableSparseMatrix": [
        "<builtin>.classmethod"
    ],
    "sympy.matrices.sparsetools": [
        "sympy.matrices.sparse",
        "sympy.core.symbol",
        "sympy.utilities.misc",
        "sympy.utilities.iterables",
        "sympy.core.containers"
    ],
    "sympy.matrices.immutable": [
        "sympy.core.cache",
        "sympy.multipledispatch.core.dispatch._",
        "sympy.matrices.immutable.ImmutableSparseMatrix",
        "mpmath.matrices.matrices",
        "sympy.matrices.sparse",
        "sympy.core.sympify",
        "sympy.matrices.matrixbase",
        "sympy.multipledispatch",
        "sympy.multipledispatch.core.dispatch",
        "sympy.core",
        "sympy.matrices.dense",
        "sympy.matrices.expressions",
        "sympy.core.numbers",
        "sympy.matrices.repmatrix",
        "sympy.matrices.immutable.ImmutableDenseMatrix",
        "sympy.matrices.immutable.ImmutableRepMatrix"
    ],
    "sympy.matrices.expressions": [
        "sympy.matrices.expressions.blockmatrix",
        "sympy.matrices.expressions.funcmatrix",
        "sympy.matrices.expressions.kronecker",
        "sympy.matrices.expressions.diagonal",
        "sympy.matrices.expressions.matadd",
        "sympy.matrices.expressions.special",
        "sympy.matrices.expressions.determinant",
        "sympy.matrices.expressions.matpow",
        "sympy.matrices.expressions.matmul",
        "sympy.matrices.expressions.companion",
        "sympy.matrices.expressions.trace",
        "sympy.matrices.expressions.permutation",
        "sympy.matrices.expressions.slice",
        "sympy.matrices.expressions.adjoint",
        "sympy.matrices.expressions.sets",
        "sympy.matrices.expressions.inverse",
        "sympy.matrices.expressions.hadamard",
        "sympy.matrices.expressions.dotproduct",
        "sympy.matrices.expressions.matexpr",
        "sympy.matrices.expressions.transpose"
    ],
    "sympy.matrices.expressions.slice": [
        "sympy.functions.elementary.integers",
        "sympy.matrices.expressions.matexpr",
        "sympy.core.containers",
        "sympy.core.basic",
        "sympy.matrices.expressions.slice.MatrixSlice"
    ],
    "sympy.matrices.expressions.matexpr": [
        "sympy.multipledispatch.core.dispatch",
        "sympy.matrices.expressions.transpose",
        "sympy.matrices.kind",
        "sympy.matrices.expressions.matexpr.MatrixExpr",
        "sympy.matrices.expressions.matexpr.MatrixSymbol",
        "sympy.functions.special.tensor_functions",
        "sympy.multipledispatch.core.dispatch._",
        "sympy.multipledispatch",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.matrices.expressions.special",
        "sympy.matrices.expressions.determinant",
        "sympy.matrices.expressions.matexpr.MatrixElement",
        "sympy.matrices.expressions.matpow",
        "sympy.matrices.expressions.matmul",
        "sympy.matrices.expressions.matexpr._LeftRightArgs",
        "sympy.matrices.expressions.matexpr.get_postprocessor",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.matrices.matrixbase",
        "sympy.core.symbol",
        "sympy.matrices.exceptions",
        "sympy.matrices.expressions.inverse",
        "sympy.core.assumptions",
        "sympy.external.gmpy",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.decorators",
        "sympy.matrices.expressions.matadd"
    ],
    "sympy.matrices.expressions.matexpr.MatrixExpr": [
        "<builtin>.staticmethod",
        "sympy.core.decorators.call_highest_priority.priority_decorator",
        "sympy.core.decorators.call_highest_priority",
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.matrices.expressions.matexpr._sympifyit",
        "sympy.matrices.expressions.matexpr._sympifyit.deco"
    ],
    "sympy.core.decorators.call_highest_priority": [],
    "sympy.core.decorators.call_highest_priority.priority_decorator": [
        "functools.wraps"
    ],
    "sympy.matrices.expressions.matexpr._sympifyit": [],
    "sympy.matrices.expressions.matexpr._sympifyit.deco": [
        "functools.wraps"
    ],
    "sympy.matrices.expressions.matexpr.get_postprocessor": [],
    "sympy.matrices.expressions.matexpr.MatrixElement": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.matexpr.MatrixSymbol": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.matexpr._LeftRightArgs": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.matrices.expressions.matmul": [
        "sympy.core.operations.AssocOpDispatcher.register_handlerclass",
        "sympy.strategies",
        "sympy.core.numbers",
        "sympy.matrices.expressions._shape",
        "sympy.strategies.rl.rm_id",
        "sympy.strategies.core.do_one",
        "sympy.core.mul",
        "sympy.matrices.expressions.special",
        "sympy.assumptions.ask",
        "sympy.assumptions.refine",
        "sympy.matrices.expressions.matpow",
        "sympy.strategies.tools.typed",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.matrices.matrixbase",
        "sympy.matrices.expressions.permutation",
        "sympy.core.symbol",
        "sympy.matrices.exceptions",
        "sympy.matrices.expressions.inverse",
        "sympy.matrices.expressions.matexpr",
        "sympy.matrices.expressions.matmul.MatMul",
        "sympy.core",
        "sympy.utilities.exceptions",
        "sympy.strategies.core.exhaust",
        "sympy.matrices.expressions.transpose"
    ],
    "sympy.strategies": [
        "sympy.strategies.tools",
        "sympy.strategies.traverse",
        "sympy.strategies.branch",
        "sympy.strategies.util",
        "sympy.strategies.core",
        "sympy.strategies.rl"
    ],
    "sympy.strategies.rl": [
        "sympy.strategies.util",
        "sympy.utilities.iterables"
    ],
    "sympy.strategies.util": [
        "sympy.strategies.util.assoc",
        "sympy.core.basic"
    ],
    "sympy.strategies.util.assoc": [
        "<map>.copy"
    ],
    "sympy.strategies.traverse": [
        "sympy.strategies.util",
        "sympy.strategies.core"
    ],
    "sympy.strategies.core": [
        "typing.TypeVar"
    ],
    "sympy.strategies.tools": [
        "sympy.strategies.core",
        "sympy.strategies.rl",
        "sympy.strategies.traverse"
    ],
    "sympy.strategies.branch": [
        "sympy.strategies.branch.traverse",
        "sympy.strategies.branch.core",
        "sympy.strategies.branch.tools"
    ],
    "sympy.strategies.branch.traverse": [
        "sympy.strategies.util",
        "sympy.strategies.branch.core"
    ],
    "sympy.strategies.branch.core": [],
    "sympy.strategies.branch.tools": [
        "sympy.strategies.branch.traverse",
        "sympy.strategies.branch.core"
    ],
    "sympy.matrices.expressions._shape": [
        "sympy.core.expr",
        "sympy.matrices.expressions.matexpr",
        "sympy.core.relational",
        "sympy.logic.boolalg",
        "sympy.core.numbers",
        "sympy.matrices.exceptions"
    ],
    "sympy.matrices.expressions.inverse": [
        "sympy.matrices.expressions.matpow",
        "sympy.core.sympify",
        "sympy.core",
        "sympy.assumptions.ask",
        "sympy.assumptions.refine",
        "sympy.matrices.expressions.inverse.Inverse",
        "sympy.matrices.exceptions"
    ],
    "sympy.matrices.expressions.matpow": [
        "sympy.core.cache",
        "sympy.core.sympify",
        "sympy.matrices",
        "sympy.core.expr",
        "sympy.matrices.expressions.matexpr",
        "sympy.core",
        "sympy.matrices.expressions.special",
        "sympy.core.power",
        "sympy.matrices.exceptions",
        "sympy.matrices.expressions.matpow.MatPow"
    ],
    "sympy.matrices.expressions.special": [
        "sympy.functions.special.tensor_functions",
        "sympy.core.singleton",
        "sympy.matrices.expressions.special.OneMatrix",
        "sympy.core.sympify",
        "sympy.matrices.expressions.matexpr",
        "sympy.matrices.expressions.special.GenericIdentity",
        "sympy.assumptions.ask",
        "sympy.matrices.expressions.special.Identity",
        "sympy.core.relational",
        "sympy.matrices.expressions.special.GenericZeroMatrix",
        "sympy.matrices.exceptions",
        "sympy.matrices.expressions.special.ZeroMatrix"
    ],
    "sympy.matrices.expressions.special.ZeroMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.special.GenericZeroMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.special.Identity": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.special.GenericIdentity": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.special.OneMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.matpow.MatPow": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.matrices.expressions.inverse.Inverse": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.transpose": [
        "sympy.matrices.expressions.matexpr",
        "sympy.assumptions.ask",
        "sympy.matrices.expressions.transpose.Transpose",
        "sympy.assumptions.refine",
        "sympy.core.basic"
    ],
    "sympy.matrices.expressions.transpose.Transpose": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.permutation": [
        "sympy.matrices.expressions.permutation.PermutationMatrix",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.matrices.expressions.matexpr",
        "sympy.matrices.expressions.permutation.MatrixPermute",
        "sympy.core",
        "sympy.matrices.expressions.special"
    ],
    "sympy.matrices.expressions.permutation.PermutationMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.permutation.MatrixPermute": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.matmul.MatMul": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.core.operations.AssocOpDispatcher.register_handlerclass": [
        "<builtin>.RuntimeError",
        "<builtin>.tuple",
        "sympy.multipledispatch.dispatcher.Dispatcher.add",
        "<builtin>.reversed",
        "sympy.multipledispatch.dispatcher.str_signature",
        "<builtin>.len",
        "<builtin>.set"
    ],
    "sympy.multipledispatch.dispatcher.ambiguity_register_error_ignore_dup": [
        "<builtin>.tuple",
        "sympy.multipledispatch.dispatcher.Dispatcher.add",
        "<builtin>.len",
        "<builtin>.set",
        "sympy.multipledispatch.dispatcher.RaiseNotImplementedError.__init__",
        "sympy.multipledispatch.conflict.super_signature"
    ],
    "sympy.multipledispatch.dispatcher.RaiseNotImplementedError.__init__": [],
    "sympy.strategies.rl.rm_id": [],
    "sympy.strategies.core.do_one": [],
    "sympy.strategies.tools.typed": [
        "sympy.strategies.core.switch"
    ],
    "sympy.strategies.core.switch": [],
    "sympy.strategies.core.exhaust": [],
    "sympy.matrices.expressions.matadd": [
        "sympy.core.sorting",
        "sympy.strategies",
        "sympy.matrices.expressions._shape",
        "sympy.strategies.rl.rm_id",
        "sympy.strategies.core.do_one",
        "sympy.strategies.rl.glom",
        "sympy.matrices.expressions.special",
        "sympy.core.add",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.matrices.matrixbase",
        "sympy.utilities.iterables",
        "sympy.strategies.core.condition",
        "sympy.matrices.expressions.matadd.MatAdd",
        "sympy.matrices.expressions.matexpr",
        "sympy.core",
        "sympy.utilities.exceptions",
        "sympy.strategies.rl.sort",
        "sympy.strategies.core.exhaust",
        "sympy.matrices.expressions.transpose"
    ],
    "sympy.matrices.expressions.matadd.MatAdd": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.strategies.rl.glom": [],
    "sympy.strategies.rl.sort": [],
    "sympy.strategies.core.condition": [],
    "sympy.matrices.expressions.determinant": [
        "sympy.core.singleton",
        "sympy.core.sympify",
        "sympy.matrices.matrixbase",
        "sympy.core.expr",
        "sympy.matrices.expressions.determinant.Determinant",
        "sympy.matrices.expressions.determinant.Permanent",
        "sympy.assumptions.ask",
        "sympy.assumptions.refine",
        "sympy.matrices.exceptions",
        "sympy.core.basic"
    ],
    "sympy.matrices.expressions.determinant.Determinant": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.determinant.Permanent": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.slice.MatrixSlice": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.blockmatrix": [
        "sympy.matrices.expressions.transpose",
        "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix",
        "sympy.strategies",
        "sympy.strategies.traverse",
        "sympy.matrices.expressions.special",
        "sympy.assumptions.ask",
        "sympy.matrices.expressions.determinant",
        "sympy.matrices.expressions.matpow",
        "sympy.matrices.expressions.matmul",
        "sympy.matrices.expressions.trace",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.matrices.expressions.slice",
        "sympy.utilities.iterables",
        "sympy.matrices.exceptions",
        "sympy.matrices.expressions.inverse",
        "sympy.functions.elementary.complexes",
        "sympy.matrices.expressions.blockmatrix.BlockMatrix",
        "sympy.matrices",
        "sympy.matrices.expressions.matexpr",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.matrices.expressions.matadd"
    ],
    "sympy.matrices.expressions.trace": [
        "sympy.core.singleton",
        "sympy.core.sympify",
        "sympy.matrices.matrixbase",
        "sympy.matrices.expressions.trace.Trace",
        "sympy.core.expr",
        "sympy.core.sorting",
        "sympy.core.symbol",
        "sympy.matrices.exceptions",
        "sympy.core.basic"
    ],
    "sympy.matrices.expressions.trace.Trace": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.blockmatrix.BlockMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.blockmatrix.BlockDiagMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.companion": [
        "sympy.core.singleton",
        "sympy.polys.polytools",
        "sympy.matrices.expressions.companion.CompanionMatrix",
        "sympy.core.sympify",
        "sympy.matrices.expressions.matexpr"
    ],
    "sympy.matrices.expressions.companion.CompanionMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.funcmatrix": [
        "sympy.functions.elementary.complexes",
        "sympy.core.function",
        "sympy.core.sympify",
        "sympy.matrices",
        "sympy.matrices.expressions.matexpr",
        "sympy.core.symbol",
        "sympy.matrices.expressions.funcmatrix.FunctionMatrix"
    ],
    "sympy.matrices.expressions.funcmatrix.FunctionMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.adjoint": [
        "sympy.matrices.expressions.matexpr",
        "sympy.core",
        "sympy.matrices.expressions.adjoint.Adjoint",
        "sympy.functions"
    ],
    "sympy.matrices.expressions.adjoint.Adjoint": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.hadamard": [
        "sympy.functions.elementary.exponential",
        "sympy.core.sympify",
        "sympy.core.expr",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.matrices.expressions.matexpr",
        "sympy.matrices.expressions.special",
        "sympy.utilities.exceptions",
        "sympy.matrices.expressions.hadamard.HadamardProduct",
        "sympy.matrices.expressions.hadamard.HadamardPower",
        "sympy.strategies",
        "sympy.matrices.expressions._shape",
        "sympy.core.add"
    ],
    "sympy.matrices.expressions.hadamard.HadamardProduct": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.hadamard.HadamardPower": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.diagonal": [
        "sympy.functions.special.tensor_functions",
        "sympy.core.mul",
        "sympy.core.sympify",
        "sympy.core",
        "sympy.matrices.expressions.diagonal.DiagonalOf",
        "sympy.matrices.expressions",
        "sympy.matrices.expressions.diagonal.DiagonalMatrix",
        "sympy.matrices.expressions.diagonal.DiagMatrix"
    ],
    "sympy.matrices.expressions.diagonal.DiagonalMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.diagonal.DiagonalOf": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.diagonal.DiagMatrix": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.dotproduct": [
        "sympy.matrices.expressions.transpose",
        "sympy.core",
        "sympy.matrices.expressions.dotproduct.DotProduct",
        "sympy.core.sympify"
    ],
    "sympy.matrices.expressions.dotproduct.DotProduct": [],
    "sympy.matrices.expressions.kronecker": [
        "sympy.strategies.core.do_one",
        "sympy.matrices.expressions.matpow",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.matrices.matrixbase",
        "sympy.strategies.traverse",
        "sympy.matrices.expressions.matexpr",
        "sympy.matrices.expressions.matmul",
        "sympy.core",
        "sympy.matrices.expressions.special",
        "sympy.utilities",
        "sympy.strategies",
        "sympy.matrices.expressions.kronecker.KroneckerProduct",
        "sympy.strategies.core.condition",
        "sympy.matrices.exceptions",
        "sympy.matrices.expressions.matadd",
        "sympy.strategies.core.exhaust",
        "sympy.matrices.expressions.transpose"
    ],
    "sympy.matrices.expressions.kronecker.KroneckerProduct": [
        "<builtin>.property"
    ],
    "sympy.matrices.expressions.sets": [
        "sympy.core.assumptions",
        "sympy.core.kind",
        "sympy.core.sympify",
        "sympy.core.logic",
        "sympy.matrices.expressions.matexpr",
        "sympy.matrices.expressions.sets.MatrixSet",
        "sympy.matrices.kind",
        "sympy.sets.sets"
    ],
    "sympy.matrices.expressions.sets.MatrixSet": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.matrices.immutable.ImmutableRepMatrix": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.matrices.immutable.ImmutableDenseMatrix": [
        "<builtin>.classmethod"
    ],
    "sympy.matrices.immutable.ImmutableSparseMatrix": [
        "<builtin>.classmethod"
    ],
    "sympy.polys.fields": [
        "sympy.core.singleton",
        "sympy.polys.domains.fractionfield",
        "sympy.polys.domains.domainelement",
        "sympy.polys.rings",
        "sympy.core.numbers",
        "sympy.polys.polyoptions",
        "sympy.polys.polyutils",
        "sympy.functions.elementary.exponential",
        "sympy.polys.fields.FracElement",
        "sympy.core.expr",
        "sympy.polys.orderings",
        "sympy.polys.constructor",
        "sympy.core.mod",
        "sympy.utilities.decorator.public",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.utilities",
        "sympy.utilities.iterables",
        "sympy.core.symbol",
        "sympy.polys.domains.polynomialring",
        "sympy.utilities.magic",
        "sympy.polys.fields.FracField",
        "sympy.printing.defaults"
    ],
    "sympy.polys.fields.FracField": [],
    "sympy.polys.fields.FracElement": [],
    "sympy.printing": [
        "sympy.printing.pycode",
        "sympy.printing.glsl",
        "sympy.printing.pretty.pretty",
        "sympy.printing.tree",
        "sympy.printing.preview",
        "sympy.printing.smtlib",
        "sympy.printing.latex",
        "sympy.printing.repr",
        "sympy.printing.gtk",
        "sympy.printing.pretty",
        "sympy.printing.codeprinter",
        "sympy.printing.mathml",
        "sympy.printing.maple",
        "sympy.printing.julia",
        "sympy.printing.str",
        "sympy.printing.jscode",
        "sympy.printing.rust",
        "sympy.printing.tableform",
        "sympy.printing.python",
        "sympy.printing.rcode",
        "sympy.printing.mathematica",
        "sympy.printing.octave",
        "sympy.printing.dot"
    ],
    "sympy.printing.pretty": [
        "sympy.printing.pretty.pretty"
    ],
    "sympy.printing.pretty.pretty": [
        "sympy.core.sorting",
        "sympy.printing.printer.print_function",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.mul",
        "sympy.printing.precedence",
        "sympy.core.add",
        "sympy.core.sympify",
        "sympy.printing.str",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "sympy.printing.pretty.pretty.PrettyPrinter",
        "sympy.printing.printer",
        "sympy.printing.pretty.stringpict",
        "sympy.core",
        "sympy.core.power",
        "sympy.printing.conventions",
        "sympy.utilities.exceptions",
        "sympy.printing.pretty.pretty_symbology",
        "sympy.printing.printer.print_function.decorator"
    ],
    "sympy.printing.conventions": [
        "sympy.core.function"
    ],
    "sympy.printing.pretty.stringpict": [],
    "sympy.printing.pretty.pretty_symbology": [],
    "sympy.printing.pretty.pretty.PrettyPrinter": [
        "<builtin>.property"
    ],
    "sympy.printing.latex": [
        "sympy.core.sorting",
        "sympy.printing.printer.print_function",
        "sympy.core.function",
        "sympy.core.containers",
        "sympy.tensor.array",
        "sympy.vector.basisdependent",
        "sympy.core.operations",
        "sympy.printing.latex.LatexPrinter",
        "mpmath.libmp.libmpf",
        "sympy.printing.printer.print_function.decorator",
        "sympy.printing.precedence",
        "sympy.core.sympify",
        "sympy.logic.boolalg",
        "sympy.utilities.iterables",
        "sympy.printing.printer",
        "<builtin>.frozenset",
        "sympy.core",
        "sympy.core.power",
        "sympy.printing.conventions",
        "sympy.core.alphabets"
    ],
    "sympy.core.alphabets": [],
    "sympy.tensor.array": [
        "sympy.tensor.array.sparse_ndim_array",
        "sympy.tensor.array.array_comprehension",
        "sympy.tensor.array.dense_ndim_array",
        "sympy.tensor.array.arrayop",
        "sympy.tensor.array.ndim_array"
    ],
    "sympy.tensor.array.dense_ndim_array": [
        "sympy.core.singleton",
        "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray",
        "sympy.core.sympify",
        "sympy.tensor.array.mutable_ndim_array",
        "sympy.tensor.array.dense_ndim_array.MutableDenseNDimArray",
        "sympy.tensor.array.dense_ndim_array.DenseNDimArray",
        "sympy.utilities.iterables",
        "sympy.core.containers",
        "sympy.core.basic",
        "sympy.tensor.array.ndim_array"
    ],
    "sympy.tensor.array.mutable_ndim_array": [
        "sympy.tensor.array.mutable_ndim_array.MutableNDimArray",
        "sympy.tensor.array.ndim_array"
    ],
    "sympy.tensor.array.ndim_array": [
        "sympy.core.singleton",
        "sympy.core.kind",
        "sympy.core.sympify",
        "sympy.external.gmpy",
        "sympy.core.expr",
        "sympy.tensor.array.ndim_array.ArrayKind",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.printing.defaults",
        "sympy.core.basic",
        "sympy.tensor.array.ndim_array.NDimArray",
        "sympy.tensor.array.ndim_array.ImmutableNDimArray"
    ],
    "sympy.tensor.array.ndim_array.ArrayKind": [
        "<builtin>.classmethod"
    ],
    "sympy.tensor.array.ndim_array.NDimArray": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.tensor.array.ndim_array.ImmutableNDimArray": [],
    "sympy.tensor.array.mutable_ndim_array.MutableNDimArray": [],
    "sympy.tensor.array.dense_ndim_array.DenseNDimArray": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.tensor.array.dense_ndim_array.ImmutableDenseNDimArray": [
        "<builtin>.classmethod"
    ],
    "sympy.tensor.array.dense_ndim_array.MutableDenseNDimArray": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.tensor.array.sparse_ndim_array": [
        "sympy.core.singleton",
        "sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray",
        "sympy.core.sympify",
        "sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray",
        "sympy.tensor.array.mutable_ndim_array",
        "sympy.utilities.iterables",
        "sympy.core.containers",
        "sympy.core.basic",
        "sympy.tensor.array.ndim_array",
        "sympy.tensor.array.sparse_ndim_array.SparseNDimArray"
    ],
    "sympy.tensor.array.sparse_ndim_array.SparseNDimArray": [
        "<builtin>.classmethod"
    ],
    "sympy.tensor.array.sparse_ndim_array.ImmutableSparseNDimArray": [],
    "sympy.tensor.array.sparse_ndim_array.MutableSparseNDimArray": [
        "<builtin>.property"
    ],
    "sympy.tensor.array.arrayop": [
        "sympy.core.singleton",
        "sympy.tensor.array.arrayop.Flatten",
        "sympy.core.sympify",
        "sympy.tensor.array.sparse_ndim_array",
        "sympy.tensor.array.dense_ndim_array",
        "sympy.core.function",
        "sympy.core.containers",
        "sympy.core._print_helpers",
        "sympy.tensor.array.ndim_array"
    ],
    "sympy.tensor.array.arrayop.Flatten": [],
    "sympy.tensor.array.array_comprehension": [
        "sympy.core.sympify",
        "sympy.tensor.array.array_comprehension.ArrayComprehensionMap",
        "sympy.core.expr",
        "sympy.core",
        "sympy.tensor.array.array_comprehension.ArrayComprehension",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.tensor.array"
    ],
    "sympy.tensor.array.array_comprehension.ArrayComprehension": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.tensor.array.array_comprehension.ArrayComprehensionMap": [
        "<builtin>.property"
    ],
    "sympy.vector.basisdependent": [
        "sympy.core.assumptions",
        "sympy.integrals.integrals",
        "sympy.polys.polytools",
        "sympy.vector.basisdependent.BasisDependentMul",
        "sympy.vector.basisdependent.BasisDependent",
        "sympy.vector.basisdependent.BasisDependentAdd",
        "sympy.core.expr",
        "sympy.simplify.trigsimp",
        "sympy.core",
        "sympy.vector.basisdependent.BasisDependentZero",
        "sympy.core.decorators",
        "sympy.simplify.simplify",
        "sympy.core.function",
        "sympy.vector.vector"
    ],
    "sympy.simplify.simplify": [
        "sympy.polys.numberfields.minpoly",
        "sympy.functions.elementary.integers",
        "sympy.core.sorting",
        "sympy.utilities.decorator.deprecated",
        "sympy.functions.elementary.hyperbolic",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.concrete.summations",
        "sympy.functions.combinatorial.factorials",
        "sympy.core.parameters",
        "sympy.functions.special.bessel",
        "sympy.functions.special.tensor_functions",
        "sympy.integrals.integrals",
        "sympy.functions.elementary.exponential",
        "sympy.simplify.radsimp",
        "sympy.simplify.trigsimp",
        "sympy.matrices.expressions",
        "sympy.utilities.decorator.deprecated.deprecated_decorator",
        "sympy.simplify.sqrtdenest",
        "sympy.core.rules",
        "sympy.core.traversal",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.utilities.decorator",
        "sympy.simplify.powsimp",
        "sympy.core.relational",
        "sympy.simplify.combsimp",
        "sympy.utilities.iterables",
        "sympy.functions.elementary.piecewise",
        "sympy.core.exprtools",
        "sympy.concrete.products",
        "sympy.functions.elementary.complexes",
        "sympy.polys",
        "sympy.simplify.cse_opts",
        "sympy.core",
        "sympy.simplify.hyperexpand",
        "sympy.utilities.misc",
        "mpmath"
    ],
    "sympy.concrete.products": [
        "sympy.functions.special.tensor_functions",
        "sympy.core.singleton",
        "sympy.core.exprtools",
        "sympy.core.mul",
        "sympy.functions.elementary.exponential",
        "sympy.polys",
        "sympy.concrete.expr_with_intlimits",
        "sympy.core.expr",
        "sympy.core.symbol",
        "sympy.concrete.products.Product",
        "sympy.core.function",
        "sympy.concrete.summations",
        "sympy.functions.combinatorial.factorials"
    ],
    "sympy.concrete.expr_with_intlimits": [
        "sympy.core.singleton",
        "sympy.concrete.expr_with_intlimits.ExprWithIntLimits",
        "sympy.concrete.expr_with_intlimits.ReorderError",
        "sympy.concrete.expr_with_limits",
        "sympy.core.relational"
    ],
    "sympy.concrete.expr_with_intlimits.ReorderError": [],
    "sympy.concrete.expr_with_intlimits.ExprWithIntLimits": [
        "<builtin>.property"
    ],
    "sympy.concrete.summations": [
        "sympy.core.singleton",
        "sympy.series.limitseq",
        "sympy.calculus.accumulationbounds",
        "sympy.core.sorting",
        "sympy.concrete.expr_with_limits",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.functions.combinatorial.factorials",
        "sympy.functions.special.tensor_functions",
        "sympy.integrals.integrals",
        "sympy.core.mul",
        "sympy.polys.polytools",
        "sympy.functions.elementary.exponential",
        "sympy.core.expr",
        "sympy.functions.special.hyper",
        "sympy.concrete.summations.Sum",
        "sympy.concrete.expr_with_intlimits",
        "sympy.core.add",
        "sympy.functions.elementary.trigonometric",
        "sympy.polys.polyerrors",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.logic.boolalg",
        "sympy.polys.rationaltools",
        "sympy.utilities.iterables",
        "sympy.functions.combinatorial.numbers",
        "sympy.concrete.gosper",
        "sympy.polys.partfrac",
        "sympy.calculus.singularities",
        "sympy.series.order",
        "sympy.functions.special.zeta_functions",
        "sympy.sets.sets",
        "sympy.series.residues"
    ],
    "sympy.calculus.singularities": [
        "sympy.functions.elementary.trigonometric",
        "sympy.core.singleton",
        "sympy.functions.elementary.exponential",
        "sympy.core.sympify",
        "sympy.utilities.misc",
        "sympy.core.power",
        "sympy.functions.elementary.hyperbolic",
        "sympy.core.symbol"
    ],
    "sympy.calculus.accumulationbounds": [
        "sympy.multipledispatch.core.dispatch._",
        "sympy.core.sympify",
        "sympy.multipledispatch",
        "sympy.multipledispatch.core.dispatch",
        "sympy.core.expr",
        "sympy.core",
        "sympy.series.order",
        "sympy.calculus.accumulationbounds.AccumulationBounds",
        "sympy.core.relational",
        "sympy.functions.elementary.miscellaneous",
        "sympy.logic.boolalg",
        "sympy.core.numbers",
        "sympy.core.basic",
        "sympy.sets.sets"
    ],
    "sympy.series.order": [
        "sympy.core.cache",
        "sympy.series.order.Order",
        "sympy.functions.elementary.exponential",
        "sympy.core.sympify",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.utilities.iterables",
        "sympy.core.function",
        "sympy.core.containers",
        "sympy.sets.sets"
    ],
    "sympy.series.order.Order": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.calculus.accumulationbounds.AccumulationBounds": [
        "<builtin>.property"
    ],
    "sympy.concrete.gosper": [
        "sympy.core",
        "sympy.polys",
        "sympy.utilities.iterables"
    ],
    "sympy.series.limitseq": [
        "sympy.functions.elementary.trigonometric",
        "sympy.core.singleton",
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.gamma_functions",
        "sympy.core.sympify",
        "sympy.calculus.accumulationbounds",
        "sympy.core.symbol",
        "sympy.core.power",
        "sympy.series.limits",
        "sympy.functions.combinatorial.numbers",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.function",
        "sympy.functions.combinatorial.factorials",
        "sympy.core.add"
    ],
    "sympy.series.limits": [
        "sympy.core.exprtools",
        "sympy.functions.elementary.complexes",
        "sympy.functions.special.gamma_functions",
        "sympy.functions.elementary.exponential",
        "sympy.core.sympify",
        "sympy.polys",
        "sympy.calculus.accumulationbounds",
        "sympy.core",
        "sympy.series.order",
        "sympy.core.numbers",
        "sympy.series.limits.Limit",
        "sympy.functions.combinatorial.factorials",
        "sympy.series.gruntz"
    ],
    "sympy.series.gruntz": [
        "sympy.core.cache",
        "sympy.functions",
        "sympy.core.cache.__cacheit_debug.func_wrapper",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.series.order",
        "sympy.utilities.exceptions",
        "sympy.utilities.timeutils",
        "sympy.utilities.misc.debug_decorator",
        "sympy.series.gruntz.SubsSet",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.traversal",
        "sympy.core.intfunc"
    ],
    "sympy.series.gruntz.SubsSet": [],
    "sympy.utilities.misc.debug_decorator": [
        "sympy"
    ],
    "sympy.series.limits.Limit": [
        "<builtin>.property"
    ],
    "sympy.series.residues": [
        "sympy.utilities.timeutils",
        "sympy.core.singleton",
        "sympy.core.mul",
        "sympy.core.sympify"
    ],
    "sympy.concrete.summations.Sum": [],
    "sympy.concrete.products.Product": [
        "<builtin>.property"
    ],
    "sympy.simplify.combsimp": [
        "sympy.functions",
        "sympy.simplify.gammasimp",
        "sympy.core",
        "sympy.utilities.timeutils",
        "sympy.core.function",
        "sympy.functions.combinatorial.factorials",
        "sympy.core.traversal"
    ],
    "sympy.simplify.gammasimp": [
        "sympy.core.function",
        "sympy.polys",
        "sympy.functions",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.utilities.iterables",
        "sympy.simplify.gammasimp._rf",
        "sympy.core.symbol"
    ],
    "sympy.simplify.gammasimp._rf": [
        "<builtin>.classmethod"
    ],
    "sympy.simplify.cse_opts": [
        "sympy.core.singleton",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.core.traversal"
    ],
    "sympy.simplify.hyperexpand": [
        "sympy.simplify.hyperexpand.UnShiftB",
        "sympy.core.sorting",
        "sympy.simplify.hyperexpand.MeijerUnShiftA",
        "sympy.simplify.hyperexpand.Operator",
        "sympy.simplify.hyperexpand.MeijerUnShiftD",
        "sympy.simplify.hyperexpand.ReduceOrder",
        "sympy.simplify.hyperexpand.Hyper_Function",
        "sympy.simplify.hyperexpand.MeijerUnShiftB",
        "sympy.simplify.hyperexpand.MeijerUnShiftC",
        "sympy.simplify.hyperexpand.MeijerShiftA",
        "sympy.functions.special.hyper",
        "sympy.simplify.hyperexpand.MeijerFormulaCollection",
        "sympy.simplify.hyperexpand.MeijerShiftC",
        "sympy.core.mod",
        "sympy.simplify.hyperexpand.ShiftB",
        "sympy.simplify.hyperexpand.MeijerFormula",
        "sympy.core.sympify",
        "sympy",
        "sympy.functions",
        "sympy.simplify.hyperexpand.Formula",
        "sympy.simplify.powsimp",
        "sympy.simplify.hyperexpand.FormulaCollection",
        "sympy.utilities.iterables",
        "sympy.series",
        "sympy.simplify.hyperexpand.MultOperator",
        "sympy.functions.elementary.complexes",
        "sympy.polys",
        "sympy.matrices",
        "sympy.core",
        "sympy.simplify.hyperexpand.G_Function",
        "sympy.simplify.hyperexpand.ShiftA",
        "sympy.simplify.hyperexpand.MeijerShiftB",
        "sympy.simplify.hyperexpand.MeijerShiftD",
        "sympy.simplify.hyperexpand.UnShiftA"
    ],
    "sympy.series": [
        "sympy.core.singleton",
        "sympy.series.fourier",
        "sympy.series.limitseq",
        "sympy.series.formal",
        "sympy.series.order",
        "sympy.series.sequences",
        "sympy.series.limits",
        "sympy.series.approximants",
        "sympy.series.series",
        "sympy.series.gruntz",
        "sympy.series.residues"
    ],
    "sympy.series.series": [
        "sympy.core.sympify"
    ],
    "sympy.series.approximants": [
        "sympy.core.singleton",
        "sympy.polys.polytools",
        "sympy.utilities",
        "sympy.core.symbol",
        "sympy.utilities.decorator.public"
    ],
    "sympy.series.sequences": [
        "sympy.core.singleton",
        "sympy.core.sorting",
        "sympy.series.sequences.SeqPer",
        "sympy.tensor.indexed",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.parameters",
        "sympy.core.cache",
        "sympy.core.mul",
        "sympy.series.sequences.EmptySequence",
        "sympy.series.sequences.SeqExpr",
        "sympy.series.sequences.SeqFormula",
        "sympy.core.basic",
        "sympy.series.sequences.RecursiveSeq",
        "sympy.core.sympify",
        "sympy.series.sequences.SeqMul",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "sympy.series.sequences.SeqExprOp",
        "sympy.polys",
        "sympy.matrices",
        "sympy.series.sequences.SeqAdd",
        "sympy.core.decorators",
        "sympy.series.sequences.SeqBase",
        "sympy.sets.sets"
    ],
    "sympy.tensor.indexed": [
        "sympy.functions.special.tensor_functions",
        "sympy.core.assumptions",
        "sympy.multipledispatch.core.dispatch._",
        "sympy.tensor.indexed.IndexedBase",
        "sympy.core.sympify",
        "sympy.multipledispatch",
        "sympy.core.logic",
        "sympy.multipledispatch.core.dispatch",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.tensor.indexed.IndexException",
        "sympy.tensor.indexed.Indexed",
        "sympy.utilities.iterables",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.tensor.indexed.Idx"
    ],
    "sympy.tensor.indexed.IndexException": [],
    "sympy.tensor.indexed.Indexed": [
        "<builtin>.property"
    ],
    "sympy.tensor.indexed.IndexedBase": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.tensor.indexed.Idx": [
        "<builtin>.property"
    ],
    "sympy.series.sequences.SeqBase": [
        "sympy.core.decorators.call_highest_priority.priority_decorator",
        "sympy.core.decorators.call_highest_priority",
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.series.sequences.EmptySequence": [
        "<builtin>.property"
    ],
    "sympy.series.sequences.SeqExpr": [
        "<builtin>.property"
    ],
    "sympy.series.sequences.SeqPer": [
        "<builtin>.property"
    ],
    "sympy.series.sequences.SeqFormula": [
        "<builtin>.property"
    ],
    "sympy.series.sequences.RecursiveSeq": [
        "<builtin>.property"
    ],
    "sympy.series.sequences.SeqExprOp": [
        "<builtin>.property"
    ],
    "sympy.series.sequences.SeqAdd": [
        "<builtin>.staticmethod"
    ],
    "sympy.series.sequences.SeqMul": [
        "<builtin>.staticmethod"
    ],
    "sympy.series.fourier": [
        "sympy.functions.elementary.trigonometric",
        "sympy.core.singleton",
        "sympy.series.series_class",
        "sympy.core.sympify",
        "sympy.series.fourier.FiniteFourierSeries",
        "sympy.core.expr",
        "sympy.series.fourier.FourierSeries",
        "sympy.series.sequences",
        "sympy.utilities.iterables",
        "sympy.sets.sets",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.add"
    ],
    "sympy.series.series_class": [
        "sympy.core.cache",
        "sympy.core.singleton",
        "sympy.core.expr",
        "sympy.series.series_class.SeriesBase"
    ],
    "sympy.series.series_class.SeriesBase": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.series.fourier.FourierSeries": [
        "<builtin>.property"
    ],
    "sympy.series.fourier.FiniteFourierSeries": [
        "<builtin>.property"
    ],
    "sympy.series.formal": [
        "sympy.core.singleton",
        "sympy.series.formal.FiniteFormalPowerSeries",
        "sympy.functions.elementary.integers",
        "sympy.series.limits",
        "sympy.functions.elementary.miscellaneous",
        "sympy.series.formal.FormalPowerSeriesInverse",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.functions.combinatorial.factorials",
        "sympy.core.mul",
        "sympy.core.expr",
        "sympy.series.formal.FormalPowerSeriesCompose",
        "sympy.core.add",
        "sympy.series.formal.FormalPowerSeriesProduct",
        "sympy.series.series_class",
        "sympy.series.formal.Coeff",
        "sympy.series.formal.FormalPowerSeries",
        "sympy.core.sympify",
        "sympy.series.sequences",
        "sympy.core.relational",
        "sympy.discrete.convolutions",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.utilities.iterables",
        "sympy.functions.combinatorial.numbers",
        "sympy.series.order",
        "sympy.sets.sets"
    ],
    "sympy.discrete.convolutions": [
        "sympy.core.sympify",
        "sympy.external.gmpy",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.utilities.iterables",
        "sympy.discrete.transforms",
        "sympy.core.function"
    ],
    "sympy.discrete.transforms": [
        "sympy.functions.elementary.trigonometric",
        "sympy.core.sympify",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.utilities.iterables",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.ntheory"
    ],
    "sympy.series.formal.Coeff": [
        "<builtin>.classmethod"
    ],
    "sympy.series.formal.FormalPowerSeries": [
        "<builtin>.property"
    ],
    "sympy.series.formal.FiniteFormalPowerSeries": [
        "<builtin>.property"
    ],
    "sympy.series.formal.FormalPowerSeriesProduct": [
        "<builtin>.property"
    ],
    "sympy.series.formal.FormalPowerSeriesCompose": [
        "<builtin>.property"
    ],
    "sympy.series.formal.FormalPowerSeriesInverse": [
        "<builtin>.property"
    ],
    "sympy.simplify.powsimp": [
        "sympy.core.mul",
        "sympy.polys",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.matrices.expressions.matexpr",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.ntheory.factor_",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.rules"
    ],
    "sympy.simplify.hyperexpand.Hyper_Function": [
        "<builtin>.property"
    ],
    "sympy.simplify.hyperexpand.G_Function": [
        "<builtin>.property"
    ],
    "sympy.simplify.hyperexpand.Formula": [
        "<builtin>.property"
    ],
    "sympy.simplify.hyperexpand.FormulaCollection": [],
    "sympy.simplify.hyperexpand.MeijerFormula": [
        "<builtin>.property"
    ],
    "sympy.simplify.hyperexpand.MeijerFormulaCollection": [],
    "sympy.simplify.hyperexpand.Operator": [],
    "sympy.simplify.hyperexpand.MultOperator": [],
    "sympy.simplify.hyperexpand.ShiftA": [],
    "sympy.simplify.hyperexpand.ShiftB": [],
    "sympy.simplify.hyperexpand.UnShiftA": [],
    "sympy.simplify.hyperexpand.UnShiftB": [],
    "sympy.simplify.hyperexpand.MeijerShiftA": [],
    "sympy.simplify.hyperexpand.MeijerShiftB": [],
    "sympy.simplify.hyperexpand.MeijerShiftC": [],
    "sympy.simplify.hyperexpand.MeijerShiftD": [],
    "sympy.simplify.hyperexpand.MeijerUnShiftA": [],
    "sympy.simplify.hyperexpand.MeijerUnShiftB": [],
    "sympy.simplify.hyperexpand.MeijerUnShiftC": [],
    "sympy.simplify.hyperexpand.MeijerUnShiftD": [],
    "sympy.simplify.hyperexpand.ReduceOrder": [
        "<builtin>.classmethod"
    ],
    "sympy.simplify.radsimp": [
        "sympy.core.assumptions",
        "sympy.core.exprtools",
        "sympy.core.mul",
        "sympy.core.parameters",
        "sympy.functions.elementary.complexes",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.polys",
        "sympy.core.symbol",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.utilities.iterables",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.simplify.sqrtdenest",
        "sympy.core.add"
    ],
    "sympy.simplify.sqrtdenest": [
        "sympy.core.function",
        "sympy.polys",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.simplify.sqrtdenest.SqrtdenestStopIteration",
        "sympy.core.symbol"
    ],
    "sympy.simplify.sqrtdenest.SqrtdenestStopIteration": [],
    "sympy.simplify.trigsimp": [
        "sympy.strategies.core",
        "sympy.core.sorting",
        "sympy.simplify.cse_main",
        "sympy.functions.elementary.hyperbolic",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.cache",
        "sympy.polys.polytools",
        "sympy.polys.domains",
        "sympy.functions.elementary.trigonometric",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "sympy.strategies.tree",
        "sympy.polys",
        "sympy.external.gmpy",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.intfunc",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.simplify.cse_main": [
        "sympy.core.singleton",
        "sympy.core.exprtools",
        "sympy.core.sympify",
        "sympy.simplify.cse_opts",
        "sympy.matrices",
        "sympy.matrices.expressions.matexpr",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.matrices.expressions",
        "sympy.simplify.cse_main.Unevaluated",
        "sympy.utilities.iterables",
        "sympy.simplify.cse_main.FuncArgTracker",
        "sympy.polys.rootoftools",
        "sympy.core.symbol",
        "sympy.core.containers"
    ],
    "sympy.simplify.cse_main.FuncArgTracker": [],
    "sympy.simplify.cse_main.Unevaluated": [
        "<builtin>.property"
    ],
    "sympy.strategies.tree": [
        "sympy.strategies.core",
        "sympy.strategies",
        "sympy.strategies.branch"
    ],
    "sympy.vector.vector": [
        "sympy.core.singleton",
        "sympy.vector.vector.VectorAdd",
        "sympy.core.sorting",
        "sympy.vector.vector.Dot",
        "sympy.functions.elementary.miscellaneous",
        "sympy.vector.vector.Cross",
        "sympy.vector.basisdependent",
        "sympy.core.expr",
        "sympy.vector.vector.BaseVector",
        "sympy.vector.coordsysrect",
        "sympy.core.add",
        "sympy.core.sympify",
        "sympy.vector.dyadic",
        "sympy.vector.vector.Vector",
        "sympy.core.assumptions",
        "sympy.matrices.immutable",
        "sympy.core.power",
        "sympy.vector.vector.VectorMul",
        "sympy.vector.vector.VectorZero"
    ],
    "sympy.vector.coordsysrect": [
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.function",
        "sympy.core.containers",
        "sympy.core.cache",
        "sympy.simplify.trigsimp",
        "sympy.core.basic",
        "sympy.functions.elementary.trigonometric",
        "sympy.matrices.matrixbase",
        "sympy.solvers",
        "sympy.vector.orienters",
        "sympy.core.symbol",
        "sympy.matrices.immutable",
        "sympy.core",
        "sympy.matrices.dense",
        "sympy.vector.coordsysrect.CoordSys3D",
        "sympy.vector.scalar",
        "sympy.simplify.simplify",
        "sympy.vector.vector",
        "sympy.vector"
    ],
    "sympy.solvers": [
        "sympy.core.assumptions",
        "sympy.core.singleton",
        "sympy.solvers.pde",
        "sympy.solvers.polysys",
        "sympy.solvers.deutils",
        "sympy.solvers.inequalities",
        "sympy.solvers.simplex",
        "sympy.solvers.recurr",
        "sympy.solvers.solveset",
        "sympy.solvers.diophantine.diophantine",
        "sympy.solvers.ode",
        "sympy.solvers.decompogen",
        "sympy.solvers.solvers"
    ],
    "sympy.solvers.solvers": [
        "sympy.core.sorting",
        "sympy.simplify",
        "sympy.functions.elementary.hyperbolic",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.functions.combinatorial.factorials",
        "sympy.solvers.polysys",
        "sympy.integrals.integrals",
        "sympy.polys.polytools",
        "sympy.core.logic",
        "sympy.utilities.lambdify",
        "sympy.simplify.sqrtdenest",
        "sympy.utilities.decorator.conserve_mpmath_dps",
        "sympy.core.traversal",
        "sympy.solvers.bivariate",
        "sympy.functions.elementary.trigonometric",
        "sympy.simplify.fu",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.utilities.decorator",
        "sympy.simplify.powsimp",
        "sympy.core.relational",
        "sympy.logic.boolalg",
        "sympy.functions.elementary.piecewise",
        "sympy.matrices.exceptions",
        "sympy.utilities.iterables",
        "sympy.polys.solvers",
        "sympy.core.assumptions",
        "sympy.core.exprtools",
        "sympy.polys",
        "sympy.matrices",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.power",
        "sympy.ntheory.factor_",
        "sympy.simplify.simplify",
        "sympy.core.intfunc",
        "sympy.strategies.rl",
        "mpmath"
    ],
    "sympy.simplify": [
        "sympy.simplify.fu",
        "sympy.simplify.ratsimp",
        "sympy.simplify.gammasimp",
        "sympy.simplify.radsimp",
        "sympy.simplify.trigsimp",
        "sympy.simplify.hyperexpand",
        "sympy.simplify.powsimp",
        "sympy.simplify.cse_main",
        "sympy.simplify.combsimp",
        "sympy.simplify.epathtools",
        "sympy.simplify.simplify",
        "sympy.simplify.sqrtdenest"
    ],
    "sympy.simplify.fu": [
        "sympy.core.singleton",
        "sympy.strategies.core",
        "sympy.core.sorting",
        "sympy.functions.elementary.hyperbolic",
        "<builtin>.list",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.functions.combinatorial.factorials",
        "sympy.core.mul",
        "sympy.polys.polytools",
        "sympy.core.expr",
        "<builtin>.zip",
        "sympy.core.add",
        "sympy.core.traversal",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.sympify",
        "sympy",
        "<builtin>.map",
        "sympy.core.symbol",
        "<builtin>.locals",
        "sympy.strategies.tree",
        "sympy.core.exprtools",
        "sympy.core.power",
        "sympy.ntheory.factor_",
        "<builtin>.dict"
    ],
    "<builtin>.locals": [],
    "sympy.simplify.epathtools": [
        "sympy.simplify.epathtools.EPath",
        "sympy.core"
    ],
    "sympy.simplify.epathtools.EPath": [],
    "sympy.simplify.ratsimp": [
        "sympy.polys.polyerrors",
        "sympy.polys",
        "sympy.polys.monomials",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.numbers"
    ],
    "sympy.polys.solvers": [
        "sympy.polys.solvers.RawMatrix",
        "sympy.polys.polyerrors",
        "sympy.polys.solvers.PolyNonlinearError",
        "sympy.core.sympify",
        "sympy.utilities.exceptions",
        "sympy.matrices.dense",
        "sympy.polys.rings",
        "sympy.polys.domainmatrix",
        "sympy.utilities.iterables",
        "sympy.core.numbers",
        "sympy.polys.domains"
    ],
    "sympy.polys.domainmatrix": [
        "sympy.polys.matrices.domainmatrix"
    ],
    "sympy.polys.solvers.PolyNonlinearError": [],
    "sympy.polys.solvers.RawMatrix": [
        "<builtin>.staticmethod"
    ],
    "sympy.solvers.polysys": [
        "sympy.polys.polyerrors",
        "sympy.polys.polytools",
        "sympy.polys",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.utilities",
        "sympy.simplify",
        "sympy.solvers.polysys.SolveFailed"
    ],
    "sympy.solvers.polysys.SolveFailed": [],
    "sympy.utilities.decorator.conserve_mpmath_dps": [
        "functools.update_wrapper",
        "mpmath"
    ],
    "sympy.solvers.bivariate": [
        "sympy.polys.polyroots",
        "sympy.core.singleton",
        "sympy.core.exprtools",
        "sympy.polys.polytools",
        "sympy.functions.elementary.exponential",
        "sympy.core.symbol",
        "sympy.core.sorting",
        "sympy.simplify.radsimp",
        "sympy.core.power",
        "sympy.utilities.iterables",
        "sympy.functions.elementary.miscellaneous",
        "sympy.simplify.simplify",
        "sympy.core.function",
        "sympy.core.add",
        "sympy.solvers.solvers"
    ],
    "sympy.solvers.diophantine.diophantine": [
        "sympy.core.singleton",
        "sympy.solvers.diophantine.diophantine.Linear",
        "sympy.solvers.diophantine.diophantine.BinaryQuadratic",
        "sympy.functions.elementary.integers",
        "sympy.solvers.diophantine.diophantine.DiophantineEquationType",
        "sympy.core.sorting",
        "sympy.ntheory.primetest",
        "sympy.functions.elementary.miscellaneous",
        "sympy.solvers.diophantine.diophantine.Univariate",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.solvers.diophantine.diophantine.GeneralPythagorean",
        "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic",
        "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic",
        "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic",
        "sympy.core.symbol.symbols",
        "sympy.core.mul",
        "sympy.polys.polytools",
        "<builtin>.sorted",
        "sympy.ntheory.modular",
        "sympy.ntheory.residue_ntheory",
        "sympy.core.add",
        "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares",
        "sympy.polys.polyerrors",
        "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal",
        "sympy.core.sympify",
        "sympy.solvers.diophantine.diophantine.CubicThue",
        "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.solvers.solveset",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "sympy.ntheory.generate",
        "sympy.core.assumptions",
        "sympy.core.exprtools",
        "sympy.functions.elementary.complexes",
        "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers",
        "sympy.external.gmpy",
        "sympy.utilities.misc",
        "sympy.matrices.dense",
        "sympy.ntheory.factor_",
        "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet",
        "sympy.simplify.simplify",
        "sympy.core.intfunc"
    ],
    "sympy.solvers.solveset": [
        "sympy.polys.polyroots",
        "sympy.core.sorting",
        "sympy.simplify",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.elementary.hyperbolic",
        "sympy.calculus.util",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.solvers.polysys",
        "sympy.polys.polytools",
        "sympy.solvers.solveset.NonlinearError",
        "sympy.solvers.solveset._SolveTrig1Error",
        "sympy.core.mod",
        "sympy.ntheory.residue_ntheory",
        "sympy.core.traversal",
        "sympy.functions.elementary.trigonometric",
        "sympy.polys.polyerrors",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.utilities.iterables",
        "sympy.polys.matrices.linsolve",
        "sympy.functions.combinatorial.numbers",
        "sympy.polys.solvers",
        "sympy.solvers.solvers",
        "sympy.functions.elementary.complexes",
        "sympy.polys",
        "sympy.sets",
        "sympy.external.gmpy",
        "sympy.matrices",
        "sympy.core",
        "sympy.ntheory.factor_",
        "sympy.simplify.simplify",
        "sympy.core.intfunc",
        "sympy.sets.sets"
    ],
    "sympy.polys.matrices.linsolve": [
        "sympy.core.singleton",
        "sympy.core.mul",
        "sympy.utilities.misc",
        "sympy.polys.matrices.sdm",
        "sympy.polys.constructor",
        "sympy.core.add",
        "sympy.polys.solvers"
    ],
    "sympy.sets": [
        "sympy.core.singleton",
        "sympy.sets.ordinals",
        "sympy.sets.conditionset",
        "sympy.sets.powerset",
        "sympy.sets.sets",
        "sympy.sets.contains",
        "sympy.sets.fancysets",
        "sympy.sets.handlers.comparison"
    ],
    "sympy.sets.fancysets": [
        "sympy.core.singleton",
        "sympy.functions.elementary.integers",
        "sympy.sets.fancysets.ImageSet",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.sets.fancysets.PolarComplexRegion",
        "sympy.core.kind",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.sets.fancysets.Range",
        "sympy.sets.fancysets.Integers",
        "sympy.core.mod",
        "sympy.sets.fancysets.Naturals0",
        "sympy.sets.fancysets.Rationals",
        "sympy.core.basic",
        "sympy.sets.fancysets.CartesianComplexRegion",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.sympify",
        "sympy.sets.fancysets.Complexes",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.sets.fancysets.ComplexRegion",
        "sympy.sets.fancysets.Naturals",
        "sympy.sets.fancysets.Reals",
        "sympy.utilities.misc",
        "sympy.core.intfunc",
        "sympy.sets.sets"
    ],
    "sympy.sets.fancysets.Rationals": [
        "<builtin>.property"
    ],
    "sympy.sets.fancysets.Naturals": [
        "<builtin>.property"
    ],
    "sympy.sets.fancysets.Naturals0": [],
    "sympy.sets.fancysets.Integers": [
        "<builtin>.property"
    ],
    "sympy.sets.fancysets.Reals": [
        "<builtin>.property"
    ],
    "sympy.sets.fancysets.ImageSet": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.sets.fancysets.Range": [
        "<builtin>.property"
    ],
    "sympy.sets.fancysets.ComplexRegion": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.sets.fancysets.CartesianComplexRegion": [
        "sympy.core.symbol.symbols",
        "<builtin>.property"
    ],
    "sympy.sets.fancysets.PolarComplexRegion": [
        "sympy.core.symbol.symbols",
        "<builtin>.property"
    ],
    "sympy.sets.fancysets.Complexes": [
        "<builtin>.property"
    ],
    "sympy.sets.contains": [
        "sympy.core.sympify",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.relational",
        "sympy.sets.sets",
        "sympy.logic.boolalg",
        "sympy.sets.contains.Contains",
        "sympy.core.parameters"
    ],
    "sympy.sets.contains.Contains": [
        "<builtin>.property"
    ],
    "sympy.sets.conditionset": [
        "sympy.core.singleton",
        "sympy.core.sympify",
        "sympy.core.logic",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.utilities.exceptions",
        "sympy.core.relational",
        "sympy.utilities.iterables",
        "sympy.core.function",
        "sympy.core.containers",
        "sympy.core.basic",
        "sympy.sets.sets",
        "sympy.sets.conditionset.ConditionSet",
        "sympy.sets.contains"
    ],
    "sympy.sets.conditionset.ConditionSet": [
        "<builtin>.property"
    ],
    "sympy.sets.ordinals": [
        "sympy.sets.ordinals.OrdinalOmega",
        "sympy.sets.ordinals.OmegaPower",
        "sympy.core",
        "sympy.sets.ordinals.OrdinalZero",
        "sympy.sets.ordinals.Ordinal"
    ],
    "sympy.sets.ordinals.OmegaPower": [
        "<builtin>.property"
    ],
    "sympy.sets.ordinals.Ordinal": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.sets.ordinals.OrdinalZero": [],
    "sympy.sets.ordinals.OrdinalOmega": [
        "<builtin>.property"
    ],
    "sympy.sets.powerset": [
        "sympy.core.singleton",
        "sympy.core.sympify",
        "sympy.core.logic",
        "sympy.sets.sets",
        "sympy.core.decorators",
        "sympy.sets.powerset.PowerSet",
        "sympy.core.parameters"
    ],
    "sympy.sets.powerset.PowerSet": [
        "<builtin>.property",
        "sympy.core.decorators._sympifyit",
        "sympy.core.decorators._sympifyit.deco"
    ],
    "sympy.sets.handlers.comparison": [
        "sympy.multipledispatch.core.dispatch._",
        "sympy.multipledispatch.core.dispatch",
        "sympy.multipledispatch",
        "sympy.core.logic",
        "sympy.core.relational",
        "sympy.logic.boolalg",
        "sympy.core.basic",
        "sympy.sets.sets"
    ],
    "sympy.calculus.util": [
        "sympy.calculus.accumulationbounds",
        "sympy.functions.elementary.integers",
        "sympy.functions.elementary.hyperbolic",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.sets.fancysets",
        "sympy.core.kind",
        "sympy.polys.polytools",
        "sympy.functions.elementary.exponential",
        "sympy.core.mod",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.sympify",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.utilities.iterables",
        "sympy.functions.elementary.complexes",
        "sympy.sets.conditionset",
        "sympy.core",
        "sympy.calculus.singularities",
        "sympy.matrices.dense",
        "sympy.sets.sets"
    ],
    "sympy.solvers.solveset.NonlinearError": [],
    "sympy.solvers.solveset._SolveTrig1Error": [],
    "sympy.solvers.diophantine.diophantine.DiophantineSolutionSet": [],
    "sympy.solvers.diophantine.diophantine.DiophantineEquationType": [
        "<builtin>.property"
    ],
    "sympy.solvers.diophantine.diophantine.Univariate": [],
    "sympy.solvers.diophantine.diophantine.Linear": [],
    "sympy.solvers.diophantine.diophantine.BinaryQuadratic": [],
    "sympy.solvers.diophantine.diophantine.InhomogeneousTernaryQuadratic": [],
    "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadraticNormal": [],
    "sympy.solvers.diophantine.diophantine.HomogeneousTernaryQuadratic": [],
    "sympy.solvers.diophantine.diophantine.InhomogeneousGeneralQuadratic": [],
    "sympy.solvers.diophantine.diophantine.HomogeneousGeneralQuadratic": [],
    "sympy.solvers.diophantine.diophantine.GeneralSumOfSquares": [],
    "sympy.solvers.diophantine.diophantine.GeneralPythagorean": [
        "<builtin>.property"
    ],
    "sympy.solvers.diophantine.diophantine.CubicThue": [],
    "sympy.solvers.diophantine.diophantine.GeneralSumOfEvenPowers": [],
    "sympy.solvers.recurr": [
        "sympy.core.singleton",
        "sympy.core.mul",
        "sympy.polys",
        "sympy.core.sympify",
        "sympy.solvers",
        "sympy.functions",
        "sympy.matrices",
        "sympy.core.sorting",
        "sympy.core.relational",
        "sympy.simplify",
        "sympy.utilities.iterables",
        "sympy.concrete",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.simplify.simplify",
        "sympy.core.add"
    ],
    "sympy.concrete": [
        "sympy.concrete.summations",
        "sympy.concrete.products"
    ],
    "sympy.solvers.ode": [
        "sympy.solvers.ode.ode",
        "sympy.solvers.ode.subscheck",
        "sympy.solvers.ode.systems",
        "sympy.solvers.ode.lie_group"
    ],
    "sympy.solvers.ode.ode": [
        "sympy.core.sorting",
        "sympy.simplify",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.functions.combinatorial.factorials",
        "sympy.integrals.integrals",
        "sympy.polys.polytools",
        "sympy.solvers.deutils",
        "sympy.core.expr",
        "sympy.simplify.radsimp",
        "sympy.solvers.ode.single",
        "sympy.core.multidimensional",
        "sympy.series.series",
        "sympy.core.traversal",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.solvers",
        "sympy.core.multidimensional.vectorize.__init__",
        "sympy.simplify.powsimp",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.utilities.iterables",
        "sympy.series",
        "sympy.polys",
        "sympy.core",
        "sympy.simplify.simplify"
    ],
    "sympy.solvers.deutils": [
        "sympy.core.symbol",
        "sympy.core.relational",
        "sympy.core",
        "sympy.core.function"
    ],
    "sympy.core.multidimensional.vectorize.__init__": [
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "sympy.solvers.ode.single": [
        "sympy.solvers.ode.single.Separable",
        "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters",
        "sympy.simplify",
        "sympy.solvers.ode.nonhomogeneous",
        "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients",
        "sympy.solvers.ode.single.RiccatiSpecial",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.integrals",
        "sympy.solvers.ode.single.LieGroup",
        "sympy.solvers.ode.single.ODEMatchError",
        "sympy.core.cache",
        "sympy.core.mul",
        "sympy.polys.polytools",
        "sympy.solvers.ode.lie_group",
        "sympy.solvers.ode.single.SecondLinearAiry",
        "sympy.solvers.deutils",
        "sympy.solvers.ode.single.SecondHypergeometric",
        "sympy.core.expr",
        "sympy.simplify.radsimp",
        "sympy.solvers.ode.single.SingleODESolver",
        "sympy.solvers.ode.single.SecondLinearBessel",
        "sympy.solvers.ode.single.Liouville",
        "sympy.solvers.ode.single.NthAlgebraic",
        "sympy.solvers.ode.single.SecondNonlinearAutonomousConserved",
        "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous",
        "sympy.solvers.ode.single.FirstExact",
        "sympy.functions",
        "sympy.solvers.ode.single.NthOrderReducible",
        "sympy.solvers.ode.single.FirstLinear",
        "sympy.solvers.ode.single.Factorable",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.solvers.ode.single.SinglePatternODESolver",
        "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters",
        "sympy.solvers.ode.single.LinearCoefficients",
        "sympy.core.symbol",
        "sympy.polys.matrices.linsolve",
        "sympy.polys.solvers",
        "sympy.solvers.ode.hypergeometric",
        "sympy.solvers.solvers",
        "sympy.solvers.ode.riccati",
        "sympy.solvers.ode.single.AlmostLinear",
        "sympy.core.exprtools",
        "sympy.solvers.ode.single.SingleODEProblem",
        "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep",
        "sympy.polys",
        "sympy.core",
        "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients",
        "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep",
        "sympy.solvers.ode.single.RationalRiccati",
        "sympy.solvers.ode.single.SeparableReduced",
        "sympy.solvers.ode.single.HomogeneousCoeffBest",
        "sympy.solvers.ode.ode",
        "sympy.simplify.simplify",
        "sympy.solvers.ode.single.Bernoulli",
        "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous"
    ],
    "sympy.solvers.ode.riccati": [
        "sympy.polys.polyroots",
        "sympy.integrals.integrals",
        "sympy.functions.elementary.complexes",
        "sympy.polys.polytools",
        "sympy.functions",
        "sympy.core.symbol",
        "sympy.core",
        "sympy.core.relational",
        "sympy.solvers.solveset",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.polys.domains",
        "sympy.core.add"
    ],
    "sympy.integrals": [
        "sympy.integrals.integrals",
        "sympy.integrals.singularityfunctions",
        "sympy.integrals.transforms"
    ],
    "sympy.integrals.transforms": [
        "sympy.polys.polyroots",
        "sympy.integrals.transforms.HankelTypeTransform",
        "sympy.functions.special.gamma_functions",
        "sympy.integrals.transforms.FourierTypeTransform",
        "sympy.functions.elementary.integers",
        "sympy.integrals.transforms.MellinTransformStripError",
        "sympy.core.sorting",
        "sympy.integrals.transforms.InverseCosineTransform",
        "sympy.integrals.transforms._noconds_.make_wrapper",
        "sympy.integrals.transforms.InverseMellinTransform",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.elementary.hyperbolic",
        "sympy.integrals.transforms.IntegralTransform",
        "sympy.core.function",
        "sympy.integrals.transforms.CosineTransform",
        "sympy.integrals",
        "sympy.functions.combinatorial.factorials",
        "sympy.functions.special.bessel",
        "sympy.integrals.transforms.InverseHankelTransform",
        "sympy.core.mul",
        "sympy.polys.polytools",
        "sympy.functions.elementary.exponential",
        "sympy.functions.special.hyper",
        "sympy.polys.rootoftools",
        "sympy.integrals.transforms.HankelTransform",
        "sympy.integrals.laplace",
        "sympy.core.add",
        "sympy.core.traversal",
        "sympy.integrals.transforms._noconds_",
        "sympy.functions.elementary.trigonometric",
        "sympy.functions.special.delta_functions",
        "sympy.integrals.transforms.SineCosineTypeTransform",
        "sympy.integrals.transforms.InverseFourierTransform",
        "sympy.integrals.transforms.SineTransform",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.logic.boolalg",
        "sympy.utilities.iterables",
        "sympy.functions.elementary.complexes",
        "sympy.integrals.transforms.IntegralTransformError",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.integrals.transforms.MellinTransform",
        "sympy.integrals.meijerint",
        "sympy.core.intfunc",
        "sympy.integrals.transforms.InverseSineTransform",
        "sympy.integrals.transforms.FourierTransform"
    ],
    "sympy.integrals.meijerint": [
        "sympy.functions.special.gamma_functions",
        "sympy.functions.elementary.integers",
        "sympy.core.sorting",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.elementary.hyperbolic",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.functions.combinatorial.factorials",
        "sympy.core.cache",
        "sympy.functions.special.bessel",
        "sympy.functions.special.elliptic_integrals",
        "sympy.core.mul",
        "sympy.integrals.integrals",
        "sympy.functions.elementary.exponential",
        "sympy.functions.special.hyper",
        "sympy.core.basic",
        "sympy.core.add",
        "sympy.functions.elementary.trigonometric",
        "sympy.functions.special.singularity_functions",
        "sympy.functions.special.delta_functions",
        "sympy.core.sympify",
        "sympy",
        "sympy.integrals.meijerint._CoeffExpValueError",
        "sympy.functions.special.error_functions",
        "sympy.core.relational",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.logic.boolalg",
        "sympy.utilities.iterables",
        "sympy.core.exprtools",
        "sympy.functions.elementary.complexes",
        "sympy.polys",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.utilities.timeutils",
        "sympy.core.intfunc",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.integrals.meijerint._CoeffExpValueError": [],
    "sympy.integrals.transforms.IntegralTransformError": [],
    "sympy.integrals.transforms.IntegralTransform": [
        "<builtin>.property"
    ],
    "sympy.integrals.transforms._noconds_": [],
    "sympy.integrals.transforms._noconds_.make_wrapper": [
        "functools.wraps"
    ],
    "sympy.integrals.transforms.MellinTransform": [],
    "sympy.integrals.transforms.MellinTransformStripError": [],
    "sympy.integrals.transforms.InverseMellinTransform": [
        "<builtin>.property"
    ],
    "sympy.integrals.transforms.FourierTypeTransform": [],
    "sympy.integrals.transforms.FourierTransform": [],
    "sympy.integrals.transforms.InverseFourierTransform": [],
    "sympy.integrals.transforms.SineCosineTypeTransform": [],
    "sympy.integrals.transforms.SineTransform": [],
    "sympy.integrals.transforms.InverseSineTransform": [],
    "sympy.integrals.transforms.CosineTransform": [],
    "sympy.integrals.transforms.InverseCosineTransform": [],
    "sympy.integrals.transforms.HankelTypeTransform": [
        "<builtin>.property"
    ],
    "sympy.integrals.transforms.HankelTransform": [],
    "sympy.integrals.transforms.InverseHankelTransform": [],
    "sympy.integrals.laplace": [
        "sympy.polys.polyroots",
        "sympy.functions.special.gamma_functions",
        "sympy.core.sorting",
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.elementary.hyperbolic",
        "sympy.integrals.laplace.LaplaceTransform",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.function",
        "sympy.integrals.laplace.InverseLaplaceTransform",
        "sympy.integrals",
        "sympy.core.cache",
        "sympy.functions.special.bessel",
        "sympy.core.mul",
        "sympy.polys.polytools",
        "sympy.functions.elementary.exponential",
        "sympy.core.expr",
        "sympy.polys.rootoftools",
        "sympy.core.add",
        "sympy.functions.elementary.trigonometric",
        "sympy.functions.special.singularity_functions",
        "sympy.polys.polyerrors",
        "sympy.functions.special.delta_functions",
        "sympy",
        "sympy.matrices.matrixbase",
        "sympy.functions.special.error_functions",
        "sympy.core.relational",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.logic.boolalg",
        "sympy.polys.rationaltools",
        "sympy.polys.matrices.linsolve",
        "sympy.integrals.laplace.DEBUG_WRAP",
        "sympy.functions.elementary.complexes",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.utilities.exceptions",
        "sympy.integrals.transforms",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.integrals.laplace.DEBUG_WRAP": [],
    "sympy.integrals.laplace.LaplaceTransform": [],
    "sympy.integrals.laplace.InverseLaplaceTransform": [
        "<builtin>.property"
    ],
    "sympy.integrals.singularityfunctions": [
        "sympy.integrals",
        "sympy.functions"
    ],
    "sympy.solvers.ode.hypergeometric": [
        "sympy.polys.polytools",
        "sympy.core.function",
        "sympy.polys",
        "sympy.functions",
        "sympy.core",
        "sympy.simplify.powsimp",
        "sympy.core.relational",
        "sympy.simplify",
        "sympy.solvers.ode.ode",
        "sympy.simplify.simplify",
        "sympy.core.symbol",
        "sympy.integrals"
    ],
    "sympy.solvers.ode.nonhomogeneous": [
        "sympy.core.function",
        "sympy.polys",
        "sympy.functions",
        "sympy.matrices",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.simplify.trigsimp",
        "sympy.simplify.powsimp",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.simplify",
        "sympy.solvers.ode.subscheck",
        "sympy.solvers.ode.ode",
        "sympy.simplify.simplify",
        "sympy.core.symbol",
        "sympy.integrals",
        "sympy.solvers.solvers"
    ],
    "sympy.solvers.ode.subscheck": [
        "sympy.core.function",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.solvers",
        "sympy.solvers.deutils",
        "sympy.core",
        "sympy.simplify.trigsimp",
        "sympy.logic.boolalg",
        "sympy.core.relational",
        "sympy.utilities.iterables",
        "sympy.simplify.simplify",
        "sympy.core.symbol",
        "sympy.simplify.sqrtdenest",
        "sympy.series"
    ],
    "sympy.solvers.ode.lie_group": [
        "sympy.integrals.integrals",
        "sympy.core.exprtools",
        "sympy.polys.polytools",
        "sympy.core.function",
        "sympy.polys",
        "sympy.solvers.pde",
        "sympy.functions",
        "sympy.solvers",
        "sympy.solvers.deutils",
        "sympy.core",
        "sympy.simplify.powsimp",
        "sympy.utilities",
        "sympy.core.relational",
        "sympy.simplify",
        "sympy.solvers.ode.ode",
        "sympy.simplify.simplify",
        "sympy.core.symbol"
    ],
    "sympy.solvers.pde": [
        "sympy.integrals.integrals",
        "sympy.core.function",
        "sympy.functions",
        "sympy.solvers.deutils",
        "sympy.simplify.radsimp",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.relational",
        "sympy.utilities.iterables",
        "sympy.simplify.simplify",
        "sympy.core.symbol",
        "sympy.solvers.solvers"
    ],
    "sympy.solvers.ode.single.ODEMatchError": [],
    "sympy.solvers.ode.single.SingleODEProblem": [
        "sympy.core.cache.cached_property"
    ],
    "sympy.core.cache.cached_property": [
        "<builtin>.object",
        "<builtin>.property"
    ],
    "sympy.solvers.ode.single.SingleODESolver": [],
    "sympy.solvers.ode.single.SinglePatternODESolver": [],
    "sympy.solvers.ode.single.NthAlgebraic": [
        "<builtin>.staticmethod"
    ],
    "sympy.solvers.ode.single.FirstExact": [],
    "sympy.solvers.ode.single.FirstLinear": [],
    "sympy.solvers.ode.single.AlmostLinear": [],
    "sympy.solvers.ode.single.Bernoulli": [],
    "sympy.solvers.ode.single.Factorable": [],
    "sympy.solvers.ode.single.RiccatiSpecial": [],
    "sympy.solvers.ode.single.RationalRiccati": [],
    "sympy.solvers.ode.single.SecondNonlinearAutonomousConserved": [],
    "sympy.solvers.ode.single.Liouville": [],
    "sympy.solvers.ode.single.Separable": [],
    "sympy.solvers.ode.single.SeparableReduced": [],
    "sympy.solvers.ode.single.HomogeneousCoeffSubsDepDivIndep": [],
    "sympy.solvers.ode.single.HomogeneousCoeffSubsIndepDivDep": [],
    "sympy.solvers.ode.single.HomogeneousCoeffBest": [],
    "sympy.solvers.ode.single.LinearCoefficients": [],
    "sympy.solvers.ode.single.NthOrderReducible": [],
    "sympy.solvers.ode.single.SecondHypergeometric": [],
    "sympy.solvers.ode.single.NthLinearConstantCoeffHomogeneous": [],
    "sympy.solvers.ode.single.NthLinearConstantCoeffVariationOfParameters": [],
    "sympy.solvers.ode.single.NthLinearConstantCoeffUndeterminedCoefficients": [],
    "sympy.solvers.ode.single.NthLinearEulerEqHomogeneous": [],
    "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousVariationOfParameters": [],
    "sympy.solvers.ode.single.NthLinearEulerEqNonhomogeneousUndeterminedCoefficients": [],
    "sympy.solvers.ode.single.SecondLinearBessel": [],
    "sympy.solvers.ode.single.SecondLinearAiry": [],
    "sympy.solvers.ode.single.LieGroup": [],
    "sympy.solvers.ode.systems": [
        "sympy.core.sorting",
        "sympy.simplify",
        "sympy.solvers.ode.systems.ODENonlinearError",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.functions.combinatorial.factorials",
        "sympy.simplify.ratsimp",
        "sympy.integrals.integrals",
        "sympy.solvers.deutils",
        "sympy.solvers.ode.systems.ODEOrderError",
        "sympy.simplify.radsimp",
        "sympy.functions",
        "sympy.simplify.powsimp",
        "sympy.core.relational",
        "sympy.solvers.solveset",
        "sympy.core.symbol",
        "sympy.utilities.iterables",
        "sympy.core.exprtools",
        "sympy.polys",
        "sympy.matrices",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.simplify.simplify",
        "sympy.sets.sets"
    ],
    "sympy.solvers.ode.systems.ODEOrderError": [],
    "sympy.solvers.ode.systems.ODENonlinearError": [],
    "sympy.solvers.inequalities": [
        "sympy.core.singleton",
        "sympy.core.exprtools",
        "sympy.functions.elementary.complexes",
        "sympy.core.function",
        "sympy.polys",
        "sympy.core.sympify",
        "sympy.polys.polyutils",
        "sympy.utilities.misc",
        "sympy.core.relational",
        "sympy.solvers.solveset",
        "sympy.utilities.iterables",
        "sympy.calculus.util",
        "sympy.core.symbol",
        "sympy.logic",
        "sympy.sets.sets"
    ],
    "sympy.logic": [
        "sympy.logic.inference",
        "sympy.logic.boolalg"
    ],
    "sympy.solvers.decompogen": [
        "sympy.core.singleton",
        "sympy.polys",
        "sympy.core.sympify",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.core.relational",
        "sympy.functions.elementary.miscellaneous"
    ],
    "sympy.solvers.simplex": [
        "sympy.core.singleton",
        "sympy.core.exprtools",
        "sympy.functions.elementary.complexes",
        "sympy.core.sympify",
        "sympy.core.sorting",
        "sympy.utilities.misc",
        "sympy.matrices.dense",
        "sympy.core.relational",
        "sympy.solvers.solveset",
        "sympy.utilities.iterables",
        "sympy.solvers.simplex.UnboundedLPError",
        "sympy.core.symbol",
        "sympy.solvers.simplex.InfeasibleLPError"
    ],
    "sympy.solvers.simplex.UnboundedLPError": [],
    "sympy.solvers.simplex.InfeasibleLPError": [],
    "sympy.vector.scalar": [
        "sympy.core.sympify",
        "sympy.vector.scalar.BaseScalar",
        "sympy.printing.pretty.stringpict",
        "sympy.core",
        "sympy.printing.precedence"
    ],
    "sympy.vector.scalar.BaseScalar": [
        "<builtin>.property"
    ],
    "sympy.vector": [
        "sympy.vector.functions",
        "sympy.vector.parametricregion",
        "sympy.vector.integrals",
        "sympy.vector.dyadic",
        "sympy.vector.orienters",
        "sympy.vector.scalar",
        "sympy.vector.vector",
        "sympy.vector.implicitregion",
        "sympy.vector.coordsysrect",
        "sympy.vector.operators",
        "sympy.vector.deloperator",
        "sympy.vector.point"
    ],
    "sympy.vector.dyadic": [
        "sympy.core.expr",
        "sympy.matrices.immutable",
        "sympy.core",
        "sympy.vector.dyadic.Dyadic",
        "sympy.vector.dyadic.BaseDyadic",
        "sympy.vector.dyadic.DyadicMul",
        "sympy.vector.basisdependent",
        "sympy.vector.dyadic.DyadicZero",
        "sympy.vector",
        "sympy.vector.dyadic.DyadicAdd"
    ],
    "sympy.vector.dyadic.Dyadic": [
        "<builtin>.property"
    ],
    "sympy.vector.dyadic.BaseDyadic": [],
    "sympy.vector.dyadic.DyadicMul": [
        "<builtin>.property"
    ],
    "sympy.vector.dyadic.DyadicAdd": [],
    "sympy.vector.dyadic.DyadicZero": [],
    "sympy.vector.deloperator": [
        "sympy.vector.deloperator.Del",
        "sympy.vector.operators",
        "sympy.core"
    ],
    "sympy.vector.operators": [
        "sympy.vector.operators.Laplacian",
        "sympy.core.mul",
        "sympy.core.sympify",
        "sympy.core.expr",
        "sympy.core",
        "sympy.vector.operators.Curl",
        "sympy.vector.operators.Divergence",
        "sympy.vector.operators.Gradient",
        "sympy.vector.vector",
        "sympy.core.function",
        "sympy.vector.coordsysrect",
        "sympy.core.add"
    ],
    "sympy.vector.operators.Gradient": [],
    "sympy.vector.operators.Divergence": [],
    "sympy.vector.operators.Curl": [],
    "sympy.vector.operators.Laplacian": [],
    "sympy.vector.deloperator.Del": [],
    "sympy.vector.functions": [
        "sympy.core.singleton",
        "sympy.integrals.integrals",
        "sympy.core.sympify",
        "sympy.vector.dyadic",
        "sympy.vector.scalar",
        "sympy.vector.vector",
        "sympy.core.function",
        "sympy.simplify.simplify",
        "sympy.vector.coordsysrect",
        "sympy.vector.operators",
        "sympy.vector.deloperator"
    ],
    "sympy.vector.point": [
        "sympy.core.cache",
        "sympy.vector.point.Point",
        "sympy.vector.vector",
        "sympy.core.symbol",
        "sympy.vector.coordsysrect",
        "sympy.core.basic",
        "sympy.vector.functions"
    ],
    "sympy.vector.point.Point": [
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.vector.orienters": [
        "sympy.functions.elementary.trigonometric",
        "sympy.core.cache",
        "sympy.vector.orienters.AxisOrienter",
        "sympy.core.sympify",
        "sympy.vector.orienters.QuaternionOrienter",
        "sympy.matrices.immutable",
        "sympy.matrices.dense",
        "sympy.vector.orienters.ThreeAngleOrienter",
        "sympy.vector.orienters.Orienter",
        "sympy.core.symbol",
        "sympy.core.basic",
        "sympy.vector.orienters.SpaceOrienter",
        "sympy.vector",
        "sympy.vector.orienters.BodyOrienter"
    ],
    "sympy.vector.orienters.Orienter": [],
    "sympy.vector.orienters.AxisOrienter": [
        "<builtin>.property",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.vector.orienters.ThreeAngleOrienter": [
        "<builtin>.property"
    ],
    "sympy.vector.orienters.BodyOrienter": [],
    "sympy.vector.orienters.SpaceOrienter": [],
    "sympy.vector.orienters.QuaternionOrienter": [
        "<builtin>.property"
    ],
    "sympy.vector.implicitregion": [
        "sympy.core.singleton",
        "sympy.functions.elementary.complexes",
        "sympy.polys.polytools",
        "sympy.polys",
        "sympy.vector.implicitregion.ImplicitRegion",
        "sympy.solvers",
        "sympy.solvers.diophantine",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.ntheory.factor_",
        "sympy.functions.elementary.miscellaneous",
        "sympy.solvers.solveset",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.geometry",
        "sympy.sets.sets"
    ],
    "sympy.solvers.diophantine": [
        "sympy.solvers.diophantine.diophantine"
    ],
    "sympy.geometry": [
        "sympy.geometry.exceptions",
        "sympy.geometry.util",
        "sympy.geometry.curve",
        "sympy.geometry.point",
        "sympy.geometry.polygon",
        "sympy.geometry.line",
        "sympy.geometry.ellipse",
        "sympy.geometry.plane",
        "sympy.geometry.parabola"
    ],
    "sympy.geometry.point": [
        "sympy.simplify",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.core.parameters",
        "sympy.geometry.exceptions",
        "mpmath.libmp.libmpf",
        "sympy.matrices.expressions",
        "sympy.core.add",
        "sympy.geometry.point.Point3D",
        "sympy.functions.elementary.trigonometric",
        "sympy.geometry.point.Point2D",
        "sympy.core.sympify",
        "sympy.utilities.iterables",
        "sympy.geometry.point.Point",
        "sympy.functions.elementary.complexes",
        "sympy.matrices",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.geometry.entity",
        "sympy.simplify.simplify"
    ],
    "sympy.geometry.exceptions": [
        "sympy.geometry.exceptions.GeometryError"
    ],
    "sympy.geometry.exceptions.GeometryError": [],
    "sympy.geometry.entity": [
        "sympy.multipledispatch.core.dispatch",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.multipledispatch.core.dispatch._",
        "sympy.multipledispatch",
        "sympy.geometry.entity.GeometrySet",
        "sympy.core.basic",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.evalf",
        "sympy.printing",
        "sympy.core.sympify",
        "sympy.utilities.iterables",
        "sympy.core.symbol",
        "sympy.geometry.entity.GeometryEntity",
        "sympy.solvers.solvers",
        "sympy.sets.handlers.union",
        "sympy.sets.handlers.intersection",
        "sympy.sets",
        "sympy.matrices",
        "sympy.utilities.misc",
        "<builtin>.range"
    ],
    "sympy.sets.handlers.intersection": [
        "sympy.core.singleton",
        "sympy.core.mul",
        "sympy.functions.elementary.complexes",
        "sympy.sets.conditionset",
        "sympy.multipledispatch",
        "sympy.functions.elementary.integers",
        "sympy.core.symbol",
        "sympy.core.sorting",
        "sympy.simplify.radsimp",
        "sympy.multipledispatch.dispatcher.Dispatcher.register",
        "sympy.multipledispatch.dispatcher.Dispatcher.register._",
        "sympy.core.relational",
        "sympy.sets.sets",
        "sympy.multipledispatch.dispatcher.Dispatcher.__init__",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.basic",
        "sympy.sets.fancysets"
    ],
    "sympy.multipledispatch.dispatcher.Dispatcher.register": [],
    "sympy.multipledispatch.dispatcher.Dispatcher.register._": [
        "sympy.multipledispatch.dispatcher.Dispatcher.add"
    ],
    "sympy.sets.handlers.union": [
        "sympy.core.singleton",
        "sympy.core.sympify",
        "sympy.multipledispatch",
        "sympy.multipledispatch.dispatcher.Dispatcher.register._",
        "sympy.functions.elementary.miscellaneous",
        "sympy.multipledispatch.dispatcher.Dispatcher.__init__",
        "sympy.multipledispatch.dispatcher.Dispatcher.register",
        "sympy.sets.fancysets",
        "sympy.sets.sets"
    ],
    "sympy.geometry.entity.GeometryEntity": [
        "<builtin>.property"
    ],
    "sympy.geometry.entity.GeometrySet": [],
    "sympy.geometry.point.Point": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.geometry.point.Point2D": [
        "<builtin>.property"
    ],
    "sympy.geometry.point.Point3D": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.geometry.line": [
        "sympy.core.singleton",
        "sympy.geometry.line.Line",
        "sympy.geometry.line.Segment2D",
        "sympy.core.sorting",
        "sympy.geometry.line.LinearEntity",
        "sympy.core.numbers",
        "sympy.core.containers",
        "sympy.geometry.line.Ray3D",
        "sympy.geometry.line.Line3D",
        "sympy.geometry.line.LinearEntity3D",
        "sympy.geometry.line.Segment3D",
        "sympy.geometry.exceptions",
        "sympy.geometry.util",
        "sympy.core.expr",
        "<builtin>.range",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.core.relational",
        "sympy.solvers.solveset",
        "sympy.geometry.line.Line2D",
        "sympy.logic.boolalg",
        "sympy.functions.elementary.piecewise",
        "sympy.core.symbol",
        "sympy.geometry.line.LinearEntity2D",
        "sympy.solvers.solvers",
        "sympy.matrices",
        "sympy.geometry.point",
        "sympy.utilities.misc",
        "sympy.geometry.line.Ray2D",
        "sympy.geometry.entity",
        "sympy.simplify.simplify",
        "sympy.geometry.line.Ray",
        "sympy.geometry.line.Segment",
        "sympy.sets.sets"
    ],
    "sympy.geometry.util": [
        "sympy.core.singleton",
        "sympy.core.exprtools",
        "sympy.polys.polytools",
        "sympy.geometry.exceptions",
        "sympy",
        "sympy.core.symbol",
        "sympy.geometry.point",
        "sympy.core.sorting",
        "mpmath.libmp.libmpf",
        "sympy.utilities.iterables",
        "sympy.geometry.entity",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.core.containers"
    ],
    "sympy.geometry.line.LinearEntity": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.geometry.line.Line": [],
    "sympy.geometry.line.Ray": [
        "<builtin>.property"
    ],
    "sympy.geometry.line.Segment": [
        "<builtin>.property"
    ],
    "sympy.geometry.line.LinearEntity2D": [
        "<builtin>.property"
    ],
    "sympy.geometry.line.Line2D": [
        "<builtin>.property"
    ],
    "sympy.geometry.line.Ray2D": [
        "<builtin>.property"
    ],
    "sympy.geometry.line.Segment2D": [],
    "sympy.geometry.line.LinearEntity3D": [
        "<builtin>.property"
    ],
    "sympy.geometry.line.Line3D": [],
    "sympy.geometry.line.Ray3D": [
        "<builtin>.property"
    ],
    "sympy.geometry.line.Segment3D": [],
    "sympy.geometry.plane": [
        "sympy.functions.elementary.trigonometric",
        "sympy.polys.polytools",
        "sympy.solvers",
        "sympy.matrices",
        "sympy.geometry.point",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.geometry.line",
        "mpmath.libmp.libmpf",
        "sympy.utilities.iterables",
        "sympy.geometry.entity",
        "sympy.core.symbol",
        "sympy.geometry.plane.Plane",
        "<builtin>.range"
    ],
    "sympy.geometry.plane.Plane": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.geometry.ellipse": [
        "sympy.core.sorting",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.numbers",
        "sympy.core.parameters",
        "sympy.functions.special.elliptic_integrals",
        "sympy.polys.polyutils",
        "sympy.geometry.exceptions",
        "sympy.geometry.util",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.simplify.trigsimp",
        "mpmath.libmp.libmpf",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.solvers",
        "sympy.geometry.polygon",
        "sympy.core.relational",
        "sympy.solvers.solveset",
        "sympy.core.symbol",
        "sympy.geometry.ellipse.Ellipse",
        "sympy.polys",
        "sympy.geometry.point",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.geometry.line",
        "sympy.geometry.ellipse.Circle",
        "sympy.geometry.entity",
        "sympy.simplify.simplify",
        "<builtin>.range"
    ],
    "sympy.geometry.ellipse.Ellipse": [
        "<builtin>.property"
    ],
    "sympy.geometry.ellipse.Circle": [
        "<builtin>.property"
    ],
    "sympy.geometry.polygon": [
        "sympy.core.sorting",
        "sympy.geometry.polygon.Polygon",
        "sympy.geometry.exceptions",
        "mpmath.libmp.libmpf",
        "sympy.geometry.polygon.Triangle",
        "sympy.geometry.ellipse",
        "sympy.logic",
        "sympy.functions.elementary.trigonometric",
        "sympy.core.evalf",
        "sympy.core.sympify",
        "sympy.utilities.iterables",
        "sympy.core.symbol",
        "sympy.functions.elementary.piecewise",
        "sympy.solvers.solvers",
        "sympy.functions.elementary.complexes",
        "sympy.matrices",
        "sympy.geometry.polygon.RegularPolygon",
        "sympy.geometry.point",
        "sympy.core",
        "sympy.utilities.misc",
        "sympy.geometry.line",
        "sympy.geometry.entity",
        "sympy.simplify.simplify",
        "<builtin>.range"
    ],
    "sympy.geometry.polygon.Polygon": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.geometry.polygon.RegularPolygon": [
        "<builtin>.property"
    ],
    "sympy.geometry.polygon.Triangle": [
        "<builtin>.property"
    ],
    "sympy.geometry.curve": [
        "sympy.matrices",
        "sympy.geometry.point",
        "sympy.core",
        "mpmath.libmp.libmpf",
        "sympy.geometry.curve.Curve",
        "sympy.utilities.iterables",
        "sympy.functions.elementary.miscellaneous",
        "sympy.geometry.entity",
        "sympy.core.symbol",
        "sympy.core.containers",
        "sympy.integrals"
    ],
    "sympy.geometry.curve.Curve": [
        "<builtin>.property"
    ],
    "sympy.geometry.parabola": [
        "sympy.functions",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.geometry.point",
        "sympy.geometry.line",
        "sympy.geometry.entity",
        "sympy.simplify.simplify",
        "sympy.core.symbol",
        "sympy.geometry.ellipse",
        "sympy.geometry.parabola.Parabola",
        "sympy.solvers.solvers"
    ],
    "sympy.geometry.parabola.Parabola": [
        "<builtin>.property"
    ],
    "sympy.vector.implicitregion.ImplicitRegion": [
        "<builtin>.property"
    ],
    "sympy.vector.parametricregion": [
        "sympy.functions.elementary.trigonometric",
        "functools.singledispatch",
        "sympy.solvers",
        "sympy.core",
        "sympy.simplify.trigsimp",
        "sympy.vector.parametricregion.ParametricRegion",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.geometry",
        "sympy.vector"
    ],
    "sympy.vector.parametricregion.ParametricRegion": [
        "<builtin>.property"
    ],
    "functools.singledispatch": [],
    "sympy.vector.integrals": [
        "sympy.core.singleton",
        "sympy.matrices",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.geometry.entity",
        "sympy.simplify.simplify",
        "sympy.utilities.iterables",
        "sympy.vector.integrals.ParametricIntegral",
        "sympy.integrals",
        "sympy.vector.operators",
        "sympy.vector"
    ],
    "sympy.vector.integrals.ParametricIntegral": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.vector.coordsysrect.CoordSys3D": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.vector.vector.Vector": [
        "<builtin>.property"
    ],
    "sympy.vector.vector.BaseVector": [
        "<builtin>.property"
    ],
    "sympy.vector.vector.VectorAdd": [],
    "sympy.vector.vector.VectorMul": [
        "<builtin>.property"
    ],
    "sympy.vector.vector.VectorZero": [],
    "sympy.vector.vector.Cross": [],
    "sympy.vector.vector.Dot": [],
    "sympy.vector.basisdependent.BasisDependent": [
        "sympy.core.decorators._sympifyit.deco",
        "sympy.core.decorators._sympifyit",
        "sympy.core.decorators.call_highest_priority.priority_decorator",
        "sympy.core.decorators.call_highest_priority"
    ],
    "sympy.vector.basisdependent.BasisDependentAdd": [],
    "sympy.vector.basisdependent.BasisDependentMul": [],
    "sympy.vector.basisdependent.BasisDependentZero": [
        "sympy.core.decorators.call_highest_priority.priority_decorator",
        "sympy.core.decorators.call_highest_priority"
    ],
    "sympy.printing.latex.LatexPrinter": [
        "<builtin>.property"
    ],
    "sympy.printing.mathml": [],
    "sympy.printing.python": [
        "sympy.printing.repr",
        "sympy.printing.str",
        "sympy.printing.python.PythonPrinter",
        "sympy"
    ],
    "sympy.printing.repr": [
        "sympy.printing.printer",
        "sympy.core.mul",
        "mpmath.libmp",
        "sympy.printing.printer.print_function",
        "sympy.printing.repr.ReprPrinter",
        "sympy.core.function",
        "sympy.printing.printer.print_function.decorator"
    ],
    "sympy.printing.repr.ReprPrinter": [],
    "sympy.printing.python.PythonPrinter": [],
    "sympy.printing.smtlib": [
        "sympy.functions.elementary.miscellaneous",
        "sympy.functions.elementary.hyperbolic",
        "sympy.printing.smtlib.SMTLibPrinter",
        "sympy.core.function",
        "sympy.functions.elementary.exponential",
        "mpmath.libmp.libmpf",
        "sympy.assumptions.ask",
        "sympy.assumptions.relation.equality",
        "sympy.functions.elementary.trigonometric",
        "sympy",
        "sympy.core.relational",
        "sympy.assumptions.assume",
        "sympy.logic.boolalg",
        "sympy.functions.elementary.piecewise",
        "sympy.printing.printer",
        "sympy.functions.elementary.complexes",
        "sympy.sets",
        "sympy.core",
        "sympy.assumptions.relation.binrel"
    ],
    "sympy.assumptions.relation.equality": [
        "sympy.assumptions",
        "sympy.assumptions.relation.equality.EqualityPredicate",
        "sympy.assumptions.relation.equality.LessThanPredicate",
        "sympy.core.relational",
        "sympy.assumptions.relation.equality.StrictGreaterThanPredicate",
        "sympy.assumptions.relation.binrel",
        "sympy.assumptions.relation.equality.StrictLessThanPredicate",
        "sympy.assumptions.relation.equality.GreaterThanPredicate",
        "sympy.assumptions.relation.equality.UnequalityPredicate"
    ],
    "sympy.assumptions.relation.equality.EqualityPredicate": [
        "<builtin>.property"
    ],
    "sympy.assumptions.relation.equality.UnequalityPredicate": [
        "<builtin>.property"
    ],
    "sympy.assumptions.relation.equality.StrictGreaterThanPredicate": [
        "<builtin>.property"
    ],
    "sympy.assumptions.relation.equality.GreaterThanPredicate": [
        "<builtin>.property"
    ],
    "sympy.assumptions.relation.equality.StrictLessThanPredicate": [
        "<builtin>.property"
    ],
    "sympy.assumptions.relation.equality.LessThanPredicate": [
        "<builtin>.property"
    ],
    "sympy.printing.smtlib.SMTLibPrinter": [],
    "sympy.printing.glsl": [
        "sympy.printing.glsl.GLSLPrinter",
        "sympy.printing.codeprinter",
        "sympy.core",
        "sympy.core.function",
        "sympy.core.numbers",
        "sympy.printing.precedence"
    ],
    "sympy.printing.glsl.GLSLPrinter": [
        "<builtin>.dict",
        "<builtin>.set"
    ],
    "sympy.printing.rcode": [
        "sympy.printing.codeprinter",
        "sympy.printing.rcode.RCodePrinter",
        "sympy.core.numbers",
        "sympy.sets.fancysets",
        "sympy.printing.precedence"
    ],
    "sympy.printing.rcode.RCodePrinter": [
        "<builtin>.dict",
        "<builtin>.set"
    ],
    "sympy.printing.jscode": [
        "sympy.printing.codeprinter",
        "sympy.core",
        "sympy.printing.precedence",
        "sympy.core.numbers",
        "sympy.printing.jscode.JavascriptCodePrinter"
    ],
    "sympy.printing.jscode.JavascriptCodePrinter": [
        "<builtin>.dict"
    ],
    "sympy.printing.julia": [
        "sympy.printing.julia.JuliaCodePrinter",
        "sympy.core.mul",
        "sympy.printing.codeprinter",
        "sympy.core",
        "sympy.core.numbers",
        "sympy.printing.precedence"
    ],
    "sympy.printing.julia.JuliaCodePrinter": [
        "<builtin>.dict"
    ],
    "sympy.printing.mathematica": [
        "sympy.printing.codeprinter",
        "sympy.core.sorting",
        "sympy.core",
        "sympy.printing.precedence",
        "sympy.printing.mathematica.MCodePrinter"
    ],
    "sympy.printing.mathematica.MCodePrinter": [
        "<builtin>.dict",
        "<builtin>.set"
    ],
    "sympy.printing.octave": [
        "sympy.core.mul",
        "sympy.printing.codeprinter",
        "sympy.core",
        "sympy.printing.octave.OctaveCodePrinter",
        "sympy.core.numbers",
        "sympy.printing.precedence"
    ],
    "sympy.printing.octave.OctaveCodePrinter": [
        "<builtin>.dict"
    ],
    "sympy.printing.rust": [
        "sympy.core.numbers",
        "sympy.printing.rust.RustCodePrinter",
        "sympy.printing.codeprinter",
        "sympy.core"
    ],
    "sympy.printing.rust.RustCodePrinter": [
        "<builtin>.dict",
        "<builtin>.set"
    ],
    "sympy.printing.gtk": [
        "sympy.printing.mathml",
        "sympy.utilities.mathml"
    ],
    "sympy.utilities.mathml": [
        "sympy.utilities.decorator",
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.utilities.decorator.doctest_depends_on"
    ],
    "sympy.printing.preview": [
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.utilities.decorator",
        "sympy.utilities.misc",
        "sympy.utilities.decorator.doctest_depends_on",
        "sympy.printing.latex"
    ],
    "sympy.printing.tree": [],
    "sympy.printing.tableform": [
        "sympy.core.singleton",
        "sympy.core.sympify",
        "sympy.core.symbol",
        "sympy.core.containers",
        "sympy.printing.tableform.TableForm"
    ],
    "sympy.printing.tableform.TableForm": [],
    "sympy.printing.dot": [
        "sympy.core.expr",
        "sympy.core.symbol",
        "sympy.core.numbers",
        "sympy.printing.repr",
        "sympy.core.basic"
    ],
    "sympy.printing.maple": [
        "sympy",
        "sympy.printing.codeprinter",
        "sympy.core",
        "sympy.printing.maple.MapleCodePrinter",
        "sympy.core.numbers",
        "sympy.printing.precedence"
    ],
    "sympy.printing.maple.MapleCodePrinter": [
        "<builtin>.dict"
    ],
    "sympy.matrices.reductions": [
        "sympy.matrices.utilities",
        "sympy.polys.polyerrors",
        "sympy.polys.domains",
        "sympy.matrices.determinant"
    ],
    "sympy.matrices.inverse": [
        "sympy.matrices.utilities",
        "sympy.polys.matrices.exceptions",
        "sympy.polys.domains",
        "sympy.matrices.exceptions"
    ],
    "sympy.matrices.subspaces": [
        "sympy.matrices.utilities"
    ],
    "sympy.matrices.graph": [
        "sympy.matrices.exceptions",
        "sympy.utilities.iterables"
    ],
    "sympy.matrices.matrixbase.MatrixBase": [
        "sympy.core.decorators.call_highest_priority.priority_decorator",
        "sympy.core.decorators.call_highest_priority",
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.matrices.matrixbase.DeferredVector": [],
    "sympy.concrete.expr_with_limits.ExprWithLimits": [
        "<builtin>.property"
    ],
    "sympy.concrete.expr_with_limits.AddWithLimits": [],
    "sympy.integrals.rationaltools": [
        "sympy.functions.elementary.trigonometric",
        "sympy.core.singleton",
        "sympy.polys.polyroots",
        "sympy.polys.polytools",
        "sympy.core.function",
        "sympy.functions.elementary.exponential",
        "sympy.polys",
        "sympy.polys.rootoftools",
        "sympy.core.symbol",
        "sympy.core.numbers"
    ],
    "sympy.tensor.functions": [
        "sympy.core.singleton",
        "sympy.core.mul",
        "functools.singledispatch",
        "sympy.core.sympify",
        "sympy.core.expr",
        "sympy.tensor.functions.TensorProduct",
        "sympy.tensor.functions.NoShapeError",
        "sympy.core.parameters"
    ],
    "sympy.tensor.functions.TensorProduct": [
        "<builtin>.property"
    ],
    "sympy.tensor.functions.NoShapeError": [],
    "sympy.integrals.integrals.Integral": [
        "<builtin>.property"
    ],
    "sympy.integrals.deltafunctions": [
        "sympy.core.singleton",
        "sympy.integrals.integrals",
        "sympy.core.mul",
        "sympy.functions",
        "sympy.core.sorting"
    ],
    "sympy.integrals.trigonometry": [
        "sympy.integrals.integrals",
        "sympy.functions",
        "sympy.core",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.evalf.PrecisionExhausted": [],
    "sympy.core.evalf.EvalfMixin": [],
    "sympy.core.expr.Expr": [
        "sympy.core.decorators.sympify_return.wrapper",
        "sympy.core.decorators.call_highest_priority.priority_decorator",
        "sympy.core.decorators.call_highest_priority",
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.decorators.sympify_return",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.expr.AtomicExpr": [
        "<builtin>.property"
    ],
    "sympy.core.expr.UnevaluatedExpr": [],
    "sympy.core.expr.ExprBuilder": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.numbers.Number": [
        "sympy.core.decorators._sympifyit.deco",
        "<builtin>.classmethod",
        "sympy.core.decorators._sympifyit",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.numbers.Float": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.decorators._sympifyit",
        "sympy.core.decorators._sympifyit.deco"
    ],
    "sympy.core.numbers.Rational": [
        "sympy.core.decorators._sympifyit.deco",
        "<builtin>.property",
        "sympy.core.decorators._sympifyit",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.numbers.Integer": [
        "sympy.core.decorators._sympifyit.deco",
        "sympy.core.decorators._sympifyit",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.numbers.AlgebraicNumber": [
        "<builtin>.property",
        "<builtin>.set"
    ],
    "sympy.core.numbers.RationalConstant": [],
    "sympy.core.numbers.IntegerConstant": [],
    "sympy.core.numbers.Zero": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.numbers.One": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.numbers.NegativeOne": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.numbers.Half": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.numbers.Infinity": [
        "sympy.core.decorators._sympifyit",
        "sympy.core.decorators._sympifyit.deco"
    ],
    "sympy.core.numbers.NegativeInfinity": [
        "sympy.core.decorators._sympifyit",
        "sympy.core.decorators._sympifyit.deco"
    ],
    "sympy.core.numbers.NaN": [
        "sympy.core.decorators._sympifyit",
        "sympy.core.decorators._sympifyit.deco"
    ],
    "sympy.matrices.matrixbase.MatrixBase.add": [],
    "sympy.core.numbers.ComplexInfinity": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.numbers.NumberSymbol": [],
    "sympy.core.numbers.Exp1": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.numbers.Pi": [
        "<builtin>.staticmethod"
    ],
    "sympy.core.numbers.GoldenRatio": [],
    "sympy.core.numbers.TribonacciConstant": [],
    "sympy.core.numbers.EulerGamma": [],
    "sympy.core.numbers.Catalan": [],
    "sympy.core.numbers.ImaginaryUnit": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.core.numbers._register_classes": [],
    "sympy.core.add.Add": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "<builtin>.staticmethod",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.function.PoleError": [],
    "sympy.core.function.ArgumentIndexError": [],
    "sympy.core.function.BadSignatureError": [],
    "sympy.core.function.BadArgumentsError": [],
    "sympy.core.function.FunctionClass": [
        "<builtin>.property"
    ],
    "sympy.core.function.Application": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.function.Function": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.cache.__cacheit_nocache",
        "sympy.core.cache.__cacheit.func_wrapper",
        "sympy.core.cache.__cacheit_debug.func_wrapper"
    ],
    "sympy.core.function.AppliedUndef": [
        "<builtin>.property"
    ],
    "sympy.core.function.UndefSageHelper": [],
    "sympy.core.function.UndefinedFunction": [
        "<builtin>.property"
    ],
    "sympy.core.function.WildFunction": [
        "<builtin>.set"
    ],
    "sympy.core.function.Derivative": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "sympy.core.decorators._sympifyit",
        "sympy.core.decorators._sympifyit.deco"
    ],
    "sympy.core.function.Lambda": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "sympy.core.function.Subs": [
        "<builtin>.property"
    ],
    "<builtin>.sum": [],
    "sympy.core.sorting._node_count": [
        "<builtin>.map",
        "<builtin>.sum"
    ],
    "sympy.ntheory.factor_.divisor_sigma": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.ntheory.residue_ntheory.jacobi_symbol": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.sets.sets.Set.is_EmptySet": [],
    "sympy.ntheory.generate.primepi": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.ntheory.factor_.primeomega": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.core.traversal.preorder_traversal.__init__": [
        "sympy.core.traversal.preorder_traversal._preorder_traversal"
    ],
    "sympy.core.traversal.preorder_traversal._preorder_traversal": [
        "<builtin>.hasattr",
        "<builtin>.isinstance",
        "sympy.core.traversal.preorder_traversal._preorder_traversal",
        "sympy.utilities.iterables.iterable",
        "sympy.core.sorting.ordered"
    ],
    "sympy.core.traversal.bottom_up": [
        "sympy.core.traversal.bottom_up",
        "<builtin>.tuple",
        "<builtin>.getattr"
    ],
    "sympy.ntheory.factor_.primenu": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.ntheory.factor_.reduced_totient": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.ntheory.factor_.udivisor_sigma": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.ntheory.factor_.totient": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.core.traversal.walk": [
        "sympy.core.traversal.walk",
        "<builtin>.isinstance"
    ],
    "sympy.ntheory.partitions_.npartitions": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.utilities.iterables.interactive_traversal": [
        "sympy.interactive.traversal.interactive_traversal",
        "sympy.interactive.traversal"
    ],
    "sympy.interactive.traversal": [
        "sympy.core.basic",
        "sympy.printing"
    ],
    "sympy.interactive.traversal.interactive_traversal": [
        "sympy.interactive.traversal.interactive_traversal._interactive_traversal"
    ],
    "sympy.interactive.traversal.interactive_traversal._interactive_traversal": [
        "sympy.printing.pretty.pretty.pprint",
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.input",
        "<builtin>.isinstance",
        "<builtin>.enumerate",
        "<builtin>.list",
        "<builtin>.len",
        "<builtin>.print",
        "sympy.interactive.traversal.interactive_traversal.cprint"
    ],
    "sympy.interactive.traversal.interactive_traversal.cprint": [
        "<builtin>.print",
        "<builtin>.map"
    ],
    "sympy.printing.pretty.pretty.pprint": [],
    "<builtin>.input": [],
    "sympy.ntheory.residue_ntheory.mobius": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.ntheory.residue_ntheory.legendre_symbol": [
        "sympy.functions.combinatorial.numbers"
    ],
    "sympy.sets.sets.EmptySet.is_EmptySet": [],
    "sympy.utilities.iterables.default_sort_key": [
        "sympy"
    ],
    "sympy.utilities.iterables.ordered": [
        "sympy"
    ],
    "sympy.core.sympify.SympifyError": [],
    "sympy.core.sympify.CantSympify": [],
    "sympy.discrete": [
        "sympy.discrete.convolutions",
        "sympy.discrete.transforms"
    ],
    "sympy.tensor": [
        "sympy.tensor.array",
        "sympy.tensor.index_methods",
        "sympy.tensor.indexed",
        "sympy.tensor.functions"
    ],
    "sympy.tensor.index_methods": [
        "sympy.functions",
        "sympy.utilities",
        "sympy.tensor.index_methods.IndexConformanceException",
        "sympy.tensor.indexed",
        "sympy.core.function"
    ],
    "sympy.tensor.index_methods.IndexConformanceException": [],
    "sympy.parsing": [
        "sympy.parsing.sympy_parser"
    ],
    "sympy.parsing.sympy_parser": [
        "sympy.parsing.sympy_parser.ParenthesisGroup",
        "sympy.parsing.sympy_parser.EvaluateFalseTransformer",
        "sympy.parsing.sympy_parser._T",
        "sympy.utilities.misc",
        "sympy.core",
        "sympy.assumptions.ask",
        "sympy.parsing.sympy_parser.split_symbols_custom",
        "<map>.items",
        "sympy.parsing.sympy_parser._T.__init__",
        "sympy.functions.elementary.miscellaneous",
        "sympy.utilities.misc.func_name",
        "sympy.core.function",
        "sympy.core.basic",
        "sympy.parsing.sympy_parser.AppliedFunction"
    ],
    "sympy.parsing.sympy_parser.ParenthesisGroup": [],
    "sympy.parsing.sympy_parser.AppliedFunction": [],
    "sympy.parsing.sympy_parser.split_symbols_custom": [],
    "sympy.parsing.sympy_parser.EvaluateFalseTransformer": [],
    "sympy.utilities.misc.func_name": [
        "<builtin>.str",
        "<map>.get",
        "<builtin>.type",
        "<builtin>.getattr"
    ],
    "sympy.parsing.sympy_parser._T": [],
    "sympy.parsing.sympy_parser._T.__init__": [
        "<builtin>.len"
    ],
    "sympy.calculus": [
        "sympy.calculus.accumulationbounds",
        "sympy.calculus.singularities",
        "sympy.calculus.euler",
        "sympy.calculus.finite_diff",
        "sympy.calculus.util"
    ],
    "sympy.calculus.euler": [
        "sympy.core.singleton",
        "sympy.core.function",
        "sympy.core.sympify",
        "sympy.core.relational",
        "sympy.utilities.iterables",
        "sympy.core.symbol"
    ],
    "sympy.calculus.finite_diff": [
        "sympy.core.singleton",
        "sympy.core.function",
        "sympy.utilities.exceptions",
        "sympy.utilities.iterables",
        "sympy.core.traversal"
    ],
    "sympy.algebras": [
        "sympy.algebras.quaternion"
    ],
    "sympy.algebras.quaternion": [
        "sympy.functions.elementary.trigonometric",
        "sympy.core.singleton",
        "sympy.integrals.integrals",
        "sympy.functions.elementary.complexes",
        "sympy.functions.elementary.exponential",
        "sympy.core.sympify",
        "sympy.core.logic",
        "sympy.core.expr",
        "sympy.algebras.quaternion.Quaternion",
        "sympy.simplify.trigsimp",
        "sympy.utilities.misc",
        "mpmath.libmp.libmpf",
        "sympy.matrices.dense",
        "sympy.core.relational",
        "sympy.functions.elementary.miscellaneous",
        "sympy.core.numbers"
    ],
    "sympy.algebras.quaternion.Quaternion": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "sympy.core.cache.lazy_function": [
        "sympy.core.cache.lazy_function.LazyFunctionMeta",
        "sympy.core.cache.lazy_function.LazyFunction"
    ],
    "sympy.core.cache.lazy_function.LazyFunctionMeta": [
        "<builtin>.property"
    ],
    "sympy.core.cache.lazy_function.LazyFunction": [
        "<builtin>.property"
    ],
    "sympy.plotting.plot": [
        "sympy.plotting.series",
        "sympy.core.function",
        "sympy.functions",
        "sympy.plotting.backends.base_backend",
        "sympy.core.expr",
        "sympy.plotting.backends.matplotlibbackend",
        "sympy.plotting.backends.textbackend",
        "sympy.plotting.plotgrid",
        "sympy.plotting.utils",
        "sympy.external",
        "sympy.plotting.textplot",
        "sympy.tensor.indexed",
        "sympy.core.symbol",
        "sympy.concrete.summations",
        "sympy.core.containers"
    ],
    "sympy.plotting.backends.base_backend": [
        "sympy.plotting.series",
        "sympy.plotting.backends.base_backend.Plot",
        "sympy.utilities.exceptions",
        "sympy.utilities.iterables"
    ],
    "sympy.plotting.series": [
        "sympy.printing.pycode",
        "sympy.plotting.series.Parametric3DLineSeries",
        "sympy.core.sorting",
        "sympy.external",
        "sympy.calculus.util",
        "sympy.printing.latex",
        "sympy.core.function",
        "sympy.concrete",
        "sympy.core.containers",
        "sympy.plotting.series.IntervalMathPrinter",
        "sympy.plotting.series.List2DSeries",
        "sympy.plotting.series.ParametricSurfaceSeries",
        "sympy.plotting.series.Line2DBaseSeries",
        "sympy.core.expr",
        "sympy.plotting.series.Parametric2DLineSeries",
        "sympy.utilities.lambdify",
        "sympy.plotting.intervalmath",
        "sympy.printing.precedence",
        "sympy.plotting.series.ImplicitSeries",
        "sympy.plotting.series.ParametricLineBaseSeries",
        "sympy.core.sympify",
        "sympy.functions",
        "sympy.plotting.series.ContourSeries",
        "sympy.plotting.series.BaseSeries",
        "sympy.plotting.utils",
        "sympy.core.relational",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.plotting.series.Line3DBaseSeries",
        "sympy.plotting.series.SurfaceBaseSeries",
        "sympy.plotting.series.LineOver1DRangeSeries",
        "sympy.utilities.exceptions",
        "sympy.plotting.series.SurfaceOver2DRangeSeries",
        "sympy.simplify.simplify",
        "sympy.plotting.series.GenericDataSeries",
        "sympy.sets.sets"
    ],
    "sympy.plotting.utils": [
        "sympy.core.sympify",
        "sympy.core.expr",
        "sympy.core.symbol",
        "sympy.logic.boolalg",
        "sympy.core.relational",
        "sympy.sets.sets",
        "sympy.tensor.indexed",
        "sympy.core.function",
        "sympy.core.containers",
        "sympy.core.basic",
        "sympy.sets.fancysets"
    ],
    "sympy.plotting.intervalmath": [
        "sympy.plotting.intervalmath.interval_arithmetic",
        "sympy.plotting.intervalmath.lib_interval"
    ],
    "sympy.plotting.intervalmath.interval_arithmetic": [
        "sympy.core.logic",
        "sympy.plotting.intervalmath.interval_arithmetic.interval",
        "sympy.plotting.intervalmath.interval_membership",
        "sympy.simplify.simplify",
        "sympy.core.numbers"
    ],
    "sympy.plotting.intervalmath.interval_membership": [
        "sympy.core.logic",
        "sympy.plotting.intervalmath.interval_membership.intervalMembership"
    ],
    "sympy.plotting.intervalmath.interval_membership.intervalMembership": [],
    "sympy.plotting.intervalmath.interval_arithmetic.interval": [
        "<builtin>.property"
    ],
    "sympy.plotting.intervalmath.lib_interval": [
        "sympy.external",
        "sympy.plotting.intervalmath"
    ],
    "sympy.plotting.series.IntervalMathPrinter": [],
    "sympy.plotting.series.BaseSeries": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.plotting.series.Line2DBaseSeries": [
        "<builtin>.property"
    ],
    "sympy.plotting.series.List2DSeries": [],
    "sympy.plotting.series.LineOver1DRangeSeries": [
        "<builtin>.property"
    ],
    "sympy.plotting.series.ParametricLineBaseSeries": [
        "<builtin>.property"
    ],
    "sympy.plotting.series.Parametric2DLineSeries": [],
    "sympy.plotting.series.Line3DBaseSeries": [],
    "sympy.plotting.series.Parametric3DLineSeries": [],
    "sympy.plotting.series.SurfaceBaseSeries": [],
    "sympy.plotting.series.SurfaceOver2DRangeSeries": [
        "<builtin>.property"
    ],
    "sympy.plotting.series.ParametricSurfaceSeries": [
        "<builtin>.property"
    ],
    "sympy.plotting.series.ContourSeries": [],
    "sympy.plotting.series.GenericDataSeries": [],
    "sympy.plotting.series.ImplicitSeries": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "sympy.plotting.backends.base_backend.Plot": [
        "<builtin>.property"
    ],
    "sympy.plotting.backends.matplotlibbackend": [
        "sympy.plotting.backends.matplotlibbackend.matplotlib"
    ],
    "sympy.plotting.backends.matplotlibbackend.matplotlib": [
        "sympy.plotting.backends.base_backend",
        "sympy.plotting.backends.matplotlibbackend.matplotlib.MatplotlibBackend",
        "sympy.external",
        "sympy.printing.latex",
        "sympy.core.basic"
    ],
    "sympy.plotting.backends.matplotlibbackend.matplotlib.MatplotlibBackend": [
        "<builtin>.staticmethod"
    ],
    "sympy.plotting.backends.textbackend": [
        "sympy.plotting.backends.textbackend.text"
    ],
    "sympy.plotting.backends.textbackend.text": [
        "sympy.plotting.series",
        "sympy.plotting.backends.base_backend",
        "sympy.plotting.textplot",
        "sympy.plotting.backends.textbackend.text.TextBackend"
    ],
    "sympy.plotting.textplot": [
        "sympy.core.numbers",
        "sympy.utilities.lambdify",
        "sympy.core.symbol"
    ],
    "sympy.plotting.backends.textbackend.text.TextBackend": [],
    "sympy.plotting.plotgrid": [
        "sympy.plotting.backends.base_backend",
        "sympy.external",
        "sympy.plotting.plotgrid.PlotGrid"
    ],
    "sympy.plotting.plotgrid.PlotGrid": [
        "<builtin>.property"
    ],
    "sympy.plotting": [
        "sympy.plotting.pygletplot",
        "sympy.plotting.plot",
        "sympy.plotting.plot_implicit",
        "sympy.plotting.textplot"
    ],
    "sympy.plotting.plot_implicit": [
        "sympy.plotting.series",
        "sympy.polys.polyutils",
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.utilities.decorator",
        "sympy.plotting.plot",
        "sympy.utilities.decorator.doctest_depends_on",
        "sympy.utilities.iterables",
        "sympy.core.symbol",
        "sympy.core.containers"
    ],
    "sympy.plotting.pygletplot": [
        "sympy.utilities.decorator",
        "sympy.utilities.decorator.doctest_depends_on.depends_on_deco",
        "sympy.utilities.decorator.doctest_depends_on"
    ],
    "sympy.interactive": [
        "sympy.interactive.session",
        "sympy.interactive.printing",
        "sympy.interactive.traversal"
    ],
    "sympy.interactive.printing": [
        "sympy.external.importtools",
        "sympy.utilities.misc",
        "sympy.printing.preview",
        "sympy.printing.latex",
        "sympy.printing.defaults"
    ],
    "sympy.interactive.session": [
        "sympy.external.gmpy",
        "sympy.utilities.misc",
        "sympy.external.importtools",
        "sympy.interactive.printing"
    ],
    "torch._guards.GuardSource": [],
    "torch._guards.GuardBuilderBase": [],
    "torch._guards.ShapeGuard": [],
    "torch._guards.Guard": [
        "<builtin>.staticmethod"
    ],
    "torch._guards.GuardEnvExpr": [],
    "torch._guards.DuplicateInputs": [],
    "torch._guards.Checkpointable": [
        "abc.abstractmethod"
    ],
    "torch._guards.GuardsCheckpointState": [
        "<builtin>.set"
    ],
    "torch._guards.GuardsContext": [],
    "torch._guards.TracingContext": [
        "<builtin>.staticmethod"
    ],
    "torch._guards.Source": [],
    "torch._subclasses.meta_utils": [
        "torch._prims_common",
        "torch._subclasses.meta_utils.MetaConverter",
        "torch.utils.weak",
        "torch._guards",
        "torch",
        "torch.multiprocessing.reductions"
    ],
    "torch.utils.weak": [
        "torch.utils.weak.WeakIdKeyDictionary",
        "torch.utils.weak.WeakIdRef"
    ],
    "torch.utils.weak.WeakIdRef": [],
    "torch.utils.weak.WeakIdKeyDictionary": [],
    "torch._subclasses.meta_utils.MetaConverter": [],
    "torch.fx.operator_schemas": [
        "<builtin>.dir",
        "torch.fx._compatibility.compatibility",
        "torch._ops",
        "<builtin>.type",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx.operator_schemas._nonzero_schemas",
        "torch.fx.node",
        "<builtin>.getattr",
        "torch._jit_internal",
        "torch.fx.operator_schemas._FakeGlobalNamespace",
        "torch.fx.operator_schemas.ArgsKwargsPair",
        "torch",
        "torch.fx._compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx._compatibility": [],
    "torch.fx.node": [
        "torch.fx._compatibility.compatibility",
        "torch._ops",
        "torch.fx.operator_schemas",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "<builtin>.float",
        "torch.fx.immutable_collections",
        "torch.fx.graph",
        "torch.fx.node.Node",
        "torch",
        "torch.fx._compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.immutable_collections": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx.immutable_collections._create_immutable_container",
        "torch.utils._pytree",
        "torch.utils._pytree._register_pytree_node",
        "torch.fx._compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.immutable_collections._create_immutable_container": [
        "<builtin>.setattr",
        "<builtin>.type"
    ],
    "torch.fx._compatibility.compatibility": [],
    "torch.fx._compatibility.compatibility.mark_not_back_compat": [
        "<builtin>.getattr"
    ],
    "torch.fx._compatibility.compatibility.mark_back_compat": [
        "<builtin>.getattr"
    ],
    "torch.fx.graph": [
        "torch.fx.graph.PythonCode",
        "torch.utils._pytree",
        "torch.fx.graph_module",
        "torch.fx.graph._InsertPoint",
        "torch.fx.graph._CustomBuiltin",
        "torch.fx._symbolic_trace",
        "torch.fx._compatibility",
        "torch.fx.graph.Graph",
        "torch.fx.graph._PyTreeInfo",
        "torch.fx.node",
        "torch.fx.graph._register_custom_builtin",
        "torch.fx._pytree",
        "<builtin>.type",
        "torch.fx.graph.CodeGen",
        "torch.fx.graph._PyTreeCodeGen",
        "torch.fx.graph._Namespace",
        "<builtin>.dict",
        "torch.fx.graph._node_list",
        "torch"
    ],
    "torch.fx._pytree": [
        "torch.utils._pytree",
        "torch.fx._pytree.register_pytree_flatten_spec"
    ],
    "torch.fx._pytree.register_pytree_flatten_spec": [],
    "torch.fx.graph_module": [
        "torch.nn",
        "torch.fx._compatibility.compatibility",
        "torch.package",
        "torch.fx.graph_module.GraphModule",
        "torch.overrides",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx.graph_module._EvalCacheLoader",
        "torch.fx.graph",
        "torch.fx.graph_module._WrappedCall",
        "torch.fx._compatibility",
        "torch.fx.graph_module._EvalCacheLoader.__init__",
        "torch",
        "torch.nn.modules.module",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.graph_module._EvalCacheLoader": [],
    "torch.fx.graph_module._EvalCacheLoader.__init__": [],
    "torch.fx.graph_module._WrappedCall": [
        "<builtin>.staticmethod"
    ],
    "torch.fx.graph_module.GraphModule": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "<builtin>.property",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx._symbolic_trace": [
        "torch.fx._symbolic_trace._PatchedFnSetItem",
        "torch.utils._pytree",
        "torch.fx._symbolic_trace.ProxyableClassMeta",
        "torch.fx.graph_module",
        "torch.fx._symbolic_trace.PHBase",
        "torch",
        "torch.fx._symbolic_trace._PatchedFnDel",
        "torch.fx._compatibility",
        "torch.fx._symbolic_trace._Patcher",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx.node",
        "torch.fx._symbolic_trace._PatchedFn",
        "torch.fx._compatibility.compatibility",
        "torch.fx._symbolic_trace._PatchedFnSetAttr",
        "torch.fx.graph",
        "torch.fx._symbolic_trace.wrap",
        "torch.fx.proxy",
        "torch.fx._symbolic_trace.Tracer"
    ],
    "torch.fx.proxy": [
        "torch.fx.proxy.Scope",
        "torch.fx.proxy.ScopeContextManager",
        "torch.fx.proxy.Attribute",
        "torch.fx.proxy.TracerBase",
        "torch.fx.operator_schemas",
        "torch.fx.proxy.GraphAppendingTracer",
        "torch.fx._compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat",
        "torch.fx.proxy._scope",
        "torch.fx.proxy.TraceError",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx.node",
        "torch.fx.traceback",
        "torch.fx._compatibility.compatibility",
        "torch.fx.proxy._define_reflectable",
        "torch.fx.proxy.ParameterProxy",
        "torch.fx.graph",
        "torch",
        "torch.fx.proxy.Proxy"
    ],
    "torch.fx.traceback": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx._compatibility",
        "contextlib.contextmanager",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.proxy.Scope": [],
    "torch.fx.proxy.ScopeContextManager": [],
    "torch.fx.proxy.TracerBase": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.proxy.GraphAppendingTracer": [],
    "torch.fx.proxy.TraceError": [],
    "torch.fx.proxy.Proxy": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "<builtin>.classmethod",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.proxy.Attribute": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "<builtin>.property",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.proxy.ParameterProxy": [
        "<builtin>.property"
    ],
    "torch.fx.proxy._scope": [
        "<builtin>.setattr"
    ],
    "torch.fx.proxy._define_reflectable": [
        "<builtin>.setattr"
    ],
    "torch.fx._symbolic_trace.ProxyableClassMeta": [],
    "torch.fx._symbolic_trace.PHBase": [],
    "torch.fx._symbolic_trace.Tracer": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx._symbolic_trace._PatchedFn": [],
    "torch.fx._symbolic_trace._PatchedFnSetItem": [],
    "torch.fx._symbolic_trace._PatchedFnDel": [],
    "torch.fx._symbolic_trace._PatchedFnSetAttr": [],
    "torch.fx._symbolic_trace._Patcher": [],
    "torch.fx._symbolic_trace.wrap": [
        "<builtin>.RuntimeError",
        "<builtin>.NotImplementedError",
        "<builtin>.callable",
        "<builtin>.isinstance"
    ],
    "<builtin>.NotImplementedError": [],
    "torch.fx.graph._CustomBuiltin": [],
    "torch.fx.graph._register_custom_builtin": [],
    "torch.fx.graph._Namespace": [],
    "torch.fx.graph.PythonCode": [],
    "torch.fx.graph._InsertPoint": [],
    "torch.fx.graph._node_list": [],
    "torch.fx.graph._PyTreeInfo": [],
    "torch.fx.graph.CodeGen": [],
    "torch.fx.graph._PyTreeCodeGen": [],
    "torch.fx.graph.Graph": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "<builtin>.property",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.node.Node": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "<builtin>.property",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.operator_schemas.ArgsKwargsPair": [],
    "torch.fx.operator_schemas._nonzero_schemas": [
        "append"
    ],
    "torch.fx.operator_schemas._FakeGlobalNamespace": [],
    "torch.utils._mode_utils": [
        "torch",
        "typing.TypeVar",
        "contextlib.contextmanager"
    ],
    "torch.utils._stats": [],
    "torch._subclasses.fake_tensor.IncrementRecursionCount": [],
    "torch._subclasses.fake_tensor.UnsupportedFakeTensorException": [],
    "torch._subclasses.fake_tensor.DynamicOutputShapeException": [],
    "torch._subclasses.fake_tensor.DataDependentOutputException": [],
    "torch._subclasses.fake_tensor.FakeTensorConverter": [
        "<builtin>.property"
    ],
    "torch._subclasses.fake_tensor.register_op_impl": [],
    "torch._subclasses.fake_tensor.register_op_impl.impl_decorator": [
        "append",
        "<builtin>.isinstance"
    ],
    "torch._subclasses.fake_tensor.FakeTensorConfig": [],
    "torch._subclasses.fake_tensor.FakeTensor": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "torch.utils._stats.count",
        "<builtin>.staticmethod"
    ],
    "torch.utils._stats.count": [],
    "torch._subclasses.fake_tensor.FakeTensorMode": [
        "<builtin>.property",
        "torch.utils._stats.count"
    ],
    "torch._subclasses.fake_tensor.FakeCopyMode": [],
    "torch._prims.ELEMENTWISE_PRIM_TYPE_PROMOTION_KIND": [],
    "torch._prims._make_elementwise_unary_prim": [
        "torch._prims._make_prim",
        "functools.partial"
    ],
    "torch._prims._make_prim": [
        "<builtin>.any",
        "torch._subclasses.fake_tensor",
        "<builtin>.getattr",
        "torch.library.Library.define",
        "torch._subclasses.fake_tensor.contains_tensor_types",
        "torch.library.Library.impl"
    ],
    "torch.library.Library.define": [
        "<builtin>.RuntimeError"
    ],
    "torch.library.Library.impl": [
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.callable"
    ],
    "torch._subclasses.fake_tensor.contains_tensor_types": [
        "torch._subclasses.fake_tensor.contains_tensor_types",
        "<builtin>.any"
    ],
    "torch._prims._make_elementwise_binary_prim": [
        "torch._prims._make_prim",
        "functools.partial"
    ],
    "torch._prims._make_reduction_prim": [
        "torch._prims._make_prim"
    ],
    "torch._prims._make_var_reduction_prim": [
        "torch._prims._make_prim"
    ],
    "torch._prims.nvfuser_prims.register_nvprims": [
        "torch._prims.nvfuser_prims.register_rand_like",
        "torch._prims.nvfuser_prims.register_full",
        "torch._prims.nvfuser_prims.register_var_mean",
        "torch._prims.nvfuser_prims.register_view",
        "<builtin>.getattr",
        "torch.library.Library.define",
        "torch._prims_common.wrappers.backwards_not_supported",
        "torch.library.Library.impl",
        "torch._prims.nvfuser_prims.register_native_batch_norm"
    ],
    "torch._prims.nvfuser_prims.register_var_mean": [
        "torch.library.Library.impl",
        "torch.library.Library.define",
        "torch._prims_common.wrappers.elementwise_type_promotion_wrapper.__init__"
    ],
    "torch._prims_common.wrappers.elementwise_type_promotion_wrapper.__init__": [],
    "torch._prims.nvfuser_prims.register_view": [
        "torch.library.Library.impl",
        "torch._prims_common.wrappers.backwards_not_supported",
        "torch.library.Library.define"
    ],
    "torch._prims_common.wrappers.backwards_not_supported": [
        "functools.wraps",
        "torch._prims_common.wrappers.backwards_not_supported.BackwardsNotSupported"
    ],
    "torch._prims_common.wrappers.backwards_not_supported.BackwardsNotSupported": [
        "<builtin>.staticmethod"
    ],
    "torch._prims.nvfuser_prims.register_native_batch_norm": [
        "torch.library.Library.impl",
        "torch.library.Library.define"
    ],
    "torch._prims.nvfuser_prims.register_rand_like": [
        "torch.library.Library.impl",
        "torch._prims_common.wrappers.backwards_not_supported",
        "torch.library.Library.define",
        "<builtin>.getattr"
    ],
    "torch._prims.nvfuser_prims.register_full": [
        "torch.library.Library.impl",
        "torch._prims_common.wrappers.backwards_not_supported",
        "torch.library.Library.define",
        "<builtin>.getattr"
    ],
    "torch._decomp": [
        "torch._ops",
        "torch._refs",
        "torch.utils._pytree",
        "collections.defaultdict",
        "torch.library",
        "torch",
        "torch._decomp.decompositions"
    ],
    "torch._decomp.decompositions": [
        "torch._prims_common",
        "torch._decomp.register_decomposition",
        "torch._prims",
        "torch.fx.experimental.symbolic_shapes",
        "functools.partial",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "torch._prims_common.wrappers",
        "torch.nn.functional",
        "torch._decomp",
        "torch._prims_common.wrappers.out_wrapper",
        "torch.utils._pytree",
        "torch._decomp.decompositions.register_inplace",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper",
        "torch",
        "torch._decomp.decompositions.Reduction"
    ],
    "torch.fx.experimental.symbolic_shapes": [
        "torch.fx.experimental.symbolic_shapes.Pow",
        "torch._guards",
        "sympy.core.logic",
        "torch.fx.experimental.symbolic_shapes.FloorDiv",
        "torch.fx.experimental.symbolic_shapes.GuardOnDataDependentSymNode",
        "torch.fx.experimental.symbolic_shapes._make_user_magic",
        "torch.fx.experimental.symbolic_shapes.Symbol",
        "sympy.printing.precedence",
        "<map>.items",
        "torch.fx.experimental.symbolic_shapes.SymNode",
        "sympy",
        "torch.fx.experimental.symbolic_shapes._make_node_magic",
        "torch.fx.experimental.symbolic_shapes.TrueDiv",
        "sympy.printing.str",
        "torch.fx.experimental.symbolic_shapes.ShapeGuardPrinter",
        "torch.fx.experimental.symbolic_shapes._make_node_sizes_strides",
        "functools.lru_cache",
        "torch.fx.experimental.symbolic_shapes.IsNonOverlappingAndDenseIndicator",
        "torch.fx.experimental.symbolic_shapes.SymDispatchMode",
        "torch",
        "torch.fx.experimental.symbolic_shapes.ShapeEnv"
    ],
    "torch.fx.experimental.symbolic_shapes.GuardOnDataDependentSymNode": [],
    "torch.fx.experimental.symbolic_shapes.SymDispatchMode": [],
    "torch.fx.experimental.symbolic_shapes.SymNode": [
        "<builtin>.property"
    ],
    "torch.fx.experimental.symbolic_shapes.Pow": [
        "<builtin>.classmethod"
    ],
    "torch.fx.experimental.symbolic_shapes.TrueDiv": [
        "<builtin>.classmethod"
    ],
    "torch.fx.experimental.symbolic_shapes.FloorDiv": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "torch.fx.experimental.symbolic_shapes.IsNonOverlappingAndDenseIndicator": [
        "<builtin>.classmethod"
    ],
    "torch.fx.experimental.symbolic_shapes._make_node_magic": [
        "functools.lru_cache",
        "<builtin>.setattr"
    ],
    "torch.fx.experimental.symbolic_shapes._make_node_sizes_strides": [
        "<builtin>.setattr"
    ],
    "torch.fx.experimental.symbolic_shapes._make_user_magic": [
        "<builtin>.setattr"
    ],
    "torch.fx.experimental.symbolic_shapes.Symbol": [],
    "torch.fx.experimental.symbolic_shapes.ShapeGuardPrinter": [],
    "torch.fx.experimental.symbolic_shapes.ShapeEnv": [
        "torch.fx.experimental.symbolic_shapes._lru_cache",
        "functools.lru_cache",
        "contextlib.contextmanager"
    ],
    "torch.fx.experimental.symbolic_shapes._lru_cache": [
        "functools.lru_cache"
    ],
    "torch._decomp.decompositions.Reduction": [],
    "torch._decomp.register_decomposition": [],
    "torch._decomp.register_decomposition.decomposition_decorator": [
        "itertools.chain",
        "<builtin>.zip",
        "<builtin>.getattr",
        "torch.utils._pytree.tree_map",
        "functools.wraps"
    ],
    "torch.utils._pytree.tree_map": [
        "torch.utils._pytree.tree_flatten",
        "torch._meta_registrations.register_meta.wrapper.register",
        "torch.utils._pytree.tree_unflatten",
        "torch._decomp.register_decomposition.decomposition_decorator.register"
    ],
    "torch.utils._pytree.tree_flatten": [
        "torch.utils._pytree.tree_flatten",
        "torch.utils._pytree._get_node_type",
        "torch.utils._pytree.LeafSpec.__init__",
        "torch.utils._pytree._is_leaf"
    ],
    "torch.utils._pytree._is_leaf": [
        "torch.utils._pytree._get_node_type"
    ],
    "torch.utils._pytree._get_node_type": [
        "<builtin>.type",
        "torch.utils._pytree._is_namedtuple_instance"
    ],
    "torch.utils._pytree._is_namedtuple_instance": [
        "<builtin>.type",
        "<builtin>.getattr",
        "<builtin>.isinstance",
        "<builtin>.all",
        "<builtin>.len"
    ],
    "torch.utils._pytree.LeafSpec.__init__": [
        "<builtin>.super"
    ],
    "torch._decomp.register_decomposition.decomposition_decorator.register": [
        "torch._decomp._add_op_to_registry"
    ],
    "torch._decomp._add_op_to_registry": [
        "<builtin>.RuntimeError",
        "append",
        "<builtin>.isinstance"
    ],
    "torch.utils._pytree.tree_unflatten": [
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "append",
        "<builtin>.len"
    ],
    "torch._prims_common.wrappers.out_wrapper": [
        "<builtin>.len"
    ],
    "torch._prims_common.wrappers.out_wrapper._out_wrapper": [
        "<builtin>.tuple",
        "itertools.chain",
        "typing.NamedTuple",
        "<builtin>.all",
        "<builtin>.len",
        "functools.wraps",
        "<builtin>.range"
    ],
    "typing.NamedTuple": [],
    "torch._decomp.decompositions.register_inplace": [
        "torch._decomp.register_decomposition",
        "torch._decomp.register_decomposition.decomposition_decorator"
    ],
    "torch._refs._make_elementwise_unary_reference": [],
    "torch._refs._make_elementwise_unary_reference.inner": [
        "torch._decomp.register_decomposition",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "torch._prims_common.get_aten_op",
        "torch._prims_common.wrappers.elementwise_type_promotion_wrapper.__init__",
        "torch._prims_common.wrappers.out_wrapper",
        "functools.wraps",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper",
        "torch._prims_common.wrappers.elementwise_unary_scalar_wrapper"
    ],
    "torch._prims_common.wrappers.elementwise_unary_scalar_wrapper": [
        "functools.wraps"
    ],
    "torch._prims_common.get_aten_op": [
        "<builtin>.len",
        "<builtin>.getattr"
    ],
    "torch._refs._make_alias": [],
    "torch._refs._make_elementwise_binary_reference": [],
    "torch._refs._make_elementwise_binary_reference.inner": [
        "torch._decomp.register_decomposition",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "torch._prims_common.get_aten_op",
        "torch._prims_common.wrappers.elementwise_type_promotion_wrapper.__init__",
        "torch._prims_common.wrappers.out_wrapper",
        "functools.wraps",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper"
    ],
    "torch._refs._make_copy_from_view": [
        "torch._decomp.register_decomposition",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "<builtin>.getattr",
        "torch._prims_common.wrappers.out_wrapper",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper"
    ],
    "torch._refs._make_r_binary_op": [],
    "torch._refs._make_inplace": [
        "torch._decomp.register_decomposition",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "<builtin>.getattr",
        "inspect.getmodule",
        "functools.wraps"
    ],
    "inspect.getmodule": [],
    "torch._refs._conversions": [
        "torch._prims_common",
        "torch._decomp.register_decomposition",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "torch._prims_common.wrappers",
        "torch._decomp",
        "torch._refs",
        "torch._prims_common.wrappers.out_wrapper",
        "torch._refs._conversions._make_conversion_method",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper",
        "torch"
    ],
    "torch._refs._conversions._make_conversion_method": [],
    "torch._refs.fft": [
        "torch._prims_common",
        "torch._decomp.register_decomposition",
        "torch._prims",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "torch._refs.fft._ShapeAndDims",
        "torch._prims_common.wrappers",
        "torch._refs.fft._CanonicalizeC2rReturn",
        "torch._decomp",
        "torch._prims_common.wrappers.out_wrapper",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper",
        "torch"
    ],
    "torch._refs.fft._ShapeAndDims": [],
    "torch._refs.fft._CanonicalizeC2rReturn": [],
    "torch._refs.linalg": [
        "torch._prims_common",
        "torch._decomp.register_decomposition",
        "torch._prims",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "torch._prims_common.wrappers",
        "torch._refs",
        "torch._decomp",
        "torch._prims_common.wrappers.out_wrapper",
        "torch._refs.linalg",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper",
        "torch"
    ],
    "torch._refs.nn.functional": [
        "torch._prims_common",
        "torch._decomp.register_decomposition",
        "torch._prims",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "torch._refs._make_inplace",
        "torch._prims_common.wrappers",
        "torch._prims_common.wrappers.elementwise_type_promotion_wrapper.__init__",
        "torch._refs",
        "torch._decomp",
        "torch._prims_common.wrappers.out_wrapper",
        "torch._refs.nn.functional.inplace_wrapper",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper",
        "torch",
        "torch._prims_common.wrappers.elementwise_unary_scalar_wrapper"
    ],
    "torch._refs.nn.functional.inplace_wrapper": [
        "functools.wraps"
    ],
    "torch._refs.special": [
        "torch._prims_common",
        "torch._decomp.register_decomposition",
        "torch._prims",
        "torch._decomp.register_decomposition.decomposition_decorator",
        "torch._prims_common.wrappers",
        "torch._prims_common.wrappers.elementwise_type_promotion_wrapper.__init__",
        "torch._refs",
        "torch._decomp",
        "torch._refs._make_elementwise_unary_reference.inner",
        "torch._prims_common.wrappers.out_wrapper",
        "torch._refs._make_elementwise_unary_reference",
        "torch._refs._make_elementwise_binary_reference.inner",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper",
        "torch",
        "torch._refs._make_elementwise_binary_reference"
    ],
    "torch.backends.mkl": [
        "torch.backends.mkl.verbose",
        "torch"
    ],
    "torch.backends.mkl.verbose": [],
    "torch.backends.mkldnn": [
        "torch.backends.mkldnn.verbose",
        "torch.backends",
        "torch.backends.mkldnn.MkldnnModule.__init__",
        "torch",
        "torch.backends.mkldnn.MkldnnModule",
        "contextlib.contextmanager"
    ],
    "torch.backends.mkldnn.verbose": [],
    "torch.backends.mkldnn.MkldnnModule": [
        "torch.backends.ContextProp.__init__"
    ],
    "torch.backends.mkldnn.MkldnnModule.__init__": [
        "<builtin>.super"
    ],
    "torch.backends.openmp": [
        "torch"
    ],
    "torch.backends.quantized": [
        "torch.backends.quantized.QuantizedEngine",
        "torch.backends.quantized._QEngineProp",
        "torch.backends.quantized._SupportedQEnginesProp",
        "torch.backends.quantized.QuantizedEngine.__init__",
        "torch"
    ],
    "torch.backends.quantized._QEngineProp": [],
    "torch.backends.quantized._SupportedQEnginesProp": [],
    "torch.backends.quantized.QuantizedEngine": [],
    "torch.backends.quantized.QuantizedEngine.__init__": [
        "<builtin>.super"
    ],
    "torch.utils.data": [
        "<builtin>.sorted",
        "torch.utils.data.datapipes._decorator",
        "torch.utils.data.distributed",
        "torch.utils.data.dataset",
        "torch.utils.data.datapipes.datapipe",
        "torch.utils.data.dataloader",
        "torch.utils.data.sampler"
    ],
    "torch.utils.data.sampler": [
        "torch.utils.data.sampler.RandomSampler",
        "torch.utils.data.sampler.SubsetRandomSampler",
        "torch.utils.data.sampler.Sampler",
        "torch.utils.data.sampler.WeightedRandomSampler",
        "torch.utils.data.sampler.SequentialSampler",
        "torch",
        "typing.TypeVar",
        "torch.utils.data.sampler.BatchSampler"
    ],
    "torch.utils.data.sampler.Sampler": [],
    "torch.utils.data.sampler.SequentialSampler": [],
    "torch.utils.data.sampler.RandomSampler": [
        "<builtin>.property"
    ],
    "torch.utils.data.sampler.SubsetRandomSampler": [],
    "torch.utils.data.sampler.WeightedRandomSampler": [],
    "torch.utils.data.sampler.BatchSampler": [],
    "torch.utils.data.dataset": [
        "torch.utils.data.dataset.Subset",
        "torch.utils.data.dataset.ConcatDataset",
        "torch.utils.data.dataset.TensorDataset",
        "torch._utils",
        "torch.utils.data.dataset.IterableDataset",
        "torch.utils.data.dataset.ChainDataset",
        "torch",
        "typing.TypeVar",
        "torch.utils.data.dataset.Dataset"
    ],
    "torch.utils.data.dataset.Dataset": [],
    "torch.utils.data.dataset.IterableDataset": [],
    "torch.utils.data.dataset.TensorDataset": [],
    "torch.utils.data.dataset.ConcatDataset": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "torch.utils.data.dataset.ChainDataset": [],
    "torch.utils.data.dataset.Subset": [],
    "torch.utils.data.datapipes.datapipe": [
        "torch.utils.data.datapipes.datapipe.DFIterDataPipe",
        "torch.utils.data.datapipes.datapipe._DataPipeSerializationWrapper",
        "torch.utils.data.datapipes.datapipe.DataChunk",
        "torch.utils.data.datapipes._hook_iterator",
        "torch.utils.data.dataset",
        "torch.utils.data.datapipes.datapipe.IterDataPipe",
        "torch.utils.data.datapipes.utils.common",
        "torch.utils.data.datapipes._typing",
        "torch.utils.data.datapipes.datapipe._IterDataPipeSerializationWrapper",
        "typing.TypeVar",
        "torch.utils.data.datapipes.datapipe.MapDataPipe",
        "torch.utils.data.datapipes.datapipe._MapDataPipeSerializationWrapper"
    ],
    "torch.utils.data.datapipes._typing": [
        "torch.utils.data.datapipes._typing.Boolean",
        "<builtin>.type",
        "torch.utils.data.datapipes._typing._DataPipeType.__init__",
        "torch.utils.data.datapipes._typing.GenericMeta",
        "torch.utils.data.datapipes._hook_iterator",
        "torch.utils.data.datapipes._typing._IterDataPipeMeta",
        "torch.utils.data.datapipes._typing._DataPipeType",
        "typing.TypeVar",
        "torch.utils.data.datapipes._typing._DataPipeMeta",
        "torch.utils.data.datapipes._typing.Integer"
    ],
    "torch.utils.data.datapipes._hook_iterator": [
        "torch.autograd",
        "torch.utils.data.datapipes._hook_iterator._SnapshotState"
    ],
    "torch.utils.data.datapipes._hook_iterator._SnapshotState": [],
    "torch.utils.data.datapipes._typing.GenericMeta": [],
    "torch.utils.data.datapipes._typing.Integer": [],
    "torch.utils.data.datapipes._typing.Boolean": [],
    "torch.utils.data.datapipes._typing._DataPipeType": [],
    "torch.utils.data.datapipes._typing._DataPipeType.__init__": [],
    "torch.utils.data.datapipes._typing._DataPipeMeta": [
        "typing._tp_cache"
    ],
    "typing._tp_cache": [],
    "torch.utils.data.datapipes._typing._IterDataPipeMeta": [],
    "torch.utils.data.datapipes.utils.common": [
        "torch.utils.data._utils.serialization",
        "torch.utils.data.datapipes.utils.common.StreamWrapper"
    ],
    "torch.utils.data._utils.serialization": [],
    "torch.utils.data.datapipes.utils.common.StreamWrapper": [
        "<builtin>.classmethod"
    ],
    "torch.utils.data.datapipes.datapipe.IterDataPipe": [
        "<builtin>.classmethod"
    ],
    "torch.utils.data.datapipes.datapipe.DFIterDataPipe": [],
    "torch.utils.data.datapipes.datapipe.MapDataPipe": [
        "<builtin>.classmethod"
    ],
    "torch.utils.data.datapipes.datapipe._DataPipeSerializationWrapper": [],
    "torch.utils.data.datapipes.datapipe._IterDataPipeSerializationWrapper": [],
    "torch.utils.data.datapipes.datapipe._MapDataPipeSerializationWrapper": [],
    "torch.utils.data.datapipes.datapipe.DataChunk": [],
    "torch.utils.data.dataloader": [
        "torch.utils.data.dataloader._DatasetKind",
        "torch.utils.data.dataloader._BaseDataLoaderIter",
        "torch.utils.data.graph_settings",
        "typing.TypeVar",
        "torch.distributed",
        "torch.multiprocessing",
        "torch.utils.data.dataloader._MultiProcessingDataLoaderIter",
        "torch._utils",
        "torch.utils.data.dataloader._InfiniteConstantSampler",
        "torch.utils.data.datapipes.datapipe",
        "torch.utils.data.dataloader.DataLoader",
        "torch",
        "torch.utils.data._utils",
        "torch.utils.data.dataloader._SingleProcessDataLoaderIter"
    ],
    "torch.utils.data.graph_settings": [
        "torch.utils.data.graph",
        "torch",
        "torch.utils.data.datapipes.iter.sharding"
    ],
    "torch.utils.data.datapipes.iter.sharding": [
        "torch.utils.data.datapipes.iter.sharding.ShardingFilterIterDataPipe",
        "torch.utils.data.datapipes.datapipe",
        "torch.utils.data.datapipes.iter.sharding._ShardingIterDataPipe",
        "torch.utils.data.datapipes._decorator",
        "torch.utils.data.datapipes.iter.sharding.SHARDING_PRIORITIES"
    ],
    "torch.utils.data.datapipes._decorator": [
        "torch.utils.data.datapipes._decorator.guaranteed_datapipes_determinism",
        "torch.utils.data.datapipes._decorator.non_deterministic",
        "torch.utils.data.datapipes._decorator.functional_datapipe",
        "torch.utils.data.datapipes.datapipe",
        "torch.utils.data.datapipes._decorator.runtime_validation_disabled",
        "torch.utils.data.datapipes._typing"
    ],
    "torch.utils.data.datapipes._decorator.functional_datapipe": [],
    "torch.utils.data.datapipes._decorator.guaranteed_datapipes_determinism": [],
    "torch.utils.data.datapipes._decorator.non_deterministic": [],
    "torch.utils.data.datapipes._decorator.runtime_validation_disabled": [],
    "torch.utils.data.datapipes.iter.sharding.SHARDING_PRIORITIES": [],
    "torch.utils.data.datapipes.iter.sharding._ShardingIterDataPipe": [],
    "torch.utils.data.datapipes.iter.sharding.ShardingFilterIterDataPipe": [],
    "torch.utils.data.graph": [
        "torch.utils.data",
        "torch.utils.data._utils.serialization"
    ],
    "torch.utils.data._utils": [
        "torch.utils.data._utils.fetch",
        "torch.utils.data._utils.worker",
        "torch.utils.data._utils.signal_handling",
        "torch.utils.data._utils.collate",
        "torch._utils",
        "torch.utils.data._utils.pin_memory",
        "numpy"
    ],
    "torch.utils.data._utils.worker": [
        "torch.utils.data._utils.signal_handling",
        "torch._utils",
        "torch.utils.data._utils.worker.WorkerInfo",
        "torch.utils.data._utils.worker._ResumeIteration",
        "torch.utils.data._utils.worker.ManagerWatchdog",
        "torch.utils.data._utils.worker._IterableDatasetStopIteration",
        "torch.utils.data",
        "torch"
    ],
    "torch.utils.data._utils.signal_handling": [],
    "torch.utils.data._utils.worker.ManagerWatchdog": [],
    "torch.utils.data._utils.worker.WorkerInfo": [],
    "torch.utils.data._utils.worker._IterableDatasetStopIteration": [],
    "torch.utils.data._utils.worker._ResumeIteration": [],
    "torch.utils.data._utils.pin_memory": [
        "torch",
        "torch._utils"
    ],
    "torch.utils.data._utils.collate": [
        "torch"
    ],
    "torch.utils.data._utils.fetch": [
        "torch.utils.data._utils.fetch._BaseDatasetFetcher",
        "torch.utils.data._utils.fetch._IterableDatasetFetcher",
        "torch.utils.data._utils.fetch._MapDatasetFetcher"
    ],
    "torch.utils.data._utils.fetch._BaseDatasetFetcher": [],
    "torch.utils.data._utils.fetch._IterableDatasetFetcher": [],
    "torch.utils.data._utils.fetch._MapDatasetFetcher": [],
    "torch.utils.data.dataloader._DatasetKind": [
        "<builtin>.staticmethod"
    ],
    "torch.utils.data.dataloader._InfiniteConstantSampler": [],
    "torch.utils.data.dataloader.DataLoader": [
        "<builtin>.property"
    ],
    "torch.utils.data.dataloader._BaseDataLoaderIter": [],
    "torch.utils.data.dataloader._SingleProcessDataLoaderIter": [],
    "torch.utils.data.dataloader._MultiProcessingDataLoaderIter": [
        "<builtin>.staticmethod"
    ],
    "torch.utils.data.distributed": [
        "torch.distributed",
        "torch.utils.data.distributed.DistributedSampler",
        "torch",
        "typing.TypeVar"
    ],
    "torch.utils.data.distributed.DistributedSampler": [],
    "torch.__config__": [
        "torch"
    ],
    "torch.__future__": [],
    "torch.profiler": [
        "torch.optim.optimizer",
        "torch.optim.optimizer.register_optimizer_step_post_hook",
        "torch.profiler.profiler",
        "torch.profiler.itt",
        "torch.autograd.profiler"
    ],
    "torch.profiler.profiler": [
        "torch.profiler.profiler.profile",
        "torch.autograd",
        "torch.profiler.profiler.ProfilerAction",
        "torch.profiler.profiler._KinetoProfile",
        "torch.profiler._memory_profiler",
        "torch.autograd.profiler",
        "torch",
        "torch.profiler.profiler.ExecutionGraphObserver"
    ],
    "torch.profiler._memory_profiler": [
        "torch.profiler._memory_profiler._Storage",
        "torch.profiler._memory_profiler.TensorKey",
        "torch.profiler._memory_profiler.Category",
        "torch.profiler._memory_profiler.OpTree",
        "torch.profiler._memory_profiler.DataFlowNode",
        "torch.profiler._memory_profiler.MemoryProfile",
        "torch.profiler._utils",
        "torch._utils",
        "torch.profiler._memory_profiler.Action",
        "torch.profiler._memory_profiler.SchemaMatcher",
        "torch.profiler._memory_profiler.DataFlowGraph",
        "torch.profiler._memory_profiler.CategoryDict",
        "torch.profiler._memory_profiler.DataFlowEdge",
        "torch",
        "torch.profiler._memory_profiler.CategoryElement",
        "torch.profiler._memory_profiler.SizeMap"
    ],
    "torch.profiler._utils": [
        "torch.autograd",
        "torch.profiler._utils.BasicEvaluation",
        "torch.profiler._utils.EventKey",
        "torch.profiler._utils.Interval",
        "torch.profiler._utils.EventMetrics",
        "torch.autograd.profiler",
        "torch.profiler"
    ],
    "torch.profiler._utils.EventMetrics": [
        "<builtin>.property"
    ],
    "torch.profiler._utils.Interval": [],
    "torch.profiler._utils.EventKey": [],
    "torch.profiler._utils.BasicEvaluation": [],
    "torch.profiler._memory_profiler.Category": [],
    "torch.profiler._memory_profiler.Action": [],
    "torch.profiler._memory_profiler._Storage": [],
    "torch.profiler._memory_profiler.TensorKey": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.profiler._memory_profiler.SchemaMatcher": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.profiler._memory_profiler.OpTree": [
        "<builtin>.property"
    ],
    "torch.profiler._memory_profiler.SizeMap": [
        "<builtin>.staticmethod"
    ],
    "torch.profiler._memory_profiler.DataFlowEdge": [
        "<builtin>.property"
    ],
    "torch.profiler._memory_profiler.DataFlowNode": [
        "<builtin>.property"
    ],
    "torch.profiler._memory_profiler.DataFlowGraph": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "torch.profiler._memory_profiler.CategoryElement": [],
    "torch.profiler._memory_profiler.CategoryDict": [],
    "torch.profiler._memory_profiler.MemoryProfile": [
        "<builtin>.property"
    ],
    "torch.profiler.profiler._KinetoProfile": [],
    "torch.profiler.profiler.ProfilerAction": [],
    "torch.profiler.profiler.profile": [],
    "torch.profiler.profiler.ExecutionGraphObserver": [
        "<builtin>.property"
    ],
    "torch.profiler.itt": [
        "contextlib.contextmanager",
        "torch.profiler.itt._ITTStub"
    ],
    "torch.profiler.itt._ITTStub": [
        "<builtin>.staticmethod"
    ],
    "torch.optim.optimizer.register_optimizer_step_post_hook": [
        "torch.utils.hooks.RemovableHandle.__init__"
    ],
    "torch.utils.hooks.RemovableHandle.__init__": [],
    "torch.ao": [],
    "torch.nn.quantizable": [
        "torch.nn.quantizable.modules"
    ],
    "torch.nn.quantizable.modules": [
        "torch.ao.nn.quantizable.modules.rnn",
        "torch.ao.nn.quantizable.modules.activation"
    ],
    "torch.ao.nn.quantizable.modules.activation": [
        "torch.nn",
        "torch.nn.functional",
        "torch.ao.nn.quantizable.modules.activation.MultiheadAttention",
        "torch",
        "torch.jit"
    ],
    "torch.ao.nn.quantizable.modules.activation.MultiheadAttention": [
        "<builtin>.classmethod",
        "torch._jit_internal.unused"
    ],
    "torch._jit_internal.unused": [
        "<builtin>.setattr",
        "<builtin>.isinstance"
    ],
    "torch.ao.nn.quantizable.modules.rnn": [
        "torch.ao.nn.quantizable.modules.rnn._LSTMLayer",
        "torch.ao.nn.quantizable.modules.rnn.LSTM",
        "torch.ao.nn.quantizable.modules.rnn._LSTMSingleLayer",
        "torch",
        "torch.ao.nn.quantizable.modules.rnn.LSTMCell"
    ],
    "torch.ao.nn.quantizable.modules.rnn.LSTMCell": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantizable.modules.rnn._LSTMSingleLayer": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantizable.modules.rnn._LSTMLayer": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantizable.modules.rnn.LSTM": [
        "<builtin>.classmethod"
    ],
    "torch.nn.quantized": [
        "torch.nn.quantized.dynamic",
        "torch.nn.quantized.modules",
        "torch.nn.quantized.functional"
    ],
    "torch.nn.quantized.dynamic": [
        "torch.ao.nn.quantized.dynamic"
    ],
    "torch.ao.nn.quantized.dynamic": [
        "torch.ao.nn.quantized.dynamic.modules"
    ],
    "torch.ao.nn.quantized.dynamic.modules": [
        "torch.ao.nn.quantized.dynamic.modules.conv",
        "torch.ao.nn.quantized.dynamic.modules.linear",
        "torch.ao.nn.quantized.dynamic.modules.rnn"
    ],
    "torch.ao.nn.quantized.dynamic.modules.linear": [
        "torch.ao.nn.quantized.dynamic.modules.linear.Linear",
        "torch.ao.nn.intrinsic",
        "torch.ao.nn.quantized",
        "torch.ao.nn.quantized.modules.utils",
        "torch"
    ],
    "torch.ao.nn.quantized": [
        "torch.ao.nn.quantized.functional",
        "torch.ao.nn.quantized.modules"
    ],
    "torch.ao.nn.quantized.functional": [
        "torch.nn.modules.utils",
        "torch.jit.annotations",
        "torch",
        "torch.ao.nn.quantized.modules.utils"
    ],
    "torch.ao.nn.quantized.modules.utils": [
        "torch.ao.nn.quantized.modules.utils._ntuple_from_first",
        "torch.ao.nn.quantized.modules.utils.WeightedQuantizedModule",
        "torch",
        "torch.nn.modules.module"
    ],
    "torch.ao.nn.quantized.modules.utils.WeightedQuantizedModule": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.utils._ntuple_from_first": [],
    "torch.ao.nn.quantized.modules": [
        "torch",
        "torch.ao.nn.quantizable",
        "torch.ao.nn.quantized.modules.normalization",
        "torch.ao.nn.quantized.modules.Quantize",
        "torch.ao.nn.quantized.modules.functional_modules",
        "torch.ao.nn.quantized.modules.embedding_ops",
        "torch.ao.nn.quantized.modules.conv",
        "torch.ao.nn.quantized.modules.dropout",
        "torch.ao.nn.quantized.modules.batchnorm",
        "torch.ao.nn.quantized.modules.linear",
        "torch.ao.nn.quantized.modules.activation",
        "torch.ao.nn.quantized.modules.DeQuantize",
        "torch.ao.nn.quantized.modules.rnn",
        "torch.nn.modules.pooling"
    ],
    "torch.ao.nn.quantizable": [
        "torch.ao.nn.quantizable.modules"
    ],
    "torch.ao.nn.quantizable.modules": [
        "torch.ao.nn.quantizable.modules.rnn",
        "torch.ao.nn.quantizable.modules.activation"
    ],
    "torch.ao.nn.quantized.modules.activation": [
        "torch.ao.nn.quantized.modules.activation.Sigmoid",
        "torch",
        "torch.ao.nn.quantized.modules.activation.ELU",
        "torch.ao.nn.quantized.modules.activation.Softmax",
        "torch.ao.nn.quantized.modules.activation.MultiheadAttention",
        "torch.ao.nn.quantized.modules.activation.LeakyReLU",
        "torch.ao.nn.quantized.modules.activation.PReLU",
        "torch.ao.nn.quantized.modules.activation.Hardswish",
        "torch.ao.nn.quantized.modules.activation.ReLU6"
    ],
    "torch.ao.nn.quantized.modules.activation.ReLU6": [
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.modules.activation.Hardswish": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.modules.activation.ELU": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.modules.activation.LeakyReLU": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.activation.Sigmoid": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.activation.Softmax": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.modules.activation.MultiheadAttention": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.activation.PReLU": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.dropout": [
        "torch",
        "torch.ao.nn.quantized.modules.dropout.Dropout"
    ],
    "torch.ao.nn.quantized.modules.dropout.Dropout": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.batchnorm": [
        "torch.ao.nn.intrinsic",
        "torch.ao.nn.quantized.modules.batchnorm._BatchNorm",
        "torch",
        "torch.ao.nn.quantized.modules.batchnorm.BatchNorm2d",
        "torch.ao.nn.quantized.modules.batchnorm.BatchNorm3d"
    ],
    "torch.ao.nn.intrinsic": [
        "torch.ao.nn.intrinsic.modules.fused",
        "torch.ao.nn.intrinsic.modules"
    ],
    "torch.ao.nn.intrinsic.modules": [
        "torch.ao.nn.intrinsic.modules.fused"
    ],
    "torch.ao.nn.intrinsic.modules.fused": [
        "torch.nn",
        "torch.ao.nn.intrinsic.modules.fused.BNReLU3d",
        "torch.nn.utils.parametrize",
        "torch.ao.nn.intrinsic.modules.fused.ConvBn2d",
        "torch.ao.nn.intrinsic.modules.fused.LinearReLU",
        "torch.ao.nn.intrinsic.modules.fused.ConvBn3d",
        "torch.ao.nn.intrinsic.modules.fused.ConvAddReLU2d",
        "torch.ao.nn.intrinsic.modules.fused.ConvAdd2d",
        "torch.ao.nn.intrinsic.modules.fused._FusedModule",
        "torch.ao.nn.intrinsic.modules.fused.ConvReLU3d",
        "torch.ao.nn.intrinsic.modules.fused.ConvBnReLU2d",
        "torch.ao.nn.intrinsic.modules.fused.ConvReLU1d",
        "torch.ao.nn.intrinsic.modules.fused.ConvReLU2d",
        "torch.ao.nn.intrinsic.modules.fused.LinearLeakyReLU",
        "torch.ao.nn.intrinsic.modules.fused.BNReLU2d",
        "torch.ao.nn.intrinsic.modules.fused.LinearTanh",
        "torch.ao.nn.intrinsic.modules.fused.ConvBn1d",
        "torch.ao.nn.intrinsic.modules.fused.LinearBn1d",
        "torch.ao.nn.intrinsic.modules.fused.ConvBnReLU1d",
        "torch.ao.nn.intrinsic.modules.fused.ConvBnReLU3d",
        "torch"
    ],
    "torch.nn.utils.parametrize": [
        "torch.nn.utils.parametrize.ParametrizationList",
        "torch.nn.parameter",
        "torch",
        "torch.nn.modules.container",
        "contextlib.contextmanager"
    ],
    "torch.nn.utils.parametrize.ParametrizationList": [],
    "torch.ao.nn.intrinsic.modules.fused._FusedModule": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvReLU1d": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvReLU2d": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvReLU3d": [],
    "torch.ao.nn.intrinsic.modules.fused.LinearReLU": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvBn1d": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvBn2d": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvBnReLU1d": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvBnReLU2d": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvBn3d": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvBnReLU3d": [],
    "torch.ao.nn.intrinsic.modules.fused.BNReLU2d": [],
    "torch.ao.nn.intrinsic.modules.fused.BNReLU3d": [],
    "torch.ao.nn.intrinsic.modules.fused.LinearBn1d": [],
    "torch.ao.nn.intrinsic.modules.fused.LinearLeakyReLU": [],
    "torch.ao.nn.intrinsic.modules.fused.LinearTanh": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvAdd2d": [],
    "torch.ao.nn.intrinsic.modules.fused.ConvAddReLU2d": [],
    "torch.ao.nn.quantized.modules.batchnorm._BatchNorm": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.modules.batchnorm.BatchNorm2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.batchnorm.BatchNorm3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.normalization": [
        "torch.ao.nn.quantized.modules.normalization.InstanceNorm2d",
        "torch.ao.nn.quantized.modules.normalization.GroupNorm",
        "torch.ao.nn.quantized.modules.normalization.LayerNorm",
        "torch.ao.nn.quantized.modules.normalization.InstanceNorm1d",
        "torch.ao.nn.quantized.modules.normalization.InstanceNorm3d",
        "torch"
    ],
    "torch.ao.nn.quantized.modules.normalization.LayerNorm": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.normalization.GroupNorm": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.normalization.InstanceNorm1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.normalization.InstanceNorm2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.normalization.InstanceNorm3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.conv": [
        "torch.ao.nn.intrinsic.qat",
        "torch.nn",
        "torch.nn.modules.utils",
        "torch.ao.nn.quantized.modules.conv.Conv2d",
        "torch.ao.nn.intrinsic",
        "torch.nn.functional",
        "torch.ao.nn.quantized.modules.conv.ConvTranspose3d",
        "torch.ao.nn.quantized.modules.conv._ConvNd",
        "torch.ao.nn.quantized.modules.conv.ConvTranspose1d",
        "torch.ao.nn.quantized.modules.conv.Conv1d",
        "torch.ao.nn.quantized.modules.conv.ConvTranspose2d",
        "torch.nn.common_types",
        "torch.ao.nn.quantized.modules.utils",
        "typing.TypeVar",
        "torch._ops",
        "torch.nn.utils",
        "torch.ao.nn.quantized.modules.conv._ConvTransposeNd",
        "torch.ao.nn.quantized.modules.conv.Conv3d",
        "torch"
    ],
    "torch.ao.nn.intrinsic.qat": [
        "torch.ao.nn.intrinsic.qat.modules"
    ],
    "torch.ao.nn.intrinsic.qat.modules": [
        "torch.ao.nn.intrinsic.qat.modules.conv_fused",
        "torch.ao.nn.intrinsic.qat.modules.linear_relu",
        "torch.ao.nn.intrinsic.qat.modules.linear_fused"
    ],
    "torch.ao.nn.intrinsic.qat.modules.linear_relu": [
        "torch.ao.nn.intrinsic.qat.modules.linear_relu.LinearReLU",
        "torch.ao.nn.intrinsic",
        "torch.nn.functional",
        "torch.ao.nn.qat",
        "torch"
    ],
    "torch.ao.nn.qat": [
        "torch.ao.nn.qat.modules"
    ],
    "torch.ao.nn.qat.modules": [
        "torch.ao.nn.qat.modules.embedding_ops",
        "torch.ao.nn.qat.modules.linear",
        "torch.ao.nn.qat.modules.conv"
    ],
    "torch.ao.nn.qat.modules.linear": [
        "torch.nn",
        "torch.ao.nn.qat.modules.linear.Linear",
        "torch.ao.nn.intrinsic",
        "torch.nn.functional",
        "torch.nn.utils.parametrize",
        "torch"
    ],
    "torch.ao.nn.qat.modules.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.qat.modules.conv": [
        "torch.nn",
        "torch.nn.modules.utils",
        "torch.ao.nn.qat.modules.conv.Conv3d",
        "torch.ao.nn.qat.modules.conv._ConvNd",
        "torch.ao.nn.intrinsic",
        "torch.nn.common_types",
        "torch.ao.nn.qat.modules.conv.Conv1d",
        "torch",
        "typing.TypeVar",
        "torch.ao.nn.qat.modules.conv.Conv2d"
    ],
    "torch.ao.nn.qat.modules.conv._ConvNd": [
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.qat.modules.conv.Conv1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.qat.modules.conv.Conv2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.qat.modules.conv.Conv3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.qat.modules.embedding_ops": [
        "torch.ao.nn.qat.modules.embedding_ops.EmbeddingBag",
        "torch.nn",
        "torch.nn.functional",
        "torch.ao.nn.qat.modules.embedding_ops.Embedding",
        "torch"
    ],
    "torch.ao.nn.qat.modules.embedding_ops.Embedding": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.qat.modules.embedding_ops.EmbeddingBag": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.qat.modules.linear_relu.LinearReLU": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.qat.modules.linear_fused": [
        "torch.nn",
        "torch.nn.init",
        "torch.nn.utils.fusion",
        "torch.ao.nn.intrinsic",
        "torch.nn.functional",
        "torch.nn.parameter",
        "torch",
        "torch.ao.nn.intrinsic.qat.modules.linear_fused.LinearBn1d"
    ],
    "torch.ao.nn.intrinsic.qat.modules.linear_fused.LinearBn1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused": [
        "torch.nn",
        "torch.nn.modules.utils",
        "torch.nn.init",
        "torch.ao.nn.intrinsic",
        "torch.nn.functional",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBnReLU2d",
        "torch.ao.nn.qat",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBnReLU1d",
        "typing.TypeVar",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBn2d",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused._ConvBnNd",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBnReLU3d",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvReLU3d",
        "torch.nn.parameter",
        "torch.nn.utils",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvReLU1d",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBn3d",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBn1d",
        "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvReLU2d",
        "torch"
    ],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused._ConvBnNd": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBn1d": [],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBnReLU1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvReLU1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBn2d": [],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBnReLU2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvReLU2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBn3d": [],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvBnReLU3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.qat.modules.conv_fused.ConvReLU3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.conv._ConvNd": [
        "<builtin>.staticmethod",
        "<builtin>.classmethod",
        "torch._jit_internal.export"
    ],
    "torch._jit_internal.export": [],
    "torch.ao.nn.quantized.modules.conv.Conv1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.conv.Conv2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.conv.Conv3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.conv._ConvTransposeNd": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.modules.conv.ConvTranspose1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.conv.ConvTranspose2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.conv.ConvTranspose3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.linear": [
        "torch.ao.nn.intrinsic.qat",
        "torch.nn",
        "torch.nn.utils.fusion",
        "torch.ao.nn.intrinsic",
        "torch.ao.nn.quantized.modules.linear.Linear",
        "torch.nn.utils.parametrize",
        "torch.ao.nn.quantized.modules.linear.LinearPackedParams",
        "torch.ao.nn.quantized.modules.utils",
        "torch"
    ],
    "torch.ao.nn.quantized.modules.linear.LinearPackedParams": [
        "torch._jit_internal.export"
    ],
    "torch.ao.nn.quantized.modules.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.embedding_ops": [
        "torch.nn",
        "torch.ao.nn.quantized.modules.embedding_ops.EmbeddingPackedParams",
        "torch.ao.nn.quantized.modules.embedding_ops.Embedding",
        "torch.ao.nn.quantized.modules.embedding_ops.EmbeddingBag",
        "torch._jit_internal",
        "torch.ao.nn.quantized.modules.utils",
        "torch"
    ],
    "torch.ao.nn.quantized.modules.embedding_ops.EmbeddingPackedParams": [
        "torch._jit_internal.export"
    ],
    "torch.ao.nn.quantized.modules.embedding_ops.Embedding": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.embedding_ops.EmbeddingBag": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.rnn": [
        "torch",
        "torch.ao.nn.quantized.modules.rnn.LSTM"
    ],
    "torch.ao.nn.quantized.modules.rnn.LSTM": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.functional_modules": [
        "torch._ops",
        "torch.ao.nn.quantized.modules.functional_modules.QFunctional",
        "torch.ao.nn.quantized.modules.functional_modules.FloatFunctional",
        "torch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional",
        "torch"
    ],
    "torch.ao.nn.quantized.modules.functional_modules.FloatFunctional": [],
    "torch.ao.nn.quantized.modules.functional_modules.FXFloatFunctional": [],
    "torch.ao.nn.quantized.modules.functional_modules.QFunctional": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.modules.Quantize": [
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.modules.DeQuantize": [
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.dynamic.modules.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.dynamic.modules.rnn": [
        "torch.nn",
        "torch.ao.nn.quantized.dynamic.modules.rnn.RNNCellBase",
        "torch.ao.nn.quantized.dynamic.modules.rnn.PackedParameter",
        "torch.ao.nn.quantized.dynamic.modules.rnn.GRU",
        "torch.ao.nn.quantized.dynamic.modules.rnn.GRUCell",
        "torch.ao.nn.quantized.dynamic.modules.rnn.RNNCell",
        "torch.nn.utils.rnn",
        "torch._jit_internal",
        "torch.ao.nn.quantized.dynamic.modules.rnn.LSTMCell",
        "torch.ao.nn.quantized.modules.utils",
        "torch",
        "torch.ao.nn.quantized.dynamic.modules.rnn.RNNBase",
        "torch.ao.nn.quantized.dynamic.modules.rnn.LSTM"
    ],
    "torch.ao.nn.quantized.dynamic.modules.rnn.PackedParameter": [],
    "torch.ao.nn.quantized.dynamic.modules.rnn.RNNBase": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.dynamic.modules.rnn.LSTM": [
        "<builtin>.classmethod",
        "torch._jit_internal.export",
        "torch._jit_internal.ignore"
    ],
    "torch._jit_internal.ignore": [
        "<builtin>.RuntimeError",
        "<builtin>.callable",
        "<builtin>.isinstance"
    ],
    "torch.ao.nn.quantized.dynamic.modules.rnn.GRU": [
        "<builtin>.classmethod",
        "torch._jit_internal.export",
        "torch._jit_internal.ignore"
    ],
    "torch.ao.nn.quantized.dynamic.modules.rnn.RNNCellBase": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.dynamic.modules.rnn.RNNCell": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.dynamic.modules.rnn.LSTMCell": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.dynamic.modules.rnn.GRUCell": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.dynamic.modules.conv": [
        "torch.nn",
        "torch.nn.modules.utils",
        "torch._ops",
        "torch.ao.nn.quantized.dynamic.modules.conv.Conv2d",
        "torch.ao.nn.quantized.modules.conv",
        "torch.nn.functional",
        "torch.ao.nn.quantized.dynamic.modules.conv.ConvTranspose1d",
        "torch.ao.nn.quantized.dynamic.modules.conv.Conv1d",
        "torch.nn.common_types",
        "torch.ao.nn.quantized.dynamic.modules.conv.ConvTranspose2d",
        "torch.ao.nn.quantized",
        "torch.ao.nn.quantized.dynamic.modules.conv.Conv3d",
        "torch",
        "torch.ao.nn.quantized.dynamic.modules.conv.ConvTranspose3d"
    ],
    "torch.ao.nn.quantized.dynamic.modules.conv.Conv1d": [],
    "torch.ao.nn.quantized.dynamic.modules.conv.Conv2d": [],
    "torch.ao.nn.quantized.dynamic.modules.conv.Conv3d": [],
    "torch.ao.nn.quantized.dynamic.modules.conv.ConvTranspose1d": [],
    "torch.ao.nn.quantized.dynamic.modules.conv.ConvTranspose2d": [],
    "torch.ao.nn.quantized.dynamic.modules.conv.ConvTranspose3d": [],
    "torch.nn.quantized.functional": [
        "torch.ao.nn.quantized.functional"
    ],
    "torch.nn.quantized.modules": [
        "torch.ao.nn.quantized.modules.normalization",
        "torch.ao.nn.quantized.modules.functional_modules",
        "torch.ao.nn.quantized.modules.embedding_ops",
        "torch.ao.nn.quantized.modules.conv",
        "torch.ao.nn.quantized.modules.dropout",
        "torch.ao.nn.quantized.modules.batchnorm",
        "torch.ao.nn.quantized.modules.linear",
        "torch.ao.nn.quantized.modules.activation",
        "torch.ao.nn.quantized.modules",
        "torch.ao.nn.quantized.modules.rnn",
        "torch.ao.nn.quantized.modules.utils"
    ],
    "torch.nn.qat": [
        "torch.nn.qat.modules",
        "torch.nn.qat.dynamic"
    ],
    "torch.nn.qat.dynamic": [
        "torch.nn.qat.dynamic.modules"
    ],
    "torch.nn.qat.dynamic.modules": [
        "torch.nn.qat.dynamic.modules.linear"
    ],
    "torch.nn.qat.dynamic.modules.linear": [
        "torch.ao.nn.qat.dynamic.modules.linear"
    ],
    "torch.ao.nn.qat.dynamic.modules.linear": [
        "torch.ao.nn.qat.dynamic.modules.linear.Linear",
        "torch"
    ],
    "torch.ao.nn.qat.dynamic.modules.linear.Linear": [],
    "torch.nn.qat.modules": [
        "torch.nn.qat.modules.embedding_ops",
        "torch.ao.nn.qat.modules.embedding_ops",
        "torch.nn.qat.modules.linear",
        "torch.nn.qat.modules.conv",
        "torch.ao.nn.qat.modules.linear",
        "torch.ao.nn.qat.modules.conv"
    ],
    "torch.nn.qat.modules.conv": [
        "torch.ao.nn.qat.modules.conv"
    ],
    "torch.nn.qat.modules.embedding_ops": [
        "torch.ao.nn.qat.modules.embedding_ops"
    ],
    "torch.nn.qat.modules.linear": [
        "torch.ao.nn.qat.modules.linear"
    ],
    "torch.nn.intrinsic": [
        "torch.nn.intrinsic.modules",
        "torch.ao.nn.intrinsic",
        "torch.ao.nn.intrinsic.modules.fused",
        "torch.nn.intrinsic.qat",
        "torch.nn.intrinsic.quantized"
    ],
    "torch.nn.intrinsic.modules": [
        "torch.nn.intrinsic.modules.fused"
    ],
    "torch.nn.intrinsic.modules.fused": [
        "torch.ao.nn.intrinsic",
        "torch.ao.nn.intrinsic.modules.fused"
    ],
    "torch.nn.intrinsic.qat": [
        "torch.nn.intrinsic.qat.modules"
    ],
    "torch.nn.intrinsic.qat.modules": [
        "torch.nn.intrinsic.qat.modules.linear_fused",
        "torch.nn.intrinsic.qat.modules.linear_relu",
        "torch.nn.intrinsic.qat.modules.conv_fused"
    ],
    "torch.nn.intrinsic.qat.modules.linear_relu": [
        "torch.ao.nn.intrinsic.qat"
    ],
    "torch.nn.intrinsic.qat.modules.linear_fused": [
        "torch.ao.nn.intrinsic.qat"
    ],
    "torch.nn.intrinsic.qat.modules.conv_fused": [
        "torch.ao.nn.intrinsic.qat"
    ],
    "torch.nn.intrinsic.quantized": [
        "torch.nn.intrinsic.quantized.modules",
        "torch.nn.intrinsic.quantized.dynamic"
    ],
    "torch.nn.intrinsic.quantized.modules": [
        "torch.nn.intrinsic.quantized.modules.bn_relu",
        "torch.nn.intrinsic.quantized.modules.linear_relu",
        "torch.nn.intrinsic.quantized.modules.conv_relu"
    ],
    "torch.nn.intrinsic.quantized.modules.linear_relu": [
        "torch.ao.nn.intrinsic.quantized"
    ],
    "torch.ao.nn.intrinsic.quantized": [
        "torch.ao.nn.intrinsic.quantized.modules"
    ],
    "torch.ao.nn.intrinsic.quantized.modules": [
        "torch.ao.nn.intrinsic.quantized.modules.linear_relu",
        "torch.ao.nn.intrinsic.quantized.modules.conv_relu",
        "torch.ao.nn.intrinsic.quantized.modules.bn_relu",
        "torch.ao.nn.intrinsic.quantized.modules.conv_add"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.linear_relu": [
        "torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU",
        "torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU",
        "torch.ao.nn.intrinsic",
        "torch.ao.nn.quantized",
        "torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh",
        "torch.ao.nn.quantized.modules.utils",
        "torch"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearReLU": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearLeakyReLU": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.linear_relu.LinearTanh": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.conv_relu": [
        "torch.ao.nn.intrinsic.qat",
        "torch.nn.utils",
        "torch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d",
        "torch.ao.nn.intrinsic",
        "torch.nn.functional",
        "torch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d",
        "torch.ao.nn.quantized",
        "torch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d",
        "torch"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.conv_relu.ConvReLU3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.bn_relu": [
        "torch.ao.nn.intrinsic.qat",
        "torch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d",
        "torch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d",
        "torch.ao.nn.intrinsic",
        "torch.ao.nn.quantized",
        "torch"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.bn_relu.BNReLU3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.conv_add": [
        "torch.ao.nn.intrinsic.qat",
        "torch.ao.nn.intrinsic",
        "torch.nn.functional",
        "torch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAdd2d",
        "torch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAddReLU2d",
        "torch.ao.nn.quantized",
        "torch"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAdd2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.intrinsic.quantized.modules.conv_add.ConvAddReLU2d": [
        "<builtin>.classmethod"
    ],
    "torch.nn.intrinsic.quantized.modules.conv_relu": [
        "torch.ao.nn.intrinsic.quantized"
    ],
    "torch.nn.intrinsic.quantized.modules.bn_relu": [
        "torch.ao.nn.intrinsic.quantized"
    ],
    "torch.nn.intrinsic.quantized.dynamic": [
        "torch.nn.intrinsic.quantized.dynamic.modules"
    ],
    "torch.nn.intrinsic.quantized.dynamic.modules": [
        "torch.nn.intrinsic.quantized.dynamic.modules.linear_relu"
    ],
    "torch.nn.intrinsic.quantized.dynamic.modules.linear_relu": [
        "torch.ao.nn.intrinsic.quantized.dynamic"
    ],
    "torch.ao.nn.intrinsic.quantized.dynamic": [
        "torch.ao.nn.intrinsic.quantized.dynamic.modules"
    ],
    "torch.ao.nn.intrinsic.quantized.dynamic.modules": [
        "torch",
        "torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu"
    ],
    "torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu": [
        "torch.ao.nn.intrinsic",
        "torch.ao.nn.quantized.dynamic",
        "torch",
        "torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu.LinearReLU"
    ],
    "torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu.LinearReLU": [
        "<builtin>.classmethod"
    ],
    "torch._tensor_docs": [
        "torch._torch_docs",
        "torch._tensor_docs.add_docstr_all",
        "torch._torch_docs.parse_kwargs"
    ],
    "torch._tensor_docs.add_docstr_all": [
        "<builtin>.getattr",
        "torch._C._add_docstr"
    ],
    "torch._storage_docs": [
        "torch._storage_docs.add_docstr_all"
    ],
    "torch._storage_docs.add_docstr_all": [
        "<builtin>.getattr",
        "torch._C._add_docstr"
    ],
    "torch.quantization": [
        "torch.quantization.observer",
        "torch.quantization.quant_type",
        "torch.quantization.fake_quantize",
        "torch.quantization.quantization_mappings",
        "torch.quantization.fuse_modules",
        "torch.quantization.quantize_jit",
        "torch.quantization.fuser_method_mappings",
        "torch.quantization.stubs",
        "torch.quantization.qconfig",
        "torch.quantization.quantize"
    ],
    "torch.quantization.quantize": [
        "torch.ao.quantization.quantize"
    ],
    "torch.ao.quantization.quantize": [
        "torch.nn",
        "torch.ao.quantization.stubs",
        "torch.ao.quantization.quantization_mappings",
        "torch.ao.nn.intrinsic",
        "torch.nn.utils.parametrize",
        "torch.ao.quantization.observer",
        "torch.ao.nn.quantized",
        "torch.ao.quantization.utils",
        "torch",
        "torch.ao.quantization.qconfig"
    ],
    "torch.ao.quantization.quantization_mappings": [
        "torch.ao.nn.qat.dynamic",
        "torch.nn",
        "torch.ao.nn.intrinsic.quantized.dynamic",
        "torch.ao.nn.intrinsic.qat",
        "torch.ao.nn.intrinsic.quantized",
        "torch.ao.nn.quantized.reference",
        "torch.ao.nn",
        "torch.ao.quantization.stubs",
        "torch.ao.nn.intrinsic",
        "torch.nn.functional",
        "torch.nn.utils.parametrize",
        "torch.ao.nn.sparse",
        "torch.ao.nn.qat",
        "torch.ao.nn.quantized",
        "torch.ao.quantization.fake_quantize",
        "torch.ao.quantization.utils",
        "torch.ao.nn.quantized.dynamic",
        "torch"
    ],
    "torch.ao.nn.quantized.reference": [
        "torch.ao.nn.quantized.reference.modules"
    ],
    "torch.ao.nn.quantized.reference.modules": [
        "torch.ao.nn.quantized.reference.modules.rnn",
        "torch.ao.nn.quantized.reference.modules.linear",
        "torch.ao.nn.quantized.reference.modules.sparse",
        "torch.ao.nn.quantized.reference.modules.conv"
    ],
    "torch.ao.nn.quantized.reference.modules.linear": [
        "torch.nn",
        "torch.ao.nn.quantized.reference.modules.utils",
        "torch.nn.functional",
        "torch.ao.nn.quantized.reference.modules.linear.Linear",
        "torch"
    ],
    "torch.ao.nn.quantized.reference.modules.utils": [
        "torch.ao.nn.quantized.reference.modules.utils.ReferenceQuantizedModule",
        "torch"
    ],
    "torch.ao.nn.quantized.reference.modules.utils.ReferenceQuantizedModule": [],
    "torch.ao.nn.quantized.reference.modules.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.conv": [
        "torch.nn",
        "torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d",
        "torch.ao.nn.quantized.reference.modules.utils",
        "torch.ao.nn.quantized.reference.modules.conv.Conv2d",
        "torch.nn.functional",
        "torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d",
        "torch.ao.nn.quantized.reference.modules.conv.Conv1d",
        "torch.ao.nn.quantized.reference.modules.conv.Conv3d",
        "torch.nn.common_types",
        "torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d",
        "torch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd",
        "torch.ao.nn.quantized.reference.modules.conv._ConvNd",
        "torch"
    ],
    "torch.ao.nn.quantized.reference.modules.conv._ConvNd": [
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.conv.Conv1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.conv.Conv2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.conv.Conv3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.conv._ConvTransposeNd": [
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.conv.ConvTranspose1d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.conv.ConvTranspose2d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.conv.ConvTranspose3d": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.rnn": [
        "torch.nn",
        "torch.ao.nn.quantized.reference.modules.utils",
        "torch._VF",
        "torch.ao.nn.quantized.reference.modules.rnn.RNNCellBase",
        "torch.ao.nn.quantized.reference.modules.rnn.LSTMCell",
        "torch.ao.nn.quantized.reference.modules.rnn.RNNCell",
        "torch.nn.utils.rnn",
        "torch.ao.nn.quantized.reference.modules.rnn.LSTM",
        "torch.ao.nn.quantized.reference.modules.rnn.RNNBase",
        "torch",
        "torch.ao.nn.quantized.reference.modules.rnn.GRUCell",
        "torch.ao.nn.quantized.reference.modules.rnn.GRU"
    ],
    "torch.ao.nn.quantized.reference.modules.rnn.RNNCellBase": [],
    "torch.ao.nn.quantized.reference.modules.rnn.RNNCell": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.rnn.LSTMCell": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.rnn.GRUCell": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.rnn.RNNBase": [],
    "torch.ao.nn.quantized.reference.modules.rnn.LSTM": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.rnn.GRU": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.sparse": [
        "torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag",
        "torch.nn",
        "torch.ao.nn.quantized.reference.modules.sparse.Embedding",
        "torch.ao.nn.quantized.reference.modules.utils",
        "torch.nn.functional",
        "torch"
    ],
    "torch.ao.nn.quantized.reference.modules.sparse.Embedding": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.quantized.reference.modules.sparse.EmbeddingBag": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.qat.dynamic": [
        "torch.ao.nn.qat.dynamic.modules"
    ],
    "torch.ao.nn.qat.dynamic.modules": [
        "torch.ao.nn.qat.dynamic.modules.linear"
    ],
    "torch.ao.nn.sparse": [
        "torch.ao.nn.sparse.quantized"
    ],
    "torch.ao.nn.sparse.quantized": [
        "torch.ao.nn.sparse.quantized.dynamic",
        "torch.ao.nn.sparse.quantized.linear"
    ],
    "torch.ao.nn.sparse.quantized.dynamic": [
        "torch.ao.nn.sparse.quantized.dynamic.linear"
    ],
    "torch.ao.nn.sparse.quantized.dynamic.linear": [
        "torch.ao.nn.sparse.quantized.dynamic.linear.Linear",
        "torch.ao.nn.intrinsic",
        "torch.ao.nn.sparse.quantized.utils",
        "torch",
        "torch.ao.nn.quantized.modules.utils",
        "torch.ao.nn.sparse.quantized.linear"
    ],
    "torch.ao.nn.sparse.quantized.linear": [
        "torch.ao.nn.quantized.modules.utils",
        "torch",
        "torch.ao.nn.sparse.quantized.linear.Linear",
        "torch.ao.nn.sparse.quantized.linear.LinearPackedParams"
    ],
    "torch.ao.nn.sparse.quantized.linear.LinearPackedParams": [
        "torch._jit_internal.export"
    ],
    "torch.ao.nn.sparse.quantized.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn.sparse.quantized.utils": [
        "torch.ao.nn.sparse.quantized.utils.LinearBlockSparsePattern"
    ],
    "torch.ao.nn.sparse.quantized.utils.LinearBlockSparsePattern": [
        "<builtin>.staticmethod"
    ],
    "torch.ao.nn.sparse.quantized.dynamic.linear.Linear": [
        "<builtin>.classmethod"
    ],
    "torch.ao.nn": [],
    "torch.ao.quantization.stubs": [
        "torch.ao.quantization.stubs.DeQuantStub",
        "torch.nn",
        "torch.ao.quantization.stubs.QuantStub",
        "torch.ao.quantization.stubs.QuantWrapper"
    ],
    "torch.ao.quantization.stubs.QuantStub": [],
    "torch.ao.quantization.stubs.DeQuantStub": [],
    "torch.ao.quantization.stubs.QuantWrapper": [],
    "torch.ao.quantization.fake_quantize": [
        "torch.nn",
        "torch.ao.quantization.fake_quantize.FakeQuantizeBase",
        "torch.ao.quantization.fake_quantize.FakeQuantizeBase.with_args",
        "torch.ao.quantization.fake_quantize.FakeQuantize",
        "torch.ao.quantization.observer",
        "torch.ao.quantization.fake_quantize.FixedQParamsFakeQuantize",
        "torch.ao.quantization.fake_quantize.FusedMovingAvgObsFakeQuantize",
        "torch"
    ],
    "torch.ao.quantization.observer": [
        "torch.nn",
        "torch.ao.quantization.observer.MovingAverageMinMaxObserver",
        "torch.ao.quantization.observer.MovingAveragePerChannelMinMaxObserver",
        "torch.ao.quantization.observer.HistogramObserver",
        "torch.ao.quantization.observer._PartialWrapper",
        "torch.ao.quantization.observer.UniformQuantizationObserverBase",
        "torch.ao.quantization.observer.PlaceholderObserver",
        "<builtin>.str",
        "torch.ao.quantization.observer.NoopObserver",
        "abc.ABCMeta",
        "torch.ao.quantization.observer.PerChannelMinMaxObserver",
        "torch.ao.quantization.observer.ObserverBase",
        "torch.ao.quantization.observer.RecordingObserver",
        "torch.ao.quantization.observer.ReuseInputObserver",
        "torch.ao.quantization.observer.FixedQParamsObserver",
        "torch.ao.quantization.utils",
        "torch.ao.quantization.observer.MinMaxObserver",
        "torch"
    ],
    "torch.ao.quantization.utils": [
        "torch.fx",
        "torch.ao.quantization.quant_type",
        "torch.nn.utils.parametrize",
        "torch",
        "torch.ao.quantization.utils.MatchAllNode"
    ],
    "torch.ao.quantization.quant_type": [
        "torch.ao.quantization.quant_type.QuantType"
    ],
    "torch.ao.quantization.quant_type.QuantType": [],
    "torch.fx": [
        "torch.fx._symbolic_trace",
        "torch.fx.node",
        "torch.fx.subgraph_rewriter",
        "torch.fx.graph",
        "torch.fx.graph_module",
        "torch.fx.proxy",
        "torch.fx.interpreter"
    ],
    "torch.fx.interpreter": [
        "torch.fx.traceback",
        "torch.hub",
        "torch.fx.interpreter.Transformer",
        "torch.fx._symbolic_trace",
        "torch.fx.node",
        "torch.fx.config",
        "torch.fx.graph",
        "torch.fx.graph_module",
        "torch.fx.interpreter.Interpreter",
        "torch.fx.proxy",
        "torch.fx._compatibility"
    ],
    "torch.fx.config": [],
    "torch.fx.interpreter.Interpreter": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx._compatibility.compatibility",
        "contextlib.contextmanager",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.interpreter.Transformer": [
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.subgraph_rewriter": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx._symbolic_trace",
        "torch.fx.node",
        "torch.fx.subgraph_rewriter.ReplacedPatterns",
        "torch.fx.graph",
        "torch.fx.subgraph_rewriter.Match",
        "torch.fx.graph_module",
        "torch",
        "torch.fx._compatibility",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.subgraph_rewriter.Match": [],
    "torch.fx.subgraph_rewriter.ReplacedPatterns": [],
    "torch.ao.quantization.utils.MatchAllNode": [],
    "torch.ao.quantization.observer._PartialWrapper": [],
    "abc.ABCMeta": [],
    "torch.ao.quantization.observer.ObserverBase": [
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "torch.ao.quantization.observer.UniformQuantizationObserverBase": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.MinMaxObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.MovingAverageMinMaxObserver": [],
    "torch.ao.quantization.observer.PerChannelMinMaxObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.MovingAveragePerChannelMinMaxObserver": [],
    "torch.ao.quantization.observer.HistogramObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.FixedQParamsObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.PlaceholderObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.RecordingObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.NoopObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.observer.ReuseInputObserver": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.fake_quantize.FakeQuantizeBase": [
        "torch._jit_internal.export",
        "<builtin>.classmethod",
        "abc.abstractmethod"
    ],
    "torch.ao.quantization.fake_quantize.FakeQuantize": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.fake_quantize.FixedQParamsFakeQuantize": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.fake_quantize.FusedMovingAvgObsFakeQuantize": [
        "torch._jit_internal.export"
    ],
    "torch.ao.quantization.fake_quantize.FakeQuantizeBase.with_args": [
        "torch.ao.quantization.observer._with_args"
    ],
    "torch.ao.quantization.observer._with_args": [
        "torch.ao.quantization.observer._PartialWrapper.__init__",
        "functools.partial"
    ],
    "torch.ao.quantization.observer._PartialWrapper.__init__": [],
    "torch.ao.quantization.qconfig": [
        "torch.nn",
        "torch.ao.quantization.fake_quantize.FakeQuantizeBase.with_args",
        "torch.ao.quantization.qconfig.QConfigDynamic",
        "collections.namedtuple",
        "torch.ao.quantization.qconfig.QConfig",
        "torch.ao.quantization.observer",
        "torch.ao.quantization.fake_quantize",
        "torch"
    ],
    "torch.ao.quantization.qconfig.QConfig": [],
    "torch.ao.quantization.qconfig.QConfigDynamic": [],
    "torch.quantization.observer": [
        "torch.ao.quantization.observer"
    ],
    "torch.quantization.qconfig": [
        "torch.ao.quantization.qconfig"
    ],
    "torch.quantization.fake_quantize": [
        "torch.ao.quantization.fake_quantize"
    ],
    "torch.quantization.fuse_modules": [
        "torch.ao.quantization.fuser_method_mappings",
        "torch.ao.quantization.fuse_modules"
    ],
    "torch.ao.quantization.fuse_modules": [
        "torch.nn.utils.parametrize",
        "torch.nn",
        "torch.ao.quantization.fuser_method_mappings"
    ],
    "torch.ao.quantization.fuser_method_mappings": [
        "torch.nn",
        "torch.ao.nn.intrinsic",
        "torch.ao.quantization.utils",
        "torch.ao.quantization.fuser_method_mappings._sequential_wrapper2"
    ],
    "torch.ao.quantization.fuser_method_mappings._sequential_wrapper2": [],
    "torch.quantization.stubs": [
        "torch.ao.quantization.stubs"
    ],
    "torch.quantization.quant_type": [
        "torch.ao.quantization.quant_type"
    ],
    "torch.quantization.quantize_jit": [
        "torch.ao.quantization.quantize_jit"
    ],
    "torch.ao.quantization.quantize_jit": [
        "torch.jit._recursive",
        "torch",
        "torch.ao.quantization.qconfig",
        "torch.ao.quantization.quant_type"
    ],
    "torch.quantization.quantization_mappings": [
        "torch.ao.quantization.quantization_mappings"
    ],
    "torch.quantization.fuser_method_mappings": [
        "torch.ao.quantization.fuser_method_mappings"
    ],
    "torch.quasirandom": [
        "torch.quasirandom.SobolEngine",
        "torch"
    ],
    "torch.quasirandom.SobolEngine": [],
    "torch.multiprocessing._atfork": [],
    "torch.multiprocessing._atfork.register_after_fork": [
        "torch.multiprocessing._atfork._register"
    ],
    "torch.multiprocessing._atfork._register": [],
    "torch._lobpcg": [
        "torch._lobpcg.LOBPCGAutogradFunction",
        "torch._linalg_utils",
        "torch.overrides",
        "torch._lobpcg.LOBPCG",
        "torch"
    ],
    "torch._lobpcg.LOBPCGAutogradFunction": [
        "<builtin>.staticmethod"
    ],
    "torch._lobpcg.LOBPCG": [
        "torch._jit_internal.unused"
    ],
    "torch.masked": [
        "torch.masked.maskedtensor.creation",
        "torch.masked.maskedtensor.core",
        "torch.masked._ops"
    ],
    "torch.masked.maskedtensor.core": [
        "torch.masked.maskedtensor.core.MaskedTensor",
        "torch",
        "torch.overrides"
    ],
    "torch.masked.maskedtensor.core.MaskedTensor": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torch.masked.maskedtensor.creation": [
        "torch.masked.maskedtensor.core"
    ],
    "torch.masked._ops": [
        "torch.masked",
        "torch.masked._docs",
        "torch.types",
        "torch.masked._ops._apply_docstring_templates",
        "torch"
    ],
    "torch.masked._docs": [],
    "torch.masked._ops._apply_docstring_templates": [
        "append",
        "<builtin>.getattr"
    ],
    "torch._TorchCompileInductorWrapper": [],
    "torch.return_types": [
        "<builtin>.dir",
        "<builtin>.getattr",
        "append",
        "<builtin>.globals",
        "<builtin>.issubclass",
        "torch",
        "torch.return_types.pytree_register_structseq"
    ],
    "torch.return_types.pytree_register_structseq": [
        "torch.utils._pytree._register_pytree_node"
    ],
    "torch._meta_registrations": [
        "torch._prims_common",
        "torch._meta_registrations.register_meta",
        "torch._prims",
        "torch._ops",
        "torch._refs.special",
        "torch._meta_registrations.register_meta.wrapper",
        "torch._subclasses.fake_tensor",
        "torch._prims_common.wrappers",
        "torch._refs.nn.functional",
        "torch._meta_registrations.activate_meta",
        "torch._decomp",
        "torch._refs",
        "torch._prims_common.wrappers.out_wrapper",
        "torch.utils._pytree",
        "torch._prims_common.wrappers.out_wrapper._out_wrapper",
        "torch",
        "torch.library.Library.__init__"
    ],
    "torch._meta_registrations.register_meta": [],
    "torch._meta_registrations.register_meta.wrapper": [
        "torch.utils._pytree.tree_map"
    ],
    "torch._meta_registrations.register_meta.wrapper.register": [
        "torch._decomp._add_op_to_registry"
    ],
    "torch._meta_registrations.activate_meta": [
        "torch.library.Library.impl",
        "<map>.items",
        "<builtin>.RuntimeError",
        "<builtin>.isinstance"
    ],
    "torch.cuda._sanitizer": [
        "torch.cuda._sanitizer.Access",
        "torch.utils._python_dispatch",
        "torch.cuda._sanitizer.CUDASanitizer",
        "torch.utils._cuda_trace",
        "torch.cuda._sanitizer.CUDASanitizer.__init__",
        "torch.cuda._sanitizer.EventHandler",
        "torch.cuda._sanitizer.ArgumentHandler",
        "torch.cuda._sanitizer.TensorInfo",
        "torch.cuda._sanitizer.UnsynchronizedAccessError",
        "torch.cuda._sanitizer.SynchronizationError",
        "torch.cuda._sanitizer._TensorsAccessed",
        "torch.cuda._sanitizer.AccessType",
        "torch.cuda._sanitizer.CUDASanitizerDispatchMode",
        "torch.utils._pytree",
        "torch.cuda._sanitizer.CUDASanitizerErrors",
        "torch",
        "typing.TypeVar",
        "torch.cuda._sanitizer.StreamSynchronizations"
    ],
    "torch.utils._cuda_trace": [
        "typing_extensions",
        "torch.utils._cuda_trace.CallbackRegistry",
        "typing_extensions.ParamSpec.__init__",
        "torch.utils._cuda_trace.CallbackRegistry.__init__"
    ],
    "typing_extensions.ParamSpec.__init__": [
        "typing_extensions._set_default",
        "<builtin>.bool",
        "typing_extensions._caller"
    ],
    "typing_extensions._set_default": [],
    "typing_extensions._caller": [],
    "torch.utils._cuda_trace.CallbackRegistry": [],
    "torch.utils._cuda_trace.CallbackRegistry.__init__": [],
    "torch.cuda._sanitizer.AccessType": [],
    "torch.cuda._sanitizer.Access": [],
    "torch.cuda._sanitizer.SynchronizationError": [],
    "torch.cuda._sanitizer.UnsynchronizedAccessError": [],
    "torch.cuda._sanitizer.CUDASanitizerErrors": [],
    "torch.cuda._sanitizer.TensorInfo": [
        "dataclasses.field"
    ],
    "dataclasses.field": [],
    "torch.cuda._sanitizer._TensorsAccessed": [],
    "torch.cuda._sanitizer.StreamSynchronizations": [],
    "torch.cuda._sanitizer.EventHandler": [],
    "torch.cuda._sanitizer.ArgumentHandler": [],
    "torch.cuda._sanitizer.CUDASanitizerDispatchMode": [],
    "torch.cuda._sanitizer.CUDASanitizer": [],
    "torch.cuda._sanitizer.CUDASanitizer.__init__": [
        "torch.cuda._sanitizer.CUDASanitizerDispatchMode.__init__"
    ],
    "torch.cuda._sanitizer.CUDASanitizerDispatchMode.__init__": [
        "torch.utils._cuda_trace.register_callback_for_cuda_stream_synchronization",
        "torch.utils._cuda_trace.register_callback_for_cuda_event_wait",
        "torch.utils._cuda_trace.register_callback_for_cuda_stream_creation",
        "torch.utils._cuda_trace.register_callback_for_cuda_event_record",
        "torch.utils._cuda_trace.register_callback_for_cuda_event_synchronization",
        "torch.utils._cuda_trace.register_callback_for_cuda_event_creation",
        "torch.utils._cuda_trace.register_callback_for_cuda_memory_deallocation",
        "torch.cuda._sanitizer.EventHandler.__init__",
        "torch.utils._cuda_trace.register_callback_for_cuda_device_synchronization",
        "torch.utils._cuda_trace.register_callback_for_cuda_memory_allocation",
        "torch.utils._cuda_trace.register_callback_for_cuda_event_deletion"
    ],
    "torch.cuda._sanitizer.EventHandler.__init__": [
        "torch.cuda._sanitizer._TensorsAccessed.__init__",
        "torch.cuda._sanitizer.StreamSynchronizations.__init__"
    ],
    "torch.cuda._sanitizer._TensorsAccessed.__init__": [],
    "torch.cuda._sanitizer.StreamSynchronizations.__init__": [
        "torch.cuda._sanitizer.StreamSynchronizations.create_stream"
    ],
    "torch.cuda._sanitizer.StreamSynchronizations.create_stream": [
        "torch.cuda._sanitizer.format_log_message"
    ],
    "torch.cuda._sanitizer.format_log_message": [
        "<str>.splitlines"
    ],
    "torch.utils._cuda_trace.register_callback_for_cuda_event_creation": [],
    "torch.utils._cuda_trace.register_callback_for_cuda_event_deletion": [],
    "torch.utils._cuda_trace.register_callback_for_cuda_event_record": [],
    "torch.utils._cuda_trace.register_callback_for_cuda_event_wait": [],
    "torch.utils._cuda_trace.register_callback_for_cuda_memory_allocation": [],
    "torch.utils._cuda_trace.register_callback_for_cuda_memory_deallocation": [],
    "torch.utils._cuda_trace.register_callback_for_cuda_stream_creation": [],
    "torch.utils._cuda_trace.register_callback_for_cuda_device_synchronization": [],
    "torch.utils._cuda_trace.register_callback_for_cuda_stream_synchronization": [],
    "torch.utils._cuda_trace.register_callback_for_cuda_event_synchronization": [],
    "torch.cuda._sanitizer.enable_cuda_sanitizer": [
        "torch.cuda._sanitizer.CUDASanitizer.enable"
    ],
    "torch.cuda._sanitizer.CUDASanitizer.enable": [
        "torch.utils._python_dispatch.TorchDispatchMode.__enter__"
    ],
    "torch.utils._python_dispatch.TorchDispatchMode.__enter__": [
        "torch.utils._python_dispatch._push_mode"
    ],
    "torch.utils._python_dispatch._push_mode": [
        "torch._C._push_on_torch_dispatch_stack"
    ],
    "torch._C._push_on_torch_dispatch_stack": [],
    "torch.func": [
        "torch._functorch.functional_call",
        "torch._functorch.vmap",
        "torch._functorch.eager_transforms",
        "torch._functorch.batch_norm_replacement"
    ],
    "torch._functorch.eager_transforms": [
        "torch._functorch.vmap.doesnt_support_saved_tensors_hooks",
        "torch.fx.experimental.const_fold",
        "torch._functorch.vmap",
        "torch._functorch.utils.exposed_in",
        "torch.autograd.forward_ad",
        "torch._functorch.utils.exposed_in.wrapper",
        "torch.utils._pytree",
        "torch._functorch.utils",
        "torch",
        "torch._functorch.pytree_hacks",
        "torch.fx.experimental.proxy_tensor"
    ],
    "torch.fx.experimental.const_fold": [
        "torch.fx.experimental.const_fold.FoldedGraphModule",
        "torch.fx.passes.split_module",
        "torch.fx.node",
        "torch.fx"
    ],
    "torch.fx.passes.split_module": [
        "torch.fx._compatibility.compatibility",
        "torch.fx._compatibility.compatibility.mark_not_back_compat",
        "torch.fx.graph_module",
        "torch",
        "torch.fx._compatibility",
        "torch.fx.passes.split_module.Partition",
        "torch.fx._compatibility.compatibility.mark_back_compat"
    ],
    "torch.fx.passes.split_module.Partition": [],
    "torch.fx.experimental.const_fold.FoldedGraphModule": [],
    "torch.fx.experimental.proxy_tensor": [
        "torch.fx.experimental.proxy_tensor._ProxyTensor",
        "torch.utils._pytree",
        "contextlib.contextmanager",
        "torch.fx.passes.shape_prop",
        "torch.fx.experimental.proxy_tensor.DecompositionInterpreter",
        "torch.utils.weak",
        "torch.fx.experimental.proxy_tensor.ProxySymDispatchMode",
        "torch.utils._stats",
        "torch.utils._pytree._register_pytree_node",
        "<builtin>.object",
        "torch.utils._python_dispatch",
        "torch.fx",
        "torch._subclasses.fake_tensor",
        "torch._subclasses",
        "torch.fx.experimental.proxy_tensor.ProxyTorchDispatchMode",
        "torch.fx.experimental.symbolic_shapes",
        "torch.fx.experimental.proxy_tensor.PythonKeyTracer",
        "torch._dispatch.python",
        "torch"
    ],
    "torch._dispatch.python": [
        "torch",
        "torch.utils._pytree",
        "contextlib.contextmanager",
        "torch._dispatch.python.Lit"
    ],
    "torch._dispatch.python.Lit": [],
    "torch.fx.passes.shape_prop": [
        "torch.fx.passes.shape_prop.TensorMetadata",
        "torch.fx",
        "torch.fx.node",
        "torch.fx.passes.shape_prop.ShapeProp",
        "torch",
        "torch.fx._compatibility"
    ],
    "torch.fx.passes.shape_prop.TensorMetadata": [],
    "torch.fx.passes.shape_prop.ShapeProp": [],
    "torch._subclasses": [
        "torch._subclasses.fake_tensor",
        "torch",
        "torch._subclasses.fake_utils"
    ],
    "torch._subclasses.fake_utils": [
        "torch.utils._python_dispatch",
        "torch._ops",
        "torch._subclasses.fake_tensor",
        "torch._subclasses.fake_utils.CrossRefFakeMode",
        "torch.utils._pytree",
        "torch"
    ],
    "torch._subclasses.fake_utils.CrossRefFakeMode": [],
    "torch.fx.experimental.proxy_tensor._ProxyTensor": [],
    "torch.fx.experimental.proxy_tensor.PythonKeyTracer": [],
    "torch.fx.experimental.proxy_tensor.ProxyTorchDispatchMode": [
        "torch.utils._stats.count"
    ],
    "torch.fx.experimental.proxy_tensor.ProxySymDispatchMode": [
        "contextlib.contextmanager"
    ],
    "torch.fx.experimental.proxy_tensor.DecompositionInterpreter": [],
    "torch._functorch.functional_call": [
        "torch.nn",
        "torch._functorch.utils.exposed_in",
        "torch._functorch.utils.exposed_in.wrapper",
        "torch._functorch.utils",
        "torch"
    ],
    "torch._functorch.batch_norm_replacement": [
        "torch.nn",
        "torch._functorch.utils.exposed_in",
        "torch._functorch.utils.exposed_in.wrapper",
        "torch._functorch.utils"
    ],
    "torchvision.models": [
        "torchvision.models.optical_flow",
        "torchvision.models.segmentation",
        "torchvision.models.efficientnet",
        "torchvision.models.vgg",
        "torchvision.models.densenet",
        "torchvision.models.swin_transformer",
        "torchvision.models.mnasnet",
        "torchvision.models.video",
        "torchvision.models.alexnet",
        "torchvision.models.quantization",
        "torchvision.models.vision_transformer",
        "torchvision.models.inception",
        "torchvision.models.convnext",
        "torchvision.models.googlenet",
        "torchvision.models.squeezenet",
        "torchvision.models.shufflenetv2",
        "torchvision.models.resnet",
        "torchvision.models.mobilenet",
        "torchvision.models.regnet",
        "torchvision.models._api",
        "torchvision.models.maxvit",
        "torchvision.models.detection"
    ],
    "torchvision.models.alexnet": [
        "torchvision.models.alexnet.AlexNet",
        "torch.nn",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._api",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.transforms._presets",
        "torchvision.models.alexnet.AlexNet_Weights",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.utils",
        "torchvision.models._utils",
        "torchvision.models._api.register_model.wrapper",
        "torch"
    ],
    "torchvision.transforms._presets": [
        "torch.nn",
        "torchvision.transforms._presets.ObjectDetection",
        "torchvision.transforms._presets.SemanticSegmentation",
        "torchvision.transforms._presets.OpticalFlow",
        "torchvision.transforms.functional",
        "torchvision.transforms._presets.ImageClassification",
        "torch",
        "torchvision.transforms._presets.VideoClassification"
    ],
    "torchvision.transforms.functional": [
        "torchvision.transforms._functional_tensor",
        "PIL.Image",
        "torchvision.transforms._functional_pil",
        "torch._jit_internal.unused",
        "torchvision.utils",
        "torch",
        "numpy",
        "torchvision.transforms.functional.InterpolationMode"
    ],
    "PIL.Image": [
        "PIL.TiffTags",
        "<builtin>.ImportError",
        "PIL._util",
        "PIL.Image.Resampling",
        "PIL.Image.DecompressionBombError",
        "PIL.Image.ImagePointHandler",
        "PIL.Image._apply_env_variables",
        "PIL.Image.Transform",
        "PIL.Image.DecompressionBombWarning",
        "PIL.Image.Image",
        "PIL.Image.Dither",
        "PIL.ExifTags",
        "<builtin>.setattr",
        "PIL.ImageMode",
        "PIL._util.DeferredError.__init__",
        "PIL.Image.Exif",
        "PIL.Image.Quantize",
        "<builtin>.hasattr",
        "PIL.Image._E",
        "PIL.Image.Transpose",
        "<builtin>.getattr",
        "PIL.Image.ImageTransformHandler",
        "<builtin>.str",
        "PIL._binary",
        "PIL.Image.Palette",
        "<builtin>.int"
    ],
    "PIL.ExifTags": [
        "PIL.ExifTags.LightSource",
        "PIL.ExifTags.Base",
        "PIL.ExifTags.GPS",
        "PIL.ExifTags.Interop",
        "PIL.ExifTags.IFD"
    ],
    "PIL.ExifTags.Base": [],
    "PIL.ExifTags.GPS": [],
    "PIL.ExifTags.Interop": [],
    "PIL.ExifTags.IFD": [],
    "PIL.ExifTags.LightSource": [],
    "PIL.ImageMode": [
        "PIL.ImageMode.ModeDescriptor"
    ],
    "PIL.ImageMode.ModeDescriptor": [],
    "PIL.TiffTags": [
        "PIL.TiffTags._populate",
        "PIL.TiffTags.TagInfo",
        "collections.namedtuple"
    ],
    "PIL.TiffTags.TagInfo": [],
    "PIL.TiffTags._populate": [
        "<map>.items",
        "<builtin>.len"
    ],
    "PIL._binary": [],
    "PIL._util": [
        "PIL._util.DeferredError"
    ],
    "PIL._util.DeferredError": [],
    "PIL.Image.DecompressionBombWarning": [],
    "PIL.Image.DecompressionBombError": [],
    "PIL._util.DeferredError.__init__": [],
    "PIL.Image.Transpose": [],
    "PIL.Image.Transform": [],
    "PIL.Image.Resampling": [],
    "PIL.Image.Dither": [],
    "PIL.Image.Palette": [],
    "PIL.Image.Quantize": [],
    "PIL.Image._E": [],
    "PIL.Image.Image": [
        "<builtin>.property"
    ],
    "PIL.Image.ImagePointHandler": [],
    "PIL.Image.ImageTransformHandler": [],
    "PIL.Image._apply_env_variables": [
        "<builtin>.int",
        "<builtin>.len"
    ],
    "PIL.Image.Exif": [],
    "torchvision.utils": [
        "torch.autograd.grad_mode.no_grad.__init__",
        "PIL.Image",
        "PIL.ImageDraw",
        "PIL.ImageFont",
        "torch",
        "numpy",
        "PIL.ImageColor"
    ],
    "PIL.ImageColor": [
        "PIL.Image"
    ],
    "PIL.ImageDraw": [
        "PIL.Image",
        "PIL.ImageColor",
        "PIL.ImageDraw.ImageDraw"
    ],
    "PIL.ImageDraw.ImageDraw": [],
    "PIL.ImageFont": [
        "PIL.ImageFont.FreeTypeFont",
        "PIL.Image",
        "PIL.ImageFont.Layout",
        "PIL.ImageFont.ImageFont",
        "PIL._util.DeferredError.__init__",
        "PIL._util",
        "PIL.ImageFont.TransposedFont"
    ],
    "PIL.ImageFont.Layout": [],
    "PIL.ImageFont.ImageFont": [],
    "PIL.ImageFont.FreeTypeFont": [],
    "PIL.ImageFont.TransposedFont": [],
    "torchvision.transforms._functional_pil": [
        "PIL.ImageEnhance",
        "PIL.Image",
        "torch._jit_internal.unused",
        "PIL.ImageOps",
        "torch",
        "numpy"
    ],
    "PIL.ImageEnhance": [
        "PIL.ImageFilter",
        "PIL.Image",
        "PIL.ImageEnhance.Sharpness",
        "PIL.ImageStat",
        "PIL.ImageEnhance.Color",
        "PIL.ImageEnhance._Enhance",
        "PIL.ImageEnhance.Brightness",
        "PIL.ImageEnhance.Contrast"
    ],
    "PIL.ImageFilter": [
        "PIL.ImageFilter.Filter",
        "PIL.ImageFilter.MultibandFilter",
        "PIL.ImageFilter.SMOOTH_MORE",
        "PIL.ImageFilter.EMBOSS",
        "PIL.ImageFilter.EDGE_ENHANCE",
        "PIL.ImageFilter.UnsharpMask",
        "PIL.ImageFilter.BoxBlur",
        "PIL.ImageFilter.GaussianBlur",
        "PIL.ImageFilter.RankFilter",
        "PIL.ImageFilter.DETAIL",
        "PIL.ImageFilter.CONTOUR",
        "PIL.ImageFilter.Kernel",
        "PIL.ImageFilter.BuiltinFilter",
        "PIL.ImageFilter.FIND_EDGES",
        "PIL.ImageFilter.SMOOTH",
        "PIL.ImageFilter.EDGE_ENHANCE_MORE",
        "PIL.ImageFilter.MinFilter",
        "PIL.ImageFilter.MedianFilter",
        "PIL.ImageFilter.MaxFilter",
        "PIL.ImageFilter.ModeFilter",
        "PIL.ImageFilter.BLUR",
        "PIL.ImageFilter.Color3DLUT",
        "PIL.ImageFilter.SHARPEN"
    ],
    "PIL.ImageFilter.Filter": [],
    "PIL.ImageFilter.MultibandFilter": [],
    "PIL.ImageFilter.BuiltinFilter": [],
    "PIL.ImageFilter.Kernel": [],
    "PIL.ImageFilter.RankFilter": [],
    "PIL.ImageFilter.MedianFilter": [],
    "PIL.ImageFilter.MinFilter": [],
    "PIL.ImageFilter.MaxFilter": [],
    "PIL.ImageFilter.ModeFilter": [],
    "PIL.ImageFilter.GaussianBlur": [],
    "PIL.ImageFilter.BoxBlur": [],
    "PIL.ImageFilter.UnsharpMask": [],
    "PIL.ImageFilter.BLUR": [],
    "PIL.ImageFilter.CONTOUR": [],
    "PIL.ImageFilter.DETAIL": [],
    "PIL.ImageFilter.EDGE_ENHANCE": [],
    "PIL.ImageFilter.EDGE_ENHANCE_MORE": [],
    "PIL.ImageFilter.EMBOSS": [],
    "PIL.ImageFilter.FIND_EDGES": [],
    "PIL.ImageFilter.SHARPEN": [],
    "PIL.ImageFilter.SMOOTH": [],
    "PIL.ImageFilter.SMOOTH_MORE": [],
    "PIL.ImageFilter.Color3DLUT": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "PIL.ImageStat": [
        "PIL.ImageStat.Stat"
    ],
    "PIL.ImageStat.Stat": [],
    "PIL.ImageEnhance._Enhance": [],
    "PIL.ImageEnhance.Color": [],
    "PIL.ImageEnhance.Contrast": [],
    "PIL.ImageEnhance.Brightness": [],
    "PIL.ImageEnhance.Sharpness": [],
    "PIL.ImageOps": [
        "PIL.ExifTags",
        "PIL.Image",
        "PIL.ImagePalette"
    ],
    "PIL.ImagePalette": [
        "PIL.ImagePalette.ImagePalette",
        "PIL.GimpGradientFile",
        "PIL.GimpPaletteFile",
        "PIL.PaletteFile",
        "PIL.ImageColor"
    ],
    "PIL.GimpGradientFile": [
        "PIL._binary",
        "PIL.GimpGradientFile.GimpGradientFile",
        "PIL.GimpGradientFile.GradientFile"
    ],
    "PIL.GimpGradientFile.GradientFile": [],
    "PIL.GimpGradientFile.GimpGradientFile": [],
    "PIL.GimpPaletteFile": [
        "PIL._binary",
        "PIL.GimpPaletteFile.GimpPaletteFile"
    ],
    "PIL.GimpPaletteFile.GimpPaletteFile": [],
    "PIL.PaletteFile": [
        "PIL.PaletteFile.PaletteFile",
        "PIL._binary"
    ],
    "PIL.PaletteFile.PaletteFile": [],
    "PIL.ImagePalette.ImagePalette": [
        "<builtin>.property"
    ],
    "torchvision.transforms._functional_tensor": [
        "torch",
        "torch.nn.functional"
    ],
    "torchvision.transforms.functional.InterpolationMode": [],
    "torchvision.transforms._presets.ObjectDetection": [],
    "torchvision.transforms._presets.ImageClassification": [],
    "torchvision.transforms._presets.VideoClassification": [],
    "torchvision.transforms._presets.SemanticSegmentation": [],
    "torchvision.transforms._presets.OpticalFlow": [],
    "torchvision.models._api": [
        "torch.nn",
        "torchvision._internally_replaced_utils",
        "torchvision.models._api.WeightsEnum",
        "torchvision.models._api.Weights",
        "typing.TypeVar"
    ],
    "torchvision._internally_replaced_utils": [
        "torch.utils.model_zoo",
        "torch.hub._get_torch_home",
        "torch.hub"
    ],
    "torch.hub._get_torch_home": [],
    "torch.utils.model_zoo": [
        "torch.hub"
    ],
    "torchvision.models._api.Weights": [],
    "torchvision.models._api.WeightsEnum": [
        "<builtin>.property",
        "<builtin>.classmethod"
    ],
    "torchvision.models._meta": [],
    "torchvision.models._utils": [
        "torch.nn",
        "torchvision.models._utils.IntermediateLayerGetter",
        "torchvision.models._utils._ModelURLs",
        "torchvision.models._api",
        "typing.TypeVar",
        "torchvision._utils"
    ],
    "torchvision._utils": [
        "torchvision._utils.StrEnumMeta",
        "typing.TypeVar",
        "torchvision._utils.StrEnum"
    ],
    "torchvision._utils.StrEnumMeta": [],
    "torchvision._utils.StrEnum": [],
    "torchvision.models._utils.IntermediateLayerGetter": [],
    "torchvision.models._utils._ModelURLs": [],
    "torchvision.models.alexnet.AlexNet": [],
    "torchvision.models.alexnet.AlexNet_Weights": [
        "functools.partial"
    ],
    "torchvision.models._utils.handle_legacy_interface": [],
    "torchvision.models._utils.handle_legacy_interface.outer_wrapper": [
        "torchvision.models._utils.kwonly_to_pos_or_kw"
    ],
    "torchvision.models._utils.kwonly_to_pos_or_kw": [
        "<builtin>.enumerate",
        "<builtin>.tuple",
        "<builtin>.TypeError",
        "<builtin>.next"
    ],
    "<builtin>.next": [],
    "torchvision.models._api.register_model": [],
    "torchvision.models._api.register_model.wrapper": [
        "<builtin>.ValueError"
    ],
    "torchvision.models.convnext": [
        "torch.nn",
        "torch.nn.functional",
        "torchvision.ops.stochastic_depth",
        "torchvision.transforms._presets",
        "torchvision.models.convnext.ConvNeXt_Tiny_Weights",
        "torchvision.models._utils.handle_legacy_interface",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.convnext.ConvNeXt_Small_Weights",
        "torchvision.models._utils",
        "torchvision.ops.misc",
        "torchvision.models.convnext.LayerNorm2d",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.convnext.CNBlock",
        "torchvision.utils",
        "torchvision.models.convnext.ConvNeXt_Large_Weights",
        "torchvision.models.convnext.ConvNeXt",
        "torchvision.models._api.register_model",
        "torchvision.models.convnext.ConvNeXt_Base_Weights",
        "torchvision.models.convnext.CNBlockConfig",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.ops.misc": [
        "torchvision.ops.misc.MLP",
        "torchvision.ops.misc.Conv2dNormActivation",
        "torchvision.ops.misc.FrozenBatchNorm2d",
        "torchvision.ops.misc.ConvNormActivation",
        "torchvision.ops.misc.Permute",
        "torchvision.ops.misc.SqueezeExcitation",
        "torchvision.ops.misc.Conv3dNormActivation",
        "torchvision.utils",
        "torch"
    ],
    "torchvision.ops.misc.FrozenBatchNorm2d": [],
    "torchvision.ops.misc.ConvNormActivation": [],
    "torchvision.ops.misc.Conv2dNormActivation": [],
    "torchvision.ops.misc.Conv3dNormActivation": [],
    "torchvision.ops.misc.SqueezeExcitation": [],
    "torchvision.ops.misc.MLP": [],
    "torchvision.ops.misc.Permute": [],
    "torchvision.ops.stochastic_depth": [
        "torch.nn",
        "torch.fx",
        "torchvision.utils",
        "torch",
        "torch.fx._symbolic_trace.wrap",
        "torchvision.ops.stochastic_depth.StochasticDepth"
    ],
    "torchvision.ops.stochastic_depth.StochasticDepth": [],
    "torchvision.models.convnext.LayerNorm2d": [],
    "torchvision.models.convnext.CNBlock": [],
    "torchvision.models.convnext.CNBlockConfig": [],
    "torchvision.models.convnext.ConvNeXt": [],
    "torchvision.models.convnext.ConvNeXt_Tiny_Weights": [
        "functools.partial"
    ],
    "torchvision.models.convnext.ConvNeXt_Small_Weights": [
        "functools.partial"
    ],
    "torchvision.models.convnext.ConvNeXt_Base_Weights": [
        "functools.partial"
    ],
    "torchvision.models.convnext.ConvNeXt_Large_Weights": [
        "functools.partial"
    ],
    "torchvision.models.densenet": [
        "torch.nn",
        "torchvision.models.densenet._Transition",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.densenet.DenseNet121_Weights",
        "torch",
        "torchvision.models.densenet._DenseLayer",
        "torchvision.models._meta",
        "torchvision.models.densenet.DenseNet201_Weights",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.densenet._DenseBlock",
        "torchvision.utils",
        "torchvision.models.densenet.DenseNet",
        "torchvision.models.densenet.DenseNet169_Weights",
        "torchvision.models._api.register_model",
        "torch.utils.checkpoint",
        "torchvision.models.densenet.DenseNet161_Weights",
        "torchvision.models._utils",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torch.utils.checkpoint": [
        "torch.utils.checkpoint.CheckpointFunction",
        "torch"
    ],
    "torch.utils.checkpoint.CheckpointFunction": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.densenet._DenseLayer": [
        "torch._jit_internal.unused",
        "torch._jit_internal._overload_method"
    ],
    "torchvision.models.densenet._DenseBlock": [],
    "torchvision.models.densenet._Transition": [],
    "torchvision.models.densenet.DenseNet": [],
    "torchvision.models.densenet.DenseNet121_Weights": [
        "functools.partial"
    ],
    "torchvision.models.densenet.DenseNet161_Weights": [
        "functools.partial"
    ],
    "torchvision.models.densenet.DenseNet169_Weights": [
        "functools.partial"
    ],
    "torchvision.models.densenet.DenseNet201_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet": [
        "torchvision.models.efficientnet.EfficientNet_B0_Weights",
        "torch.nn",
        "torchvision.models.efficientnet.EfficientNet_B3_Weights",
        "torchvision.models.efficientnet._MBConvConfig",
        "torchvision.models.efficientnet.MBConv",
        "torchvision.models.efficientnet.EfficientNet_B2_Weights",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.efficientnet.FusedMBConvConfig",
        "torchvision.models.efficientnet.EfficientNet_V2_M_Weights",
        "torchvision.models.efficientnet.FusedMBConv",
        "torch",
        "torchvision.models.efficientnet.EfficientNet_B1_Weights",
        "torchvision.models._meta",
        "torchvision.models._utils",
        "torchvision.ops.misc",
        "torchvision.models.efficientnet.EfficientNet_B6_Weights",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.efficientnet.EfficientNet_V2_S_Weights",
        "torchvision.models.efficientnet.EfficientNet_B7_Weights",
        "torchvision.ops",
        "torchvision.utils",
        "torchvision.models.efficientnet.EfficientNet_B4_Weights",
        "torchvision.models.efficientnet.MBConvConfig",
        "torchvision.models._api.register_model",
        "torchvision.models.efficientnet.EfficientNet_B5_Weights",
        "torchvision.models.efficientnet.EfficientNet_V2_L_Weights",
        "torchvision.models.efficientnet.EfficientNet",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.ops": [
        "torchvision.ops.boxes",
        "torchvision.ops.diou_loss",
        "torchvision.ops.roi_align",
        "torchvision.ops.focal_loss",
        "torchvision.ops.feature_pyramid_network",
        "torchvision.ops.poolers",
        "torchvision.ops.ps_roi_align",
        "torchvision.ops.roi_pool",
        "torchvision.ops.stochastic_depth",
        "torchvision.ops.ciou_loss",
        "torchvision.ops.ps_roi_pool",
        "torchvision.ops.misc",
        "torchvision.ops.deform_conv",
        "torchvision.ops.giou_loss",
        "torchvision.ops.drop_block",
        "torchvision.ops._register_onnx_ops",
        "torchvision.ops._register_onnx_ops._register_custom_op"
    ],
    "torchvision.ops._register_onnx_ops": [
        "torch.onnx.symbolic_opset11",
        "torch.onnx.symbolic_helper.parse_args",
        "torch.onnx.symbolic_helper",
        "torch.onnx.symbolic_helper.parse_args.decorator",
        "torch"
    ],
    "torchvision.ops.boxes": [
        "torchvision.ops._box_convert",
        "torchvision.ops._utils",
        "torchvision",
        "torchvision.extension",
        "torchvision.utils",
        "torch.jit._trace._script_if_tracing",
        "torch"
    ],
    "torchvision": [
        "torchvision.io",
        "torchvision.version",
        "torchvision.models",
        "torchvision.ops",
        "torchvision.transforms",
        "torchvision.extension",
        "torchvision.utils",
        "torchvision.datasets",
        "torch"
    ],
    "torchvision.datasets": [
        "torchvision.datasets.sbd",
        "torchvision.datasets.svhn",
        "torchvision.datasets.omniglot",
        "torchvision.datasets._optical_flow",
        "torchvision.datasets.caltech",
        "torchvision.datasets.sun397",
        "torchvision.datasets.ucf101",
        "torchvision.datasets.cityscapes",
        "torchvision.datasets.rendered_sst2",
        "torchvision.datasets.pcam",
        "torchvision.datasets.stanford_cars",
        "torchvision.datasets.hmdb51",
        "torchvision.datasets.clevr",
        "torchvision.datasets.imagenet",
        "torchvision.datasets.stl10",
        "torchvision.datasets.country211",
        "torchvision.datasets.kitti",
        "torchvision.datasets.flickr",
        "torchvision.datasets.fgvc_aircraft",
        "torchvision.datasets.inaturalist",
        "torchvision.datasets.sbu",
        "torchvision.datasets.voc",
        "torchvision.datasets._stereo_matching",
        "torchvision.datasets.gtsrb",
        "torchvision.datasets.dtd",
        "torchvision.datasets.moving_mnist",
        "torchvision.datasets.kinetics",
        "torchvision.datasets.semeion",
        "torchvision.datasets.folder",
        "torchvision.datasets.widerface",
        "torchvision.datasets.eurosat",
        "torchvision.datasets.flowers102",
        "torchvision.datasets.places365",
        "torchvision.datasets.vision",
        "torchvision.datasets.lfw",
        "torchvision.datasets.coco",
        "torchvision.datasets.phototour",
        "torchvision.datasets.celeba",
        "torchvision.datasets.oxford_iiit_pet",
        "torchvision.datasets.lsun",
        "torchvision.datasets.cifar",
        "torchvision.datasets.fakedata",
        "torchvision.datasets.fer2013",
        "torchvision.datasets.mnist",
        "torchvision.datasets.food101",
        "torchvision.datasets.usps"
    ],
    "torchvision.datasets._optical_flow": [
        "torchvision.datasets._optical_flow.FlyingChairs",
        "PIL.Image",
        "torchvision.datasets._optical_flow.FlowDataset",
        "torchvision.datasets.utils",
        "torchvision.datasets._optical_flow.FlyingThings3D",
        "torchvision.io.image",
        "torchvision.datasets._optical_flow.KittiFlow",
        "torchvision.datasets.vision",
        "torchvision.datasets._optical_flow.Sintel",
        "torch",
        "numpy",
        "torchvision.datasets._optical_flow.HD1K"
    ],
    "torchvision.io.image": [
        "warnings.warn",
        "torchvision.io.image.ImageReadMode",
        "torchvision.extension._load_library",
        "torchvision.extension",
        "torchvision.utils",
        "torch"
    ],
    "torchvision.extension": [
        "torchvision._internally_replaced_utils",
        "torch._ops._Ops.load_library",
        "torchvision._internally_replaced_utils._get_extension_path",
        "torchvision.extension._check_cuda_version",
        "torch"
    ],
    "torchvision._internally_replaced_utils._get_extension_path": [
        "<builtin>.hasattr"
    ],
    "torch._ops._Ops.load_library": [
        "torch._ops.dl_open_guard",
        "torch._utils_internal.resolve_library_path"
    ],
    "torch._utils_internal.resolve_library_path": [],
    "torch._ops.dl_open_guard": [],
    "torchvision.extension._check_cuda_version": [
        "<builtin>.RuntimeError",
        "<builtin>.str",
        "<builtin>.int",
        "torch.version"
    ],
    "torchvision.extension._load_library": [
        "warnings.warn",
        "torch._ops._Ops.load_library",
        "<builtin>.hasattr",
        "torchvision._internally_replaced_utils._get_extension_path"
    ],
    "torchvision.io.image.ImageReadMode": [],
    "torchvision.datasets.utils": [
        "torchvision._internally_replaced_utils",
        "typing.TypeVar",
        "torch.utils.model_zoo",
        "requests",
        "torch",
        "numpy"
    ],
    "requests": [
        "requests.models",
        "requests.status_codes",
        "requests._check_cryptography",
        "urllib3.contrib.pyopenssl",
        "requests.__version__",
        "requests.check_compatibility",
        "requests.api",
        "<builtin>.getattr",
        "requests.exceptions",
        "urllib3.exceptions",
        "requests.utils",
        "requests.sessions",
        "urllib3.contrib.pyopenssl.inject_into_urllib3",
        "charset_normalizer",
        "requests.packages",
        "urllib3",
        "logging.NullHandler"
    ],
    "urllib3": [
        "urllib3.util.timeout",
        "urllib3.util.request",
        "urllib3.filepost",
        "urllib3.connectionpool",
        "urllib3.poolmanager",
        "urllib3.util.retry",
        "urllib3._version",
        "urllib3.response",
        "urllib3.exceptions",
        "urllib3.contrib.emscripten.inject_into_urllib3",
        "urllib3._base_connection",
        "urllib3.contrib.emscripten",
        "logging.NullHandler",
        "urllib3.poolmanager.PoolManager.__init__"
    ],
    "urllib3.exceptions": [
        "urllib3.exceptions.ResponseNotChunked",
        "urllib3.exceptions.LocationValueError",
        "urllib3.exceptions.BodyNotHttplibCompatible",
        "urllib3.exceptions.ProxyError",
        "urllib3.response",
        "urllib3.connection",
        "urllib3.exceptions.ProxySchemeUnknown",
        "urllib3.exceptions.InsecureRequestWarning",
        "urllib3.exceptions.ProxySchemeUnsupported",
        "urllib3.exceptions.UnrewindableBodyError",
        "urllib3.exceptions.URLSchemeUnknown",
        "urllib3.exceptions.HeaderParsingError",
        "urllib3.exceptions.FullPoolError",
        "urllib3.exceptions.NameResolutionError",
        "urllib3.exceptions.ClosedPoolError",
        "urllib3.exceptions.PoolError",
        "urllib3.exceptions.EmptyPoolError",
        "urllib3.exceptions.ProtocolError",
        "urllib3.exceptions.TimeoutStateError",
        "urllib3.exceptions.HTTPWarning",
        "urllib3.exceptions.LocationParseError",
        "urllib3.exceptions.NotOpenSSLWarning",
        "urllib3.exceptions.IncompleteRead",
        "urllib3.exceptions.HTTPError",
        "urllib3.connectionpool",
        "urllib3.util.retry",
        "urllib3.exceptions.TimeoutError",
        "urllib3.exceptions.NewConnectionError",
        "urllib3.exceptions.ResponseError",
        "urllib3.exceptions.DecodeError",
        "urllib3.exceptions.DependencyWarning",
        "urllib3.exceptions.InsecurePlatformWarning",
        "urllib3.exceptions.RequestError",
        "urllib3.exceptions.SystemTimeWarning",
        "urllib3.exceptions.ReadTimeoutError",
        "urllib3.exceptions.InvalidChunkLength",
        "urllib3.exceptions.SSLError",
        "urllib3.exceptions.HostChangedError",
        "urllib3.exceptions.SecurityWarning",
        "urllib3.exceptions.InvalidHeader",
        "urllib3.exceptions.MaxRetryError",
        "urllib3.exceptions.ConnectTimeoutError"
    ],
    "urllib3.connection": [
        "urllib3.util.ssl_match_hostname",
        "urllib3.response",
        "urllib3.http2.probe",
        "urllib3.connection.DummyConnection",
        "urllib3.util",
        "urllib3.util.response",
        "urllib3.util.ssltransport",
        "urllib3.util.request",
        "urllib3.util.connection",
        "urllib3.connection.HTTPSConnection",
        "urllib3.exceptions",
        "urllib3.connection.BaseSSLError",
        "urllib3.util.url",
        "urllib3.connection._WrappedAndVerifiedSocket",
        "urllib3._version",
        "urllib3.connection.HTTPConnection",
        "urllib3._base_connection",
        "urllib3.util.timeout",
        "<builtin>.hasattr",
        "urllib3.util.ssl_",
        "urllib3.util.util",
        "urllib3.util.wait"
    ],
    "urllib3.response": [
        "urllib3.util.response",
        "urllib3.response.ContentDecoder",
        "urllib3.response.DeflateDecoder",
        "urllib3.response.BytesQueueBuffer",
        "urllib3.util",
        "urllib3.connectionpool",
        "urllib3.response.BaseHTTPResponse",
        "urllib3.util.retry",
        "urllib3.response.BrotliDecoder",
        "urllib3.response.MultiDecoder",
        "urllib3.exceptions",
        "urllib3.connection",
        "urllib3.response.GzipDecoderState",
        "urllib3.response.ZstdDecoder",
        "urllib3.response.HTTPResponse",
        "urllib3.response.GzipDecoder",
        "urllib3._base_connection"
    ],
    "urllib3._base_connection": [
        "urllib3.util.timeout",
        "urllib3.util.url",
        "urllib3.util.connection",
        "urllib3._base_connection.BaseHTTPSConnection",
        "urllib3._base_connection.ProxyConfig",
        "urllib3.response",
        "urllib3._base_connection._ResponseOptions",
        "urllib3._base_connection.BaseHTTPConnection"
    ],
    "urllib3.util.connection": [
        "urllib3.exceptions",
        "urllib3.util.timeout",
        "urllib3._base_connection",
        "urllib3.util.connection._has_ipv6"
    ],
    "urllib3.util.timeout": [
        "urllib3.exceptions",
        "urllib3.util.timeout.Timeout",
        "urllib3.util.timeout._TYPE_DEFAULT"
    ],
    "urllib3.util.timeout._TYPE_DEFAULT": [],
    "urllib3.util.timeout.Timeout": [
        "<builtin>.property",
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "urllib3.util.connection._has_ipv6": [],
    "urllib3.util.url": [
        "urllib3.exceptions",
        "urllib3.util.url.Url",
        "<builtin>.set",
        "urllib3.util.util"
    ],
    "urllib3.util.util": [],
    "urllib3.util.url.Url": [
        "<builtin>.property"
    ],
    "urllib3._base_connection.ProxyConfig": [],
    "urllib3._base_connection._ResponseOptions": [],
    "urllib3._base_connection.BaseHTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3._base_connection.BaseHTTPSConnection": [],
    "urllib3.util": [
        "urllib3.util.response",
        "urllib3.util.timeout",
        "urllib3.util.request",
        "urllib3.util.url",
        "urllib3.util.connection",
        "urllib3.util.retry",
        "urllib3.util.ssl_",
        "urllib3.util.wait"
    ],
    "urllib3.util.request": [
        "<builtin>.frozenset",
        "urllib3.util.request._TYPE_FAILEDTELL",
        "urllib3.util.util",
        "urllib3.exceptions",
        "urllib3.util.request.ChunksAndContentLength"
    ],
    "urllib3.util.request._TYPE_FAILEDTELL": [],
    "urllib3.util.request.ChunksAndContentLength": [],
    "urllib3.util.response": [
        "urllib3.exceptions"
    ],
    "urllib3.util.retry": [
        "urllib3.connectionpool",
        "urllib3.util.retry.Retry",
        "urllib3.response",
        "urllib3.util.util",
        "urllib3.exceptions",
        "typing_extensions",
        "urllib3.util.retry.RequestHistory",
        "urllib3.util.retry.Retry.__init__"
    ],
    "urllib3.connectionpool": [
        "urllib3.util.ssl_match_hostname",
        "urllib3._request_methods",
        "urllib3.util.request",
        "urllib3.util.timeout",
        "urllib3.util.url",
        "urllib3.util.connection",
        "urllib3.util.proxy",
        "urllib3.util.retry",
        "urllib3.response",
        "urllib3.util.util",
        "urllib3.exceptions",
        "urllib3.connection",
        "typing_extensions",
        "urllib3.connectionpool.ConnectionPool",
        "urllib3.connectionpool.HTTPConnectionPool",
        "urllib3.connectionpool.HTTPSConnectionPool",
        "urllib3._base_connection"
    ],
    "urllib3._request_methods": [
        "urllib3._request_methods.RequestMethods",
        "urllib3._base_connection",
        "urllib3.filepost",
        "urllib3.response"
    ],
    "urllib3.filepost": [
        "urllib3.fields"
    ],
    "urllib3.fields": [
        "urllib3.fields.RequestField"
    ],
    "urllib3.fields.RequestField": [
        "<builtin>.classmethod"
    ],
    "urllib3._request_methods.RequestMethods": [],
    "urllib3.util.proxy": [
        "urllib3.connection",
        "urllib3.util.url"
    ],
    "urllib3.util.ssl_match_hostname": [
        "urllib3.util.ssl_match_hostname.CertificateError",
        "urllib3.util.ssl_"
    ],
    "urllib3.util.ssl_": [
        "urllib3.util.ssl_._TYPE_PEER_CERT_RET_DICT",
        "urllib3.util.ssltransport",
        "urllib3.util.url",
        "urllib3.util.ssl_._is_has_never_check_common_name_reliable",
        "<builtin>.getattr",
        "urllib3.exceptions"
    ],
    "urllib3.util.ssltransport": [
        "urllib3.exceptions",
        "typing_extensions",
        "urllib3.util.ssl_",
        "urllib3.util.ssltransport.SSLTransport"
    ],
    "urllib3.util.ssltransport.SSLTransport": [
        "<builtin>.staticmethod"
    ],
    "urllib3.util.ssl_._TYPE_PEER_CERT_RET_DICT": [],
    "urllib3.util.ssl_._is_has_never_check_common_name_reliable": [
        "urllib3.util.ssl_._is_bpo_43522_fixed"
    ],
    "urllib3.util.ssl_._is_bpo_43522_fixed": [],
    "urllib3.util.ssl_match_hostname.CertificateError": [],
    "urllib3.connectionpool.ConnectionPool": [],
    "urllib3.connectionpool.HTTPConnectionPool": [],
    "urllib3.connectionpool.HTTPSConnectionPool": [],
    "urllib3.util.retry.RequestHistory": [],
    "urllib3.util.retry.Retry": [
        "<builtin>.classmethod",
        "<builtin>.frozenset"
    ],
    "urllib3.util.retry.Retry.__init__": [
        "<builtin>.set",
        "<builtin>.frozenset"
    ],
    "urllib3.util.wait": [],
    "urllib3.response.ContentDecoder": [],
    "urllib3.response.DeflateDecoder": [],
    "urllib3.response.GzipDecoderState": [],
    "urllib3.response.GzipDecoder": [],
    "urllib3.response.BrotliDecoder": [],
    "urllib3.response.ZstdDecoder": [],
    "urllib3.response.MultiDecoder": [],
    "urllib3.response.BytesQueueBuffer": [],
    "urllib3.response.BaseHTTPResponse": [
        "<builtin>.property"
    ],
    "urllib3.response.HTTPResponse": [
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "urllib3.http2.probe": [
        "urllib3.http2.probe._HTTP2ProbeCache.__init__",
        "urllib3.http2.probe._HTTP2ProbeCache"
    ],
    "urllib3.http2.probe._HTTP2ProbeCache": [],
    "urllib3.http2.probe._HTTP2ProbeCache.__init__": [],
    "urllib3.connection.BaseSSLError": [],
    "urllib3._version": [],
    "urllib3.connection.HTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.connection.HTTPSConnection": [],
    "urllib3.connection._WrappedAndVerifiedSocket": [],
    "urllib3.connection.DummyConnection": [],
    "urllib3.exceptions.HTTPError": [],
    "urllib3.exceptions.HTTPWarning": [],
    "urllib3.exceptions.PoolError": [],
    "urllib3.exceptions.RequestError": [],
    "urllib3.exceptions.SSLError": [],
    "urllib3.exceptions.ProxyError": [],
    "urllib3.exceptions.DecodeError": [],
    "urllib3.exceptions.ProtocolError": [],
    "urllib3.exceptions.MaxRetryError": [],
    "urllib3.exceptions.HostChangedError": [],
    "urllib3.exceptions.TimeoutStateError": [],
    "urllib3.exceptions.TimeoutError": [],
    "urllib3.exceptions.ReadTimeoutError": [],
    "urllib3.exceptions.ConnectTimeoutError": [],
    "urllib3.exceptions.NewConnectionError": [
        "<builtin>.property"
    ],
    "urllib3.exceptions.NameResolutionError": [],
    "urllib3.exceptions.EmptyPoolError": [],
    "urllib3.exceptions.FullPoolError": [],
    "urllib3.exceptions.ClosedPoolError": [],
    "urllib3.exceptions.LocationValueError": [],
    "urllib3.exceptions.LocationParseError": [],
    "urllib3.exceptions.URLSchemeUnknown": [],
    "urllib3.exceptions.ResponseError": [],
    "urllib3.exceptions.SecurityWarning": [],
    "urllib3.exceptions.InsecureRequestWarning": [],
    "urllib3.exceptions.NotOpenSSLWarning": [],
    "urllib3.exceptions.SystemTimeWarning": [],
    "urllib3.exceptions.InsecurePlatformWarning": [],
    "urllib3.exceptions.DependencyWarning": [],
    "urllib3.exceptions.ResponseNotChunked": [],
    "urllib3.exceptions.BodyNotHttplibCompatible": [],
    "urllib3.exceptions.IncompleteRead": [],
    "urllib3.exceptions.InvalidChunkLength": [],
    "urllib3.exceptions.InvalidHeader": [],
    "urllib3.exceptions.ProxySchemeUnknown": [],
    "urllib3.exceptions.ProxySchemeUnsupported": [],
    "urllib3.exceptions.HeaderParsingError": [],
    "urllib3.exceptions.UnrewindableBodyError": [],
    "urllib3.poolmanager": [
        "urllib3._request_methods",
        "urllib3.util.timeout",
        "urllib3.util.url",
        "urllib3.connectionpool",
        "urllib3.util.connection",
        "urllib3.util.proxy",
        "urllib3.util.retry",
        "urllib3.response",
        "urllib3.exceptions",
        "urllib3.connection",
        "typing_extensions",
        "urllib3.poolmanager.ProxyManager",
        "urllib3.poolmanager.PoolManager",
        "urllib3.poolmanager.PoolKey"
    ],
    "urllib3.poolmanager.PoolKey": [],
    "urllib3.poolmanager.PoolManager": [],
    "urllib3.poolmanager.ProxyManager": [],
    "logging.NullHandler": [],
    "urllib3.poolmanager.PoolManager.__init__": [
        "_collections.RecentlyUsedContainer",
        "<builtin>.super",
        "<map>.copy"
    ],
    "_collections.RecentlyUsedContainer": [],
    "urllib3.contrib.emscripten": [
        "urllib3.connection",
        "urllib3.connectionpool",
        "urllib3.contrib.emscripten.connection"
    ],
    "urllib3.contrib.emscripten.connection": [
        "urllib3.util.timeout",
        "urllib3.util.url",
        "urllib3.util.connection",
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection",
        "urllib3.response",
        "urllib3.exceptions",
        "urllib3.connection",
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection.__init__",
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection.__init__",
        "urllib3.contrib.emscripten.request",
        "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection",
        "urllib3._base_connection",
        "urllib3.contrib.emscripten.fetch",
        "urllib3.contrib.emscripten.response"
    ],
    "urllib3.contrib.emscripten.fetch": [
        "urllib3.contrib.emscripten.fetch._StreamingFetcher.__init__",
        "urllib3.contrib.emscripten.fetch.is_in_browser_main_thread",
        "urllib3.contrib.emscripten.fetch._StreamingFetcher",
        "urllib3.contrib.emscripten.fetch._ReadStream",
        "typing_extensions",
        "urllib3.contrib.emscripten.fetch.is_worker_available",
        "importlib.resources.files",
        "urllib3.contrib.emscripten.fetch._RequestError",
        "urllib3.contrib.emscripten.fetch._StreamingError",
        "urllib3.contrib.emscripten.request",
        "urllib3.contrib.emscripten.fetch._TimeoutError",
        "urllib3.contrib.emscripten.fetch.is_cross_origin_isolated",
        "urllib3.contrib.emscripten.fetch.is_in_node",
        "urllib3.contrib.emscripten.response"
    ],
    "urllib3.contrib.emscripten.request": [
        "urllib3.contrib.emscripten.request.EmscriptenRequest",
        "urllib3._base_connection"
    ],
    "urllib3.contrib.emscripten.request.EmscriptenRequest": [
        "dataclasses.field"
    ],
    "urllib3.contrib.emscripten.response": [
        "urllib3.util.retry",
        "urllib3.response",
        "urllib3.contrib.emscripten.response.EmscriptenHttpResponseWrapper",
        "urllib3.exceptions",
        "urllib3.contrib.emscripten.response.EmscriptenResponse",
        "urllib3.contrib.emscripten.request",
        "urllib3._base_connection"
    ],
    "urllib3.contrib.emscripten.response.EmscriptenResponse": [],
    "urllib3.contrib.emscripten.response.EmscriptenHttpResponseWrapper": [
        "<builtin>.property",
        "contextlib.contextmanager"
    ],
    "importlib.resources.files": [],
    "urllib3.contrib.emscripten.fetch._RequestError": [],
    "urllib3.contrib.emscripten.fetch._StreamingError": [],
    "urllib3.contrib.emscripten.fetch._TimeoutError": [],
    "urllib3.contrib.emscripten.fetch._ReadStream": [
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.fetch._StreamingFetcher": [],
    "urllib3.contrib.emscripten.fetch.is_worker_available": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_cross_origin_isolated": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_in_browser_main_thread": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch.is_in_node": [
        "<builtin>.hasattr"
    ],
    "urllib3.contrib.emscripten.fetch._StreamingFetcher.__init__": [
        "urllib3.contrib.emscripten.fetch._obj_from_dict"
    ],
    "urllib3.contrib.emscripten.fetch._obj_from_dict": [
        "pyodide.ffi.to_js"
    ],
    "pyodide.ffi.to_js": [],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection": [
        "<builtin>.property"
    ],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection": [],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPConnection.__init__": [
        "<builtin>.isinstance"
    ],
    "urllib3.contrib.emscripten.connection.EmscriptenHTTPSConnection.__init__": [
        "<builtin>.super"
    ],
    "urllib3.contrib.emscripten.inject_into_urllib3": [],
    "requests.exceptions": [
        "requests.exceptions.ContentDecodingError",
        "requests.exceptions.InvalidProxyURL",
        "requests.exceptions.ConnectTimeout",
        "requests.exceptions.SSLError",
        "requests.exceptions.RequestsDependencyWarning",
        "requests.exceptions.RequestException",
        "requests.exceptions.URLRequired",
        "requests.exceptions.ChunkedEncodingError",
        "requests.exceptions.InvalidJSONError",
        "requests.exceptions.JSONDecodeError",
        "requests.exceptions.ReadTimeout",
        "urllib3.exceptions",
        "requests.exceptions.RequestsWarning",
        "requests.exceptions.UnrewindableBodyError",
        "requests.exceptions.RetryError",
        "requests.exceptions.ProxyError",
        "requests.exceptions.Timeout",
        "requests.exceptions.InvalidURL",
        "requests.exceptions.TooManyRedirects",
        "requests.exceptions.MissingSchema",
        "requests.compat",
        "requests.exceptions.InvalidHeader",
        "requests.exceptions.ConnectionError",
        "requests.exceptions.FileModeWarning",
        "requests.exceptions.InvalidSchema",
        "requests.exceptions.StreamConsumedError",
        "requests.exceptions.HTTPError"
    ],
    "requests.compat": [
        "requests.compat._resolve_char_detection"
    ],
    "requests.compat._resolve_char_detection": [],
    "requests.exceptions.RequestException": [],
    "requests.exceptions.InvalidJSONError": [],
    "requests.exceptions.JSONDecodeError": [],
    "requests.exceptions.HTTPError": [],
    "requests.exceptions.ConnectionError": [],
    "requests.exceptions.ProxyError": [],
    "requests.exceptions.SSLError": [],
    "requests.exceptions.Timeout": [],
    "requests.exceptions.ConnectTimeout": [],
    "requests.exceptions.ReadTimeout": [],
    "requests.exceptions.URLRequired": [],
    "requests.exceptions.TooManyRedirects": [],
    "requests.exceptions.MissingSchema": [],
    "requests.exceptions.InvalidSchema": [],
    "requests.exceptions.InvalidURL": [],
    "requests.exceptions.InvalidHeader": [],
    "requests.exceptions.InvalidProxyURL": [],
    "requests.exceptions.ChunkedEncodingError": [],
    "requests.exceptions.ContentDecodingError": [],
    "requests.exceptions.StreamConsumedError": [],
    "requests.exceptions.RetryError": [],
    "requests.exceptions.UnrewindableBodyError": [],
    "requests.exceptions.RequestsWarning": [],
    "requests.exceptions.FileModeWarning": [],
    "requests.exceptions.RequestsDependencyWarning": [],
    "charset_normalizer": [
        "charset_normalizer.api",
        "charset_normalizer.version",
        "charset_normalizer.legacy",
        "charset_normalizer.models",
        "charset_normalizer.utils"
    ],
    "charset_normalizer.api": [
        "charset_normalizer.constant",
        "charset_normalizer.cd",
        "charset_normalizer.models",
        "charset_normalizer.md",
        "charset_normalizer.utils"
    ],
    "charset_normalizer.cd": [
        "functools.lru_cache",
        "charset_normalizer.constant",
        "charset_normalizer.models",
        "charset_normalizer.md",
        "charset_normalizer.utils"
    ],
    "charset_normalizer.constant": [
        "<builtin>.sorted",
        "re.compile",
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.len",
        "<builtin>.range",
        "<builtin>.int",
        "<builtin>.filter"
    ],
    "re.compile": [],
    "charset_normalizer.md": [
        "functools.lru_cache",
        "charset_normalizer.md.ArabicIsolatedFormPlugin",
        "charset_normalizer.md.MessDetectorPlugin",
        "charset_normalizer.md.TooManyAccentuatedPlugin",
        "charset_normalizer.md.TooManySymbolOrPunctuationPlugin",
        "charset_normalizer.constant",
        "charset_normalizer.md.CjkInvalidStopPlugin",
        "charset_normalizer.md.SuspiciousDuplicateAccentPlugin",
        "charset_normalizer.md.UnprintablePlugin",
        "charset_normalizer.md.SuperWeirdWordPlugin",
        "charset_normalizer.md.SuspiciousRange",
        "charset_normalizer.md.ArchaicUpperLowerPlugin",
        "charset_normalizer.utils"
    ],
    "charset_normalizer.utils": [
        "functools.lru_cache",
        "<builtin>.len",
        "charset_normalizer.constant"
    ],
    "charset_normalizer.md.MessDetectorPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManySymbolOrPunctuationPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.TooManyAccentuatedPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.UnprintablePlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousDuplicateAccentPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuspiciousRange": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.SuperWeirdWordPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.CjkInvalidStopPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArchaicUpperLowerPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.md.ArabicIsolatedFormPlugin": [
        "<builtin>.property"
    ],
    "charset_normalizer.models": [
        "charset_normalizer.constant",
        "charset_normalizer.models.CharsetMatch",
        "charset_normalizer.models.CliDetectionResult",
        "charset_normalizer.models.CharsetMatches",
        "charset_normalizer.utils"
    ],
    "charset_normalizer.models.CharsetMatch": [
        "<builtin>.property"
    ],
    "charset_normalizer.models.CharsetMatches": [],
    "charset_normalizer.models.CliDetectionResult": [
        "<builtin>.property"
    ],
    "charset_normalizer.legacy": [
        "charset_normalizer.api",
        "typing_extensions",
        "charset_normalizer.legacy.ResultDict",
        "charset_normalizer.constant"
    ],
    "charset_normalizer.legacy.ResultDict": [],
    "charset_normalizer.version": [],
    "requests.check_compatibility": [
        "<builtin>.int",
        "<builtin>.len"
    ],
    "urllib3.contrib.pyopenssl": [
        "<builtin>.hasattr",
        "urllib3.contrib.pyopenssl.UnsupportedExtension",
        "urllib3.contrib.pyopenssl.WrappedSocket",
        "<map>.items",
        "<builtin>.getattr",
        "urllib3.contrib.pyopenssl.PyOpenSSLContext",
        "urllib3"
    ],
    "urllib3.contrib.pyopenssl.UnsupportedExtension": [],
    "urllib3.contrib.pyopenssl.WrappedSocket": [],
    "urllib3.contrib.pyopenssl.PyOpenSSLContext": [
        "<builtin>.property"
    ],
    "urllib3.contrib.pyopenssl.inject_into_urllib3": [
        "urllib3.contrib.pyopenssl._validate_dependencies_met"
    ],
    "urllib3.contrib.pyopenssl._validate_dependencies_met": [
        "OpenSSL.crypto.X509",
        "<builtin>.ImportError",
        "<builtin>.getattr"
    ],
    "OpenSSL.crypto.X509": [],
    "requests._check_cryptography": [
        "<builtin>.map",
        "<builtin>.list"
    ],
    "requests.packages": [
        "<builtin>.__import__",
        "<builtin>.list",
        "requests.compat",
        "<builtin>.locals"
    ],
    "requests.utils": [
        "requests.certs",
        "requests.__version__",
        "requests.cookies",
        "<builtin>.frozenset",
        "requests._internal_utils",
        "<str>.encode",
        "requests.compat",
        "requests.exceptions",
        "urllib3.util.request.make_headers",
        "certifi.core.where",
        "requests.structures",
        "urllib3.util"
    ],
    "requests.certs": [
        "certifi"
    ],
    "certifi": [
        "certifi.core"
    ],
    "certifi.core": [],
    "requests.__version__": [],
    "requests._internal_utils": [
        "requests.compat"
    ],
    "requests.cookies": [
        "requests.cookies.MockResponse",
        "requests._internal_utils",
        "requests.compat",
        "requests.cookies.CookieConflictError",
        "requests.cookies.RequestsCookieJar",
        "requests.cookies.MockRequest"
    ],
    "requests.cookies.MockRequest": [
        "<builtin>.property"
    ],
    "requests.cookies.MockResponse": [],
    "requests.cookies.CookieConflictError": [],
    "requests.cookies.RequestsCookieJar": [],
    "requests.structures": [
        "requests.structures.CaseInsensitiveDict",
        "requests.structures.LookupDict",
        "requests.compat"
    ],
    "requests.structures.CaseInsensitiveDict": [],
    "requests.structures.LookupDict": [],
    "certifi.core.where": [],
    "urllib3.util.request.make_headers": [
        "base64.b64encode",
        "<builtin>.isinstance"
    ],
    "base64.b64encode": [],
    "<str>.encode": [],
    "requests.api": [
        "requests.sessions"
    ],
    "requests.sessions": [
        "requests.adapters",
        "requests.models",
        "requests.status_codes",
        "requests.cookies",
        "requests._internal_utils",
        "requests.compat",
        "requests.exceptions",
        "requests.hooks",
        "requests.sessions.SessionRedirectMixin",
        "requests.utils",
        "requests.structures",
        "requests.sessions.Session",
        "requests.auth"
    ],
    "requests.adapters": [
        "urllib3.contrib.socks",
        "requests.models",
        "requests.adapters.HTTPAdapter",
        "requests.cookies",
        "requests.adapters.BaseAdapter",
        "urllib3.poolmanager",
        "urllib3.util.retry",
        "urllib3.util.ssl_",
        "requests.compat",
        "requests.exceptions",
        "urllib3.util.ssl_.create_urllib3_context",
        "urllib3.exceptions",
        "requests.utils",
        "requests.structures",
        "requests.utils.extract_zipped_paths",
        "requests.auth",
        "urllib3.util"
    ],
    "requests.auth": [
        "requests.cookies",
        "requests.auth.AuthBase",
        "requests._internal_utils",
        "requests.compat",
        "requests.auth.HTTPProxyAuth",
        "requests.utils",
        "requests.auth.HTTPBasicAuth",
        "requests.auth.HTTPDigestAuth"
    ],
    "requests.auth.AuthBase": [],
    "requests.auth.HTTPBasicAuth": [],
    "requests.auth.HTTPProxyAuth": [],
    "requests.auth.HTTPDigestAuth": [],
    "requests.models": [
        "requests.status_codes",
        "requests.cookies",
        "urllib3.filepost",
        "requests._internal_utils",
        "requests.compat",
        "requests.models.RequestEncodingMixin",
        "requests.exceptions",
        "requests.hooks",
        "urllib3.exceptions",
        "requests.utils",
        "requests.structures",
        "requests.models.RequestHooksMixin",
        "requests.models.Response",
        "urllib3.fields",
        "requests.auth",
        "requests.models.PreparedRequest",
        "urllib3.util",
        "requests.models.Request"
    ],
    "requests.hooks": [],
    "requests.status_codes": [
        "requests.structures",
        "requests.structures.LookupDict.__init__",
        "requests.status_codes._init"
    ],
    "requests.structures.LookupDict.__init__": [
        "<builtin>.super"
    ],
    "requests.status_codes._init": [
        "<map>.items",
        "<builtin>.sorted",
        "<builtin>.setattr",
        "requests.status_codes._init.doc"
    ],
    "requests.status_codes._init.doc": [],
    "requests.models.RequestEncodingMixin": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "requests.models.RequestHooksMixin": [],
    "requests.models.Request": [],
    "requests.models.PreparedRequest": [
        "<builtin>.staticmethod"
    ],
    "requests.models.Response": [
        "<builtin>.property"
    ],
    "urllib3.contrib.socks": [
        "urllib3.util.url",
        "urllib3.contrib.socks.SOCKSHTTPSConnection",
        "urllib3.connectionpool",
        "urllib3.poolmanager",
        "urllib3.contrib.socks.SOCKSHTTPSConnectionPool",
        "urllib3.exceptions",
        "urllib3.connection",
        "urllib3.contrib.socks.SOCKSHTTPConnectionPool",
        "urllib3.contrib.socks._TYPE_SOCKS_OPTIONS",
        "urllib3.contrib.socks.SOCKSConnection",
        "urllib3.contrib.socks.SOCKSProxyManager"
    ],
    "urllib3.contrib.socks._TYPE_SOCKS_OPTIONS": [],
    "urllib3.contrib.socks.SOCKSConnection": [],
    "urllib3.contrib.socks.SOCKSHTTPSConnection": [],
    "urllib3.contrib.socks.SOCKSHTTPConnectionPool": [],
    "urllib3.contrib.socks.SOCKSHTTPSConnectionPool": [],
    "urllib3.contrib.socks.SOCKSProxyManager": [],
    "urllib3.util.ssl_.create_urllib3_context": [
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "<builtin>.getattr",
        "ssl.SSLContext",
        "<builtin>.TypeError"
    ],
    "ssl.SSLContext": [],
    "requests.utils.extract_zipped_paths": [
        "requests.utils.atomic_open"
    ],
    "requests.utils.atomic_open": [],
    "requests.adapters.BaseAdapter": [],
    "requests.adapters.HTTPAdapter": [],
    "requests.sessions.SessionRedirectMixin": [],
    "requests.sessions.Session": [],
    "torchvision.datasets.vision": [
        "torchvision.datasets.vision.VisionDataset",
        "torch.utils.data",
        "torchvision.datasets.vision.StandardTransform",
        "torchvision.utils"
    ],
    "torchvision.datasets.vision.VisionDataset": [],
    "torchvision.datasets.vision.StandardTransform": [],
    "torchvision.datasets._optical_flow.FlowDataset": [
        "abc.abstractmethod"
    ],
    "torchvision.datasets._optical_flow.Sintel": [],
    "torchvision.datasets._optical_flow.KittiFlow": [],
    "torchvision.datasets._optical_flow.FlyingChairs": [],
    "torchvision.datasets._optical_flow.FlyingThings3D": [],
    "torchvision.datasets._optical_flow.HD1K": [],
    "torchvision.datasets._stereo_matching": [
        "torchvision.datasets._stereo_matching.Middlebury2014Stereo",
        "torchvision.datasets._stereo_matching.CarlaStereo",
        "torchvision.datasets._stereo_matching.ETH3DStereo",
        "PIL.Image",
        "torchvision.datasets._stereo_matching.StereoMatchingDataset",
        "torchvision.datasets._stereo_matching.CREStereo",
        "torchvision.datasets._stereo_matching.InStereo2k",
        "torchvision.datasets._stereo_matching.FallingThingsStereo",
        "torchvision.datasets.utils",
        "torchvision.datasets._stereo_matching.Kitti2015Stereo",
        "torchvision.datasets._stereo_matching.SceneFlowStereo",
        "torchvision.datasets._stereo_matching.SintelStereo",
        "torchvision.datasets.vision",
        "torchvision.datasets._stereo_matching.Kitti2012Stereo",
        "numpy"
    ],
    "torchvision.datasets._stereo_matching.StereoMatchingDataset": [
        "abc.abstractmethod"
    ],
    "torchvision.datasets._stereo_matching.CarlaStereo": [],
    "torchvision.datasets._stereo_matching.Kitti2012Stereo": [],
    "torchvision.datasets._stereo_matching.Kitti2015Stereo": [],
    "torchvision.datasets._stereo_matching.Middlebury2014Stereo": [],
    "torchvision.datasets._stereo_matching.CREStereo": [],
    "torchvision.datasets._stereo_matching.FallingThingsStereo": [],
    "torchvision.datasets._stereo_matching.SceneFlowStereo": [],
    "torchvision.datasets._stereo_matching.SintelStereo": [],
    "torchvision.datasets._stereo_matching.InStereo2k": [],
    "torchvision.datasets._stereo_matching.ETH3DStereo": [],
    "torchvision.datasets.caltech": [
        "torchvision.datasets.caltech.Caltech101",
        "PIL.Image",
        "torchvision.datasets.caltech.Caltech256",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.caltech.Caltech101": [],
    "torchvision.datasets.caltech.Caltech256": [],
    "torchvision.datasets.celeba": [
        "collections.namedtuple",
        "PIL",
        "torchvision.datasets.utils",
        "torchvision.datasets.celeba.CelebA",
        "torch",
        "torchvision.datasets.vision"
    ],
    "PIL": [
        "PIL._version",
        "PIL.UnidentifiedImageError"
    ],
    "PIL._version": [],
    "PIL.UnidentifiedImageError": [],
    "torchvision.datasets.celeba.CelebA": [],
    "torchvision.datasets.cifar": [
        "PIL.Image",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision",
        "torchvision.datasets.cifar.CIFAR10",
        "torchvision.datasets.cifar.CIFAR100",
        "numpy"
    ],
    "torchvision.datasets.cifar.CIFAR10": [],
    "torchvision.datasets.cifar.CIFAR100": [],
    "torchvision.datasets.cityscapes": [
        "torchvision.datasets.utils",
        "PIL.Image",
        "torchvision.datasets.cityscapes.Cityscapes",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.cityscapes.Cityscapes": [
        "collections.namedtuple"
    ],
    "torchvision.datasets.clevr": [
        "torchvision.datasets.utils",
        "torchvision.datasets.clevr.CLEVRClassification",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.clevr.CLEVRClassification": [],
    "torchvision.datasets.coco": [
        "torchvision.datasets.coco.CocoCaptions",
        "PIL.Image",
        "torchvision.datasets.coco.CocoDetection",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.coco.CocoDetection": [],
    "torchvision.datasets.coco.CocoCaptions": [],
    "torchvision.datasets.country211": [
        "torchvision.datasets.utils",
        "torchvision.datasets.country211.Country211",
        "torchvision.datasets.folder"
    ],
    "torchvision.datasets.folder": [
        "torchvision.datasets.folder.ImageFolder",
        "torchvision.datasets.folder.DatasetFolder",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.folder.DatasetFolder": [
        "<builtin>.staticmethod"
    ],
    "torchvision.datasets.folder.ImageFolder": [],
    "torchvision.datasets.country211.Country211": [],
    "torchvision.datasets.dtd": [
        "torchvision.datasets.utils",
        "PIL.Image",
        "torchvision.datasets.dtd.DTD",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.dtd.DTD": [],
    "torchvision.datasets.eurosat": [
        "torchvision.datasets.utils",
        "torchvision.datasets.eurosat.EuroSAT",
        "torchvision.datasets.folder"
    ],
    "torchvision.datasets.eurosat.EuroSAT": [],
    "torchvision.datasets.fakedata": [
        "torchvision",
        "torch",
        "torchvision.datasets.vision",
        "torchvision.datasets.fakedata.FakeData"
    ],
    "torchvision.datasets.fakedata.FakeData": [],
    "torchvision.datasets.fer2013": [
        "PIL.Image",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision",
        "torch",
        "torchvision.datasets.fer2013.FER2013"
    ],
    "torchvision.datasets.fer2013.FER2013": [],
    "torchvision.datasets.fgvc_aircraft": [
        "torchvision.datasets.utils",
        "torchvision.datasets.fgvc_aircraft.FGVCAircraft",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.fgvc_aircraft.FGVCAircraft": [],
    "torchvision.datasets.flickr": [
        "PIL.Image",
        "torchvision.datasets.flickr.Flickr30k",
        "torchvision.datasets.flickr.Flickr8kParser",
        "torchvision.datasets.vision",
        "torchvision.datasets.flickr.Flickr8k"
    ],
    "torchvision.datasets.flickr.Flickr8kParser": [],
    "torchvision.datasets.flickr.Flickr8k": [],
    "torchvision.datasets.flickr.Flickr30k": [],
    "torchvision.datasets.flowers102": [
        "torchvision.datasets.utils",
        "torchvision.datasets.flowers102.Flowers102",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.flowers102.Flowers102": [],
    "torchvision.datasets.food101": [
        "torchvision.datasets.utils",
        "torchvision.datasets.food101.Food101",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.food101.Food101": [],
    "torchvision.datasets.gtsrb": [
        "torchvision.datasets.gtsrb.GTSRB",
        "torchvision.datasets.folder",
        "PIL",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.gtsrb.GTSRB": [],
    "torchvision.datasets.hmdb51": [
        "torchvision.datasets.folder",
        "torchvision.datasets.hmdb51.HMDB51",
        "torchvision.datasets.video_utils",
        "torch",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.video_utils": [
        "torchvision.io",
        "torchvision.datasets.video_utils._VideoTimestampsDataset",
        "torchvision.datasets.utils",
        "torchvision.datasets.video_utils.VideoClips",
        "torch",
        "typing.TypeVar"
    ],
    "torchvision.io": [
        "torchvision.io.video_reader",
        "torchvision.io.video",
        "torchvision.io.image",
        "torchvision.io._video_opt",
        "torchvision.io._load_gpu_decoder",
        "torchvision.utils",
        "torch"
    ],
    "torchvision.io._load_gpu_decoder": [
        "torchvision.extension._load_library",
        "torchvision.extension"
    ],
    "torchvision.io._video_opt": [
        "torchvision.io._video_opt.Timebase",
        "torchvision.io._video_opt.VideoMetaData",
        "fractions.Fraction",
        "torchvision.extension._load_library",
        "torchvision.extension",
        "torch"
    ],
    "fractions.Fraction": [],
    "torchvision.io._video_opt.Timebase": [],
    "torchvision.io._video_opt.VideoMetaData": [],
    "torchvision.io.video": [
        "<builtin>.hasattr",
        "<builtin>.ImportError",
        "torchvision.io._video_opt",
        "torchvision.utils",
        "torch",
        "numpy"
    ],
    "torchvision.io.video_reader": [
        "<builtin>.hasattr",
        "torchvision.io.video_reader.VideoReader",
        "<builtin>.ImportError",
        "torchvision.io._video_opt",
        "torchvision.utils",
        "torch"
    ],
    "torchvision.io.video_reader.VideoReader": [],
    "torchvision.datasets.video_utils._VideoTimestampsDataset": [],
    "torchvision.datasets.video_utils.VideoClips": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "torchvision.datasets.hmdb51.HMDB51": [
        "<builtin>.property"
    ],
    "torchvision.datasets.imagenet": [
        "torchvision.datasets.utils",
        "torch",
        "torchvision.datasets.folder",
        "torchvision.datasets.imagenet.ImageNet"
    ],
    "torchvision.datasets.imagenet.ImageNet": [
        "<builtin>.property"
    ],
    "torchvision.datasets.inaturalist": [
        "torchvision.datasets.utils",
        "torchvision.datasets.inaturalist.INaturalist",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.inaturalist.INaturalist": [],
    "torchvision.datasets.kinetics": [
        "torchvision.datasets.folder",
        "torchvision.datasets.utils",
        "torchvision.datasets.kinetics.Kinetics",
        "torchvision.datasets.video_utils",
        "torch",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.kinetics.Kinetics": [
        "<builtin>.property"
    ],
    "torchvision.datasets.kitti": [
        "torchvision.datasets.utils",
        "PIL.Image",
        "torchvision.datasets.kitti.Kitti",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.kitti.Kitti": [
        "<builtin>.property"
    ],
    "torchvision.datasets.lfw": [
        "PIL.Image",
        "torchvision.datasets.lfw._LFW",
        "torchvision.datasets.utils",
        "torchvision.datasets.lfw.LFWPairs",
        "torchvision.datasets.lfw.LFWPeople",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.lfw._LFW": [],
    "torchvision.datasets.lfw.LFWPeople": [],
    "torchvision.datasets.lfw.LFWPairs": [],
    "torchvision.datasets.lsun": [
        "PIL.Image",
        "torchvision.datasets.lsun.LSUN",
        "torchvision.datasets.lsun.LSUNClass",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.lsun.LSUNClass": [],
    "torchvision.datasets.lsun.LSUN": [],
    "torchvision.datasets.mnist": [
        "torchvision.datasets.mnist.MNIST",
        "PIL.Image",
        "torchvision.datasets.mnist.EMNIST",
        "torchvision.datasets.mnist.QMNIST",
        "torchvision.datasets.mnist.FashionMNIST",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision",
        "torch",
        "numpy",
        "torchvision.datasets.mnist.KMNIST"
    ],
    "torchvision.datasets.mnist.MNIST": [
        "<builtin>.property"
    ],
    "torchvision.datasets.mnist.FashionMNIST": [],
    "torchvision.datasets.mnist.KMNIST": [],
    "torchvision.datasets.mnist.EMNIST": [
        "<builtin>.sorted",
        "<builtin>.property",
        "<builtin>.list",
        "<builtin>.set",
        "<builtin>.staticmethod"
    ],
    "torchvision.datasets.mnist.QMNIST": [
        "<builtin>.property"
    ],
    "torchvision.datasets.moving_mnist": [
        "torchvision.datasets.utils",
        "torchvision.datasets.vision",
        "torch",
        "numpy",
        "torchvision.datasets.moving_mnist.MovingMNIST"
    ],
    "torchvision.datasets.moving_mnist.MovingMNIST": [],
    "torchvision.datasets.omniglot": [
        "torchvision.datasets.utils",
        "torchvision.datasets.omniglot.Omniglot",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.omniglot.Omniglot": [],
    "torchvision.datasets.oxford_iiit_pet": [
        "torchvision.datasets.utils",
        "torchvision.datasets.oxford_iiit_pet.OxfordIIITPet",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.oxford_iiit_pet.OxfordIIITPet": [],
    "torchvision.datasets.pcam": [
        "torchvision.datasets.utils",
        "torchvision.datasets.pcam.PCAM",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.pcam.PCAM": [],
    "torchvision.datasets.phototour": [
        "PIL.Image",
        "torchvision.datasets.utils",
        "torchvision.datasets.phototour.PhotoTour",
        "torchvision.datasets.vision",
        "torch",
        "numpy"
    ],
    "torchvision.datasets.phototour.PhotoTour": [],
    "torchvision.datasets.places365": [
        "torchvision.datasets.utils",
        "torchvision.datasets.vision",
        "torchvision.datasets.folder",
        "torchvision.datasets.places365.Places365"
    ],
    "torchvision.datasets.places365.Places365": [
        "<builtin>.property"
    ],
    "torchvision.datasets.rendered_sst2": [
        "PIL.Image",
        "torchvision.datasets.folder",
        "torchvision.datasets.utils",
        "torchvision.datasets.rendered_sst2.RenderedSST2",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.rendered_sst2.RenderedSST2": [],
    "torchvision.datasets.sbd": [
        "PIL.Image",
        "torchvision.datasets.sbd.SBDataset",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision",
        "numpy"
    ],
    "torchvision.datasets.sbd.SBDataset": [],
    "torchvision.datasets.sbu": [
        "torchvision.datasets.utils",
        "torchvision.datasets.sbu.SBU",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.sbu.SBU": [],
    "torchvision.datasets.semeion": [
        "PIL.Image",
        "torchvision.datasets.vision",
        "torchvision.datasets.utils",
        "torchvision.datasets.semeion.SEMEION",
        "numpy"
    ],
    "torchvision.datasets.semeion.SEMEION": [],
    "torchvision.datasets.stanford_cars": [
        "torchvision.datasets.utils",
        "torchvision.datasets.stanford_cars.StanfordCars",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.stanford_cars.StanfordCars": [],
    "torchvision.datasets.stl10": [
        "torchvision.datasets.stl10.STL10",
        "PIL.Image",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision",
        "numpy"
    ],
    "torchvision.datasets.stl10.STL10": [],
    "torchvision.datasets.sun397": [
        "torchvision.datasets.utils",
        "torchvision.datasets.sun397.SUN397",
        "PIL.Image",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.sun397.SUN397": [],
    "torchvision.datasets.svhn": [
        "PIL.Image",
        "torchvision.datasets.svhn.SVHN",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision",
        "numpy"
    ],
    "torchvision.datasets.svhn.SVHN": [],
    "torchvision.datasets.ucf101": [
        "torchvision.datasets.ucf101.UCF101",
        "torchvision.datasets.folder",
        "torchvision.datasets.video_utils",
        "torch",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.ucf101.UCF101": [
        "<builtin>.property"
    ],
    "torchvision.datasets.usps": [
        "PIL.Image",
        "torchvision.datasets.utils",
        "torchvision.datasets.vision",
        "numpy",
        "torchvision.datasets.usps.USPS"
    ],
    "torchvision.datasets.usps.USPS": [],
    "torchvision.datasets.voc": [
        "PIL.Image",
        "torchvision.datasets.voc.VOCSegmentation",
        "torchvision.datasets.voc.VOCDetection",
        "torchvision.datasets.utils",
        "torchvision.datasets.voc._VOCBase",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.voc._VOCBase": [],
    "torchvision.datasets.voc.VOCSegmentation": [
        "<builtin>.property"
    ],
    "torchvision.datasets.voc.VOCDetection": [
        "<builtin>.property",
        "<builtin>.staticmethod"
    ],
    "torchvision.datasets.widerface": [
        "PIL.Image",
        "torchvision.datasets.widerface.WIDERFace",
        "torchvision.datasets.utils",
        "torch",
        "torchvision.datasets.vision"
    ],
    "torchvision.datasets.widerface.WIDERFace": [],
    "torchvision.transforms": [
        "torchvision.transforms.autoaugment",
        "torchvision.transforms.transforms"
    ],
    "torchvision.transforms.transforms": [
        "torchvision.transforms.transforms.Lambda",
        "torchvision.transforms.transforms.RandomApply",
        "torchvision.transforms.transforms.Compose",
        "torchvision.transforms.transforms.ColorJitter",
        "torchvision.transforms.transforms.RandomTransforms",
        "torchvision.transforms.transforms.RandomResizedCrop",
        "torchvision.transforms.transforms.FiveCrop",
        "torchvision.transforms.transforms.ToTensor",
        "torchvision.transforms.transforms.ElasticTransform",
        "torchvision.transforms.transforms.RandomAutocontrast",
        "torchvision.transforms.transforms.RandomInvert",
        "torchvision.transforms.transforms.RandomAffine",
        "torchvision.transforms.transforms.Grayscale",
        "torchvision.transforms.transforms.RandomChoice",
        "torchvision.transforms.transforms.RandomPerspective",
        "torchvision.transforms.transforms.RandomSolarize",
        "torchvision.transforms.transforms.RandomOrder",
        "torchvision.transforms.transforms.Resize",
        "torchvision.transforms.transforms.RandomEqualize",
        "torchvision.transforms.transforms.RandomHorizontalFlip",
        "torchvision.transforms.transforms.RandomErasing",
        "torchvision.transforms.transforms.ConvertImageDtype",
        "torchvision.transforms.transforms.GaussianBlur",
        "torchvision.transforms.transforms.Pad",
        "torchvision.transforms.transforms.Normalize",
        "torchvision.transforms.transforms.ToPILImage",
        "torchvision.transforms.functional",
        "torchvision.transforms.transforms.LinearTransformation",
        "torchvision.utils",
        "torchvision.transforms.transforms.RandomVerticalFlip",
        "torchvision.transforms.transforms.TenCrop",
        "torchvision.transforms.transforms.PILToTensor",
        "torchvision.transforms.transforms.CenterCrop",
        "torchvision.transforms.transforms.RandomAdjustSharpness",
        "torchvision.transforms.transforms.RandomRotation",
        "torchvision.transforms.transforms.RandomCrop",
        "torchvision.transforms.transforms.RandomPosterize",
        "torch",
        "torchvision.transforms.transforms.RandomGrayscale"
    ],
    "torchvision.transforms.transforms.Compose": [],
    "torchvision.transforms.transforms.ToTensor": [],
    "torchvision.transforms.transforms.PILToTensor": [],
    "torchvision.transforms.transforms.ConvertImageDtype": [],
    "torchvision.transforms.transforms.ToPILImage": [],
    "torchvision.transforms.transforms.Normalize": [],
    "torchvision.transforms.transforms.Resize": [],
    "torchvision.transforms.transforms.CenterCrop": [],
    "torchvision.transforms.transforms.Pad": [],
    "torchvision.transforms.transforms.Lambda": [],
    "torchvision.transforms.transforms.RandomTransforms": [],
    "torchvision.transforms.transforms.RandomApply": [],
    "torchvision.transforms.transforms.RandomOrder": [],
    "torchvision.transforms.transforms.RandomChoice": [],
    "torchvision.transforms.transforms.RandomCrop": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.RandomHorizontalFlip": [],
    "torchvision.transforms.transforms.RandomVerticalFlip": [],
    "torchvision.transforms.transforms.RandomPerspective": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.RandomResizedCrop": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.FiveCrop": [],
    "torchvision.transforms.transforms.TenCrop": [],
    "torchvision.transforms.transforms.LinearTransformation": [],
    "torchvision.transforms.transforms.ColorJitter": [
        "<builtin>.staticmethod",
        "<builtin>.float",
        "torch._jit_internal.unused"
    ],
    "torchvision.transforms.transforms.RandomRotation": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.RandomAffine": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.Grayscale": [],
    "torchvision.transforms.transforms.RandomGrayscale": [],
    "torchvision.transforms.transforms.RandomErasing": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.GaussianBlur": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.transforms.RandomInvert": [],
    "torchvision.transforms.transforms.RandomPosterize": [],
    "torchvision.transforms.transforms.RandomSolarize": [],
    "torchvision.transforms.transforms.RandomAdjustSharpness": [],
    "torchvision.transforms.transforms.RandomAutocontrast": [],
    "torchvision.transforms.transforms.RandomEqualize": [],
    "torchvision.transforms.transforms.ElasticTransform": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.autoaugment": [
        "torchvision.transforms.autoaugment.AugMix",
        "torchvision.transforms.autoaugment.AutoAugment",
        "torchvision.transforms.autoaugment.TrivialAugmentWide",
        "torchvision.transforms.functional",
        "torchvision.transforms.autoaugment.AutoAugmentPolicy",
        "torchvision.transforms.autoaugment.RandAugment",
        "torch"
    ],
    "torchvision.transforms.autoaugment.AutoAugmentPolicy": [],
    "torchvision.transforms.autoaugment.AutoAugment": [
        "<builtin>.staticmethod"
    ],
    "torchvision.transforms.autoaugment.RandAugment": [],
    "torchvision.transforms.autoaugment.TrivialAugmentWide": [],
    "torchvision.transforms.autoaugment.AugMix": [
        "torch._jit_internal.unused"
    ],
    "torchvision.version": [
        "torchvision.extension._check_cuda_version",
        "torchvision.extension"
    ],
    "torchvision.ops._box_convert": [
        "torch"
    ],
    "torchvision.ops._utils": [
        "torch.nn",
        "torch"
    ],
    "torchvision.ops.ciou_loss": [
        "torchvision.ops._utils",
        "torch",
        "torchvision.utils",
        "torchvision.ops.diou_loss"
    ],
    "torchvision.ops.diou_loss": [
        "torchvision.ops._utils",
        "torch",
        "torchvision.utils"
    ],
    "torchvision.ops.deform_conv": [
        "torch.nn",
        "torch.nn.modules.utils",
        "torch.nn.init",
        "torchvision.extension",
        "torchvision.utils",
        "torch.nn.parameter",
        "torch",
        "torchvision.ops.deform_conv.DeformConv2d"
    ],
    "torchvision.ops.deform_conv.DeformConv2d": [],
    "torchvision.ops.drop_block": [
        "torch.nn",
        "torch.fx",
        "torch.nn.functional",
        "torchvision.ops.drop_block.DropBlock2d",
        "torchvision.ops.drop_block.DropBlock3d",
        "torchvision.utils",
        "torch",
        "torch.fx._symbolic_trace.wrap"
    ],
    "torchvision.ops.drop_block.DropBlock2d": [],
    "torchvision.ops.drop_block.DropBlock3d": [],
    "torchvision.ops.feature_pyramid_network": [
        "torchvision.ops.feature_pyramid_network.LastLevelMaxPool",
        "torch.nn",
        "torch.nn.functional",
        "torchvision.ops.feature_pyramid_network.FeaturePyramidNetwork",
        "torchvision.ops.misc",
        "torchvision.utils",
        "torchvision.ops.feature_pyramid_network.LastLevelP6P7",
        "torch",
        "torchvision.ops.feature_pyramid_network.ExtraFPNBlock"
    ],
    "torchvision.ops.feature_pyramid_network.ExtraFPNBlock": [],
    "torchvision.ops.feature_pyramid_network.FeaturePyramidNetwork": [],
    "torchvision.ops.feature_pyramid_network.LastLevelMaxPool": [],
    "torchvision.ops.feature_pyramid_network.LastLevelP6P7": [],
    "torchvision.ops.focal_loss": [
        "torch",
        "torch.nn.functional",
        "torchvision.utils"
    ],
    "torchvision.ops.giou_loss": [
        "torchvision.ops._utils",
        "torch",
        "torchvision.utils"
    ],
    "torchvision.ops.poolers": [
        "torch.nn",
        "torchvision.ops.poolers.LevelMapper",
        "torchvision.ops.boxes",
        "torch.fx",
        "torchvision.ops.roi_align",
        "torchvision",
        "torch._jit_internal.unused",
        "torchvision.utils",
        "torchvision.ops.poolers.MultiScaleRoIAlign",
        "torch",
        "torch.fx._symbolic_trace.wrap"
    ],
    "torchvision.ops.roi_align": [
        "torch.nn",
        "torch.jit.annotations",
        "torch.nn.modules.utils",
        "torchvision.ops.roi_align.RoIAlign",
        "torch.fx",
        "torchvision.ops._utils",
        "torchvision.extension",
        "torchvision.utils",
        "torch",
        "torch.fx._symbolic_trace.wrap"
    ],
    "torchvision.ops.roi_align.RoIAlign": [],
    "torchvision.ops.poolers.LevelMapper": [],
    "torchvision.ops.poolers.MultiScaleRoIAlign": [],
    "torchvision.ops.ps_roi_align": [
        "torch.nn",
        "torch.nn.modules.utils",
        "torch.fx",
        "torchvision.ops._utils",
        "torchvision.extension",
        "torchvision.utils",
        "torch",
        "torch.fx._symbolic_trace.wrap",
        "torchvision.ops.ps_roi_align.PSRoIAlign"
    ],
    "torchvision.ops.ps_roi_align.PSRoIAlign": [],
    "torchvision.ops.ps_roi_pool": [
        "torch.nn",
        "torch.nn.modules.utils",
        "torch.fx",
        "torchvision.ops.ps_roi_pool.PSRoIPool",
        "torchvision.ops._utils",
        "torchvision.extension",
        "torchvision.utils",
        "torch",
        "torch.fx._symbolic_trace.wrap"
    ],
    "torchvision.ops.ps_roi_pool.PSRoIPool": [],
    "torchvision.ops.roi_pool": [
        "torch.nn",
        "torch.jit.annotations",
        "torch.nn.modules.utils",
        "torch.fx",
        "torchvision.ops._utils",
        "torchvision.extension",
        "torchvision.utils",
        "torchvision.ops.roi_pool.RoIPool",
        "torch",
        "torch.fx._symbolic_trace.wrap"
    ],
    "torchvision.ops.roi_pool.RoIPool": [],
    "torchvision.ops._register_onnx_ops._register_custom_op": [
        "torch.onnx.utils.register_custom_op_symbolic"
    ],
    "torch.onnx.utils.register_custom_op_symbolic": [
        "torch.onnx._internal.registration.onnx_symbolic.wrapper",
        "torch.onnx.utils._verify_custom_op_name",
        "torch.onnx._internal.registration.custom_onnx_symbolic",
        "<str>.startswith"
    ],
    "torch.onnx.utils._verify_custom_op_name": [
        "<builtin>.ValueError",
        "torch.onnx._internal.jit_utils.parse_node_kind"
    ],
    "torch.onnx._internal.jit_utils.parse_node_kind": [
        "<builtin>.ValueError"
    ],
    "torch.onnx._internal.registration.custom_onnx_symbolic": [
        "torch.onnx._internal.registration.onnx_symbolic"
    ],
    "torch.onnx._internal.registration.onnx_symbolic": [],
    "torch.onnx._internal.registration.onnx_symbolic.wrapper": [
        "torch.onnx._internal.registration.SymbolicRegistry.register",
        "<builtin>.isinstance"
    ],
    "torch.onnx._internal.registration.SymbolicRegistry.register": [
        "<builtin>.ValueError",
        "torch.onnx._internal.registration._SymbolicFunctionGroup.__init__"
    ],
    "torch.onnx._internal.registration._SymbolicFunctionGroup.__init__": [
        "torch.onnx._internal.registration.OverrideDict.__init__"
    ],
    "torch.onnx._internal.registration.OverrideDict.__init__": [],
    "torchvision.models.efficientnet._MBConvConfig": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.efficientnet.MBConvConfig": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.efficientnet.FusedMBConvConfig": [],
    "torchvision.models.efficientnet.MBConv": [],
    "torchvision.models.efficientnet.FusedMBConv": [],
    "torchvision.models.efficientnet.EfficientNet": [],
    "torchvision.models.efficientnet.EfficientNet_B0_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_B1_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_B2_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_B3_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_B4_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_B5_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_B6_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_B7_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_V2_S_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_V2_M_Weights": [
        "functools.partial"
    ],
    "torchvision.models.efficientnet.EfficientNet_V2_L_Weights": [
        "functools.partial"
    ],
    "torchvision.models.googlenet": [
        "torch.nn",
        "torchvision.models.googlenet.InceptionAux",
        "torchvision.models._api",
        "torchvision.models.googlenet.GoogLeNet_Weights",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.models.googlenet.BasicConv2d",
        "torchvision.models.googlenet.GoogLeNet",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "collections.namedtuple",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.utils",
        "torchvision.models._utils",
        "torchvision.models.googlenet.Inception",
        "torchvision.models._api.register_model.wrapper",
        "torch"
    ],
    "torchvision.models.googlenet.GoogLeNet": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.googlenet.Inception": [],
    "torchvision.models.googlenet.InceptionAux": [],
    "torchvision.models.googlenet.BasicConv2d": [],
    "torchvision.models.googlenet.GoogLeNet_Weights": [
        "functools.partial"
    ],
    "torchvision.models.inception": [
        "torch.nn",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "collections.namedtuple",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.inception.InceptionAux",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.inception.Inception_V3_Weights",
        "torchvision.models.inception.Inception3",
        "torchvision.models.inception.InceptionE",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.inception.InceptionB",
        "torchvision.models.inception.InceptionA",
        "torchvision.utils",
        "torchvision.models.inception.BasicConv2d",
        "torchvision.models._api.register_model",
        "torchvision.models.inception.InceptionC",
        "torchvision.models.inception.InceptionD",
        "torchvision.models._utils",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.inception.Inception3": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.inception.InceptionA": [],
    "torchvision.models.inception.InceptionB": [],
    "torchvision.models.inception.InceptionC": [],
    "torchvision.models.inception.InceptionD": [],
    "torchvision.models.inception.InceptionE": [],
    "torchvision.models.inception.InceptionAux": [],
    "torchvision.models.inception.BasicConv2d": [],
    "torchvision.models.inception.Inception_V3_Weights": [
        "functools.partial"
    ],
    "torchvision.models.mnasnet": [
        "torch.nn",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._api",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.mnasnet.MNASNet0_75_Weights",
        "torchvision.models.mnasnet.MNASNet1_3_Weights",
        "torchvision.models.mnasnet.MNASNet0_5_Weights",
        "torchvision.models.mnasnet._InvertedResidual",
        "torchvision.utils",
        "torchvision.models._utils",
        "torchvision.models.mnasnet.MNASNet",
        "torchvision.models._api.register_model.wrapper",
        "torch",
        "torchvision.models.mnasnet.MNASNet1_0_Weights"
    ],
    "torchvision.models.mnasnet._InvertedResidual": [],
    "torchvision.models.mnasnet.MNASNet": [],
    "torchvision.models.mnasnet.MNASNet0_5_Weights": [
        "functools.partial"
    ],
    "torchvision.models.mnasnet.MNASNet0_75_Weights": [
        "functools.partial"
    ],
    "torchvision.models.mnasnet.MNASNet1_0_Weights": [
        "functools.partial"
    ],
    "torchvision.models.mnasnet.MNASNet1_3_Weights": [
        "functools.partial"
    ],
    "torchvision.models.mobilenet": [
        "torchvision.models.mobilenetv3",
        "torchvision.models.mobilenetv2"
    ],
    "torchvision.models.mobilenetv2": [
        "torch.nn",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._api",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.ops.misc",
        "torchvision.utils",
        "torchvision.models._utils",
        "torchvision.models.mobilenetv2.MobileNet_V2_Weights",
        "torch",
        "torchvision.models.mobilenetv2.MobileNetV2",
        "torchvision.models.mobilenetv2.InvertedResidual"
    ],
    "torchvision.models.mobilenetv2.InvertedResidual": [],
    "torchvision.models.mobilenetv2.MobileNetV2": [],
    "torchvision.models.mobilenetv2.MobileNet_V2_Weights": [
        "functools.partial"
    ],
    "torchvision.models.mobilenetv3": [
        "torch.nn",
        "torchvision.models.mobilenetv3.MobileNetV3",
        "torchvision.models._api",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.models.mobilenetv3.MobileNet_V3_Large_Weights",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.mobilenetv3.InvertedResidual",
        "torchvision.ops.misc",
        "torchvision.utils",
        "torchvision.models._utils",
        "torchvision.models.mobilenetv3.MobileNet_V3_Small_Weights",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models.mobilenetv3.InvertedResidualConfig",
        "torch"
    ],
    "torchvision.models.mobilenetv3.InvertedResidualConfig": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.mobilenetv3.InvertedResidual": [
        "functools.partial"
    ],
    "torchvision.models.mobilenetv3.MobileNetV3": [],
    "torchvision.models.mobilenetv3.MobileNet_V3_Large_Weights": [
        "functools.partial"
    ],
    "torchvision.models.mobilenetv3.MobileNet_V3_Small_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet": [
        "torch.nn",
        "torchvision.models.regnet.RegNet_X_16GF_Weights",
        "torchvision.transforms._presets",
        "torchvision.models.regnet.BlockParams",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.regnet.RegNet_Y_128GF_Weights",
        "torchvision.models.regnet.RegNet_Y_32GF_Weights",
        "torchvision.models.regnet.RegNet",
        "torchvision.models.regnet.ResBottleneckBlock",
        "torchvision.models.regnet.AnyStage",
        "torchvision.models.regnet.SimpleStemIN",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.regnet.RegNet_X_800MF_Weights",
        "torchvision.models.regnet.RegNet_Y_3_2GF_Weights",
        "torchvision.ops.misc",
        "torchvision.models.regnet.RegNet_Y_800MF_Weights",
        "torchvision.models.regnet.RegNet_Y_16GF_Weights",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.regnet.RegNet_X_3_2GF_Weights",
        "torchvision.models.regnet.RegNet_X_8GF_Weights",
        "torchvision.utils",
        "torchvision.models.regnet.RegNet_X_400MF_Weights",
        "torchvision.models.regnet.RegNet_X_32GF_Weights",
        "torchvision.models.regnet.RegNet_Y_400MF_Weights",
        "torchvision.models.regnet.RegNet_Y_1_6GF_Weights",
        "torchvision.models._api.register_model",
        "torchvision.models.regnet.RegNet_X_1_6GF_Weights",
        "torchvision.models.regnet.RegNet_Y_8GF_Weights",
        "torchvision.models.regnet.BottleneckTransform",
        "torchvision.models._utils",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.regnet.SimpleStemIN": [],
    "torchvision.models.regnet.BottleneckTransform": [],
    "torchvision.models.regnet.ResBottleneckBlock": [],
    "torchvision.models.regnet.AnyStage": [],
    "torchvision.models.regnet.BlockParams": [
        "<builtin>.classmethod",
        "<builtin>.staticmethod"
    ],
    "torchvision.models.regnet.RegNet": [],
    "torchvision.models.regnet.RegNet_Y_400MF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_Y_800MF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_Y_1_6GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_Y_3_2GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_Y_8GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_Y_16GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_Y_32GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_Y_128GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_X_400MF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_X_800MF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_X_1_6GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_X_3_2GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_X_8GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_X_16GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.regnet.RegNet_X_32GF_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet": [
        "torch.nn",
        "torchvision.models.resnet.ResNet",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.resnet.ResNeXt101_32X8D_Weights",
        "torchvision.models.resnet.Wide_ResNet50_2_Weights",
        "torchvision.models.resnet.ResNeXt50_32X4D_Weights",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.resnet.ResNet152_Weights",
        "torchvision.models.resnet.Wide_ResNet101_2_Weights",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.resnet.Bottleneck",
        "torchvision.models.resnet.ResNet18_Weights",
        "torchvision.models.resnet.ResNeXt101_64X4D_Weights",
        "torchvision.utils",
        "torchvision.models.resnet.ResNet101_Weights",
        "torchvision.models._api.register_model",
        "torchvision.models.resnet.ResNet34_Weights",
        "torchvision.models.resnet.ResNet50_Weights",
        "torchvision.models._utils",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api",
        "torchvision.models.resnet.BasicBlock"
    ],
    "torchvision.models.resnet.BasicBlock": [],
    "torchvision.models.resnet.Bottleneck": [],
    "torchvision.models.resnet.ResNet": [],
    "torchvision.models.resnet.ResNet18_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.ResNet34_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.ResNet50_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.ResNet101_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.ResNet152_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.ResNeXt50_32X4D_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.ResNeXt101_32X8D_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.ResNeXt101_64X4D_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.Wide_ResNet50_2_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.Wide_ResNet101_2_Weights": [
        "functools.partial"
    ],
    "torchvision.models.shufflenetv2": [
        "torch.nn",
        "torchvision.models.shufflenetv2.InvertedResidual",
        "torchvision.models._api",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._meta",
        "torchvision.models.shufflenetv2.ShuffleNetV2",
        "torchvision.models._api.register_model",
        "torchvision.transforms._presets",
        "torchvision.models.shufflenetv2.ShuffleNet_V2_X0_5_Weights",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.shufflenetv2.ShuffleNet_V2_X1_5_Weights",
        "torchvision.utils",
        "torchvision.models._utils",
        "torchvision.models.shufflenetv2.ShuffleNet_V2_X2_0_Weights",
        "torchvision.models._api.register_model.wrapper",
        "torch",
        "torchvision.models.shufflenetv2.ShuffleNet_V2_X1_0_Weights"
    ],
    "torchvision.models.shufflenetv2.InvertedResidual": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.shufflenetv2.ShuffleNetV2": [],
    "torchvision.models.shufflenetv2.ShuffleNet_V2_X0_5_Weights": [
        "functools.partial"
    ],
    "torchvision.models.shufflenetv2.ShuffleNet_V2_X1_0_Weights": [
        "functools.partial"
    ],
    "torchvision.models.shufflenetv2.ShuffleNet_V2_X1_5_Weights": [
        "functools.partial"
    ],
    "torchvision.models.shufflenetv2.ShuffleNet_V2_X2_0_Weights": [
        "functools.partial"
    ],
    "torchvision.models.squeezenet": [
        "torchvision.models.squeezenet.Fire",
        "torch.nn",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models._api",
        "torch.nn.init",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.models.squeezenet.SqueezeNet1_0_Weights",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.utils",
        "torchvision.models._utils",
        "torchvision.models.squeezenet.SqueezeNet",
        "torchvision.models._api.register_model.wrapper",
        "torch",
        "torchvision.models.squeezenet.SqueezeNet1_1_Weights"
    ],
    "torchvision.models.squeezenet.Fire": [],
    "torchvision.models.squeezenet.SqueezeNet": [],
    "torchvision.models.squeezenet.SqueezeNet1_0_Weights": [
        "functools.partial"
    ],
    "torchvision.models.squeezenet.SqueezeNet1_1_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vgg": [
        "torch.nn",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.vgg.VGG16_Weights",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.vgg.VGG19_BN_Weights",
        "torchvision.models.vgg.VGG11_Weights",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.vgg.VGG",
        "torchvision.models.vgg.VGG13_Weights",
        "torchvision.models.vgg.VGG13_BN_Weights",
        "torchvision.utils",
        "torchvision.models.vgg.VGG16_BN_Weights",
        "torchvision.models._api.register_model",
        "torchvision.models.vgg.VGG19_Weights",
        "torchvision.models.vgg.VGG11_BN_Weights",
        "torchvision.models._utils",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.vgg.VGG": [],
    "torchvision.models.vgg.VGG11_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vgg.VGG11_BN_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vgg.VGG13_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vgg.VGG13_BN_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vgg.VGG16_Weights": [
        "<builtin>.float",
        "functools.partial"
    ],
    "torchvision.models.vgg.VGG16_BN_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vgg.VGG19_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vgg.VGG19_BN_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vision_transformer": [
        "torch.nn",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.vision_transformer.ViT_H_14_Weights",
        "torchvision.models.vision_transformer.VisionTransformer",
        "torchvision.models.vision_transformer.ViT_B_16_Weights",
        "torchvision.models.vision_transformer.ConvStemConfig",
        "torch",
        "torchvision.models._meta",
        "torchvision.ops.misc",
        "torchvision.models.vision_transformer.ViT_L_16_Weights",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.vision_transformer.MLPBlock",
        "torchvision.models.vision_transformer.EncoderBlock",
        "torchvision.utils",
        "torchvision.models.vision_transformer.Encoder",
        "torchvision.models._api.register_model",
        "torchvision.models.vision_transformer.ViT_L_32_Weights",
        "torchvision.models.vision_transformer.ViT_B_32_Weights",
        "torchvision.models._utils",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.vision_transformer.ConvStemConfig": [],
    "torchvision.models.vision_transformer.MLPBlock": [],
    "torchvision.models.vision_transformer.EncoderBlock": [
        "functools.partial"
    ],
    "torchvision.models.vision_transformer.Encoder": [
        "functools.partial"
    ],
    "torchvision.models.vision_transformer.VisionTransformer": [
        "functools.partial"
    ],
    "torchvision.models.vision_transformer.ViT_B_16_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vision_transformer.ViT_B_32_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vision_transformer.ViT_L_16_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vision_transformer.ViT_L_32_Weights": [
        "functools.partial"
    ],
    "torchvision.models.vision_transformer.ViT_H_14_Weights": [
        "functools.partial"
    ],
    "torchvision.models.swin_transformer": [
        "torchvision.models.swin_transformer.Swin_S_Weights",
        "torch.nn",
        "torchvision.models.swin_transformer.SwinTransformer",
        "torchvision.models.swin_transformer.Swin_V2_B_Weights",
        "torch.nn.functional",
        "torchvision.ops.stochastic_depth",
        "torchvision.transforms._presets",
        "torchvision.models.swin_transformer.ShiftedWindowAttentionV2",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.swin_transformer.PatchMerging",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.swin_transformer.SwinTransformerBlock",
        "torchvision.ops.misc",
        "torchvision.models.swin_transformer.Swin_B_Weights",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.swin_transformer.Swin_T_Weights",
        "torchvision.models.swin_transformer.ShiftedWindowAttention",
        "torchvision.utils",
        "torch.fx._symbolic_trace.wrap",
        "torchvision.models.swin_transformer.Swin_V2_T_Weights",
        "torchvision.models._api.register_model",
        "torchvision.models.swin_transformer.SwinTransformerBlockV2",
        "torchvision.models.swin_transformer.Swin_V2_S_Weights",
        "torchvision.models.swin_transformer.PatchMergingV2",
        "torchvision.models._utils",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.swin_transformer.PatchMerging": [],
    "torchvision.models.swin_transformer.PatchMergingV2": [],
    "torchvision.models.swin_transformer.ShiftedWindowAttention": [],
    "torchvision.models.swin_transformer.ShiftedWindowAttentionV2": [],
    "torchvision.models.swin_transformer.SwinTransformerBlock": [],
    "torchvision.models.swin_transformer.SwinTransformerBlockV2": [],
    "torchvision.models.swin_transformer.SwinTransformer": [],
    "torchvision.models.swin_transformer.Swin_T_Weights": [
        "functools.partial"
    ],
    "torchvision.models.swin_transformer.Swin_S_Weights": [
        "functools.partial"
    ],
    "torchvision.models.swin_transformer.Swin_B_Weights": [
        "functools.partial"
    ],
    "torchvision.models.swin_transformer.Swin_V2_T_Weights": [
        "functools.partial"
    ],
    "torchvision.models.swin_transformer.Swin_V2_S_Weights": [
        "functools.partial"
    ],
    "torchvision.models.swin_transformer.Swin_V2_B_Weights": [
        "functools.partial"
    ],
    "torchvision.models.maxvit": [
        "torch.nn",
        "torchvision.models.maxvit.PartitionAttentionLayer",
        "torch.nn.functional",
        "torchvision.ops.stochastic_depth",
        "torchvision.transforms._presets",
        "torchvision.models._utils.handle_legacy_interface",
        "torchvision.models.maxvit.RelativePositionalMultiHeadAttention",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.maxvit.MBConv",
        "torchvision.ops.misc",
        "torchvision.models.maxvit.WindowPartition",
        "torchvision.models.maxvit.MaxVit_T_Weights",
        "torchvision.models._utils.handle_legacy_interface.outer_wrapper",
        "torchvision.models.maxvit.WindowDepartition",
        "torchvision.models.maxvit.MaxVitBlock",
        "torchvision.utils",
        "torchvision.models.maxvit.SwapAxes",
        "torchvision.models.maxvit.MaxVit",
        "torchvision.models._api.register_model",
        "torchvision.models.maxvit.MaxVitLayer",
        "torchvision.models._utils",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api",
        "numpy"
    ],
    "torchvision.models.maxvit.MBConv": [],
    "torchvision.models.maxvit.RelativePositionalMultiHeadAttention": [],
    "torchvision.models.maxvit.SwapAxes": [],
    "torchvision.models.maxvit.WindowPartition": [],
    "torchvision.models.maxvit.WindowDepartition": [],
    "torchvision.models.maxvit.PartitionAttentionLayer": [],
    "torchvision.models.maxvit.MaxVitLayer": [],
    "torchvision.models.maxvit.MaxVitBlock": [],
    "torchvision.models.maxvit.MaxVit": [],
    "torchvision.models.maxvit.MaxVit_T_Weights": [
        "functools.partial"
    ],
    "torchvision.models.detection": [
        "torchvision.models.detection.fcos",
        "torchvision.models.detection.faster_rcnn",
        "torchvision.models.detection.ssdlite",
        "torchvision.models.detection.mask_rcnn",
        "torchvision.models.detection.ssd",
        "torchvision.models.detection.keypoint_rcnn",
        "torchvision.models.detection.retinanet"
    ],
    "torchvision.models.detection.faster_rcnn": [
        "torchvision.models.detection.faster_rcnn.FasterRCNN_MobileNet_V3_Large_FPN_Weights",
        "torch.nn",
        "torchvision.models.detection.backbone_utils",
        "torchvision.models._api.register_model.wrapper",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "torchvision.models.detection.transform",
        "torchvision.models.detection.faster_rcnn.TwoMLPHead",
        "torchvision.models.detection.rpn",
        "torch",
        "torchvision.models._meta",
        "torchvision.ops.misc",
        "torchvision.models.detection.faster_rcnn.FastRCNNConvFCHead",
        "torchvision._utils",
        "torchvision.models.detection.faster_rcnn.FasterRCNN_MobileNet_V3_Large_320_FPN_Weights",
        "torchvision.models.detection._utils",
        "torchvision.models.detection.faster_rcnn.FasterRCNN_ResNet50_FPN_Weights",
        "torchvision.models.detection.anchor_utils",
        "torchvision.ops",
        "torchvision.models.detection.faster_rcnn.FasterRCNN_ResNet50_FPN_V2_Weights",
        "torchvision.models.resnet",
        "torchvision.models.detection.generalized_rcnn",
        "torchvision.models._api.register_model",
        "torchvision.models.detection.faster_rcnn.FasterRCNN",
        "torchvision.models.detection.faster_rcnn.FastRCNNPredictor",
        "torchvision.models.mobilenetv3",
        "torchvision.models.detection.roi_heads",
        "torchvision.models._api"
    ],
    "torchvision.models.detection._utils": [
        "torch.nn",
        "torchvision.models.detection._utils.BoxCoder",
        "torchvision.models.detection._utils.Matcher",
        "torch.nn.functional",
        "torchvision.ops",
        "torch._jit_internal.unused",
        "torchvision.models.detection._utils.SSDMatcher",
        "torch.jit._trace._script_if_tracing",
        "torch",
        "torchvision.models.detection._utils.BalancedPositiveNegativeSampler",
        "torchvision.models.detection._utils.BoxLinearCoder"
    ],
    "torchvision.models.detection._utils.BalancedPositiveNegativeSampler": [],
    "torchvision.models.detection._utils.BoxCoder": [],
    "torchvision.models.detection._utils.BoxLinearCoder": [],
    "torchvision.models.detection._utils.Matcher": [],
    "torchvision.models.detection._utils.SSDMatcher": [],
    "torchvision.models.detection.anchor_utils": [
        "torch.nn",
        "torchvision.models.detection.anchor_utils.AnchorGenerator",
        "torchvision.models.detection.image_list",
        "torchvision.models.detection.anchor_utils.DefaultBoxGenerator",
        "torch"
    ],
    "torchvision.models.detection.image_list": [
        "torchvision.models.detection.image_list.ImageList",
        "torch"
    ],
    "torchvision.models.detection.image_list.ImageList": [],
    "torchvision.models.detection.anchor_utils.AnchorGenerator": [],
    "torchvision.models.detection.anchor_utils.DefaultBoxGenerator": [],
    "torchvision.models.detection.backbone_utils": [
        "torch.nn",
        "torchvision.models._api",
        "torchvision.ops.feature_pyramid_network",
        "torchvision.models",
        "torchvision.ops.misc",
        "torchvision.models.detection.backbone_utils.BackboneWithFPN",
        "torch",
        "torchvision._utils"
    ],
    "torchvision.models.detection.backbone_utils.BackboneWithFPN": [],
    "torchvision.models.detection.generalized_rcnn": [
        "torch.nn",
        "torch",
        "torchvision.models.detection.generalized_rcnn.GeneralizedRCNN",
        "torchvision.utils"
    ],
    "torchvision.models.detection.generalized_rcnn.GeneralizedRCNN": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.roi_heads": [
        "torch.nn",
        "torchvision.ops.boxes",
        "torchvision.ops.roi_align",
        "torchvision.models.detection._utils",
        "torch.nn.functional",
        "torchvision.models.detection.roi_heads.RoIHeads",
        "torchvision",
        "torch._jit_internal.unused",
        "torch.jit._trace._script_if_tracing",
        "torch"
    ],
    "torchvision.models.detection.roi_heads.RoIHeads": [],
    "torchvision.models.detection.rpn": [
        "torch.nn",
        "torchvision.ops.boxes",
        "torchvision.models.detection.image_list",
        "torchvision.models.detection._utils",
        "torch.nn.functional",
        "torchvision.models.detection.anchor_utils",
        "torchvision.models.detection.rpn.RegionProposalNetwork",
        "torchvision.ops",
        "torchvision.models.detection.rpn.RPNHead",
        "torch"
    ],
    "torchvision.models.detection.rpn.RPNHead": [],
    "torchvision.models.detection.rpn.RegionProposalNetwork": [],
    "torchvision.models.detection.transform": [
        "torch.nn",
        "torchvision.models.detection.transform.GeneralizedRCNNTransform",
        "torchvision.models.detection.image_list",
        "torchvision",
        "torch._jit_internal.unused",
        "torchvision.models.detection.roi_heads",
        "torch"
    ],
    "torchvision.models.detection.transform.GeneralizedRCNNTransform": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.faster_rcnn.FasterRCNN": [],
    "torchvision.models.detection.faster_rcnn.TwoMLPHead": [],
    "torchvision.models.detection.faster_rcnn.FastRCNNConvFCHead": [],
    "torchvision.models.detection.faster_rcnn.FastRCNNPredictor": [],
    "torchvision.models.detection.faster_rcnn.FasterRCNN_ResNet50_FPN_Weights": [],
    "torchvision.models.detection.faster_rcnn.FasterRCNN_ResNet50_FPN_V2_Weights": [],
    "torchvision.models.detection.faster_rcnn.FasterRCNN_MobileNet_V3_Large_FPN_Weights": [],
    "torchvision.models.detection.faster_rcnn.FasterRCNN_MobileNet_V3_Large_320_FPN_Weights": [],
    "torchvision.models.detection.fcos": [
        "torch.nn",
        "torchvision.models.detection.fcos.FCOS_ResNet50_FPN_Weights",
        "torchvision.models.detection.backbone_utils",
        "torchvision.transforms._presets",
        "torchvision.models.detection.transform",
        "torchvision.models.detection.fcos.FCOSRegressionHead",
        "torchvision.ops.boxes",
        "torch",
        "torchvision.models._meta",
        "torchvision.ops.feature_pyramid_network",
        "torchvision.models.detection.fcos.FCOSClassificationHead",
        "torchvision.ops.misc",
        "torchvision._utils",
        "torchvision.models.detection._utils",
        "torchvision.models.detection.anchor_utils",
        "torchvision.ops",
        "torchvision.utils",
        "torchvision.models.detection.fcos.FCOS",
        "torchvision.models.resnet",
        "torchvision.models._api.register_model",
        "torchvision.models.detection.fcos.FCOSHead",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.detection.fcos.FCOSHead": [],
    "torchvision.models.detection.fcos.FCOSClassificationHead": [],
    "torchvision.models.detection.fcos.FCOSRegressionHead": [],
    "torchvision.models.detection.fcos.FCOS": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.fcos.FCOS_ResNet50_FPN_Weights": [],
    "torchvision.models.detection.keypoint_rcnn": [
        "torchvision.models.resnet",
        "torch.nn",
        "torchvision.models._api",
        "torchvision.models.detection.backbone_utils",
        "torchvision.models._meta",
        "torchvision.models.detection._utils",
        "torchvision.models.detection.faster_rcnn",
        "torchvision.models.detection.keypoint_rcnn.KeypointRCNN",
        "torchvision.transforms._presets",
        "torchvision.models.detection.keypoint_rcnn.KeypointRCNN_ResNet50_FPN_Weights",
        "torchvision.models._api.register_model",
        "torchvision.ops",
        "torchvision.models.detection.keypoint_rcnn.KeypointRCNNHeads",
        "torchvision.ops.misc",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models.detection.keypoint_rcnn.KeypointRCNNPredictor",
        "torch",
        "torchvision._utils"
    ],
    "torchvision.models.detection.keypoint_rcnn.KeypointRCNN": [],
    "torchvision.models.detection.keypoint_rcnn.KeypointRCNNHeads": [],
    "torchvision.models.detection.keypoint_rcnn.KeypointRCNNPredictor": [],
    "torchvision.models.detection.keypoint_rcnn.KeypointRCNN_ResNet50_FPN_Weights": [],
    "torchvision.models.detection.mask_rcnn": [
        "torchvision.models.resnet",
        "torch.nn",
        "torchvision.models.detection.backbone_utils",
        "torchvision.models._meta",
        "torchvision.models.detection._utils",
        "torchvision.models.detection.faster_rcnn",
        "torchvision.models._api.register_model",
        "torchvision.transforms._presets",
        "torchvision.models.detection.mask_rcnn.MaskRCNN_ResNet50_FPN_V2_Weights",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.ops",
        "torchvision.models.detection.mask_rcnn.MaskRCNN",
        "torchvision.ops.misc",
        "torchvision.models.detection.mask_rcnn.MaskRCNN_ResNet50_FPN_Weights",
        "torchvision.models.detection.mask_rcnn.MaskRCNNPredictor",
        "torchvision.models._api",
        "torchvision.models.detection.mask_rcnn.MaskRCNNHeads",
        "torchvision._utils"
    ],
    "torchvision.models.detection.mask_rcnn.MaskRCNN": [],
    "torchvision.models.detection.mask_rcnn.MaskRCNNHeads": [],
    "torchvision.models.detection.mask_rcnn.MaskRCNNPredictor": [],
    "torchvision.models.detection.mask_rcnn.MaskRCNN_ResNet50_FPN_Weights": [],
    "torchvision.models.detection.mask_rcnn.MaskRCNN_ResNet50_FPN_V2_Weights": [],
    "torchvision.models.detection.retinanet": [
        "torch.nn",
        "torchvision.models.detection.backbone_utils",
        "torchvision.transforms._presets",
        "torchvision.models.detection.transform",
        "torchvision.ops.boxes",
        "torchvision.models.detection.retinanet.RetinaNetHead",
        "torch",
        "torchvision.models._meta",
        "torchvision.ops.feature_pyramid_network",
        "torchvision.models.detection.retinanet.RetinaNetRegressionHead",
        "torchvision.models.detection.retinanet.RetinaNet_ResNet50_FPN_Weights",
        "torchvision.ops.misc",
        "torchvision._utils",
        "torchvision.models.detection.retinanet.RetinaNetClassificationHead",
        "torchvision.models.detection._utils",
        "torchvision.models.detection.retinanet.RetinaNet_ResNet50_FPN_V2_Weights",
        "torchvision.models.detection.retinanet.RetinaNet",
        "torchvision.models.detection.anchor_utils",
        "torchvision.ops",
        "torchvision.utils",
        "torchvision.models.resnet",
        "torchvision.models._api.register_model",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.detection.retinanet.RetinaNetHead": [],
    "torchvision.models.detection.retinanet.RetinaNetClassificationHead": [],
    "torchvision.models.detection.retinanet.RetinaNetRegressionHead": [],
    "torchvision.models.detection.retinanet.RetinaNet": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.retinanet.RetinaNet_ResNet50_FPN_Weights": [],
    "torchvision.models.detection.retinanet.RetinaNet_ResNet50_FPN_V2_Weights": [],
    "torchvision.models.detection.ssd": [
        "torch.nn",
        "torchvision.models.detection.ssd.SSD",
        "torchvision.models.detection.backbone_utils",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "torchvision.models.vgg",
        "torchvision.models.detection.transform",
        "torchvision.models.detection.ssd.SSDFeatureExtractorVGG",
        "torchvision.ops.boxes",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.detection.ssd.SSD300_VGG16_Weights",
        "torchvision._utils",
        "torchvision.models.detection._utils",
        "torchvision.models.detection.ssd.SSDRegressionHead",
        "torchvision.models.detection.anchor_utils",
        "torchvision.utils",
        "torchvision.models._api.register_model",
        "torchvision.models.detection.ssd.SSDClassificationHead",
        "torchvision.models.detection.ssd.SSDHead",
        "torchvision.models.detection.ssd.SSDScoringHead",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.detection.ssd.SSD300_VGG16_Weights": [],
    "torchvision.models.detection.ssd.SSDHead": [],
    "torchvision.models.detection.ssd.SSDScoringHead": [],
    "torchvision.models.detection.ssd.SSDClassificationHead": [],
    "torchvision.models.detection.ssd.SSDRegressionHead": [],
    "torchvision.models.detection.ssd.SSD": [
        "torch._jit_internal.unused"
    ],
    "torchvision.models.detection.ssd.SSDFeatureExtractorVGG": [],
    "torchvision.models.detection.ssdlite": [
        "torch.nn",
        "torchvision.models.detection.backbone_utils",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.transforms._presets",
        "torchvision.models",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.detection.ssdlite.SSDLiteClassificationHead",
        "torchvision.ops.misc",
        "torchvision.models.detection.ssdlite.SSDLiteFeatureExtractorMobileNet",
        "torchvision._utils",
        "torchvision.models.detection._utils",
        "torchvision.models.detection.anchor_utils",
        "torchvision.models.detection.ssd",
        "torchvision.models.detection.ssdlite.SSDLiteRegressionHead",
        "torchvision.utils",
        "torchvision.models.detection.ssdlite.SSDLiteHead",
        "torchvision.models.detection.ssdlite.SSDLite320_MobileNet_V3_Large_Weights",
        "torchvision.models._api.register_model",
        "torchvision.models.mobilenetv3",
        "torchvision.models._api"
    ],
    "torchvision.models.detection.ssdlite.SSDLiteHead": [],
    "torchvision.models.detection.ssdlite.SSDLiteClassificationHead": [],
    "torchvision.models.detection.ssdlite.SSDLiteRegressionHead": [],
    "torchvision.models.detection.ssdlite.SSDLiteFeatureExtractorMobileNet": [],
    "torchvision.models.detection.ssdlite.SSDLite320_MobileNet_V3_Large_Weights": [],
    "torchvision.models.optical_flow": [
        "torchvision.models.optical_flow.raft"
    ],
    "torchvision.models.optical_flow.raft": [
        "torch.nn",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "torchvision.models.optical_flow.raft.BottleneckBlock",
        "torchvision.models.optical_flow.raft.MaskPredictor",
        "torch",
        "torchvision.models.optical_flow.raft.MotionEncoder",
        "torchvision.models.optical_flow.raft.Raft_Small_Weights",
        "torchvision.models.optical_flow.raft.FeatureEncoder",
        "torchvision.models.optical_flow.raft.FlowHead",
        "torchvision.models.optical_flow.raft.ResidualBlock",
        "torchvision._utils",
        "torchvision.models.optical_flow.raft.CorrBlock",
        "torchvision.models.optical_flow._utils",
        "torchvision.models.optical_flow.raft.ConvGRU",
        "torchvision.ops",
        "torchvision.utils",
        "torchvision.models.optical_flow.raft.Raft_Large_Weights",
        "torchvision.models.optical_flow.raft.UpdateBlock",
        "torchvision.models._api.register_model",
        "torch.nn.modules.instancenorm",
        "torchvision.models.optical_flow.raft.RecurrentBlock",
        "torchvision.models.optical_flow.raft.RAFT",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api",
        "torch.nn.modules.batchnorm"
    ],
    "torchvision.models.optical_flow._utils": [
        "torch",
        "torch.nn.functional"
    ],
    "torchvision.models.optical_flow.raft.ResidualBlock": [],
    "torchvision.models.optical_flow.raft.BottleneckBlock": [],
    "torchvision.models.optical_flow.raft.FeatureEncoder": [],
    "torchvision.models.optical_flow.raft.MotionEncoder": [],
    "torchvision.models.optical_flow.raft.ConvGRU": [],
    "torchvision.models.optical_flow.raft.RecurrentBlock": [],
    "torchvision.models.optical_flow.raft.FlowHead": [],
    "torchvision.models.optical_flow.raft.UpdateBlock": [],
    "torchvision.models.optical_flow.raft.MaskPredictor": [],
    "torchvision.models.optical_flow.raft.CorrBlock": [],
    "torchvision.models.optical_flow.raft.RAFT": [],
    "torchvision.models.optical_flow.raft.Raft_Large_Weights": [],
    "torchvision.models.optical_flow.raft.Raft_Small_Weights": [],
    "torchvision.models.quantization": [
        "torchvision.models.quantization.googlenet",
        "torchvision.models.quantization.shufflenetv2",
        "torchvision.models.quantization.resnet",
        "torchvision.models.quantization.inception",
        "torchvision.models.quantization.mobilenet"
    ],
    "torchvision.models.quantization.googlenet": [
        "torch.nn",
        "torch",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.models.quantization.googlenet.GoogLeNet_QuantizedWeights",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "torchvision.models.googlenet",
        "torchvision.models.quantization.googlenet.QuantizableGoogLeNet",
        "torchvision.models.quantization.googlenet.QuantizableInceptionAux",
        "torchvision.models.quantization.utils",
        "torchvision.models.quantization.googlenet.QuantizableBasicConv2d",
        "torchvision.models.quantization.googlenet.QuantizableInception",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api",
        "torchvision._utils"
    ],
    "torchvision.models.quantization.utils": [
        "torch.nn",
        "torch"
    ],
    "torchvision.models.quantization.googlenet.QuantizableBasicConv2d": [],
    "torchvision.models.quantization.googlenet.QuantizableInception": [],
    "torchvision.models.quantization.googlenet.QuantizableInceptionAux": [],
    "torchvision.models.quantization.googlenet.QuantizableGoogLeNet": [],
    "torchvision.models.quantization.googlenet.GoogLeNet_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.inception": [
        "torch.nn",
        "torchvision.models.quantization.inception.QuantizableInceptionB",
        "torchvision.models.quantization.inception.QuantizableBasicConv2d",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "torchvision.models.quantization.inception.QuantizableInceptionA",
        "torchvision.models.quantization.inception.QuantizableInception3",
        "torch",
        "torchvision.models.quantization.inception.Inception_V3_QuantizedWeights",
        "torchvision.models._meta",
        "torchvision.models.quantization.inception.QuantizableInceptionD",
        "torchvision.models.inception",
        "torchvision.models.quantization.inception.QuantizableInceptionAux",
        "torchvision._utils",
        "torchvision.models.quantization.utils",
        "torchvision.models._api.register_model",
        "torchvision.models.quantization.inception.QuantizableInceptionC",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api",
        "torchvision.models.quantization.inception.QuantizableInceptionE"
    ],
    "torchvision.models.quantization.inception.QuantizableBasicConv2d": [],
    "torchvision.models.quantization.inception.QuantizableInceptionA": [],
    "torchvision.models.quantization.inception.QuantizableInceptionB": [],
    "torchvision.models.quantization.inception.QuantizableInceptionC": [],
    "torchvision.models.quantization.inception.QuantizableInceptionD": [],
    "torchvision.models.quantization.inception.QuantizableInceptionE": [],
    "torchvision.models.quantization.inception.QuantizableInceptionAux": [],
    "torchvision.models.quantization.inception.QuantizableInception3": [],
    "torchvision.models.quantization.inception.Inception_V3_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.mobilenet": [
        "torchvision.models.quantization.mobilenetv2",
        "torchvision.models.quantization.mobilenetv3"
    ],
    "torchvision.models.quantization.mobilenetv2": [
        "torch.nn",
        "torchvision.models._api",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torch.ao.quantization",
        "torchvision.transforms._presets",
        "torchvision.models.quantization.mobilenetv2.QuantizableMobileNetV2",
        "torchvision.models.mobilenetv2",
        "torchvision.models.quantization.mobilenetv2.MobileNet_V2_QuantizedWeights",
        "torchvision.models.quantization.utils",
        "torchvision.ops.misc",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models.quantization.mobilenetv2.QuantizableInvertedResidual",
        "torch",
        "torchvision._utils"
    ],
    "torch.ao.quantization": [
        "torch.ao.quantization.stubs",
        "torch.ao.quantization.qconfig_mapping",
        "torch.ao.quantization.quantization_mappings",
        "torch.ao.quantization.fuse_modules",
        "torch.ao.quantization.quant_type",
        "torch.ao.quantization.observer",
        "torch.ao.quantization.quantize",
        "torch.ao.quantization.fuser_method_mappings",
        "torch.ao.quantization.fake_quantize",
        "torch.ao.quantization.quantize_jit",
        "torch.ao.quantization.qconfig"
    ],
    "torch.ao.quantization.qconfig_mapping": [
        "torch.ao.quantization.observer",
        "torch.ao.quantization.fake_quantize",
        "torch.ao.quantization.qconfig_mapping.QConfigMapping",
        "torch",
        "torch.ao.quantization.qconfig"
    ],
    "torch.ao.quantization.qconfig_mapping.QConfigMapping": [
        "<builtin>.classmethod"
    ],
    "torchvision.models.quantization.mobilenetv2.QuantizableInvertedResidual": [],
    "torchvision.models.quantization.mobilenetv2.QuantizableMobileNetV2": [],
    "torchvision.models.quantization.mobilenetv2.MobileNet_V2_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.mobilenetv3": [
        "torchvision.models.quantization.mobilenetv3.QuantizableMobileNetV3",
        "torch.nn",
        "torchvision.models._api",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models.quantization.mobilenetv3.MobileNet_V3_Large_QuantizedWeights",
        "torchvision.transforms._presets",
        "torch.ao.quantization",
        "torchvision.models.quantization.mobilenetv3.QuantizableInvertedResidual",
        "torchvision.models.quantization.utils",
        "torchvision.ops.misc",
        "torchvision.models.quantization.mobilenetv3.QuantizableSqueezeExcitation",
        "torchvision.models.mobilenetv3",
        "torch",
        "torchvision._utils"
    ],
    "torchvision.models.quantization.mobilenetv3.QuantizableSqueezeExcitation": [],
    "torchvision.models.quantization.mobilenetv3.QuantizableInvertedResidual": [],
    "torchvision.models.quantization.mobilenetv3.QuantizableMobileNetV3": [],
    "torchvision.models.quantization.mobilenetv3.MobileNet_V3_Large_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.resnet": [
        "torchvision.models.resnet",
        "torch.nn",
        "torchvision.models._api",
        "torchvision.models._meta",
        "torchvision.models.quantization.resnet.QuantizableBasicBlock",
        "torchvision.models._api.register_model",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.transforms._presets",
        "torchvision.models.quantization.resnet.QuantizableResNet",
        "torchvision.models.quantization.utils",
        "torchvision.models.quantization.resnet.ResNet50_QuantizedWeights",
        "torchvision.models.quantization.resnet.ResNeXt101_32X8D_QuantizedWeights",
        "torchvision.models.quantization.resnet.ResNeXt101_64X4D_QuantizedWeights",
        "torchvision.models.quantization.resnet.ResNet18_QuantizedWeights",
        "torch",
        "torchvision._utils",
        "torchvision.models.quantization.resnet.QuantizableBottleneck"
    ],
    "torchvision.models.quantization.resnet.QuantizableBasicBlock": [],
    "torchvision.models.quantization.resnet.QuantizableBottleneck": [],
    "torchvision.models.quantization.resnet.QuantizableResNet": [],
    "torchvision.models.quantization.resnet.ResNet18_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.resnet.ResNet50_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.resnet.ResNeXt101_32X8D_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.resnet.ResNeXt101_64X4D_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.shufflenetv2": [
        "torchvision._utils",
        "torch.nn",
        "torchvision.models.quantization.shufflenetv2.ShuffleNet_V2_X1_5_QuantizedWeights",
        "torchvision.models._api",
        "torchvision.models.quantization.shufflenetv2.ShuffleNet_V2_X2_0_QuantizedWeights",
        "torchvision.models._meta",
        "torchvision.models.quantization.shufflenetv2.ShuffleNet_V2_X1_0_QuantizedWeights",
        "torchvision.models._api.register_model",
        "torchvision.transforms._presets",
        "torchvision.models.quantization.shufflenetv2.QuantizableInvertedResidual",
        "torchvision.models.quantization.utils",
        "torchvision.models.quantization.shufflenetv2.ShuffleNet_V2_X0_5_QuantizedWeights",
        "torchvision.models._api.register_model.wrapper",
        "torch",
        "torchvision.models.shufflenetv2",
        "torchvision.models.quantization.shufflenetv2.QuantizableShuffleNetV2"
    ],
    "torchvision.models.quantization.shufflenetv2.QuantizableInvertedResidual": [],
    "torchvision.models.quantization.shufflenetv2.QuantizableShuffleNetV2": [],
    "torchvision.models.quantization.shufflenetv2.ShuffleNet_V2_X0_5_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.shufflenetv2.ShuffleNet_V2_X1_0_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.shufflenetv2.ShuffleNet_V2_X1_5_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.quantization.shufflenetv2.ShuffleNet_V2_X2_0_QuantizedWeights": [
        "functools.partial"
    ],
    "torchvision.models.segmentation": [
        "torchvision.models.segmentation.fcn",
        "torchvision.models.segmentation.lraspp",
        "torchvision.models.segmentation.deeplabv3"
    ],
    "torchvision.models.segmentation.deeplabv3": [
        "torch.nn",
        "torchvision.models.segmentation.deeplabv3.ASPPPooling",
        "torchvision.models._api.register_model.wrapper",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "torchvision.models.segmentation.deeplabv3.DeepLabV3_ResNet50_Weights",
        "torchvision.models.segmentation.deeplabv3.ASPP",
        "torchvision.models.segmentation.deeplabv3.DeepLabV3",
        "torchvision.models.segmentation.deeplabv3.ASPPConv",
        "torchvision.models._meta",
        "torchvision.models.segmentation.fcn",
        "torchvision.models.segmentation.deeplabv3.DeepLabHead",
        "torchvision._utils",
        "torchvision.models.segmentation.deeplabv3.DeepLabV3_MobileNet_V3_Large_Weights",
        "torchvision.models.resnet",
        "torchvision.models._api",
        "torchvision.models.segmentation.deeplabv3.DeepLabV3_ResNet101_Weights",
        "torchvision.models._api.register_model",
        "torchvision.models.mobilenetv3",
        "torchvision.models.segmentation._utils",
        "torch"
    ],
    "torchvision.models.segmentation._utils": [
        "torch.nn",
        "torch.nn.functional",
        "torchvision.models.segmentation._utils._SimpleSegmentationModel",
        "torchvision.utils",
        "torch"
    ],
    "torchvision.models.segmentation._utils._SimpleSegmentationModel": [],
    "torchvision.models.segmentation.fcn": [
        "torchvision.models.resnet",
        "torch.nn",
        "torchvision.models.segmentation.fcn.FCN_ResNet50_Weights",
        "torchvision.models.segmentation.fcn.FCN",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.transforms._presets",
        "torchvision.models.segmentation.fcn.FCN_ResNet101_Weights",
        "torchvision.models.segmentation.fcn.FCNHead",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models.segmentation._utils",
        "torchvision.models._api",
        "torchvision._utils"
    ],
    "torchvision.models.segmentation.fcn.FCN": [],
    "torchvision.models.segmentation.fcn.FCNHead": [],
    "torchvision.models.segmentation.fcn.FCN_ResNet50_Weights": [
        "functools.partial"
    ],
    "torchvision.models.segmentation.fcn.FCN_ResNet101_Weights": [
        "functools.partial"
    ],
    "torchvision.models.segmentation.deeplabv3.DeepLabV3": [],
    "torchvision.models.segmentation.deeplabv3.DeepLabHead": [],
    "torchvision.models.segmentation.deeplabv3.ASPPConv": [],
    "torchvision.models.segmentation.deeplabv3.ASPPPooling": [],
    "torchvision.models.segmentation.deeplabv3.ASPP": [],
    "torchvision.models.segmentation.deeplabv3.DeepLabV3_ResNet50_Weights": [
        "functools.partial"
    ],
    "torchvision.models.segmentation.deeplabv3.DeepLabV3_ResNet101_Weights": [
        "functools.partial"
    ],
    "torchvision.models.segmentation.deeplabv3.DeepLabV3_MobileNet_V3_Large_Weights": [
        "functools.partial"
    ],
    "torchvision.models.segmentation.lraspp": [
        "torch.nn",
        "torchvision.models._api",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torchvision.models.segmentation.lraspp.LRASPPHead",
        "torchvision.models.segmentation.lraspp.LRASPP_MobileNet_V3_Large_Weights",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.utils",
        "torchvision.models.mobilenetv3",
        "torch",
        "torchvision.models.segmentation.lraspp.LRASPP",
        "torchvision._utils"
    ],
    "torchvision.models.segmentation.lraspp.LRASPP": [],
    "torchvision.models.segmentation.lraspp.LRASPPHead": [],
    "torchvision.models.segmentation.lraspp.LRASPP_MobileNet_V3_Large_Weights": [
        "functools.partial"
    ],
    "torchvision.models.video": [
        "torchvision.models.video.resnet",
        "torchvision.models.video.s3d",
        "torchvision.models.video.mvit",
        "torchvision.models.video.swin_transformer"
    ],
    "torchvision.models.video.mvit": [
        "torch.nn",
        "torchvision.models.video.mvit.MultiscaleAttention",
        "torchvision.transforms._presets",
        "torchvision.models.video.mvit.PositionalEncoding",
        "torchvision.models.video.mvit.MViT",
        "torch",
        "torchvision.models.video.mvit.Pool",
        "torchvision.models._meta",
        "torchvision.models.video.mvit.MSBlockConfig",
        "torchvision._utils",
        "torchvision.models.video.mvit.MViT_V1_B_Weights",
        "torch.fx",
        "torchvision.ops",
        "torchvision.utils",
        "torch.fx._symbolic_trace.wrap",
        "torchvision.models.video.mvit.MultiscaleBlock",
        "torchvision.models._api.register_model",
        "torchvision.models.video.mvit.MViT_V2_S_Weights",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.video.mvit.MSBlockConfig": [],
    "torchvision.models.video.mvit.Pool": [],
    "torchvision.models.video.mvit.MultiscaleAttention": [],
    "torchvision.models.video.mvit.MultiscaleBlock": [],
    "torchvision.models.video.mvit.PositionalEncoding": [],
    "torchvision.models.video.mvit.MViT": [],
    "torchvision.models.video.mvit.MViT_V1_B_Weights": [
        "functools.partial"
    ],
    "torchvision.models.video.mvit.MViT_V2_S_Weights": [
        "functools.partial"
    ],
    "torchvision.models.video.resnet": [
        "torch.nn",
        "torchvision.models.video.resnet.Conv3DNoTemporal",
        "torchvision.transforms._presets",
        "torchvision.models.video.resnet.BasicStem",
        "torchvision.models.video.resnet.R3D_18_Weights",
        "torchvision.models.video.resnet.Conv3DSimple",
        "torch",
        "torchvision.models._meta",
        "torchvision.models.video.resnet.MC3_18_Weights",
        "torchvision.models.video.resnet.Bottleneck",
        "torchvision.models.video.resnet.VideoResNet",
        "torchvision._utils",
        "torchvision.models.video.resnet.BasicBlock",
        "torchvision.utils",
        "torchvision.models.video.resnet.R2Plus1D_18_Weights",
        "torchvision.models._api.register_model",
        "torchvision.models.video.resnet.Conv2Plus1D",
        "torchvision.models.video.resnet.R2Plus1dStem",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.models._api"
    ],
    "torchvision.models.video.resnet.Conv3DSimple": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.video.resnet.Conv2Plus1D": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.video.resnet.Conv3DNoTemporal": [
        "<builtin>.staticmethod"
    ],
    "torchvision.models.video.resnet.BasicBlock": [],
    "torchvision.models.video.resnet.Bottleneck": [],
    "torchvision.models.video.resnet.BasicStem": [],
    "torchvision.models.video.resnet.R2Plus1dStem": [],
    "torchvision.models.video.resnet.VideoResNet": [],
    "torchvision.models.video.resnet.R3D_18_Weights": [
        "functools.partial"
    ],
    "torchvision.models.video.resnet.MC3_18_Weights": [
        "functools.partial"
    ],
    "torchvision.models.video.resnet.R2Plus1D_18_Weights": [
        "functools.partial"
    ],
    "torchvision.models.video.s3d": [
        "torch.nn",
        "torchvision.models._api",
        "torchvision.models._meta",
        "torchvision.models.video.s3d.SepInceptionBlock3D",
        "torchvision.models.video.s3d.TemporalSeparableConv",
        "torchvision.models._api.register_model",
        "torchvision.transforms._presets",
        "torchvision.models._api.register_model.wrapper",
        "torchvision.ops.misc",
        "torchvision.utils",
        "torchvision.models.video.s3d.S3D_Weights",
        "torchvision.models.video.s3d.S3D",
        "torch",
        "torchvision._utils"
    ],
    "torchvision.models.video.s3d.TemporalSeparableConv": [],
    "torchvision.models.video.s3d.SepInceptionBlock3D": [],
    "torchvision.models.video.s3d.S3D": [],
    "torchvision.models.video.s3d.S3D_Weights": [
        "functools.partial"
    ],
    "torchvision.models.video.swin_transformer": [
        "torch.nn",
        "torchvision.models.video.swin_transformer.SwinTransformer3d",
        "torchvision.models._api",
        "torchvision.models._meta",
        "torchvision.models._api.register_model",
        "torch.nn.functional",
        "torchvision.transforms._presets",
        "torchvision.models.video.swin_transformer.Swin3D_T_Weights",
        "torchvision.models.video.swin_transformer.Swin3D_B_Weights",
        "torchvision.models.swin_transformer",
        "torchvision.models.video.swin_transformer.PatchEmbed3d",
        "torchvision.models.video.swin_transformer.ShiftedWindowAttention3d",
        "torchvision.utils",
        "torchvision.models.video.swin_transformer.Swin3D_S_Weights",
        "torchvision.models._api.register_model.wrapper",
        "torch",
        "torch.fx._symbolic_trace.wrap",
        "torchvision._utils"
    ],
    "torchvision.models.video.swin_transformer.ShiftedWindowAttention3d": [],
    "torchvision.models.video.swin_transformer.PatchEmbed3d": [],
    "torchvision.models.video.swin_transformer.SwinTransformer3d": [],
    "torchvision.models.video.swin_transformer.Swin3D_T_Weights": [
        "functools.partial"
    ],
    "torchvision.models.video.swin_transformer.Swin3D_S_Weights": [
        "functools.partial"
    ],
    "torchvision.models.video.swin_transformer.Swin3D_B_Weights": [
        "functools.partial"
    ],
    "torchvision.models.resnet.resnet18": [
        "torchvision.models._api.WeightsEnum.verify",
        "torchvision.models.resnet._resnet"
    ],
    "torchvision.models._api.WeightsEnum.verify": [
        "<builtin>.type",
        "<builtin>.TypeError",
        "<builtin>.isinstance"
    ],
    "torchvision.models.resnet._resnet": [
        "torchvision.models._utils._ovewrite_named_param",
        "torch.nn.modules.module.Module.load_state_dict",
        "torchvision.models._api.WeightsEnum.get_state_dict",
        "<builtin>.len",
        "torchvision.models.resnet.ResNet.__init__"
    ],
    "torchvision.models._utils._ovewrite_named_param": [
        "<builtin>.ValueError"
    ],
    "torchvision.models.resnet.ResNet.__init__": [
        "torchvision.models.resnet.ResNet._make_layer",
        "torch.nn.modules.linear.Linear.__init__",
        "<builtin>.ValueError",
        "torchvision.utils._log_api_usage_once",
        "torch.nn.init.constant_",
        "<builtin>.isinstance",
        "torch.nn.modules.activation.ReLU.__init__",
        "<builtin>.len",
        "<builtin>.super",
        "torch.nn.modules.conv.Conv2d.__init__",
        "torch.nn.init.kaiming_normal_",
        "torch.nn.modules.module.Module.modules"
    ],
    "torchvision.utils._log_api_usage_once": [
        "<builtin>.isinstance"
    ],
    "torch.nn.modules.conv.Conv2d.__init__": [
        "torch.nn.modules.utils._ntuple.parse",
        "<builtin>.super",
        "<builtin>.isinstance"
    ],
    "torch.nn.modules.utils._ntuple.parse": [
        "<builtin>.tuple",
        "itertools.repeat",
        "<builtin>.isinstance"
    ],
    "itertools.repeat": [],
    "torch.nn.modules.activation.ReLU.__init__": [
        "<builtin>.super"
    ],
    "torchvision.models.resnet.ResNet._make_layer": [
        "append",
        "torchvision.models.resnet.conv1x1",
        "<builtin>.range",
        "torch.nn.modules.container.Sequential.__init__"
    ],
    "torchvision.models.resnet.conv1x1": [
        "torch.nn.modules.conv.Conv2d.__init__"
    ],
    "torch.nn.modules.container.Sequential.__init__": [],
    "torch.nn.modules.linear.Linear.__init__": [
        "torch.nn.modules.linear.Linear.reset_parameters",
        "torch.nn.modules.module.Module.register_parameter",
        "<builtin>.super"
    ],
    "torch.nn.modules.module.Module.register_parameter": [
        "<builtin>.hasattr",
        "<builtin>.ValueError",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.KeyError",
        "<builtin>.AttributeError",
        "torch.typename"
    ],
    "<builtin>.KeyError": [],
    "torch.typename": [
        "<builtin>.hasattr",
        "<builtin>.isinstance"
    ],
    "<builtin>.AttributeError": [],
    "torch.nn.modules.linear.Linear.reset_parameters": [],
    "torch.nn.modules.module.Module.modules": [
        "torch.nn.modules.module.Module.named_modules"
    ],
    "torch.nn.modules.module.Module.named_modules": [
        "<builtin>.set"
    ],
    "torch.nn.init.constant_": [
        "torch.nn.init._no_grad_fill_",
        "torch.overrides.handle_torch_function"
    ],
    "torch.overrides.handle_torch_function": [
        "torch.overrides._pop_mode_temporarily",
        "<builtin>.tuple",
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.map",
        "torch._C._is_torch_function_mode_enabled",
        "<builtin>.TypeError",
        "torch.overrides._get_current_function_mode",
        "torch.overrides._get_overloaded_args"
    ],
    "torch.overrides._get_overloaded_args": [
        "<builtin>.hasattr",
        "<builtin>.type",
        "<builtin>.enumerate",
        "<builtin>.len",
        "<builtin>.set",
        "<builtin>.issubclass"
    ],
    "torch._C._is_torch_function_mode_enabled": [],
    "torch.overrides._pop_mode_temporarily": [
        "torch.overrides._pop_mode"
    ],
    "torch.overrides._pop_mode": [
        "torch._C._pop_torch_function_stack"
    ],
    "torch._C._pop_torch_function_stack": [],
    "torch.overrides._get_current_function_mode": [
        "torch._C._len_torch_function_stack",
        "torch._C._get_function_stack_at"
    ],
    "torch._C._len_torch_function_stack": [],
    "torch._C._get_function_stack_at": [],
    "torch.nn.init._no_grad_fill_": [
        "torch.autograd.grad_mode.no_grad.__init__"
    ],
    "torch.nn.init.kaiming_normal_": [
        "torch.autograd.grad_mode.no_grad.__init__",
        "torch.nn.init._calculate_correct_fan",
        "torch.nn.init.calculate_gain"
    ],
    "torch.nn.init._calculate_correct_fan": [
        "<builtin>.ValueError",
        "torch.nn.init._calculate_fan_in_and_fan_out"
    ],
    "torch.nn.init._calculate_fan_in_and_fan_out": [
        "<builtin>.ValueError"
    ],
    "torch.nn.init.calculate_gain": [
        "<builtin>.ValueError",
        "<builtin>.isinstance"
    ],
    "torchvision.models._api.WeightsEnum.get_state_dict": [
        "torch.hub.load_state_dict_from_url"
    ],
    "torch.hub.load_state_dict_from_url": [
        "torch.hub._legacy_zip_load",
        "torch.serialization.load",
        "urllib.parse.urlparse",
        "torch.hub.download_url_to_file",
        "torch.hub._is_legacy_zip_format",
        "torch.hub.get_dir"
    ],
    "torch.hub.get_dir": [
        "torch.hub._get_torch_home"
    ],
    "urllib.parse.urlparse": [],
    "torch.hub.download_url_to_file": [
        "<builtin>.RuntimeError",
        "urllib.request.Request",
        "<builtin>.hasattr",
        "urllib.request.urlopen",
        "<builtin>.len",
        "torch.hub._Faketqdm.__init__",
        "<builtin>.int",
        "tqdm.tqdm"
    ],
    "urllib.request.Request": [],
    "urllib.request.urlopen": [],
    "torch.hub._Faketqdm.__init__": [],
    "tqdm.tqdm": [],
    "torch.hub._is_legacy_zip_format": [
        "<builtin>.len"
    ],
    "torch.hub._legacy_zip_load": [
        "<builtin>.RuntimeError",
        "<builtin>.len",
        "torch.serialization.load"
    ],
    "torch.serialization.load": [
        "<builtin>.RuntimeError",
        "torch.serialization._is_zipfile",
        "torch.jit._serialization.load",
        "torch.serialization._open_zipfile_reader.__init__",
        "torch.serialization._legacy_load",
        "<builtin>.str",
        "torch.serialization._check_dill_version",
        "torch.serialization._opener.__exit__",
        "torch.serialization._is_torchscript_zip",
        "torch.serialization._open_file_like",
        "torch.serialization._opener.__enter__",
        "torch.serialization._load"
    ],
    "torch.serialization._check_dill_version": [
        "<builtin>.ValueError",
        "<builtin>.str",
        "torch.serialization.check_module_version_greater_or_equal"
    ],
    "torch.serialization.check_module_version_greater_or_equal": [
        "<builtin>.RuntimeError",
        "<builtin>.tuple",
        "<builtin>.type",
        "<builtin>.enumerate",
        "<builtin>.str"
    ],
    "torch.serialization._open_file_like": [
        "<builtin>.RuntimeError",
        "torch.serialization._open_file.__init__",
        "torch.serialization._open_buffer_reader.__init__",
        "torch.serialization._is_path"
    ],
    "torch.serialization._is_path": [
        "<builtin>.isinstance"
    ],
    "torch.serialization._open_buffer_reader.__init__": [
        "torch.serialization._check_seekable",
        "<builtin>.super"
    ],
    "torch.serialization._check_seekable": [
        "torch.serialization._check_seekable.raise_err_msg"
    ],
    "torch.serialization._check_seekable.raise_err_msg": [
        "<builtin>.str",
        "<builtin>.type"
    ],
    "torch.serialization._open_file.__init__": [
        "<builtin>.open",
        "<builtin>.super"
    ],
    "<builtin>.open": [],
    "torch.serialization._is_zipfile": [
        "append",
        "<builtin>.len"
    ],
    "torch.serialization._open_zipfile_reader.__init__": [
        "<builtin>.super"
    ],
    "torch.serialization._opener.__enter__": [],
    "torch.serialization._opener.__exit__": [],
    "torch.serialization._is_torchscript_zip": [],
    "torch.jit._serialization.load": [
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "torch.jit._serialization.validate_map_location",
        "<builtin>.str",
        "torch.jit._recursive.wrap_cpp_module"
    ],
    "torch.jit._serialization.validate_map_location": [
        "<builtin>.type",
        "<builtin>.ValueError",
        "<builtin>.isinstance",
        "<builtin>.str",
        "torch.serialization.validate_cuda_device"
    ],
    "torch.serialization.validate_cuda_device": [
        "<builtin>.RuntimeError",
        "torch.cuda.is_available",
        "torch.cuda.device_count",
        "torch.cuda._utils._get_device_index"
    ],
    "torch.cuda._utils._get_device_index": [
        "<builtin>.ValueError",
        "torch._utils._get_device_index",
        "torch._jit_internal.is_scripting",
        "<builtin>.isinstance"
    ],
    "torch._utils._get_device_index": [
        "<builtin>.ValueError",
        "torch._jit_internal.is_scripting",
        "torch._utils._get_current_device_index",
        "<builtin>.isinstance",
        "torch._utils.get_current_device_index"
    ],
    "torch._utils._get_current_device_index": [
        "torch._utils._get_device_attr"
    ],
    "torch._utils._get_device_attr": [
        "torch._utils._get_current_device_index.<lambda1>",
        "torch._utils._get_available_device_type"
    ],
    "torch._utils._get_available_device_type": [
        "torch.cuda.is_available",
        "<builtin>.hasattr"
    ],
    "torch.cuda.is_available": [
        "torch.cuda._nvml_based_avail",
        "torch.cuda._is_compiled",
        "torch.cuda.device_count"
    ],
    "torch.cuda._is_compiled": [
        "<builtin>.hasattr"
    ],
    "torch.cuda._nvml_based_avail": [],
    "torch.cuda.device_count": [
        "torch.cuda._is_compiled",
        "torch.cuda._device_count_nvml"
    ],
    "torch.cuda._device_count_nvml": [
        "torch.cuda._parse_visible_devices",
        "torch.cuda._raw_device_count_nvml",
        "typing.cast",
        "<builtin>.type",
        "torch.cuda._raw_device_uuid_nvml",
        "torch.cuda._transform_uuid_to_ordinals",
        "<builtin>.enumerate",
        "<builtin>.len"
    ],
    "torch.cuda._parse_visible_devices": [
        "torch.cuda._parse_visible_devices._strtoul",
        "typing.cast",
        "<builtin>.list",
        "<builtin>.range",
        "torch.cuda._parse_visible_devices.parse_list_with_prefix"
    ],
    "torch.cuda._parse_visible_devices.parse_list_with_prefix": [
        "typing.cast"
    ],
    "typing.cast": [],
    "torch.cuda._parse_visible_devices._strtoul": [
        "<builtin>.enumerate",
        "<builtin>.int",
        "<builtin>.len"
    ],
    "torch.cuda._raw_device_count_nvml": [
        "ctypes.c_int",
        "ctypes.byref",
        "ctypes.CDLL"
    ],
    "ctypes.CDLL": [],
    "ctypes.c_int": [],
    "ctypes.byref": [],
    "torch.cuda._raw_device_uuid_nvml": [
        "ctypes.c_void_p",
        "ctypes.byref",
        "ctypes.CDLL",
        "ctypes.create_string_buffer",
        "ctypes.c_int",
        "<builtin>.range"
    ],
    "ctypes.c_void_p": [],
    "ctypes.create_string_buffer": [],
    "torch.cuda._transform_uuid_to_ordinals": [
        "typing.cast",
        "torch.cuda._transform_uuid_to_ordinals.uuid_to_orinal"
    ],
    "torch.cuda._transform_uuid_to_ordinals.uuid_to_orinal": [
        "<builtin>.enumerate"
    ],
    "torch._utils._get_current_device_index.<lambda1>": [
        "torch.cuda.current_device"
    ],
    "torch.cuda.current_device": [
        "torch.cuda._lazy_init"
    ],
    "torch.cuda._lazy_init": [
        "torch.cuda.is_initialized",
        "<builtin>.hasattr"
    ],
    "torch._utils.get_current_device_index": [
        "torch.cuda.device_count",
        "torch.cuda.current_device"
    ],
    "torch.jit._recursive.wrap_cpp_module": [
        "torch.jit._script.RecursiveScriptModule._construct"
    ],
    "torch.jit._script.RecursiveScriptModule._construct": [],
    "torch.serialization._load": [
        "torch._utils._validate_loaded_sparse_tensors",
        "torch.serialization._load.UnpicklerWrapper",
        "torch._weights_only_unpickler.Unpickler.load",
        "torch.serialization._get_restore_location"
    ],
    "torch.serialization._get_restore_location": [
        "<builtin>.isinstance"
    ],
    "torch.serialization._load.UnpicklerWrapper": [],
    "torch._weights_only_unpickler.Unpickler.load": [
        "<builtin>.RuntimeError",
        "pop",
        "torch._weights_only_unpickler.Unpickler.persistent_load",
        "<builtin>.tuple",
        "",
        "<builtin>.type",
        "torch._weights_only_unpickler.Unpickler.pop_mark",
        "pickle.decode_long",
        "<builtin>.ValueError",
        "torch.serialization._maybe_decode_ascii",
        "<builtin>.isinstance",
        "<builtin>.str",
        "<builtin>.len",
        "<builtin>.set",
        "struct.unpack",
        "torch._weights_only_unpickler._get_allowed_globals",
        "<builtin>.range"
    ],
    "pickle.decode_long": [],
    "struct.unpack": [],
    "torch.serialization._maybe_decode_ascii": [
        "<builtin>.isinstance"
    ],
    "torch._weights_only_unpickler.Unpickler.persistent_load": [
        "pickle.UnpicklingError"
    ],
    "pickle.UnpicklingError": [],
    "torch._weights_only_unpickler.Unpickler.pop_mark": [],
    "torch._weights_only_unpickler._get_allowed_globals": [
        "<builtin>.str"
    ],
    "torch._utils._validate_loaded_sparse_tensors": [
        "<builtin>.NotImplementedError"
    ],
    "torch.serialization._legacy_load": [
        "<builtin>.RuntimeError",
        "torch.serialization._is_zipfile",
        "<builtin>.hasattr",
        "<builtin>.type",
        "torch.serialization._legacy_load.legacy_load",
        "torch.serialization._check_seekable",
        "torch.serialization._should_read_directly",
        "torch._utils._element_size",
        "torch._weights_only_unpickler.load",
        "torch.serialization._legacy_load.UnpicklerWrapper",
        "torch._utils._validate_loaded_sparse_tensors",
        "torch._weights_only_unpickler.Unpickler.load",
        "torch.serialization._get_restore_location"
    ],
    "torch.serialization._legacy_load.UnpicklerWrapper": [],
    "torch.serialization._should_read_directly": [
        "torch.serialization._is_compressed_file"
    ],
    "torch.serialization._is_compressed_file": [],
    "torch.serialization._legacy_load.legacy_load": [
        "contextlib.closing",
        "torch.storage.TypedStorage.__init__",
        "typing.cast",
        "torch._utils._element_size",
        "torch._weights_only_unpickler.load",
        "<builtin>.open",
        "torch.serialization.mkdtemp",
        "<builtin>.range",
        "torch.serialization._get_restore_location.restore_location",
        "torch._weights_only_unpickler.Unpickler.load"
    ],
    "contextlib.closing": [],
    "torch.serialization.mkdtemp": [],
    "torch._weights_only_unpickler.load": [
        "torch._weights_only_unpickler.Unpickler.__init__",
        "torch._weights_only_unpickler.Unpickler.load"
    ],
    "torch._weights_only_unpickler.Unpickler.__init__": [],
    "torch._utils._element_size": [
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "<builtin>.isinstance"
    ],
    "torch.serialization._get_restore_location.restore_location": [
        "torch.serialization.default_restore_location"
    ],
    "torch.serialization.default_restore_location": [
        "<builtin>.RuntimeError",
        "torch.typename"
    ],
    "torch.storage.TypedStorage.__init__": [
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "torch.storage._warn_typed_storage_removal",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "torch.storage.TypedStorage._element_size",
        "<builtin>.len",
        "torch.storage._isint",
        "torch.storage._get_storage_from_sequence",
        "<builtin>.int"
    ],
    "torch.storage._warn_typed_storage_removal": [
        "torch.storage._get_always_warn_typed_storage_removal",
        "torch.storage._warn_typed_storage_removal.is_first_time"
    ],
    "torch.storage._get_always_warn_typed_storage_removal": [],
    "torch.storage._warn_typed_storage_removal.is_first_time": [
        "<builtin>.hasattr"
    ],
    "torch.storage._isint": [
        "<builtin>.isinstance"
    ],
    "torch.storage._get_storage_from_sequence": [],
    "torch.storage.TypedStorage._element_size": [
        "torch._utils._element_size"
    ],
    "torch.nn.modules.module.Module.load_state_dict": [
        "<builtin>.RuntimeError",
        "<builtin>.type",
        "collections.OrderedDict",
        "<builtin>.getattr",
        "<builtin>.TypeError",
        "<builtin>.isinstance",
        "<builtin>.len",
        "torch.nn.modules.module.Module.load_state_dict.load"
    ],
    "torch.nn.modules.module.Module.load_state_dict.load": [
        "torch.nn.modules.module.Module._load_from_state_dict",
        "torch.nn.modules.module.Module.load_state_dict.load"
    ],
    "torch.nn.modules.module.Module._load_from_state_dict": [
        "torch.autograd.grad_mode.no_grad.__init__",
        "torch.nn.parameter.is_lazy",
        "<builtin>.type",
        "torch.nn.modules.module.Module.set_extra_state",
        "<builtin>.getattr",
        "<builtin>.len",
        "torch.overrides.is_tensor_like"
    ],
    "torch.overrides.is_tensor_like": [
        "<builtin>.hasattr",
        "<builtin>.type"
    ],
    "torch.nn.parameter.is_lazy": [
        "<builtin>.isinstance"
    ],
    "torch.nn.modules.module.Module.set_extra_state": [
        "<builtin>.RuntimeError"
    ],
    "torch.nn.modules.module.Module.eval": [
        "torch.nn.modules.module.Module.train"
    ],
    "torch.nn.modules.module.Module.train": [
        "<builtin>.ValueError",
        "torch.nn.modules.module.Module.children",
        "<builtin>.isinstance"
    ],
    "torch.nn.modules.module.Module.children": [
        "torch.nn.modules.module.Module.named_children"
    ],
    "torch.nn.modules.module.Module.named_children": [
        "<builtin>.set"
    ],
    "handler.handle": [
        "<builtin>.str",
        "torch.autograd.grad_mode.no_grad.__init__"
    ]
}